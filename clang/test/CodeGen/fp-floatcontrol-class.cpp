// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --check-attributes --include-generated-funcs --version 4
// RUN: %clang_cc1 -ffp-contract=on -triple x86_64-linux-gnu -emit-llvm -o - %s | FileCheck %s
// Verify that float_control does not pertain to initializer expressions
// Verify that the strictfp attribute is used when strictfp is enabled.

float y();
float z();
#pragma float_control(except, on)
class ON {
  float w = 2 + y() * z();
};
ON on;
#pragma float_control(except, off)
class OFF {
  float w = 2 + y() * z();
};
OFF off;
// CHECK: Function Attrs: noinline nounwind
// CHECK-LABEL: define internal void @__cxx_global_var_init(
// CHECK-SAME: ) #[[ATTR0:[0-9]+]] section ".text.startup" {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @_ZN2ONC1Ev(%class.ON* noundef nonnull align 4 dereferenceable(4) @on)
// CHECK-NEXT:    ret void
//
//
// CHECK: Function Attrs: noinline nounwind optnone strictfp
// CHECK-LABEL: define linkonce_odr void @_ZN2ONC1Ev(
// CHECK-SAME: %class.ON* noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca %class.ON*, align 8
// CHECK-NEXT:    store %class.ON* [[THIS]], %class.ON** [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load %class.ON*, %class.ON** [[THIS_ADDR]], align 8
// CHECK-NEXT:    call void @_ZN2ONC2Ev(%class.ON* noundef nonnull align 4 dereferenceable(4) [[THIS1]])
// CHECK-NEXT:    ret void
//
//
// CHECK: Function Attrs: noinline nounwind
// CHECK-LABEL: define internal void @__cxx_global_var_init.1(
// CHECK-SAME: ) #[[ATTR0]] section ".text.startup" {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @_ZN3OFFC1Ev(%class.OFF* noundef nonnull align 4 dereferenceable(4) @off)
// CHECK-NEXT:    ret void
//
//
// CHECK: Function Attrs: noinline nounwind optnone
// CHECK-LABEL: define linkonce_odr void @_ZN3OFFC1Ev(
// CHECK-SAME: %class.OFF* noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2:[0-9]+]] comdat align 2 {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca %class.OFF*, align 8
// CHECK-NEXT:    store %class.OFF* [[THIS]], %class.OFF** [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load %class.OFF*, %class.OFF** [[THIS_ADDR]], align 8
// CHECK-NEXT:    call void @_ZN3OFFC2Ev(%class.OFF* noundef nonnull align 4 dereferenceable(4) [[THIS1]])
// CHECK-NEXT:    ret void
//
//
// CHECK: Function Attrs: noinline nounwind optnone strictfp
// CHECK-LABEL: define linkonce_odr void @_ZN2ONC2Ev(
// CHECK-SAME: %class.ON* noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca %class.ON*, align 8
// CHECK-NEXT:    store %class.ON* [[THIS]], %class.ON** [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load %class.ON*, %class.ON** [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[W:%.*]] = getelementptr inbounds [[CLASS_ON:%.*]], %class.ON* [[THIS1]], i32 0, i32 0
// CHECK-NEXT:    [[CONV:%.*]] = call float @llvm.experimental.constrained.sitofp.f32.i32(i32 2, metadata !"round.tonearest", metadata !"fpexcept.strict") #[[ATTR6:[0-9]+]]
// CHECK-NEXT:    [[CALL:%.*]] = call noundef float @_Z1yv()
// CHECK-NEXT:    [[CALL2:%.*]] = call noundef float @_Z1zv()
// CHECK-NEXT:    [[TMP0:%.*]] = call float @llvm.experimental.constrained.fmuladd.f32(float [[CALL]], float [[CALL2]], float [[CONV]], metadata !"round.tonearest", metadata !"fpexcept.strict") #[[ATTR6]]
// CHECK-NEXT:    store float [[TMP0]], float* [[W]], align 4
// CHECK-NEXT:    ret void
//
//
// CHECK: Function Attrs: noinline nounwind optnone
// CHECK-LABEL: define linkonce_odr void @_ZN3OFFC2Ev(
// CHECK-SAME: %class.OFF* noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca %class.OFF*, align 8
// CHECK-NEXT:    store %class.OFF* [[THIS]], %class.OFF** [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load %class.OFF*, %class.OFF** [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[W:%.*]] = getelementptr inbounds [[CLASS_OFF:%.*]], %class.OFF* [[THIS1]], i32 0, i32 0
// CHECK-NEXT:    [[CALL:%.*]] = call noundef float @_Z1yv()
// CHECK-NEXT:    [[CALL2:%.*]] = call noundef float @_Z1zv()
// CHECK-NEXT:    [[TMP0:%.*]] = call float @llvm.fmuladd.f32(float [[CALL]], float [[CALL2]], float 2.000000e+00)
// CHECK-NEXT:    store float [[TMP0]], float* [[W]], align 4
// CHECK-NEXT:    ret void
//
//
// CHECK: Function Attrs: noinline nounwind
// CHECK-LABEL: define internal void @_GLOBAL__sub_I_fp_floatcontrol_class.cpp(
// CHECK-SAME: ) #[[ATTR0]] section ".text.startup" {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @__cxx_global_var_init()
// CHECK-NEXT:    call void @__cxx_global_var_init.1()
// CHECK-NEXT:    ret void
//
