3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000    1) //===- AArch64FrameLowering.cpp - AArch64 Frame Lowering -------*- C++ -*-====//
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000    2) //
2946cd7010674 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chandler Carruth        2019-01-19 08:50:56 +0000    3) // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
2946cd7010674 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chandler Carruth        2019-01-19 08:50:56 +0000    4) // See https://llvm.org/LICENSE.txt for license information.
2946cd7010674 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chandler Carruth        2019-01-19 08:50:56 +0000    5) // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000    6) //
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000    7) //===----------------------------------------------------------------------===//
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000    8) //
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000    9) // This file contains the AArch64 implementation of TargetFrameLowering class.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000   10) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   11) // On AArch64, stack frames are structured as follows:
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   12) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   13) // The stack grows downward.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   14) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   15) // All of the individual frame areas on the frame below are optional, i.e. it's
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   16) // possible to create a function so that the particular area isn't present
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   17) // in the frame.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   18) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   19) // At function entry, the "frame" looks as follows:
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   20) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   21) // |                                   | Higher address
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   22) // |-----------------------------------|
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   23) // |                                   |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   24) // | arguments passed on the stack     |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   25) // |                                   |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   26) // |-----------------------------------| <- sp
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   27) // |                                   | Lower address
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   28) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   29) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   30) // After the prologue has run, the frame has the following general structure.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   31) // Note that this doesn't depict the case where a red-zone is used. Also,
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   32) // technically the last frame area (VLAs) doesn't get created until in the
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   33) // main function body, after the prologue is run. However, it's depicted here
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   34) // for completeness.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   35) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   36) // |                                   | Higher address
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   37) // |-----------------------------------|
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   38) // |                                   |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   39) // | arguments passed on the stack     |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   40) // |                                   |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   41) // |-----------------------------------|
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   42) // |                                   |
68266faa31acd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-07-13 17:03:12 +0000   43) // | (Win64 only) varargs from reg     |
68266faa31acd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-07-13 17:03:12 +0000   44) // |                                   |
68266faa31acd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-07-13 17:03:12 +0000   45) // |-----------------------------------|
68266faa31acd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-07-13 17:03:12 +0000   46) // |                                   |
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   47) // | callee-saved gpr registers        | <--.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   48) // |                                   |    | On Darwin platforms these
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   49) // |- - - - - - - - - - - - - - - - - -|    | callee saves are swapped,
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000   50) // | prev_lr                           |    | (frame record first)
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000   51) // | prev_fp                           | <--'
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000   52) // | async context if needed           |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   53) // | (a.k.a. "frame record")           |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   54) // |-----------------------------------| <- fp(=x29)
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   55) // |                                   |
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   56) // | callee-saved fp/simd/SVE regs     |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   57) // |                                   |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   58) // |-----------------------------------|
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000   59) // |                                   |
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000   60) // |        SVE stack objects          |
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000   61) // |                                   |
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000   62) // |-----------------------------------|
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   63) // |.empty.space.to.make.part.below....|
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   64) // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   65) // |.the.standard.16-byte.alignment....|  compile time; if present)
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   66) // |-----------------------------------|
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   67) // |                                   |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   68) // | local variables of fixed size     |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   69) // | including spill slots             |
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   70) // |-----------------------------------| <- bp(not defined by ABI,
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   71) // |.variable-sized.local.variables....|       LLVM chooses X19)
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   72) // |.(VLAs)............................| (size of this area is unknown at
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   73) // |...................................|  compile time)
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   74) // |-----------------------------------| <- sp
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   75) // |                                   | Lower address
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   76) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   77) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   78) // To access the data in a frame, at-compile time, a constant offset must be
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   79) // computable from one of the pointers (fp, bp, sp) to access it. The size
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   80) // of the areas with a dotted background cannot be computed at compile-time
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   81) // if they are present, making it required to have all three of fp, bp and
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   82) // sp to be set up to be able to access all contents in the frame areas,
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   83) // assuming all of the frame areas are non-empty.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   84) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   85) // For most functions, some of the frame areas are empty. For those functions,
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   86) // it may not be necessary to set up fp or bp:
df005cbe19816 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2015-08-08 18:27:36 +0000   87) // * A base pointer is definitely needed when there are both VLAs and local
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   88) //   variables with more-than-default alignment requirements.
df005cbe19816 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2015-08-08 18:27:36 +0000   89) // * A frame pointer is definitely needed when there are local variables with
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   90) //   more-than-default alignment requirements.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000   91) //
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   92) // For Darwin platforms the frame-record (fp, lr) is stored at the top of the
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   93) // callee-saved area, since the unwind encoding does not allow for encoding
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   94) // this dynamically and existing tools depend on this layout. For other
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   95) // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   96) // area to allow SVE stack objects (allocated directly below the callee-saves,
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   97) // if available) to be accessed directly from the framepointer.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   98) // The SVE spill/fill instructions have VL-scaled addressing modes such
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000   99) // as:
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000  100) //    ldr z8, [fp, #-7 mul vl]
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000  101) // For SVE the size of the vector length (VL) is not known at compile-time, so
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000  102) // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000  103) // layout, we don't need to add an unscaled offset to the framepointer before
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000  104) // accessing the SVE object in the frame.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000  105) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000  106) // In some cases when a base pointer is not strictly needed, it is generated
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000  107) // anyway when offsets from the frame pointer to access local variables become
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000  108) // so large that the offset can't be encoded in the immediate fields of loads
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000  109) // or stores.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000  110) //
8d632ca436551 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2021-03-09 14:41:31 +0000  111) // Outgoing function arguments must be at the bottom of the stack frame when
8d632ca436551 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2021-03-09 14:41:31 +0000  112) // calling another function. If we do not have variable-sized stack objects, we
8d632ca436551 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2021-03-09 14:41:31 +0000  113) // can allocate a "reserved call frame" area at the bottom of the local
8d632ca436551 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2021-03-09 14:41:31 +0000  114) // variable area, large enough for all outgoing calls. If we do have VLAs, then
8d632ca436551 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2021-03-09 14:41:31 +0000  115) // the stack pointer must be decremented and incremented around each call to
8d632ca436551 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2021-03-09 14:41:31 +0000  116) // make space for the arguments below the VLAs.
8d632ca436551 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2021-03-09 14:41:31 +0000  117) //
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000  118) // FIXME: also explain the redzone concept.
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000  119) //
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  120) // An example of the prologue:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  121) //
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  122) //     .globl __foo
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  123) //     .align 2
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  124) //  __foo:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  125) // Ltmp0:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  126) //     .cfi_startproc
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  127) //     .cfi_personality 155, ___gxx_personality_v0
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  128) // Leh_func_begin:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  129) //     .cfi_lsda 16, Lexception33
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  130) //
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  131) //     stp  xa,bx, [sp, -#offset]!
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  132) //     ...
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  133) //     stp  x28, x27, [sp, #offset-32]
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  134) //     stp  fp, lr, [sp, #offset-16]
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  135) //     add  fp, sp, #offset - 16
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  136) //     sub  sp, sp, #1360
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  137) //
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  138) // The Stack:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  139) //       +-------------------------------------------+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  140) // 10000 | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  141) // 10004 | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  142) //       +-------------------------------------------+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  143) // 10008 | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  144) // 1000c | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  145) //       +===========================================+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  146) // 10010 |                X28 Register               |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  147) // 10014 |                X28 Register               |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  148) //       +-------------------------------------------+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  149) // 10018 |                X27 Register               |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  150) // 1001c |                X27 Register               |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  151) //       +===========================================+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  152) // 10020 |                Frame Pointer              |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  153) // 10024 |                Frame Pointer              |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  154) //       +-------------------------------------------+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  155) // 10028 |                Link Register              |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  156) // 1002c |                Link Register              |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  157) //       +===========================================+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  158) // 10030 | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  159) // 10034 | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  160) //       +-------------------------------------------+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  161) // 10038 | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  162) // 1003c | ........ | ........ | ........ | ........ |
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  163) //       +-------------------------------------------+
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  164) //
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  165) //     [sp] = 10030        ::    >>initial value<<
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  166) //     sp = 10020          ::  stp fp, lr, [sp, #-16]!
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  167) //     fp = sp == 10020    ::  mov fp, sp
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  168) //     [sp] == 10020       ::  stp x28, x27, [sp, #-16]!
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  169) //     sp == 10010         ::    >>final value<<
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  170) //
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  171) // The frame pointer (w29) points to address 10020. If we use an offset of
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  172) // '16' from 'w29', we get the CFI offsets of -8 for w30, -16 for w29, -24
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  173) // for w27, and -32 for w28:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  174) //
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  175) //  Ltmp1:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  176) //     .cfi_def_cfa w29, 16
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  177) //  Ltmp2:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  178) //     .cfi_offset w30, -8
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  179) //  Ltmp3:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  180) //     .cfi_offset w29, -16
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  181) //  Ltmp4:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  182) //     .cfi_offset w27, -24
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  183) //  Ltmp5:
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  184) //     .cfi_offset w28, -32
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  185) //
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  186) //===----------------------------------------------------------------------===//
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  187) 
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  188) #include "AArch64FrameLowering.h"
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  189) #include "AArch64InstrInfo.h"
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  190) #include "AArch64MachineFunctionInfo.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  191) #include "AArch64RegisterInfo.h"
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  192) #include "AArch64Subtarget.h"
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  193) #include "AArch64TargetMachine.h"
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  194) #include "MCTargetDesc/AArch64AddressingModes.h"
0593ce5f0bbb7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2022-06-02 18:05:02 -0700  195) #include "MCTargetDesc/AArch64MCTargetDesc.h"
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000  196) #include "llvm/ADT/ScopeExit.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  197) #include "llvm/ADT/SmallVector.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  198) #include "llvm/ADT/Statistic.h"
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  199) #include "llvm/CodeGen/LivePhysRegs.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  200) #include "llvm/CodeGen/MachineBasicBlock.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  201) #include "llvm/CodeGen/MachineFrameInfo.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  202) #include "llvm/CodeGen/MachineFunction.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  203) #include "llvm/CodeGen/MachineInstr.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  204) #include "llvm/CodeGen/MachineInstrBuilder.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  205) #include "llvm/CodeGen/MachineMemOperand.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  206) #include "llvm/CodeGen/MachineModuleInfo.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  207) #include "llvm/CodeGen/MachineOperand.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  208) #include "llvm/CodeGen/MachineRegisterInfo.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  209) #include "llvm/CodeGen/RegisterScavenging.h"
3f833edc7c518 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (David Blaikie           2017-11-08 01:01:31 +0000  210) #include "llvm/CodeGen/TargetInstrInfo.h"
b3bde2ea50dec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (David Blaikie           2017-11-17 01:07:10 +0000  211) #include "llvm/CodeGen/TargetRegisterInfo.h"
b3bde2ea50dec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (David Blaikie           2017-11-17 01:07:10 +0000  212) #include "llvm/CodeGen/TargetSubtargetInfo.h"
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  213) #include "llvm/CodeGen/WinEHFuncInfo.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  214) #include "llvm/IR/Attributes.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  215) #include "llvm/IR/CallingConv.h"
1f8930e3d35ba llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2014-07-25 11:42:14 +0000  216) #include "llvm/IR/DataLayout.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  217) #include "llvm/IR/DebugLoc.h"
1f8930e3d35ba llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2014-07-25 11:42:14 +0000  218) #include "llvm/IR/Function.h"
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  219) #include "llvm/MC/MCAsmInfo.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  220) #include "llvm/MC/MCDwarf.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  221) #include "llvm/Support/CommandLine.h"
1f8930e3d35ba llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2014-07-25 11:42:14 +0000  222) #include "llvm/Support/Debug.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  223) #include "llvm/Support/ErrorHandling.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  224) #include "llvm/Support/MathExtras.h"
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  225) #include "llvm/Support/raw_ostream.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  226) #include "llvm/Target/TargetMachine.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  227) #include "llvm/Target/TargetOptions.h"
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  228) #include <cassert>
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  229) #include <cstdint>
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  230) #include <iterator>
4f7e5930abf3f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kazu Hirata             2022-11-25 21:57:21 -0800  231) #include <optional>
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000  232) #include <vector>
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  233) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  234) using namespace llvm;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  235) 
84e68b2994470 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Chandler Carruth        2014-04-22 02:41:26 +0000  236) #define DEBUG_TYPE "frame-info"
84e68b2994470 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Chandler Carruth        2014-04-22 02:41:26 +0000  237) 
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  238) static cl::opt<bool> EnableRedZone("aarch64-redzone",
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  239)                                    cl::desc("enable use of redzone on AArch64"),
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  240)                                    cl::init(false), cl::Hidden);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  241) 
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000  242) static cl::opt<bool>
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000  243)     ReverseCSRRestoreSeq("reverse-csr-restore-seq",
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000  244)                          cl::desc("reverse the CSR restore sequence"),
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000  245)                          cl::init(false), cl::Hidden);
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000  246) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  247) static cl::opt<bool> StackTaggingMergeSetTag(
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  248)     "stack-tagging-merge-settag",
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  249)     cl::desc("merge settag instruction in function epilog"), cl::init(true),
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  250)     cl::Hidden);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  251) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700  252) static cl::opt<bool> OrderFrameObjects("aarch64-order-frame-objects",
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700  253)                                        cl::desc("sort stack allocations"),
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700  254)                                        cl::init(true), cl::Hidden);
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700  255) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  256) cl::opt<bool> EnableHomogeneousPrologEpilog(
557efc9a8b686 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-06-03 21:59:05 -0700  257)     "homogeneous-prolog-epilog", cl::Hidden,
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  258)     cl::desc("Emit homogeneous prologue and epilogue for the size "
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  259)              "optimization (default = off)"));
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  260) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  261) STATISTIC(NumRedZoneFunctions, "Number of functions using red zone");
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  262) 
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  263) /// Returns how much of the incoming argument stack area (in bytes) we should
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  264) /// clean up in an epilogue. For the C calling convention this will be 0, for
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  265) /// guaranteed tail call conventions it can be positive (a normal return or a
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  266) /// tail call to a function that uses less stack space for arguments) or
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  267) /// negative (for a tail call to a function that needs more stack space than us
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  268) /// for arguments).
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  269) static int64_t getArgumentStackToRestore(MachineFunction &MF,
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  270)                                          MachineBasicBlock &MBB) {
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  271)   MachineBasicBlock::iterator MBBI = MBB.getLastNonDebugInstr();
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  272)   bool IsTailCallReturn = false;
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  273)   if (MBB.end() != MBBI) {
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  274)     unsigned RetOpcode = MBBI->getOpcode();
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  275)     IsTailCallReturn = RetOpcode == AArch64::TCRETURNdi ||
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  276)                        RetOpcode == AArch64::TCRETURNri ||
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  277)                        RetOpcode == AArch64::TCRETURNriBTI;
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  278)   }
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  279)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  280) 
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  281)   int64_t ArgumentPopSize = 0;
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  282)   if (IsTailCallReturn) {
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  283)     MachineOperand &StackAdjust = MBBI->getOperand(1);
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  284) 
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  285)     // For a tail-call in a callee-pops-arguments environment, some or all of
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  286)     // the stack may actually be in use for the call's arguments, this is
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  287)     // calculated during LowerCall and consumed here...
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  288)     ArgumentPopSize = StackAdjust.getImm();
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  289)   } else {
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  290)     // ... otherwise the amount to pop is *all* of the argument space,
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  291)     // conveniently stored in the MachineFunctionInfo by
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  292)     // LowerFormalArguments. This will, of course, be zero for the C calling
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  293)     // convention.
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  294)     ArgumentPopSize = AFI->getArgumentStackToRestore();
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  295)   }
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  296) 
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  297)   return ArgumentPopSize;
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  298) }
7af27b65b3ce4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2020-07-09 11:42:50 -0700  299) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  300) static bool produceCompactUnwindFrame(MachineFunction &MF);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  301) static bool needsWinCFI(const MachineFunction &MF);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  302) static StackOffset getSVEStackSize(const MachineFunction &MF);
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  303) static bool needsShadowCallStackPrologueEpilogue(MachineFunction &MF);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  304) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  305) /// Returns true if a homogeneous prolog or epilog code can be emitted
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  306) /// for the size optimization. If possible, a frame helper call is injected.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  307) /// When Exit block is given, this check is for epilog.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  308) bool AArch64FrameLowering::homogeneousPrologEpilog(
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  309)     MachineFunction &MF, MachineBasicBlock *Exit) const {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  310)   if (!MF.getFunction().hasMinSize())
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  311)     return false;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  312)   if (!EnableHomogeneousPrologEpilog)
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  313)     return false;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  314)   if (ReverseCSRRestoreSeq)
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  315)     return false;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  316)   if (EnableRedZone)
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  317)     return false;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  318) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  319)   // TODO: Window is supported yet.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  320)   if (needsWinCFI(MF))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  321)     return false;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  322)   // TODO: SVE is not supported yet.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  323)   if (getSVEStackSize(MF))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  324)     return false;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  325) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  326)   // Bail on stack adjustment needed on return for simplicity.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  327)   const MachineFrameInfo &MFI = MF.getFrameInfo();
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  328)   const TargetRegisterInfo *RegInfo = MF.getSubtarget().getRegisterInfo();
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000  329)   if (MFI.hasVarSizedObjects() || RegInfo->hasStackRealignment(MF))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  330)     return false;
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  331)   if (Exit && getArgumentStackToRestore(MF, *Exit))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  332)     return false;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  333) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  334)   return true;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  335) }
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  336) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  337) /// Returns true if CSRs should be paired.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  338) bool AArch64FrameLowering::producePairRegisters(MachineFunction &MF) const {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  339)   return produceCompactUnwindFrame(MF) || homogeneousPrologEpilog(MF);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  340) }
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  341) 
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  342) /// This is the biggest offset to the stack pointer we can encode in aarch64
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  343) /// instructions (without using a separate calculation and a temp register).
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  344) /// Note that the exception here are vector stores/loads which cannot encode any
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  345) /// displacements (see estimateRSStackSizeLimit(), isAArch64FrameOffsetLegal()).
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  346) static const unsigned DefaultSafeSPDisplacement = 255;
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  347) 
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  348) /// Look at each instruction that references stack frames and return the stack
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  349) /// size limit beyond which some of these instructions will require a scratch
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  350) /// register during their expansion later.
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  351) static unsigned estimateRSStackSizeLimit(MachineFunction &MF) {
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  352)   // FIXME: For now, just conservatively guestimate based on unscaled indexing
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  353)   // range. We'll end up allocating an unnecessary spill slot a lot, but
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  354)   // realistically that's not a big deal at this stage of the game.
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  355)   for (MachineBasicBlock &MBB : MF) {
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  356)     for (MachineInstr &MI : MBB) {
801bf7ebbed34 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Shiva Chen              2018-05-09 02:42:00 +0000  357)       if (MI.isDebugInstr() || MI.isPseudo() ||
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  358)           MI.getOpcode() == AArch64::ADDXri ||
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  359)           MI.getOpcode() == AArch64::ADDSXri)
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  360)         continue;
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  361) 
d13d419d4a149 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Javed Absar             2017-10-30 22:00:06 +0000  362)       for (const MachineOperand &MO : MI.operands()) {
d13d419d4a149 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Javed Absar             2017-10-30 22:00:06 +0000  363)         if (!MO.isFI())
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  364)           continue;
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  365) 
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000  366)         StackOffset Offset;
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  367)         if (isAArch64FrameOffsetLegal(MI, Offset, nullptr, nullptr, nullptr) ==
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  368)             AArch64FrameOffsetCannotUpdate)
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  369)           return 0;
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  370)       }
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  371)     }
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  372)   }
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  373)   return DefaultSafeSPDisplacement;
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  374) }
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000  375) 
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000  376) TargetStackID::Value
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000  377) AArch64FrameLowering::getStackIDForScalableVectors() const {
914e2f5a02f4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2021-01-12 16:19:37 +0800  378)   return TargetStackID::ScalableVector;
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000  379) }
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000  380) 
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  381) /// Returns the size of the fixed object area (allocated next to sp on entry)
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  382) /// On Win64 this may include a var args area and an UnwindHelp object for EH.
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  383) static unsigned getFixedObjectSize(const MachineFunction &MF,
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  384)                                    const AArch64FunctionInfo *AFI, bool IsWin64,
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  385)                                    bool IsFunclet) {
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  386)   if (!IsWin64 || IsFunclet) {
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  387)     return AFI->getTailCallReservedStack();
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  388)   } else {
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  389)     if (AFI->getTailCallReservedStack() != 0)
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000  390)       report_fatal_error("cannot generate ABI-changing tail call for Win64");
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  391)     // Var args are stored here in the primary function.
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  392)     const unsigned VarArgsArea = AFI->getVarArgsGPRSize();
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  393)     // To support EH funclets we allocate an UnwindHelp object
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  394)     const unsigned UnwindHelpObject = (MF.hasEHFunclets() ? 8 : 0);
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  395)     return alignTo(VarArgsArea + UnwindHelpObject, 16);
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  396)   }
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  397) }
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700  398) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  399) /// Returns the size of the entire SVE stackframe (calleesaves + spills).
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  400) static StackOffset getSVEStackSize(const MachineFunction &MF) {
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  401)   const AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000  402)   return StackOffset::getScalable((int64_t)AFI->getStackSizeSVE());
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  403) }
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  404) 
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  405) bool AArch64FrameLowering::canUseRedZone(const MachineFunction &MF) const {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  406)   if (!EnableRedZone)
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  407)     return false;
0146d206317e1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Amara Emerson           2021-01-21 14:54:26 -0800  408) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  409)   // Don't use the red zone if the function explicitly asks us not to.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  410)   // This is typically used for kernel code.
0146d206317e1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Amara Emerson           2021-01-21 14:54:26 -0800  411)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
0146d206317e1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Amara Emerson           2021-01-21 14:54:26 -0800  412)   const unsigned RedZoneSize =
0146d206317e1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Amara Emerson           2021-01-21 14:54:26 -0800  413)       Subtarget.getTargetLowering()->getRedZoneSize(MF.getFunction());
0146d206317e1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Amara Emerson           2021-01-21 14:54:26 -0800  414)   if (!RedZoneSize)
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  415)     return false;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  416) 
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000  417)   const MachineFrameInfo &MFI = MF.getFrameInfo();
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  418)   const AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000  419)   uint64_t NumBytes = AFI->getLocalStackSize();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  420) 
0146d206317e1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Amara Emerson           2021-01-21 14:54:26 -0800  421)   return !(MFI.hasCalls() || hasFP(MF) || NumBytes > RedZoneSize ||
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  422)            getSVEStackSize(MF));
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  423) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  424) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  425) /// hasFP - Return true if the specified function should have a dedicated frame
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  426) /// pointer register.
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  427) bool AArch64FrameLowering::hasFP(const MachineFunction &MF) const {
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000  428)   const MachineFrameInfo &MFI = MF.getFrameInfo();
fc6de428c8ab1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2014-08-05 02:39:49 +0000  429)   const TargetRegisterInfo *RegInfo = MF.getSubtarget().getRegisterInfo();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000  430)   // Win64 EH requires a frame pointer if funclets are present, as the locals
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000  431)   // are accessed off the frame pointer in both the parent function and the
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000  432)   // funclets.
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000  433)   if (MF.hasEHFunclets())
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000  434)     return true;
62c1a1e7c7fc1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-03-02 17:58:31 +0000  435)   // Retain behavior of always omitting the FP for leaf functions when possible.
a0aa58dad53f2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2019-12-07 10:23:30 -0800  436)   if (MF.getTarget().Options.DisableFramePointerElim(MF))
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  437)     return true;
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  438)   if (MFI.hasVarSizedObjects() || MFI.isFrameAddressTaken() ||
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  439)       MFI.hasStackMap() || MFI.hasPatchPoint() ||
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000  440)       RegInfo->hasStackRealignment(MF))
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  441)     return true;
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  442)   // With large callframes around we may need to use FP to access the scavenging
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  443)   // emergency spillslot.
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  444)   //
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  445)   // Unfortunately some calls to hasFP() like machine verifier ->
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  446)   // getReservedReg() -> hasFP in the middle of global isel are too early
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  447)   // to know the max call frame size. Hopefully conservatively returning "true"
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  448)   // in those cases is fine.
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  449)   // DefaultSafeSPDisplacement is fine as we only emergency spill GP regs.
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  450)   if (!MFI.isMaxCallFrameSizeComputed() ||
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  451)       MFI.getMaxCallFrameSize() > DefaultSafeSPDisplacement)
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  452)     return true;
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  453) 
5c290dc206016 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2018-01-19 03:16:36 +0000  454)   return false;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  455) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  456) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  457) /// hasReservedCallFrame - Under normal circumstances, when a frame pointer is
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  458) /// not required, we reserve argument space for call sites in the function
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  459) /// immediately on entry to the current function.  This eliminates the need for
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  460) /// add/sub sp brackets around call sites.  Returns true if the call frame is
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  461) /// included as part of the stack frame.
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  462) bool
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000  463) AArch64FrameLowering::hasReservedCallFrame(const MachineFunction &MF) const {
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000  464)   return !MF.getFrameInfo().hasVarSizedObjects();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  465) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  466) 
e1a2e90ffadd8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hans Wennborg           2016-03-31 18:33:38 +0000  467) MachineBasicBlock::iterator AArch64FrameLowering::eliminateCallFramePseudoInstr(
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  468)     MachineFunction &MF, MachineBasicBlock &MBB,
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  469)     MachineBasicBlock::iterator I) const {
fc6de428c8ab1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2014-08-05 02:39:49 +0000  470)   const AArch64InstrInfo *TII =
fc6de428c8ab1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2014-08-05 02:39:49 +0000  471)       static_cast<const AArch64InstrInfo *>(MF.getSubtarget().getInstrInfo());
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  472)   DebugLoc DL = I->getDebugLoc();
fa3872e7ad06f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-05-18 20:27:55 +0000  473)   unsigned Opc = I->getOpcode();
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  474)   bool IsDestroy = Opc == TII->getCallFrameDestroyOpcode();
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  475)   uint64_t CalleePopAmount = IsDestroy ? I->getOperand(1).getImm() : 0;
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  476) 
8fcc70f141489 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2019-06-25 20:53:35 +0000  477)   if (!hasReservedCallFrame(MF)) {
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  478)     int64_t Amount = I->getOperand(0).getImm();
b727aabcb8c67 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-26 17:51:25 +0000  479)     Amount = alignTo(Amount, getStackAlign());
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  480)     if (!IsDestroy)
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  481)       Amount = -Amount;
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  482) 
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  483)     // N.b. if CalleePopAmount is valid but zero (i.e. callee would pop, but it
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  484)     // doesn't have to pop anything), then the first operand will be zero too so
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  485)     // this adjustment is a no-op.
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  486)     if (CalleePopAmount == 0) {
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  487)       // FIXME: in-function stack adjustment for calls is limited to 24-bits
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  488)       // because there's no guaranteed temporary register available.
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  489)       //
469de19a09313 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sylvestre Ledru         2014-08-11 18:04:46 +0000  490)       // ADD/SUB (immediate) has only LSL #0 and LSL #12 available.
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  491)       // 1) For offset <= 12-bit, we use LSL #0
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  492)       // 2) For 12-bit <= offset <= 24-bit, we use two instructions. One uses
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  493)       // LSL #0, and the other uses LSL #12.
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  494)       //
401a4ab8d8511 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-01-19 16:50:45 +0000  495)       // Most call frames will be allocated at the start of a function so
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  496)       // this is OK, but it is a limitation that needs dealing with.
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  497)       assert(Amount > -0xffffff && Amount < 0xffffff && "call frame too large");
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000  498)       emitFrameOffset(MBB, I, DL, AArch64::SP, AArch64::SP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000  499)                       StackOffset::getFixed(Amount), TII);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  500)     }
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  501)   } else if (CalleePopAmount != 0) {
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  502)     // If the calling convention demands that the callee pops arguments from the
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  503)     // stack, we want to add it back if we have a reserved call frame.
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000  504)     assert(CalleePopAmount < 0xffffff && "call frame too large");
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000  505)     emitFrameOffset(MBB, I, DL, AArch64::SP, AArch64::SP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000  506)                     StackOffset::getFixed(-(int64_t)CalleePopAmount), TII);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  507)   }
e1a2e90ffadd8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hans Wennborg           2016-03-31 18:33:38 +0000  508)   return MBB.erase(I);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  509) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  510) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  511) void AArch64FrameLowering::emitCalleeSavedGPRLocations(
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  512)     MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI) const {
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  513)   MachineFunction &MF = *MBB.getParent();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  514)   MachineFrameInfo &MFI = MF.getFrameInfo();
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  515) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  516)   const std::vector<CalleeSavedInfo> &CSI = MFI.getCalleeSavedInfo();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  517)   if (CSI.empty())
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  518)     return;
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  519) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  520)   const TargetSubtargetInfo &STI = MF.getSubtarget();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  521)   const TargetRegisterInfo &TRI = *STI.getRegisterInfo();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  522)   const TargetInstrInfo &TII = *STI.getInstrInfo();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  523)   DebugLoc DL = MBB.findDebugLoc(MBBI);
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  524) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  525)   for (const auto &Info : CSI) {
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  526)     if (MFI.getStackID(Info.getFrameIdx()) == TargetStackID::ScalableVector)
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  527)       continue;
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  528) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  529)     assert(!Info.isSpilledToReg() && "Spilling to registers not implemented");
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  530)     unsigned DwarfReg = TRI.getDwarfRegNum(Info.getReg(), true);
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  531) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  532)     int64_t Offset =
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  533)         MFI.getObjectOffset(Info.getFrameIdx()) - getOffsetOfLocalArea();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  534)     unsigned CFIIndex = MF.addFrameInst(
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  535)         MCCFIInstruction::createOffset(nullptr, DwarfReg, Offset));
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  536)     BuildMI(MBB, MBBI, DL, TII.get(TargetOpcode::CFI_INSTRUCTION))
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  537)         .addCFIIndex(CFIIndex)
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  538)         .setMIFlags(MachineInstr::FrameSetup);
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  539)   }
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  540) }
fd6584a22043b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 10:58:47 +0100  541) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  542) void AArch64FrameLowering::emitCalleeSavedSVELocations(
62d472507e515 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-25 16:36:08 +0000  543)     MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI) const {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  544)   MachineFunction &MF = *MBB.getParent();
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000  545)   MachineFrameInfo &MFI = MF.getFrameInfo();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  546) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  547)   // Add callee saved registers to move list.
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000  548)   const std::vector<CalleeSavedInfo> &CSI = MFI.getCalleeSavedInfo();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  549)   if (CSI.empty())
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  550)     return;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  551) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  552)   const TargetSubtargetInfo &STI = MF.getSubtarget();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  553)   const TargetRegisterInfo &TRI = *STI.getRegisterInfo();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  554)   const TargetInstrInfo &TII = *STI.getInstrInfo();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  555)   DebugLoc DL = MBB.findDebugLoc(MBBI);
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  556)   AArch64FunctionInfo &AFI = *MF.getInfo<AArch64FunctionInfo>();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  557) 
91f1f47751687 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jim Grosbach            2014-04-02 18:00:49 +0000  558)   for (const auto &Info : CSI) {
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  559)     if (!(MFI.getStackID(Info.getFrameIdx()) == TargetStackID::ScalableVector))
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  560)       continue;
bb3344c7d8c27 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 11:10:32 +0100  561) 
bb3344c7d8c27 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 11:10:32 +0100  562)     // Not all unwinders may know about SVE registers, so assume the lowest
bb3344c7d8c27 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 11:10:32 +0100  563)     // common demoninator.
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  564)     assert(!Info.isSpilledToReg() && "Spilling to registers not implemented");
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  565)     unsigned Reg = Info.getReg();
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  566)     if (!static_cast<const AArch64RegisterInfo &>(TRI).regNeedsCFI(Reg, Reg))
bb3344c7d8c27 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 11:10:32 +0100  567)       continue;
bb3344c7d8c27 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 11:10:32 +0100  568) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  569)     StackOffset Offset =
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  570)         StackOffset::getScalable(MFI.getObjectOffset(Info.getFrameIdx())) -
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  571)         StackOffset::getFixed(AFI.getCalleeSavedStackSize(MFI));
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  572) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  573)     unsigned CFIIndex = MF.addFrameInst(createCFAOffset(TRI, Reg, Offset));
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000  574)     BuildMI(MBB, MBBI, DL, TII.get(TargetOpcode::CFI_INSTRUCTION))
b9fa945d510cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Adrian Prantl           2014-12-16 00:20:49 +0000  575)         .addCFIIndex(CFIIndex)
b9fa945d510cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Adrian Prantl           2014-12-16 00:20:49 +0000  576)         .setMIFlags(MachineInstr::FrameSetup);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  577)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  578) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000  579) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  580) static void insertCFISameValue(const MCInstrDesc &Desc, MachineFunction &MF,
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  581)                                MachineBasicBlock &MBB,
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  582)                                MachineBasicBlock::iterator InsertPt,
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  583)                                unsigned DwarfReg) {
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  584)   unsigned CFIIndex =
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  585)       MF.addFrameInst(MCCFIInstruction::createSameValue(nullptr, DwarfReg));
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  586)   BuildMI(MBB, InsertPt, DebugLoc(), Desc).addCFIIndex(CFIIndex);
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  587) }
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  588) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  589) void AArch64FrameLowering::resetCFIToInitialState(
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  590)     MachineBasicBlock &MBB) const {
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  591) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  592)   MachineFunction &MF = *MBB.getParent();
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  593)   const auto &Subtarget = MF.getSubtarget<AArch64Subtarget>();
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  594)   const TargetInstrInfo &TII = *Subtarget.getInstrInfo();
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  595)   const auto &TRI =
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  596)       static_cast<const AArch64RegisterInfo &>(*Subtarget.getRegisterInfo());
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  597)   const auto &MFI = *MF.getInfo<AArch64FunctionInfo>();
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  598) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  599)   const MCInstrDesc &CFIDesc = TII.get(TargetOpcode::CFI_INSTRUCTION);
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  600)   DebugLoc DL;
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  601) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  602)   // Reset the CFA to `SP + 0`.
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  603)   MachineBasicBlock::iterator InsertPt = MBB.begin();
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  604)   unsigned CFIIndex = MF.addFrameInst(MCCFIInstruction::cfiDefCfa(
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  605)       nullptr, TRI.getDwarfRegNum(AArch64::SP, true), 0));
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  606)   BuildMI(MBB, InsertPt, DL, CFIDesc).addCFIIndex(CFIIndex);
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  607) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  608)   // Flip the RA sign state.
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500  609)   if (MFI.shouldSignReturnAddress(MF)) {
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  610)     CFIIndex = MF.addFrameInst(MCCFIInstruction::createNegateRAState(nullptr));
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  611)     BuildMI(MBB, InsertPt, DL, CFIDesc).addCFIIndex(CFIIndex);
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  612)   }
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  613) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  614)   // Shadow call stack uses X18, reset it.
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  615)   if (needsShadowCallStackPrologueEpilogue(MF))
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  616)     insertCFISameValue(CFIDesc, MF, MBB, InsertPt,
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  617)                        TRI.getDwarfRegNum(AArch64::X18, true));
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  618) 
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  619)   // Emit .cfi_same_value for callee-saved registers.
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  620)   const std::vector<CalleeSavedInfo> &CSI =
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  621)       MF.getFrameInfo().getCalleeSavedInfo();
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  622)   for (const auto &Info : CSI) {
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  623)     unsigned Reg = Info.getReg();
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  624)     if (!TRI.regNeedsCFI(Reg, Reg))
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  625)       continue;
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  626)     insertCFISameValue(CFIDesc, MF, MBB, InsertPt,
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  627)                        TRI.getDwarfRegNum(Reg, true));
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  628)   }
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  629) }
b4ad28da196d3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-11 12:08:26 +0100  630) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  631) static void emitCalleeSavedRestores(MachineBasicBlock &MBB,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  632)                                     MachineBasicBlock::iterator MBBI,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  633)                                     bool SVE) {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  634)   MachineFunction &MF = *MBB.getParent();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  635)   MachineFrameInfo &MFI = MF.getFrameInfo();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  636) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  637)   const std::vector<CalleeSavedInfo> &CSI = MFI.getCalleeSavedInfo();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  638)   if (CSI.empty())
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  639)     return;
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  640) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  641)   const TargetSubtargetInfo &STI = MF.getSubtarget();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  642)   const TargetRegisterInfo &TRI = *STI.getRegisterInfo();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  643)   const TargetInstrInfo &TII = *STI.getInstrInfo();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  644)   DebugLoc DL = MBB.findDebugLoc(MBBI);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  645) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  646)   for (const auto &Info : CSI) {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  647)     if (SVE !=
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  648)         (MFI.getStackID(Info.getFrameIdx()) == TargetStackID::ScalableVector))
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  649)       continue;
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  650) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  651)     unsigned Reg = Info.getReg();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  652)     if (SVE &&
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  653)         !static_cast<const AArch64RegisterInfo &>(TRI).regNeedsCFI(Reg, Reg))
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  654)       continue;
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  655) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  656)     unsigned CFIIndex = MF.addFrameInst(MCCFIInstruction::createRestore(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  657)         nullptr, TRI.getDwarfRegNum(Info.getReg(), true)));
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  658)     BuildMI(MBB, MBBI, DL, TII.get(TargetOpcode::CFI_INSTRUCTION))
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  659)         .addCFIIndex(CFIIndex)
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  660)         .setMIFlags(MachineInstr::FrameDestroy);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  661)   }
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  662) }
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  663) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  664) void AArch64FrameLowering::emitCalleeSavedGPRRestores(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  665)     MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI) const {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  666)   emitCalleeSavedRestores(MBB, MBBI, false);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  667) }
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  668) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  669) void AArch64FrameLowering::emitCalleeSavedSVERestores(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  670)     MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI) const {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  671)   emitCalleeSavedRestores(MBB, MBBI, true);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  672) }
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100  673) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  674) static MCRegister getRegisterOrZero(MCRegister Reg, bool HasSVE) {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  675)   switch (Reg.id()) {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  676)   default:
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  677)     // The called routine is expected to preserve r19-r28
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  678)     // r29 and r30 are used as frame pointer and link register resp.
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  679)     return 0;
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  680) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  681)     // GPRs
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  682) #define CASE(n)                                                                \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  683)   case AArch64::W##n:                                                          \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  684)   case AArch64::X##n:                                                          \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  685)     return AArch64::X##n
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  686)   CASE(0);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  687)   CASE(1);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  688)   CASE(2);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  689)   CASE(3);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  690)   CASE(4);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  691)   CASE(5);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  692)   CASE(6);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  693)   CASE(7);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  694)   CASE(8);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  695)   CASE(9);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  696)   CASE(10);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  697)   CASE(11);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  698)   CASE(12);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  699)   CASE(13);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  700)   CASE(14);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  701)   CASE(15);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  702)   CASE(16);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  703)   CASE(17);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  704)   CASE(18);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  705) #undef CASE
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  706) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  707)     // FPRs
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  708) #define CASE(n)                                                                \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  709)   case AArch64::B##n:                                                          \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  710)   case AArch64::H##n:                                                          \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  711)   case AArch64::S##n:                                                          \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  712)   case AArch64::D##n:                                                          \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  713)   case AArch64::Q##n:                                                          \
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  714)     return HasSVE ? AArch64::Z##n : AArch64::Q##n
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  715)   CASE(0);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  716)   CASE(1);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  717)   CASE(2);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  718)   CASE(3);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  719)   CASE(4);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  720)   CASE(5);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  721)   CASE(6);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  722)   CASE(7);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  723)   CASE(8);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  724)   CASE(9);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  725)   CASE(10);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  726)   CASE(11);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  727)   CASE(12);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  728)   CASE(13);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  729)   CASE(14);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  730)   CASE(15);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  731)   CASE(16);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  732)   CASE(17);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  733)   CASE(18);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  734)   CASE(19);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  735)   CASE(20);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  736)   CASE(21);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  737)   CASE(22);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  738)   CASE(23);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  739)   CASE(24);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  740)   CASE(25);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  741)   CASE(26);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  742)   CASE(27);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  743)   CASE(28);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  744)   CASE(29);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  745)   CASE(30);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  746)   CASE(31);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  747) #undef CASE
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  748)   }
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  749) }
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  750) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  751) void AArch64FrameLowering::emitZeroCallUsedRegs(BitVector RegsToZero,
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  752)                                                 MachineBasicBlock &MBB) const {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  753)   // Insertion point.
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  754)   MachineBasicBlock::iterator MBBI = MBB.getFirstTerminator();
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  755) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  756)   // Fake a debug loc.
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  757)   DebugLoc DL;
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  758)   if (MBBI != MBB.end())
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  759)     DL = MBBI->getDebugLoc();
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  760) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  761)   const MachineFunction &MF = *MBB.getParent();
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  762)   const AArch64Subtarget &STI = MF.getSubtarget<AArch64Subtarget>();
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  763)   const AArch64RegisterInfo &TRI = *STI.getRegisterInfo();
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  764) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  765)   BitVector GPRsToZero(TRI.getNumRegs());
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  766)   BitVector FPRsToZero(TRI.getNumRegs());
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  767)   bool HasSVE = STI.hasSVE();
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  768)   for (MCRegister Reg : RegsToZero.set_bits()) {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  769)     if (TRI.isGeneralPurposeRegister(MF, Reg)) {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  770)       // For GPRs, we only care to clear out the 64-bit register.
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  771)       if (MCRegister XReg = getRegisterOrZero(Reg, HasSVE))
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  772)         GPRsToZero.set(XReg);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  773)     } else if (AArch64::FPR128RegClass.contains(Reg) ||
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  774)                AArch64::FPR64RegClass.contains(Reg) ||
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  775)                AArch64::FPR32RegClass.contains(Reg) ||
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  776)                AArch64::FPR16RegClass.contains(Reg) ||
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  777)                AArch64::FPR8RegClass.contains(Reg)) {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  778)       // For FPRs,
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  779)       if (MCRegister XReg = getRegisterOrZero(Reg, HasSVE))
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  780)         FPRsToZero.set(XReg);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  781)     }
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  782)   }
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  783) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  784)   const AArch64InstrInfo &TII = *STI.getInstrInfo();
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  785) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  786)   // Zero out GPRs.
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  787)   for (MCRegister Reg : GPRsToZero.set_bits())
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  788)     BuildMI(MBB, MBBI, DL, TII.get(AArch64::MOVi64imm), Reg).addImm(0);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  789) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  790)   // Zero out FP/vector registers.
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  791)   for (MCRegister Reg : FPRsToZero.set_bits())
d497129f9bfae llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-20 12:02:26 -0700  792)     if (HasSVE)
d497129f9bfae llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-20 12:02:26 -0700  793)       BuildMI(MBB, MBBI, DL, TII.get(AArch64::DUP_ZI_D), Reg)
d497129f9bfae llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-20 12:02:26 -0700  794)         .addImm(0)
d497129f9bfae llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-20 12:02:26 -0700  795)         .addImm(0);
d497129f9bfae llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-20 12:02:26 -0700  796)     else
d497129f9bfae llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-20 12:02:26 -0700  797)       BuildMI(MBB, MBBI, DL, TII.get(AArch64::MOVIv2d_ns), Reg).addImm(0);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  798) 
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  799)   if (HasSVE) {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  800)     for (MCRegister PReg :
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  801)          {AArch64::P0, AArch64::P1, AArch64::P2, AArch64::P3, AArch64::P4,
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  802)           AArch64::P5, AArch64::P6, AArch64::P7, AArch64::P8, AArch64::P9,
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  803)           AArch64::P10, AArch64::P11, AArch64::P12, AArch64::P13, AArch64::P14,
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  804)           AArch64::P15}) {
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  805)       if (RegsToZero[PReg])
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  806)         BuildMI(MBB, MBBI, DL, TII.get(AArch64::PFALSE), PReg);
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  807)     }
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  808)   }
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  809) }
6e00a34cdb49b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bill Wendling           2022-05-19 16:57:40 -0700  810) 
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  811) // Find a scratch register that we can use at the start of the prologue to
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  812) // re-align the stack pointer.  We avoid using callee-save registers since they
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  813) // may appear to be free when this is called from canUseAsPrologue (during
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  814) // shrink wrapping), but then no longer be free when this is called from
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  815) // emitPrologue.
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  816) //
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  817) // FIXME: This is a bit conservative, since in the above case we could use one
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  818) // of the callee-save registers as a scratch temp to re-align the stack pointer,
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  819) // but we would then have to make sure that we were in fact saving at least one
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  820) // callee-save register in the prologue, which is additional complexity that
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  821) // doesn't seem worth the benefit.
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  822) static unsigned findScratchNonCalleeSaveRegister(MachineBasicBlock *MBB) {
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  823)   MachineFunction *MF = MBB->getParent();
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  824) 
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  825)   // If MBB is an entry block, use X9 as the scratch register
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  826)   if (&MF->front() == MBB)
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  827)     return AArch64::X9;
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  828) 
60a245e0ffc94 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2017-03-31 23:12:27 +0000  829)   const AArch64Subtarget &Subtarget = MF->getSubtarget<AArch64Subtarget>();
ac4307c41ece4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-05-26 21:51:00 +0000  830)   const AArch64RegisterInfo &TRI = *Subtarget.getRegisterInfo();
60a245e0ffc94 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2017-03-31 23:12:27 +0000  831)   LivePhysRegs LiveRegs(TRI);
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  832)   LiveRegs.addLiveIns(*MBB);
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  833) 
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  834)   // Mark callee saved registers as used so we will not choose them.
6c47c62588573 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tri Vo                  2018-09-22 22:17:50 +0000  835)   const MCPhysReg *CSRegs = MF->getRegInfo().getCalleeSavedRegs();
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  836)   for (unsigned i = 0; CSRegs[i]; ++i)
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  837)     LiveRegs.addReg(CSRegs[i]);
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  838) 
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  839)   // Prefer X9 since it was historically used for the prologue scratch reg.
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  840)   const MachineRegisterInfo &MRI = MF->getRegInfo();
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  841)   if (LiveRegs.available(MRI, AArch64::X9))
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  842)     return AArch64::X9;
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  843) 
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  844)   for (unsigned Reg : AArch64::GPR64RegClass) {
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  845)     if (LiveRegs.available(MRI, Reg))
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  846)       return Reg;
332bb5c2364d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-06 21:31:27 +0000  847)   }
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  848)   return AArch64::NoRegister;
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  849) }
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  850) 
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  851) bool AArch64FrameLowering::canUseAsPrologue(
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  852)     const MachineBasicBlock &MBB) const {
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  853)   const MachineFunction *MF = MBB.getParent();
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  854)   MachineBasicBlock *TmpMBB = const_cast<MachineBasicBlock *>(&MBB);
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  855)   const AArch64Subtarget &Subtarget = MF->getSubtarget<AArch64Subtarget>();
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  856)   const AArch64RegisterInfo *RegInfo = Subtarget.getRegisterInfo();
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  857) 
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  858)   // Don't need a scratch register if we're not going to re-align the stack.
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000  859)   if (!RegInfo->hasStackRealignment(*MF))
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  860)     return true;
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  861)   // Otherwise, we can use any block as long as it has a scratch register
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  862)   // available.
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  863)   return findScratchNonCalleeSaveRegister(TmpMBB) != AArch64::NoRegister;
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  864) }
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000  865) 
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  866) static bool windowsRequiresStackProbe(MachineFunction &MF,
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000  867)                                       uint64_t StackSizeInBytes) {
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  868)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  869)   if (!Subtarget.isTargetWindows())
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  870)     return false;
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  871)   const Function &F = MF.getFunction();
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  872)   // TODO: When implementing stack protectors, take that into account
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  873)   // for the probe threshold.
c16a58b36caeb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-08 10:53:17 -0500  874)   unsigned StackProbeSize =
c16a58b36caeb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-08 10:53:17 -0500  875)       F.getFnAttributeAsParsedInteger("stack-probe-size", 4096);
89c35fc44daf4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hans Wennborg           2018-02-23 13:46:25 +0000  876)   return (StackSizeInBytes >= StackProbeSize) &&
89c35fc44daf4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hans Wennborg           2018-02-23 13:46:25 +0000  877)          !F.hasFnAttribute("no-stack-arg-probe");
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  878) }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  879) 
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  880) static bool needsWinCFI(const MachineFunction &MF) {
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  881)   const Function &F = MF.getFunction();
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  882)   return MF.getTarget().getMCAsmInfo()->usesWindowsCFI() &&
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  883)          F.needsUnwindTableEntry();
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  884) }
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  885) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  886) bool AArch64FrameLowering::shouldCombineCSRLocalStackBump(
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000  887)     MachineFunction &MF, uint64_t StackBumpBytes) const {
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  888)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000  889)   const MachineFrameInfo &MFI = MF.getFrameInfo();
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  890)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  891)   const AArch64RegisterInfo *RegInfo = Subtarget.getRegisterInfo();
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  892)   if (homogeneousPrologEpilog(MF))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500  893)     return false;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  894) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  895)   if (AFI->getLocalStackSize() == 0)
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  896)     return false;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  897) 
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  898)   // For WinCFI, if optimizing for size, prefer to not combine the stack bump
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  899)   // (to force a stp with predecrement) to match the packed unwind format,
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  900)   // provided that there actually are any callee saved registers to merge the
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  901)   // decrement with.
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  902)   // This is potentially marginally slower, but allows using the packed
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  903)   // unwind format for functions that both have a local area and callee saved
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  904)   // registers. Using the packed unwind format notably reduces the size of
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  905)   // the unwind info.
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  906)   if (needsWinCFI(MF) && AFI->getCalleeSavedStackSize() > 0 &&
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  907)       MF.getFunction().hasOptSize())
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  908)     return false;
7d07405761aec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 15:00:53 +0300  909) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  910)   // 512 is the maximum immediate for stp/ldp that will be used for
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  911)   // callee-save save/restores
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000  912)   if (StackBumpBytes >= 512 || windowsRequiresStackProbe(MF, StackBumpBytes))
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  913)     return false;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  914) 
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000  915)   if (MFI.hasVarSizedObjects())
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  916)     return false;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  917) 
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000  918)   if (RegInfo->hasStackRealignment(MF))
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  919)     return false;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  920) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  921)   // This isn't strictly necessary, but it simplifies things a bit since the
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  922)   // current RedZone handling code assumes the SP is adjusted by the
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  923)   // callee-save save/restore code.
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  924)   if (canUseRedZone(MF))
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  925)     return false;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  926) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  927)   // When there is an SVE area on the stack, always allocate the
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  928)   // callee-saves and spills/locals separately.
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  929)   if (getSVEStackSize(MF))
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  930)     return false;
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000  931) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  932)   return true;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  933) }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000  934) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  935) bool AArch64FrameLowering::shouldCombineCSRLocalStackBumpInEpilogue(
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  936)     MachineBasicBlock &MBB, unsigned StackBumpBytes) const {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  937)   if (!shouldCombineCSRLocalStackBump(*MBB.getParent(), StackBumpBytes))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  938)     return false;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  939) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  940)   if (MBB.empty())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  941)     return true;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  942) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  943)   // Disable combined SP bump if the last instruction is an MTE tag store. It
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  944)   // is almost always better to merge SP adjustment into those instructions.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  945)   MachineBasicBlock::iterator LastI = MBB.getFirstTerminator();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  946)   MachineBasicBlock::iterator Begin = MBB.begin();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  947)   while (LastI != Begin) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  948)     --LastI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  949)     if (LastI->isTransient())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  950)       continue;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  951)     if (!LastI->getFlag(MachineInstr::FrameDestroy))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  952)       break;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  953)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  954)   switch (LastI->getOpcode()) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  955)   case AArch64::STGloop:
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  956)   case AArch64::STZGloop:
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000  957)   case AArch64::STGi:
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000  958)   case AArch64::STZGi:
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000  959)   case AArch64::ST2Gi:
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000  960)   case AArch64::STZ2Gi:
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  961)     return false;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  962)   default:
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  963)     return true;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  964)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  965)   llvm_unreachable("unreachable");
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  966) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800  967) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  968) // Given a load or a store instruction, generate an appropriate unwinding SEH
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  969) // code on Windows.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  970) static MachineBasicBlock::iterator InsertSEH(MachineBasicBlock::iterator MBBI,
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  971)                                              const TargetInstrInfo &TII,
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  972)                                              MachineInstr::MIFlag Flag) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  973)   unsigned Opc = MBBI->getOpcode();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  974)   MachineBasicBlock *MBB = MBBI->getParent();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  975)   MachineFunction &MF = *MBB->getParent();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  976)   DebugLoc DL = MBBI->getDebugLoc();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  977)   unsigned ImmIdx = MBBI->getNumOperands() - 1;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  978)   int Imm = MBBI->getOperand(ImmIdx).getImm();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  979)   MachineInstrBuilder MIB;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  980)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  981)   const AArch64RegisterInfo *RegInfo = Subtarget.getRegisterInfo();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  982) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  983)   switch (Opc) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  984)   default:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  985)     llvm_unreachable("No SEH Opcode for this instruction");
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  986)   case AArch64::LDPDpost:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  987)     Imm = -Imm;
de9d80c1c579e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-08-08 11:24:15 -0700  988)     [[fallthrough]];
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  989)   case AArch64::STPDpre: {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  990)     unsigned Reg0 = RegInfo->getSEHRegNum(MBBI->getOperand(1).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  991)     unsigned Reg1 = RegInfo->getSEHRegNum(MBBI->getOperand(2).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  992)     MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveFRegP_X))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  993)               .addImm(Reg0)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  994)               .addImm(Reg1)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  995)               .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  996)               .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  997)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  998)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000  999)   case AArch64::LDPXpost:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1000)     Imm = -Imm;
de9d80c1c579e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-08-08 11:24:15 -0700 1001)     [[fallthrough]];
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1002)   case AArch64::STPXpre: {
5ae66e56cf0cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Sanders          2019-08-12 22:40:53 +0000 1003)     Register Reg0 = MBBI->getOperand(1).getReg();
5ae66e56cf0cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Sanders          2019-08-12 22:40:53 +0000 1004)     Register Reg1 = MBBI->getOperand(2).getReg();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1005)     if (Reg0 == AArch64::FP && Reg1 == AArch64::LR)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1006)       MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveFPLR_X))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1007)                 .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1008)                 .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1009)     else
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1010)       MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveRegP_X))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1011)                 .addImm(RegInfo->getSEHRegNum(Reg0))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1012)                 .addImm(RegInfo->getSEHRegNum(Reg1))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1013)                 .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1014)                 .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1015)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1016)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1017)   case AArch64::LDRDpost:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1018)     Imm = -Imm;
de9d80c1c579e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-08-08 11:24:15 -0700 1019)     [[fallthrough]];
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1020)   case AArch64::STRDpre: {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1021)     unsigned Reg = RegInfo->getSEHRegNum(MBBI->getOperand(1).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1022)     MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveFReg_X))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1023)               .addImm(Reg)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1024)               .addImm(Imm)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1025)               .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1026)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1027)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1028)   case AArch64::LDRXpost:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1029)     Imm = -Imm;
de9d80c1c579e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-08-08 11:24:15 -0700 1030)     [[fallthrough]];
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1031)   case AArch64::STRXpre: {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1032)     unsigned Reg =  RegInfo->getSEHRegNum(MBBI->getOperand(1).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1033)     MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveReg_X))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1034)               .addImm(Reg)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1035)               .addImm(Imm)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1036)               .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1037)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1038)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1039)   case AArch64::STPDi:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1040)   case AArch64::LDPDi: {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1041)     unsigned Reg0 =  RegInfo->getSEHRegNum(MBBI->getOperand(0).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1042)     unsigned Reg1 =  RegInfo->getSEHRegNum(MBBI->getOperand(1).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1043)     MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveFRegP))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1044)               .addImm(Reg0)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1045)               .addImm(Reg1)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1046)               .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1047)               .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1048)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1049)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1050)   case AArch64::STPXi:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1051)   case AArch64::LDPXi: {
5ae66e56cf0cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Sanders          2019-08-12 22:40:53 +0000 1052)     Register Reg0 = MBBI->getOperand(0).getReg();
5ae66e56cf0cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Sanders          2019-08-12 22:40:53 +0000 1053)     Register Reg1 = MBBI->getOperand(1).getReg();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1054)     if (Reg0 == AArch64::FP && Reg1 == AArch64::LR)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1055)       MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveFPLR))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1056)                 .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1057)                 .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1058)     else
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1059)       MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveRegP))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1060)                 .addImm(RegInfo->getSEHRegNum(Reg0))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1061)                 .addImm(RegInfo->getSEHRegNum(Reg1))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1062)                 .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1063)                 .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1064)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1065)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1066)   case AArch64::STRXui:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1067)   case AArch64::LDRXui: {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1068)     int Reg = RegInfo->getSEHRegNum(MBBI->getOperand(0).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1069)     MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveReg))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1070)               .addImm(Reg)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1071)               .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1072)               .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1073)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1074)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1075)   case AArch64::STRDui:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1076)   case AArch64::LDRDui: {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1077)     unsigned Reg = RegInfo->getSEHRegNum(MBBI->getOperand(0).getReg());
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1078)     MIB = BuildMI(MF, DL, TII.get(AArch64::SEH_SaveFReg))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1079)               .addImm(Reg)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1080)               .addImm(Imm * 8)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1081)               .setMIFlag(Flag);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1082)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1083)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1084)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1085)   auto I = MBB->insertAfter(MBBI, MIB);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1086)   return I;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1087) }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1088) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1089) // Fix up the SEH opcode associated with the save/restore instruction.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1090) static void fixupSEHOpcode(MachineBasicBlock::iterator MBBI,
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1091)                            unsigned LocalStackSize) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1092)   MachineOperand *ImmOpnd = nullptr;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1093)   unsigned ImmIdx = MBBI->getNumOperands() - 1;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1094)   switch (MBBI->getOpcode()) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1095)   default:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1096)     llvm_unreachable("Fix the offset in the SEH instruction");
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1097)   case AArch64::SEH_SaveFPLR:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1098)   case AArch64::SEH_SaveRegP:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1099)   case AArch64::SEH_SaveReg:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1100)   case AArch64::SEH_SaveFRegP:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1101)   case AArch64::SEH_SaveFReg:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1102)     ImmOpnd = &MBBI->getOperand(ImmIdx);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1103)     break;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1104)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1105)   if (ImmOpnd)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1106)     ImmOpnd->setImm(ImmOpnd->getImm() + LocalStackSize);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1107) }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1108) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1109) // Convert callee-save register save/restore instruction to do stack pointer
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1110) // decrement/increment to allocate/deallocate the callee-save stack area by
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1111) // converting store/load to use pre/post increment version.
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1112) static MachineBasicBlock::iterator convertCalleeSaveRestoreToSPPrePostIncDec(
bdc4956bac81a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2016-06-12 15:39:02 +0000 1113)     MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI,
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1114)     const DebugLoc &DL, const TargetInstrInfo *TII, int CSStackSizeInc,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1115)     bool NeedsWinCFI, bool *HasWinCFI, bool EmitCFI,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1116)     MachineInstr::MIFlag FrameFlag = MachineInstr::FrameSetup,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1117)     int CFAOffset = 0) {
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1118)   unsigned NewOpc;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1119)   switch (MBBI->getOpcode()) {
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1120)   default:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1121)     llvm_unreachable("Unexpected callee-save save/restore opcode!");
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1122)   case AArch64::STPXi:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1123)     NewOpc = AArch64::STPXpre;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1124)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1125)   case AArch64::STPDi:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1126)     NewOpc = AArch64::STPDpre;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1127)     break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1128)   case AArch64::STPQi:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1129)     NewOpc = AArch64::STPQpre;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1130)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1131)   case AArch64::STRXui:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1132)     NewOpc = AArch64::STRXpre;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1133)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1134)   case AArch64::STRDui:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1135)     NewOpc = AArch64::STRDpre;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1136)     break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1137)   case AArch64::STRQui:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1138)     NewOpc = AArch64::STRQpre;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1139)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1140)   case AArch64::LDPXi:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1141)     NewOpc = AArch64::LDPXpost;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1142)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1143)   case AArch64::LDPDi:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1144)     NewOpc = AArch64::LDPDpost;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1145)     break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1146)   case AArch64::LDPQi:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1147)     NewOpc = AArch64::LDPQpost;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1148)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1149)   case AArch64::LDRXui:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1150)     NewOpc = AArch64::LDRXpost;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1151)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1152)   case AArch64::LDRDui:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1153)     NewOpc = AArch64::LDRDpost;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1154)     break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1155)   case AArch64::LDRQui:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1156)     NewOpc = AArch64::LDRQpost;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1157)     break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1158)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1159)   // Get rid of the SEH code associated with the old instruction.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1160)   if (NeedsWinCFI) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1161)     auto SEH = std::next(MBBI);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1162)     if (AArch64InstrInfo::isSEHInstruction(*SEH))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1163)       SEH->eraseFromParent();
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1164)   }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1165) 
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1166)   TypeSize Scale = TypeSize::Fixed(1);
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1167)   unsigned Width;
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1168)   int64_t MinOffset, MaxOffset;
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1169)   bool Success = static_cast<const AArch64InstrInfo *>(TII)->getMemOpInfo(
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1170)       NewOpc, Scale, Width, MinOffset, MaxOffset);
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1171)   (void)Success;
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1172)   assert(Success && "unknown load/store opcode");
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1173) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1174)   // If the first store isn't right where we want SP then we can't fold the
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1175)   // update in so create a normal arithmetic instruction instead.
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1176)   MachineFunction &MF = *MBB.getParent();
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1177)   if (MBBI->getOperand(MBBI->getNumOperands() - 1).getImm() != 0 ||
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1178)       CSStackSizeInc < MinOffset || CSStackSizeInc > MaxOffset) {
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1179)     emitFrameOffset(MBB, MBBI, DL, AArch64::SP, AArch64::SP,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1180)                     StackOffset::getFixed(CSStackSizeInc), TII, FrameFlag,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1181)                     false, false, nullptr, EmitCFI,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1182)                     StackOffset::getFixed(CFAOffset));
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1183) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1184)     return std::prev(MBBI);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1185)   }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1186) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1187)   MachineInstrBuilder MIB = BuildMI(MBB, MBBI, DL, TII->get(NewOpc));
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1188)   MIB.addReg(AArch64::SP, RegState::Define);
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1189) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1190)   // Copy all operands other than the immediate offset.
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1191)   unsigned OpndIdx = 0;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1192)   for (unsigned OpndEnd = MBBI->getNumOperands() - 1; OpndIdx < OpndEnd;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1193)        ++OpndIdx)
116bbab4e4f44 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Diana Picus             2017-01-13 09:58:52 +0000 1194)     MIB.add(MBBI->getOperand(OpndIdx));
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1195) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1196)   assert(MBBI->getOperand(OpndIdx).getImm() == 0 &&
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1197)          "Unexpected immediate offset in first/last callee-save save/restore "
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1198)          "instruction!");
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1199)   assert(MBBI->getOperand(OpndIdx - 1).getReg() == AArch64::SP &&
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1200)          "Unexpected base register in callee-save save/restore instruction!");
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1201)   assert(CSStackSizeInc % Scale == 0);
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 1202)   MIB.addImm(CSStackSizeInc / (int)Scale);
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1203) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1204)   MIB.setMIFlags(MBBI->getFlags());
c73c0307fe71a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chandler Carruth        2018-08-16 21:30:05 +0000 1205)   MIB.setMemRefs(MBBI->memoperands());
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1206) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1207)   // Generate a new SEH code that corresponds to the new instruction.
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1208)   if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1209)     *HasWinCFI = true;
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1210)     InsertSEH(*MIB, *TII, FrameFlag);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1211)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1212) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1213)   if (EmitCFI) {
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1214)     unsigned CFIIndex = MF.addFrameInst(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1215)         MCCFIInstruction::cfiDefCfaOffset(nullptr, CFAOffset - CSStackSizeInc));
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1216)     BuildMI(MBB, MBBI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1217)         .addCFIIndex(CFIIndex)
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1218)         .setMIFlags(FrameFlag);
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1219)   }
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1220) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1221)   return std::prev(MBB.erase(MBBI));
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1222) }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1223) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1224) // Fixup callee-save register save/restore instructions to take into account
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1225) // combined SP bump by adding the local stack size to the stack offsets.
ab53fd9b500b3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Duncan P. N. Exon Smith 2016-07-08 20:29:42 +0000 1226) static void fixupCalleeSaveRestoreStackOffset(MachineInstr &MI,
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 1227)                                               uint64_t LocalStackSize,
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1228)                                               bool NeedsWinCFI,
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1229)                                               bool *HasWinCFI) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1230)   if (AArch64InstrInfo::isSEHInstruction(MI))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1231)     return;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1232) 
ab53fd9b500b3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Duncan P. N. Exon Smith 2016-07-08 20:29:42 +0000 1233)   unsigned Opc = MI.getOpcode();
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1234)   unsigned Scale;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1235)   switch (Opc) {
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1236)   case AArch64::STPXi:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1237)   case AArch64::STRXui:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1238)   case AArch64::STPDi:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1239)   case AArch64::STRDui:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1240)   case AArch64::LDPXi:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1241)   case AArch64::LDRXui:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1242)   case AArch64::LDPDi:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1243)   case AArch64::LDRDui:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1244)     Scale = 8;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1245)     break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1246)   case AArch64::STPQi:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1247)   case AArch64::STRQui:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1248)   case AArch64::LDPQi:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1249)   case AArch64::LDRQui:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1250)     Scale = 16;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1251)     break;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1252)   default:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1253)     llvm_unreachable("Unexpected callee-save save/restore opcode!");
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1254)   }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1255) 
ab53fd9b500b3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Duncan P. N. Exon Smith 2016-07-08 20:29:42 +0000 1256)   unsigned OffsetIdx = MI.getNumExplicitOperands() - 1;
ab53fd9b500b3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Duncan P. N. Exon Smith 2016-07-08 20:29:42 +0000 1257)   assert(MI.getOperand(OffsetIdx - 1).getReg() == AArch64::SP &&
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1258)          "Unexpected base register in callee-save save/restore instruction!");
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1259)   // Last operand is immediate offset that needs fixing.
ab53fd9b500b3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Duncan P. N. Exon Smith 2016-07-08 20:29:42 +0000 1260)   MachineOperand &OffsetOpnd = MI.getOperand(OffsetIdx);
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1261)   // All generated opcodes have scaled offsets.
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 1262)   assert(LocalStackSize % Scale == 0);
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 1263)   OffsetOpnd.setImm(OffsetOpnd.getImm() + LocalStackSize / Scale);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1264) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1265)   if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1266)     *HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1267)     auto MBBI = std::next(MachineBasicBlock::iterator(MI));
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1268)     assert(MBBI != MI.getParent()->end() && "Expecting a valid instruction");
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1269)     assert(AArch64InstrInfo::isSEHInstruction(*MBBI) &&
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1270)            "Expecting a SEH instruction");
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1271)     fixupSEHOpcode(MBBI, LocalStackSize);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1272)   }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1273) }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1274) 
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 1275) static bool isTargetWindows(const MachineFunction &MF) {
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 1276)   return MF.getSubtarget<AArch64Subtarget>().isTargetWindows();
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 1277) }
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 1278) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1279) // Convenience function to determine whether I is an SVE callee save.
df186507e1d07 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2020-01-14 14:06:12 +0100 1280) static bool IsSVECalleeSave(MachineBasicBlock::iterator I) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1281)   switch (I->getOpcode()) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1282)   default:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1283)     return false;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1284)   case AArch64::STR_ZXI:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1285)   case AArch64::STR_PXI:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1286)   case AArch64::LDR_ZXI:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1287)   case AArch64::LDR_PXI:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1288)     return I->getFlag(MachineInstr::FrameSetup) ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1289)            I->getFlag(MachineInstr::FrameDestroy);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1290)   }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1291) }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1292) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1293) static bool needsShadowCallStackPrologueEpilogue(MachineFunction &MF) {
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1294)   if (!(llvm::any_of(
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1295)             MF.getFrameInfo().getCalleeSavedInfo(),
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1296)             [](const auto &Info) { return Info.getReg() == AArch64::LR; }) &&
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1297)         MF.getFunction().hasFnAttribute(Attribute::ShadowCallStack)))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1298)     return false;
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1299) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1300)   if (!MF.getSubtarget<AArch64Subtarget>().isXRegisterReserved(18))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1301)     report_fatal_error("Must reserve x18 to use shadow call stack");
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1302) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1303)   return true;
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1304) }
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1305) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1306) static void emitShadowCallStackPrologue(const TargetInstrInfo &TII,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1307)                                         MachineFunction &MF,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1308)                                         MachineBasicBlock &MBB,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1309)                                         MachineBasicBlock::iterator MBBI,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1310)                                         const DebugLoc &DL, bool NeedsWinCFI,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1311)                                         bool NeedsUnwindInfo) {
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1312)   // Shadow call stack prolog: str x30, [x18], #8
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1313)   BuildMI(MBB, MBBI, DL, TII.get(AArch64::STRXpost))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1314)       .addReg(AArch64::X18, RegState::Define)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1315)       .addReg(AArch64::LR)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1316)       .addReg(AArch64::X18)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1317)       .addImm(8)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1318)       .setMIFlag(MachineInstr::FrameSetup);
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1319) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1320)   // This instruction also makes x18 live-in to the entry block.
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1321)   MBB.addLiveIn(AArch64::X18);
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1322) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1323)   if (NeedsWinCFI)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1324)     BuildMI(MBB, MBBI, DL, TII.get(AArch64::SEH_Nop))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1325)         .setMIFlag(MachineInstr::FrameSetup);
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1326) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1327)   if (NeedsUnwindInfo) {
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1328)     // Emit a CFI instruction that causes 8 to be subtracted from the value of
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1329)     // x18 when unwinding past this frame.
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1330)     static const char CFIInst[] = {
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1331)         dwarf::DW_CFA_val_expression,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1332)         18, // register
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1333)         2,  // length
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1334)         static_cast<char>(unsigned(dwarf::DW_OP_breg18)),
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1335)         static_cast<char>(-8) & 0x7f, // addend (sleb128)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1336)     };
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1337)     unsigned CFIIndex = MF.addFrameInst(MCCFIInstruction::createEscape(
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1338)         nullptr, StringRef(CFIInst, sizeof(CFIInst))));
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1339)     BuildMI(MBB, MBBI, DL, TII.get(AArch64::CFI_INSTRUCTION))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1340)         .addCFIIndex(CFIIndex)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1341)         .setMIFlag(MachineInstr::FrameSetup);
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1342)   }
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1343) }
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1344) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1345) static void emitShadowCallStackEpilogue(const TargetInstrInfo &TII,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1346)                                         MachineFunction &MF,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1347)                                         MachineBasicBlock &MBB,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1348)                                         MachineBasicBlock::iterator MBBI,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1349)                                         const DebugLoc &DL) {
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1350)   // Shadow call stack epilog: ldr x30, [x18, #-8]!
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1351)   BuildMI(MBB, MBBI, DL, TII.get(AArch64::LDRXpre))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1352)       .addReg(AArch64::X18, RegState::Define)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1353)       .addReg(AArch64::LR, RegState::Define)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1354)       .addReg(AArch64::X18)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1355)       .addImm(-8)
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1356)       .setMIFlag(MachineInstr::FrameDestroy);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1357) 
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500 1358)   if (MF.getInfo<AArch64FunctionInfo>()->needsAsyncDwarfUnwindInfo(MF)) {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1359)     unsigned CFIIndex =
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1360)         MF.addFrameInst(MCCFIInstruction::createRestore(nullptr, 18));
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1361)     BuildMI(MBB, MBBI, DL, TII.get(TargetOpcode::CFI_INSTRUCTION))
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1362)         .addCFIIndex(CFIIndex)
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1363)         .setMIFlags(MachineInstr::FrameDestroy);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1364)   }
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1365) }
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1366) 
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1367) // Define the current CFA rule to use the provided FP.
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1368) static void emitDefineCFAWithFP(MachineFunction &MF, MachineBasicBlock &MBB,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1369)                                 MachineBasicBlock::iterator MBBI,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1370)                                 const DebugLoc &DL, unsigned FixedObject) {
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1371)   const AArch64Subtarget &STI = MF.getSubtarget<AArch64Subtarget>();
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1372)   const AArch64RegisterInfo *TRI = STI.getRegisterInfo();
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1373)   const TargetInstrInfo *TII = STI.getInstrInfo();
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1374)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1375) 
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1376)   const int OffsetToFirstCalleeSaveFromFP =
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1377)       AFI->getCalleeSaveBaseToFrameRecordOffset() -
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1378)       AFI->getCalleeSavedStackSize();
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1379)   Register FramePtr = TRI->getFrameRegister(MF);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1380)   unsigned Reg = TRI->getDwarfRegNum(FramePtr, true);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1381)   unsigned CFIIndex = MF.addFrameInst(MCCFIInstruction::cfiDefCfa(
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1382)       nullptr, Reg, FixedObject - OffsetToFirstCalleeSaveFromFP));
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1383)   BuildMI(MBB, MBBI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1384)       .addCFIIndex(CFIIndex)
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1385)       .setMIFlags(MachineInstr::FrameSetup);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1386) }
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1387) 
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1388) void AArch64FrameLowering::signLR(MachineFunction &MF, MachineBasicBlock &MBB,
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1389)                                   MachineBasicBlock::iterator MBBI,
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1390)                                   bool NeedsWinCFI, bool *HasWinCFI) {
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1391)   const auto &MFnI = *MF.getInfo<AArch64FunctionInfo>();
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1392)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1393)   const TargetInstrInfo *TII = Subtarget.getInstrInfo();
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1394)   bool EmitCFI = MFnI.needsDwarfUnwindInfo(MF);
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1395) 
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1396)   // Debug location must be unknown, see emitPrologue().
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1397)   DebugLoc DL;
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1398) 
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1399)   if (MFnI.shouldSignWithBKey()) {
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1400)     BuildMI(MBB, MBBI, DL, TII->get(AArch64::EMITBKEY))
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1401)         .setMIFlag(MachineInstr::FrameSetup);
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1402)   }
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1403) 
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1404)   // No SEH opcode for this one; it doesn't materialize into an
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1405)   // instruction on Windows.
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1406)   BuildMI(
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1407)       MBB, MBBI, DL,
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1408)       TII->get(MFnI.shouldSignWithBKey() ? AArch64::PACIBSP : AArch64::PACIASP))
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1409)       .setMIFlag(MachineInstr::FrameSetup);
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1410) 
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1411)   if (EmitCFI) {
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1412)     unsigned CFIIndex =
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1413)         MF.addFrameInst(MCCFIInstruction::createNegateRAState(nullptr));
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1414)     BuildMI(MBB, MBBI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1415)         .addCFIIndex(CFIIndex)
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1416)         .setMIFlags(MachineInstr::FrameSetup);
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1417)   } else if (NeedsWinCFI) {
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1418)     *HasWinCFI = true;
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1419)     BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_PACSignLR))
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1420)         .setMIFlag(MachineInstr::FrameSetup);
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1421)   }
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1422) }
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1423) 
61b305edfd861 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Quentin Colombet        2015-05-05 17:38:16 +0000 1424) void AArch64FrameLowering::emitPrologue(MachineFunction &MF,
61b305edfd861 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Quentin Colombet        2015-05-05 17:38:16 +0000 1425)                                         MachineBasicBlock &MBB) const {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1426)   MachineBasicBlock::iterator MBBI = MBB.begin();
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000 1427)   const MachineFrameInfo &MFI = MF.getFrameInfo();
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 1428)   const Function &F = MF.getFunction();
66834ec6e19a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Ahmed Bougacha          2015-12-16 22:54:06 +0000 1429)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
66834ec6e19a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Ahmed Bougacha          2015-12-16 22:54:06 +0000 1430)   const AArch64RegisterInfo *RegInfo = Subtarget.getRegisterInfo();
66834ec6e19a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Ahmed Bougacha          2015-12-16 22:54:06 +0000 1431)   const TargetInstrInfo *TII = Subtarget.getInstrInfo();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1432)   MachineModuleInfo &MMI = MF.getMMI();
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1433)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500 1434)   bool EmitCFI = AFI->needsDwarfUnwindInfo(MF);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1435)   bool EmitAsyncCFI = AFI->needsAsyncDwarfUnwindInfo(MF);
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1436)   bool HasFP = hasFP(MF);
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1437)   bool NeedsWinCFI = needsWinCFI(MF);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1438)   bool HasWinCFI = false;
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1439)   auto Cleanup = make_scope_exit([&]() { MF.setHasWinCFI(HasWinCFI); });
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1440) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1441)   bool IsFunclet = MBB.isEHFuncletEntry();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1442) 
8aa6cd5cb9990 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-12 16:16:18 +0000 1443)   // At this point, we're going to decide whether or not the function uses a
8aa6cd5cb9990 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-12 16:16:18 +0000 1444)   // redzone. In most cases, the function doesn't have a redzone so let's
8aa6cd5cb9990 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-12 16:16:18 +0000 1445)   // assume that's false and set it to true in the case that there's a redzone.
8aa6cd5cb9990 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-12 16:16:18 +0000 1446)   AFI->setHasRedZone(false);
8aa6cd5cb9990 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-12 16:16:18 +0000 1447) 
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1448)   // Debug location must be unknown since the first debug location is used
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1449)   // to determine the end of the prologue.
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1450)   DebugLoc DL;
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1451) 
a88c722e687e6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2020-09-25 11:45:22 +0100 1452)   const auto &MFnI = *MF.getInfo<AArch64FunctionInfo>();
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1453)   if (needsShadowCallStackPrologueEpilogue(MF))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1454)     emitShadowCallStackPrologue(*TII, MF, MBB, MBBI, DL, NeedsWinCFI,
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500 1455)                                 MFnI.needsDwarfUnwindInfo(MF));
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1456) 
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1457)   if (MFnI.shouldSignReturnAddress(MF))
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1458)     signLR(MF, MBB, MBBI, NeedsWinCFI, &HasWinCFI);
bd3ee371e9f0b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2023-01-17 16:17:03 -0800 1459) 
0593ce5f0bbb7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2022-06-02 18:05:02 -0700 1460)   if (EmitCFI && MFnI.isMTETagged()) {
0593ce5f0bbb7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2022-06-02 18:05:02 -0700 1461)     BuildMI(MBB, MBBI, DL, TII->get(AArch64::EMITMTETAGGED))
0593ce5f0bbb7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2022-06-02 18:05:02 -0700 1462)         .setMIFlag(MachineInstr::FrameSetup);
0593ce5f0bbb7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2022-06-02 18:05:02 -0700 1463)   }
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1464) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1465)   // We signal the presence of a Swift extended frame to external tools by
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1466)   // storing FP with 0b0001 in bits 63:60. In normal userland operation a simple
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1467)   // ORR is sufficient, it is assumed a Swift kernel would initialize the TBI
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1468)   // bits so that is still true.
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1469)   if (HasFP && AFI->hasSwiftAsyncContext()) {
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1470)     switch (MF.getTarget().Options.SwiftAsyncFramePointer) {
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1471)     case SwiftAsyncFramePointerMode::DeploymentBased:
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1472)       if (Subtarget.swiftAsyncContextIsDynamicallySet()) {
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1473)         // The special symbol below is absolute and has a *value* that can be
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1474)         // combined with the frame pointer to signal an extended frame.
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1475)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::LOADgot), AArch64::X16)
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1476)             .addExternalSymbol("swift_async_extendedFramePointerFlags",
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1477)                                AArch64II::MO_GOT);
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1478)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::ORRXrs), AArch64::FP)
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1479)             .addUse(AArch64::FP)
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1480)             .addUse(AArch64::X16)
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1481)             .addImm(Subtarget.isTargetILP32() ? 32 : 0);
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1482)         break;
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1483)       }
de9d80c1c579e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-08-08 11:24:15 -0700 1484)       [[fallthrough]];
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1485) 
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1486)     case SwiftAsyncFramePointerMode::Always:
5d070c8259ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-09-03 09:59:02 +0100 1487)       // ORR x29, x29, #0x1000_0000_0000_0000
5d070c8259ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-09-03 09:59:02 +0100 1488)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::ORRXri), AArch64::FP)
5d070c8259ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-09-03 09:59:02 +0100 1489)           .addUse(AArch64::FP)
5d070c8259ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-09-03 09:59:02 +0100 1490)           .addImm(0x1100)
5d070c8259ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-09-03 09:59:02 +0100 1491)           .setMIFlag(MachineInstr::FrameSetup);
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1492)       break;
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1493) 
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1494)     case SwiftAsyncFramePointerMode::Never:
a773db7d76222 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Doug Gregor             2021-09-15 13:35:08 -0700 1495)       break;
5d070c8259ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-09-03 09:59:02 +0100 1496)     }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1497)   }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1498) 
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1499)   // All calls are tail calls in GHC calling conv, and functions have no
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 1500)   // prologue/epilogue.
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 1501)   if (MF.getFunction().getCallingConv() == CallingConv::GHC)
fa78d08675df1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Greg Fitzgerald         2015-01-19 17:40:05 +0000 1502)     return;
fa78d08675df1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Greg Fitzgerald         2015-01-19 17:40:05 +0000 1503) 
2f63e57fa59e7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-04-10 15:34:11 -0700 1504)   // Set tagged base pointer to the requested stack slot.
d752f5e95309c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-17 19:24:02 +0000 1505)   // Ideally it should match SP value after prologue.
b0df70403d20e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-12-04 22:43:14 +0000 1506)   std::optional<int> TBPI = AFI->getTaggedBasePointerIndex();
2f63e57fa59e7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-04-10 15:34:11 -0700 1507)   if (TBPI)
2f63e57fa59e7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-04-10 15:34:11 -0700 1508)     AFI->setTaggedBasePointerOffset(-MFI.getObjectOffset(*TBPI));
2f63e57fa59e7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-04-10 15:34:11 -0700 1509)   else
2f63e57fa59e7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-04-10 15:34:11 -0700 1510)     AFI->setTaggedBasePointerOffset(MFI.getStackSize());
d752f5e95309c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-17 19:24:02 +0000 1511) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 1512)   const StackOffset &SVEStackSize = getSVEStackSize(MF);
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 1513) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1514)   // getStackSize() includes all the locals in its size calculation. We don't
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1515)   // include these locals when computing the stack size of a funclet, as they
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1516)   // are allocated in the parent's stack frame and accessed via the frame
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1517)   // pointer from the funclet.  We only save the callee saved registers in the
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1518)   // funclet, which are really the callee saved registers of the parent
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1519)   // function, including the funclet.
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 1520)   int64_t NumBytes = IsFunclet ? getWinEHFuncletFrameSize(MF)
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 1521)                                : MFI.getStackSize();
f309f095e7c67 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-14 11:27:39 +0300 1522)   if (!AFI->hasStackFrame() && !windowsRequiresStackProbe(MF, NumBytes)) {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1523)     assert(!HasFP && "unexpected function without stack frame but with FP");
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 1524)     assert(!SVEStackSize &&
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 1525)            "unexpected function without stack frame but with SVE objects");
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1526)     // All of the stack allocation is for locals.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1527)     AFI->setLocalStackSize(NumBytes);
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1528)     if (!NumBytes)
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1529)       return;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1530)     // REDZONE: If the stack size is less than 128 bytes, we don't need
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1531)     // to actually allocate.
642f6c61a3dcc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-03 21:56:10 +0000 1532)     if (canUseRedZone(MF)) {
642f6c61a3dcc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-03 21:56:10 +0000 1533)       AFI->setHasRedZone(true);
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1534)       ++NumRedZoneFunctions;
642f6c61a3dcc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jessica Paquette        2018-04-03 21:56:10 +0000 1535)     } else {
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000 1536)       emitFrameOffset(MBB, MBBI, DL, AArch64::SP, AArch64::SP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 1537)                       StackOffset::getFixed(-NumBytes), TII,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 1538)                       MachineInstr::FrameSetup, false, NeedsWinCFI, &HasWinCFI);
25e92920c9d13 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 17:36:19 +0000 1539)       if (EmitCFI) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1540)         // Label used to tie together the PROLOG_LABEL and the MachineMoves.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1541)         MCSymbol *FrameLabel = MMI.getContext().createTempSymbol();
75434366cec16 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (David Tellenbach        2019-11-22 00:09:50 +0100 1542)           // Encode the stack size of the leaf function.
0840d725c4e7c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2020-05-22 15:51:24 -0700 1543)         unsigned CFIIndex = MF.addFrameInst(
0840d725c4e7c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2020-05-22 15:51:24 -0700 1544)             MCCFIInstruction::cfiDefCfaOffset(FrameLabel, NumBytes));
0840d725c4e7c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2020-05-22 15:51:24 -0700 1545)         BuildMI(MBB, MBBI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
0840d725c4e7c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2020-05-22 15:51:24 -0700 1546)             .addCFIIndex(CFIIndex)
0840d725c4e7c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2020-05-22 15:51:24 -0700 1547)             .setMIFlags(MachineInstr::FrameSetup);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1548)       }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1549)     }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1550) 
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1551)     if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1552)       HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1553)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_PrologEnd))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1554)           .setMIFlag(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1555)     }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1556) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1557)     return;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1558)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1559) 
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 1560)   bool IsWin64 =
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 1561)       Subtarget.isCallingConvWin64(MF.getFunction().getCallingConv());
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 1562)   unsigned FixedObject = getFixedObjectSize(MF, AFI, IsWin64, IsFunclet);
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 1563) 
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 1564)   auto PrologueSaveSize = AFI->getCalleeSavedStackSize() + FixedObject;
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1565)   // All of the remaining stack allocations are for locals.
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 1566)   AFI->setLocalStackSize(NumBytes - PrologueSaveSize);
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1567)   bool CombineSPBump = shouldCombineCSRLocalStackBump(MF, NumBytes);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1568)   bool HomPrologEpilog = homogeneousPrologEpilog(MF);
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1569)   if (CombineSPBump) {
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 1570)     assert(!SVEStackSize && "Cannot combine SP bump with SVE");
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000 1571)     emitFrameOffset(MBB, MBBI, DL, AArch64::SP, AArch64::SP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 1572)                     StackOffset::getFixed(-NumBytes), TII,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1573)                     MachineInstr::FrameSetup, false, NeedsWinCFI, &HasWinCFI,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1574)                     EmitAsyncCFI);
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1575)     NumBytes = 0;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1576)   } else if (HomPrologEpilog) {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1577)     // Stack has been already adjusted.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1578)     NumBytes -= PrologueSaveSize;
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 1579)   } else if (PrologueSaveSize != 0) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1580)     MBBI = convertCalleeSaveRestoreToSPPrePostIncDec(
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1581)         MBB, MBBI, DL, TII, -PrologueSaveSize, NeedsWinCFI, &HasWinCFI,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1582)         EmitAsyncCFI);
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 1583)     NumBytes -= PrologueSaveSize;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1584)   }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1585)   assert(NumBytes >= 0 && "Negative stack allocation size!?");
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1586) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1587)   // Move past the saves of the callee-saved registers, fixing up the offsets
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1588)   // and pre-inc if we decided to combine the callee-save and local stack
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1589)   // pointer bump above.
04bf91a8c1c6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 16:29:19 +0000 1590)   MachineBasicBlock::iterator End = MBB.end();
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1591)   while (MBBI != End && MBBI->getFlag(MachineInstr::FrameSetup) &&
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1592)          !IsSVECalleeSave(MBBI)) {
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1593)     if (CombineSPBump)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1594)       fixupCalleeSaveRestoreStackOffset(*MBBI, AFI->getLocalStackSize(),
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1595)                                         NeedsWinCFI, &HasWinCFI);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1596)     ++MBBI;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1597)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1598) 
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1599)   // For funclets the FP belongs to the containing function.
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1600)   if (!IsFunclet && HasFP) {
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 1601)     // Only set up FP if we actually need to.
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 1602)     int64_t FPOffset = AFI->getCalleeSaveBaseToFrameRecordOffset();
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 1603) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1604)     if (CombineSPBump)
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 1605)       FPOffset += AFI->getLocalStackSize();
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1606) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1607)     if (AFI->hasSwiftAsyncContext()) {
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1608)       // Before we update the live FP we have to ensure there's a valid (or
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1609)       // null) asynchronous context in its slot just before FP in the frame
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1610)       // record, so store it now.
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1611)       const auto &Attrs = MF.getFunction().getAttributes();
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1612)       bool HaveInitialContext = Attrs.hasAttrSomewhere(Attribute::SwiftAsync);
769ced3d576be llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-05-17 11:34:16 +0100 1613)       if (HaveInitialContext)
769ced3d576be llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-05-17 11:34:16 +0100 1614)         MBB.addLiveIn(AArch64::X22);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1615)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::StoreSwiftAsyncContext))
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1616)           .addUse(HaveInitialContext ? AArch64::X22 : AArch64::XZR)
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1617)           .addUse(AArch64::SP)
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1618)           .addImm(FPOffset - 8)
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1619)           .setMIFlags(MachineInstr::FrameSetup);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1620)     }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 1621) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1622)     if (HomPrologEpilog) {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1623)       auto Prolog = MBBI;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1624)       --Prolog;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1625)       assert(Prolog->getOpcode() == AArch64::HOM_Prolog);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1626)       Prolog->addOperand(MachineOperand::CreateImm(FPOffset));
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1627)     } else {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1628)       // Issue    sub fp, sp, FPOffset or
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1629)       //          mov fp,sp          when FPOffset is zero.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1630)       // Note: All stores of callee-saved registers are marked as "FrameSetup".
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1631)       // This code marks the instruction(s) that set the FP also.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1632)       emitFrameOffset(MBB, MBBI, DL, AArch64::FP, AArch64::SP,
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1633)                       StackOffset::getFixed(FPOffset), TII,
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1634)                       MachineInstr::FrameSetup, false, NeedsWinCFI, &HasWinCFI);
a07787c9a50c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:11:39 +0300 1635)       if (NeedsWinCFI && HasWinCFI) {
a07787c9a50c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:11:39 +0300 1636)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_PrologEnd))
a07787c9a50c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:11:39 +0300 1637)             .setMIFlag(MachineInstr::FrameSetup);
a07787c9a50c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:11:39 +0300 1638)         // After setting up the FP, the rest of the prolog doesn't need to be
a07787c9a50c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:11:39 +0300 1639)         // included in the SEH unwind info.
a07787c9a50c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:11:39 +0300 1640)         NeedsWinCFI = false;
a07787c9a50c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:11:39 +0300 1641)       }
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 1642)     }
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1643)     if (EmitAsyncCFI)
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1644)       emitDefineCFAWithFP(MF, MBB, MBBI, DL, FixedObject);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1645)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1646) 
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1647)   // Now emit the moves for whatever callee saved regs we have (including FP,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1648)   // LR if those are saved). Frame instructions for SVE register are emitted
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1649)   // later, after the instruction which actually save SVE regs.
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1650)   if (EmitAsyncCFI)
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1651)     emitCalleeSavedGPRLocations(MBB, MBBI);
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1652) 
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1653)   // Alignment is required for the parent frame, not the funclet
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1654)   const bool NeedsRealignment =
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1655)       NumBytes && !IsFunclet && RegInfo->hasStackRealignment(MF);
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1656)   int64_t RealignmentPadding =
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1657)       (NeedsRealignment && MFI.getMaxAlign() > Align(16))
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1658)           ? MFI.getMaxAlign().value() - 16
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1659)           : 0;
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1660) 
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1661)   if (windowsRequiresStackProbe(MF, NumBytes + RealignmentPadding)) {
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1662)     uint64_t NumWords = (NumBytes + RealignmentPadding) >> 4;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1663)     if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1664)       HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1665)       // alloc_l can hold at most 256MB, so assume that NumBytes doesn't
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1666)       // exceed this amount.  We need to move at most 2^24 - 1 into x15.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1667)       // This is at most two instructions, MOVZ follwed by MOVK.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1668)       // TODO: Fix to use multiple stack alloc unwind codes for stacks
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1669)       // exceeding 256MB in size.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1670)       if (NumBytes >= (1 << 28))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1671)         report_fatal_error("Stack size cannot exceed 256MB for stack "
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1672)                             "unwinding purposes");
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1673) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1674)       uint32_t LowNumWords = NumWords & 0xFFFF;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1675)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::MOVZXi), AArch64::X15)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1676)             .addImm(LowNumWords)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1677)             .addImm(AArch64_AM::getShifterImm(AArch64_AM::LSL, 0))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1678)             .setMIFlag(MachineInstr::FrameSetup);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1679)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_Nop))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1680)             .setMIFlag(MachineInstr::FrameSetup);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1681)       if ((NumWords & 0xFFFF0000) != 0) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1682)           BuildMI(MBB, MBBI, DL, TII->get(AArch64::MOVKXi), AArch64::X15)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1683)               .addReg(AArch64::X15)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1684)               .addImm((NumWords & 0xFFFF0000) >> 16) // High half
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1685)               .addImm(AArch64_AM::getShifterImm(AArch64_AM::LSL, 16))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1686)               .setMIFlag(MachineInstr::FrameSetup);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1687)           BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_Nop))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1688)             .setMIFlag(MachineInstr::FrameSetup);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1689)       }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1690)     } else {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1691)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::MOVi64imm), AArch64::X15)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1692)           .addImm(NumWords)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1693)           .setMIFlags(MachineInstr::FrameSetup);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1694)     }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1695) 
2b9cec6244fda llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2022-09-05 13:19:42 -0700 1696)     const char* ChkStk = Subtarget.getChkStkName();
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1697)     switch (MF.getTarget().getCodeModel()) {
9dd1d451d9719 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (David Green             2018-08-22 11:31:39 +0000 1698)     case CodeModel::Tiny:
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1699)     case CodeModel::Small:
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1700)     case CodeModel::Medium:
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1701)     case CodeModel::Kernel:
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1702)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::BL))
2b9cec6244fda llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2022-09-05 13:19:42 -0700 1703)           .addExternalSymbol(ChkStk)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1704)           .addReg(AArch64::X15, RegState::Implicit)
315357facab6e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2018-10-31 08:14:09 +0000 1705)           .addReg(AArch64::X16, RegState::Implicit | RegState::Define | RegState::Dead)
315357facab6e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2018-10-31 08:14:09 +0000 1706)           .addReg(AArch64::X17, RegState::Implicit | RegState::Define | RegState::Dead)
315357facab6e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2018-10-31 08:14:09 +0000 1707)           .addReg(AArch64::NZCV, RegState::Implicit | RegState::Define | RegState::Dead)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1708)           .setMIFlags(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1709)       if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1710)         HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1711)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_Nop))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1712)             .setMIFlag(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1713)       }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1714)       break;
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1715)     case CodeModel::Large:
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1716)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::MOVaddrEXT))
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1717)           .addReg(AArch64::X16, RegState::Define)
2b9cec6244fda llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2022-09-05 13:19:42 -0700 1718)           .addExternalSymbol(ChkStk)
2b9cec6244fda llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2022-09-05 13:19:42 -0700 1719)           .addExternalSymbol(ChkStk)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1720)           .setMIFlags(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1721)       if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1722)         HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1723)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_Nop))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1724)             .setMIFlag(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1725)       }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1726) 
c35ed40f4f1bd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2020-06-11 09:23:15 +0100 1727)       BuildMI(MBB, MBBI, DL, TII->get(getBLRCallOpcode(MF)))
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1728)           .addReg(AArch64::X16, RegState::Kill)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1729)           .addReg(AArch64::X15, RegState::Implicit | RegState::Define)
315357facab6e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2018-10-31 08:14:09 +0000 1730)           .addReg(AArch64::X16, RegState::Implicit | RegState::Define | RegState::Dead)
315357facab6e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2018-10-31 08:14:09 +0000 1731)           .addReg(AArch64::X17, RegState::Implicit | RegState::Define | RegState::Dead)
315357facab6e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2018-10-31 08:14:09 +0000 1732)           .addReg(AArch64::NZCV, RegState::Implicit | RegState::Define | RegState::Dead)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1733)           .setMIFlags(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1734)       if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1735)         HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1736)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_Nop))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1737)             .setMIFlag(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1738)       }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1739)       break;
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1740)     }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1741) 
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1742)     BuildMI(MBB, MBBI, DL, TII->get(AArch64::SUBXrx64), AArch64::SP)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1743)         .addReg(AArch64::SP, RegState::Kill)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1744)         .addReg(AArch64::X15, RegState::Kill)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1745)         .addImm(AArch64_AM::getArithExtendImm(AArch64_AM::UXTX, 4))
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1746)         .setMIFlags(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1747)     if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1748)       HasWinCFI = true;
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1749)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_StackAlloc))
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1750)           .addImm(NumBytes)
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1751)           .setMIFlag(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1752)     }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1753)     NumBytes = 0;
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1754) 
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1755)     if (RealignmentPadding > 0) {
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1756)       if (RealignmentPadding >= 4096) {
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1757)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::MOVi64imm))
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1758)             .addReg(AArch64::X16, RegState::Define)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1759)             .addImm(RealignmentPadding)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1760)             .setMIFlags(MachineInstr::FrameSetup);
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1761)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::ADDXrx64), AArch64::X15)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1762)             .addReg(AArch64::SP)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1763)             .addReg(AArch64::X16, RegState::Kill)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1764)             .addImm(AArch64_AM::getArithExtendImm(AArch64_AM::UXTX, 0))
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1765)             .setMIFlag(MachineInstr::FrameSetup);
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1766)       } else {
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1767)         BuildMI(MBB, MBBI, DL, TII->get(AArch64::ADDXri), AArch64::X15)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1768)             .addReg(AArch64::SP)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1769)             .addImm(RealignmentPadding)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1770)             .addImm(0)
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1771)             .setMIFlag(MachineInstr::FrameSetup);
20b758445515e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-07-17 15:19:14 +0300 1772)       }
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1773) 
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1774)       uint64_t AndMask = ~(MFI.getMaxAlign().value() - 1);
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1775)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::ANDXri), AArch64::SP)
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1776)           .addReg(AArch64::X15, RegState::Kill)
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1777)           .addImm(AArch64_AM::encodeLogicalImmediate(AndMask, 64));
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1778)       AFI->setStackRealigned(true);
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1779) 
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1780)       // No need for SEH instructions here; if we're realigning the stack,
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1781)       // we've set a frame pointer and already finished the SEH prologue.
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1782)       assert(!NeedsWinCFI);
6eb205b257717 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-11 15:20:59 +0300 1783)     }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1784)   }
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 1785) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1786)   StackOffset AllocateBefore = SVEStackSize, AllocateAfter = {};
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1787)   MachineBasicBlock::iterator CalleeSavesBegin = MBBI, CalleeSavesEnd = MBBI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1788) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1789)   // Process the SVE callee-saves to determine what space needs to be
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1790)   // allocated.
26b4ef3694973 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 14:16:55 +0100 1791)   if (int64_t CalleeSavedSize = AFI->getSVECalleeSavedStackSize()) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1792)     // Find callee save instructions in frame.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1793)     CalleeSavesBegin = MBBI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1794)     assert(IsSVECalleeSave(CalleeSavesBegin) && "Unexpected instruction");
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1795)     while (IsSVECalleeSave(MBBI) && MBBI != MBB.getFirstTerminator())
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1796)       ++MBBI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1797)     CalleeSavesEnd = MBBI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1798) 
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 1799)     AllocateBefore = StackOffset::getScalable(CalleeSavedSize);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1800)     AllocateAfter = SVEStackSize - AllocateBefore;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1801)   }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1802) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1803)   // Allocate space for the callee saves (if any).
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1804)   emitFrameOffset(
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1805)       MBB, CalleeSavesBegin, DL, AArch64::SP, AArch64::SP, -AllocateBefore, TII,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1806)       MachineInstr::FrameSetup, false, false, nullptr,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1807)       EmitAsyncCFI && !HasFP && AllocateBefore,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1808)       StackOffset::getFixed((int64_t)MFI.getStackSize() - NumBytes));
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1809) 
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1810)   if (EmitAsyncCFI)
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1811)     emitCalleeSavedSVELocations(MBB, CalleeSavesEnd);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1812) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1813)   // Finally allocate remaining SVE stack space.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 1814)   emitFrameOffset(MBB, CalleeSavesEnd, DL, AArch64::SP, AArch64::SP,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1815)                   -AllocateAfter, TII, MachineInstr::FrameSetup, false, false,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1816)                   nullptr, EmitAsyncCFI && !HasFP && AllocateAfter,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1817)                   AllocateBefore + StackOffset::getFixed(
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1818)                                        (int64_t)MFI.getStackSize() - NumBytes));
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 1819) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1820)   // Allocate space for the rest of the frame.
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1821)   if (NumBytes) {
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1822)     unsigned scratchSPReg = AArch64::SP;
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 1823) 
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1824)     if (NeedsRealignment) {
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1825)       scratchSPReg = findScratchNonCalleeSaveRegister(&MBB);
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1826)       assert(scratchSPReg != AArch64::NoRegister);
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1827)     }
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 1828) 
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1829)     // If we're a leaf function, try using the red zone.
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1830)     if (!canUseRedZone(MF)) {
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1831)       // FIXME: in the case of dynamic re-alignment, NumBytes doesn't have
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1832)       // the correct value here, as NumBytes also includes padding bytes,
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1833)       // which shouldn't be counted here.
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1834)       emitFrameOffset(
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1835)           MBB, MBBI, DL, scratchSPReg, AArch64::SP,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1836)           StackOffset::getFixed(-NumBytes), TII, MachineInstr::FrameSetup,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1837)           false, NeedsWinCFI, &HasWinCFI, EmitAsyncCFI && !HasFP,
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1838)           SVEStackSize +
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1839)               StackOffset::getFixed((int64_t)MFI.getStackSize() - NumBytes));
50a97aacacf68 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-03-24 15:27:04 +0000 1840)     }
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1841)     if (NeedsRealignment) {
24303e3ad2b5b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-13 00:30:33 +0300 1842)       assert(MFI.getMaxAlign() > Align(1));
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1843)       assert(scratchSPReg != AArch64::SP);
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1844) 
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1845)       // SUB X9, SP, NumBytes
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1846)       //   -- X9 is temporary register, so shouldn't contain any live data here,
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1847)       //   -- free to use. This is already produced by emitFrameOffset above.
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1848)       // AND SP, X9, 0b11111...0000
24303e3ad2b5b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-13 00:30:33 +0300 1849)       uint64_t AndMask = ~(MFI.getMaxAlign().value() - 1);
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1850) 
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1851)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::ANDXri), AArch64::SP)
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1852)           .addReg(scratchSPReg, RegState::Kill)
24303e3ad2b5b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-13 00:30:33 +0300 1853)           .addImm(AArch64_AM::encodeLogicalImmediate(AndMask, 64));
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1854)       AFI->setStackRealigned(true);
19e2b403b4a9d llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-12 15:03:16 +0300 1855) 
19e2b403b4a9d llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-12 15:03:16 +0300 1856)       // No need for SEH instructions here; if we're realigning the stack,
19e2b403b4a9d llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-12 15:03:16 +0300 1857)       // we've set a frame pointer and already finished the SEH prologue.
19e2b403b4a9d llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-12 15:03:16 +0300 1858)       assert(!NeedsWinCFI);
27c352d26d572 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Chad Rosier             2016-03-14 18:24:34 +0000 1859)     }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1860)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1861) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1862)   // If we need a base pointer, set it up here. It's whatever the value of the
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1863)   // stack pointer is at this point. Any variable size objects will be allocated
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1864)   // after this, so we can still use the base pointer to reference locals.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1865)   //
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1866)   // FIXME: Clarify FrameSetup flags here.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1867)   // Note: Use emitFrameOffset() like above for FP if the FrameSetup flag is
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1868)   // needed.
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1869)   // For funclets the BP belongs to the containing function.
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1870)   if (!IsFunclet && RegInfo->hasBasePointer(MF)) {
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 1871)     TII->copyPhysReg(MBB, MBBI, DL, RegInfo->getBaseRegister(), AArch64::SP,
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 1872)                      false);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1873)     if (NeedsWinCFI) {
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1874)       HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1875)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_Nop))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1876)           .setMIFlag(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1877)     }
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 1878)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1879) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1880)   // The very last FrameSetup instruction indicates the end of prologue. Emit a
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1881)   // SEH opcode indicating the prologue end.
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1882)   if (NeedsWinCFI && HasWinCFI) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1883)     BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_PrologEnd))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1884)         .setMIFlag(MachineInstr::FrameSetup);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1885)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1886) 
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1887)   // SEH funclets are passed the frame pointer in X1.  If the parent
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1888)   // function uses the base register, then the base register is used
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1889)   // directly, and is not retrieved from X1.
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1890)   if (IsFunclet && F.hasPersonalityFn()) {
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1891)     EHPersonality Per = classifyEHPersonality(F.getPersonalityFn());
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1892)     if (isAsynchronousEHPersonality(Per)) {
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1893)       BuildMI(MBB, MBBI, DL, TII->get(TargetOpcode::COPY), AArch64::FP)
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1894)           .addReg(AArch64::X1)
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1895)           .setMIFlag(MachineInstr::FrameSetup);
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1896)       MBB.addLiveIn(AArch64::X1);
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1897)     }
522b4c4b88a56 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:11:16 -0700 1898)   }
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1899) 
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1900)   if (EmitCFI && !EmitAsyncCFI) {
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1901)     if (HasFP) {
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1902)       emitDefineCFAWithFP(MF, MBB, MBBI, DL, FixedObject);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1903)     } else {
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1904)       StackOffset TotalSize =
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1905)           SVEStackSize + StackOffset::getFixed((int64_t)MFI.getStackSize());
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1906)       unsigned CFIIndex = MF.addFrameInst(createDefCFA(
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1907)           *RegInfo, /*FrameReg=*/AArch64::SP, /*Reg=*/AArch64::SP, TotalSize,
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1908)           /*LastAdjustmentWasScalable=*/false));
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1909)       BuildMI(MBB, MBBI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1910)           .addCFIIndex(CFIIndex)
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1911)           .setMIFlags(MachineInstr::FrameSetup);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1912)     }
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1913)     emitCalleeSavedGPRLocations(MBB, MBBI);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1914)     emitCalleeSavedSVELocations(MBB, MBBI);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 1915)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1916) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1917) 
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1918) void AArch64FrameLowering::authenticateLR(MachineFunction &MF,
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1919)                                           MachineBasicBlock &MBB,
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1920)                                           bool NeedsWinCFI, bool *HasWinCFI) {
a88c722e687e6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2020-09-25 11:45:22 +0100 1921)   const auto &MFI = *MF.getInfo<AArch64FunctionInfo>();
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1922)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1923)   const TargetInstrInfo *TII = Subtarget.getInstrInfo();
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1924)   bool EmitAsyncCFI = MFI.needsAsyncDwarfUnwindInfo(MF);
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1925) 
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1926)   MachineBasicBlock::iterator MBBI = MBB.getFirstTerminator();
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1927)   DebugLoc DL;
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1928)   if (MBBI != MBB.end())
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1929)     DL = MBBI->getDebugLoc();
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1930) 
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1931)   // The AUTIASP instruction assembles to a hint instruction before v8.3a so
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1932)   // this instruction can safely used for any v8a architecture.
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1933)   // From v8.3a onwards there are optimised authenticate LR and return
de07cde67b5d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Kiss             2022-04-22 12:04:19 +0200 1934)   // instructions, namely RETA{A,B}, that can be used instead. In this case the
de07cde67b5d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Kiss             2022-04-22 12:04:19 +0200 1935)   // DW_CFA_AARCH64_negate_ra_state can't be emitted.
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1936)   bool TerminatorIsCombinable =
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1937)       MBBI != MBB.end() && (MBBI->getOpcode() == AArch64::RET_ReallyLR ||
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1938)                             MBBI->getOpcode() == AArch64::RET);
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1939)   if (Subtarget.hasPAuth() && TerminatorIsCombinable && !NeedsWinCFI &&
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1940)       !MF.getFunction().hasFnAttribute(Attribute::ShadowCallStack)) {
71c989ae1f77b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-10-29 16:26:58 +0000 1941)     BuildMI(MBB, MBBI, DL,
a88c722e687e6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2020-09-25 11:45:22 +0100 1942)             TII->get(MFI.shouldSignWithBKey() ? AArch64::RETAB : AArch64::RETAA))
71c989ae1f77b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-10-29 16:26:58 +0000 1943)         .copyImplicitOps(*MBBI);
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1944)     MBB.erase(MBBI);
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1945)   } else {
71c989ae1f77b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-10-29 16:26:58 +0000 1946)     BuildMI(
71c989ae1f77b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-10-29 16:26:58 +0000 1947)         MBB, MBBI, DL,
a88c722e687e6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2020-09-25 11:45:22 +0100 1948)         TII->get(MFI.shouldSignWithBKey() ? AArch64::AUTIBSP : AArch64::AUTIASP))
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1949)         .setMIFlag(MachineInstr::FrameDestroy);
de07cde67b5d2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Kiss             2022-04-22 12:04:19 +0200 1950) 
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1951)     if (EmitAsyncCFI) {
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1952)       unsigned CFIIndex =
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1953)           MF.addFrameInst(MCCFIInstruction::createNegateRAState(nullptr));
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1954)       BuildMI(MBB, MBBI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1955)           .addCFIIndex(CFIIndex)
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1956)           .setMIFlags(MachineInstr::FrameDestroy);
f2e7285b03fbf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Oliver Stannard         2023-07-27 14:36:14 +0100 1957)     }
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 1958)     if (NeedsWinCFI) {
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 1959)       *HasWinCFI = true;
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 1960)       BuildMI(MBB, MBBI, DL, TII->get(AArch64::SEH_PACSignLR))
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 1961)           .setMIFlag(MachineInstr::FrameDestroy);
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 1962)     }
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1963)   }
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1964) }
64dcdec60cdc3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Luke Cheeseman          2018-08-17 12:53:22 +0000 1965) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1966) static bool isFuncletReturnInstr(const MachineInstr &MI) {
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1967)   switch (MI.getOpcode()) {
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1968)   default:
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1969)     return false;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1970)   case AArch64::CATCHRET:
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1971)   case AArch64::CLEANUPRET:
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1972)     return true;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1973)   }
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1974) }
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1975) 
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000 1976) void AArch64FrameLowering::emitEpilogue(MachineFunction &MF,
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000 1977)                                         MachineBasicBlock &MBB) const {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 1978)   MachineBasicBlock::iterator MBBI = MBB.getLastNonDebugInstr();
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000 1979)   MachineFrameInfo &MFI = MF.getFrameInfo();
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1980)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
66834ec6e19a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Ahmed Bougacha          2015-12-16 22:54:06 +0000 1981)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
66834ec6e19a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Ahmed Bougacha          2015-12-16 22:54:06 +0000 1982)   const TargetInstrInfo *TII = Subtarget.getInstrInfo();
61b305edfd861 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Quentin Colombet        2015-05-05 17:38:16 +0000 1983)   DebugLoc DL;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1984)   bool NeedsWinCFI = needsWinCFI(MF);
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1985)   bool EmitCFI = AFI->needsAsyncDwarfUnwindInfo(MF);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 1986)   bool HasWinCFI = false;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1987)   bool IsFunclet = false;
afb4e0f289ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-10-01 10:21:24 +0300 1988)   auto WinCFI = make_scope_exit([&]() { assert(HasWinCFI == MF.hasWinCFI()); });
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1989) 
61b305edfd861 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Quentin Colombet        2015-05-05 17:38:16 +0000 1990)   if (MBB.end() != MBBI) {
61b305edfd861 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Quentin Colombet        2015-05-05 17:38:16 +0000 1991)     DL = MBBI->getDebugLoc();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 1992)     IsFunclet = isFuncletReturnInstr(*MBBI);
61b305edfd861 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Quentin Colombet        2015-05-05 17:38:16 +0000 1993)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 1994) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 1995)   auto FinishingTouches = make_scope_exit([&]() {
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1996)     if (AFI->shouldSignReturnAddress(MF))
81300f75f4da8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Anatoly Trosinenko      2023-08-11 13:07:54 +0300 1997)       authenticateLR(MF, MBB, NeedsWinCFI, &HasWinCFI);
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1998)     if (needsShadowCallStackPrologueEpilogue(MF))
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 1999)       emitShadowCallStackEpilogue(*TII, MF, MBB, MBB.getFirstTerminator(), DL);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2000)     if (EmitCFI)
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2001)       emitCalleeSavedGPRRestores(MBB, MBB.getFirstTerminator());
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 2002)     if (HasWinCFI)
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 2003)       BuildMI(MBB, MBB.getFirstTerminator(), DL,
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 2004)               TII->get(AArch64::SEH_EpilogEnd))
bd3fa318878a5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2022-10-01 18:49:32 +0300 2005)           .setMIFlag(MachineInstr::FrameDestroy);
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 2006)   });
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 2007) 
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 2008)   int64_t NumBytes = IsFunclet ? getWinEHFuncletFrameSize(MF)
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 2009)                                : MFI.getStackSize();
09cc56431078f llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Jiangning Liu           2014-05-15 01:33:17 +0000 2010) 
fa78d08675df1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Greg Fitzgerald         2015-01-19 17:40:05 +0000 2011)   // All calls are tail calls in GHC calling conv, and functions have no
fa78d08675df1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Greg Fitzgerald         2015-01-19 17:40:05 +0000 2012)   // prologue/epilogue.
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 2013)   if (MF.getFunction().getCallingConv() == CallingConv::GHC)
fa78d08675df1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Greg Fitzgerald         2015-01-19 17:40:05 +0000 2014)     return;
fa78d08675df1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Greg Fitzgerald         2015-01-19 17:40:05 +0000 2015) 
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2016)   // How much of the stack used by incoming arguments this function is expected
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2017)   // to restore in this particular epilogue.
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2018)   int64_t ArgumentStackToRestore = getArgumentStackToRestore(MF, MBB);
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 2019)   bool IsWin64 =
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 2020)       Subtarget.isCallingConvWin64(MF.getFunction().getCallingConv());
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 2021)   unsigned FixedObject = getFixedObjectSize(MF, AFI, IsWin64, IsFunclet);
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 2022) 
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2023)   int64_t AfterCSRPopSize = ArgumentStackToRestore;
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 2024)   auto PrologueSaveSize = AFI->getCalleeSavedStackSize() + FixedObject;
dc6403d1331cc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-12-04 00:54:52 +0000 2025)   // We cannot rely on the local stack size set in emitPrologue if the function
dc6403d1331cc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-12-04 00:54:52 +0000 2026)   // has funclets, as funclets have different local stack size requirements, and
dc6403d1331cc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-12-04 00:54:52 +0000 2027)   // the current value set in emitPrologue may be that of the containing
dc6403d1331cc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-12-04 00:54:52 +0000 2028)   // function.
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2029)   if (MF.hasEHFunclets())
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2030)     AFI->setLocalStackSize(NumBytes - PrologueSaveSize);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2031)   if (homogeneousPrologEpilog(MF, &MBB)) {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2032)     assert(!NeedsWinCFI);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2033)     auto LastPopI = MBB.getFirstTerminator();
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2034)     if (LastPopI != MBB.begin()) {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2035)       auto HomogeneousEpilog = std::prev(LastPopI);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2036)       if (HomogeneousEpilog->getOpcode() == AArch64::HOM_Epilog)
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2037)         LastPopI = HomogeneousEpilog;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2038)     }
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2039) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2040)     // Adjust local stack
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2041)     emitFrameOffset(MBB, LastPopI, DL, AArch64::SP, AArch64::SP,
6530ea409506a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-07-25 10:50:39 -0700 2042)                     StackOffset::getFixed(AFI->getLocalStackSize()), TII,
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2043)                     MachineInstr::FrameDestroy, false, NeedsWinCFI);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2044) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2045)     // SP has been already adjusted while restoring callee save regs.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2046)     // We've bailed-out the case with adjusting SP for arguments.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2047)     assert(AfterCSRPopSize == 0);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2048)     return;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2049)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 2050)   bool CombineSPBump = shouldCombineCSRLocalStackBumpInEpilogue(MBB, NumBytes);
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2051)   // Assume we can't combine the last pop with the sp restore.
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2052) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2053)   bool CombineAfterCSRBump = false;
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2054)   if (!CombineSPBump && PrologueSaveSize != 0) {
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2055)     MachineBasicBlock::iterator Pop = std::prev(MBB.getFirstTerminator());
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2056)     while (Pop->getOpcode() == TargetOpcode::CFI_INSTRUCTION ||
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2057)            AArch64InstrInfo::isSEHInstruction(*Pop))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2058)       Pop = std::prev(Pop);
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2059)     // Converting the last ldp to a post-index ldp is valid only if the last
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2060)     // ldp's offset is 0.
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2061)     const MachineOperand &OffsetOp = Pop->getOperand(Pop->getNumOperands() - 1);
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2062)     // If the offset is 0 and the AfterCSR pop is not actually trying to
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2063)     // allocate more stack for arguments (in space that an untimely interrupt
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2064)     // may clobber), convert it to a post-index ldp.
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2065)     if (OffsetOp.getImm() == 0 && AfterCSRPopSize >= 0) {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2066)       convertCalleeSaveRestoreToSPPrePostIncDec(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2067)           MBB, Pop, DL, TII, PrologueSaveSize, NeedsWinCFI, &HasWinCFI, EmitCFI,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2068)           MachineInstr::FrameDestroy, PrologueSaveSize);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2069)     } else {
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2070)       // If not, make sure to emit an add after the last ldp.
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2071)       // We're doing this by transfering the size to be restored from the
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2072)       // adjustment *before* the CSR pops to the adjustment *after* the CSR
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2073)       // pops.
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2074)       AfterCSRPopSize += PrologueSaveSize;
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2075)       CombineAfterCSRBump = true;
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2076)     }
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2077)   }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2078) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2079)   // Move past the restores of the callee-saved registers.
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2080)   // If we plan on combining the sp bump of the local stack size and the callee
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2081)   // save stack size, we might need to adjust the CSR save and restore offsets.
61b305edfd861 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Quentin Colombet        2015-05-05 17:38:16 +0000 2082)   MachineBasicBlock::iterator LastPopI = MBB.getFirstTerminator();
454192917b148 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-12-17 03:18:47 +0000 2083)   MachineBasicBlock::iterator Begin = MBB.begin();
454192917b148 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-12-17 03:18:47 +0000 2084)   while (LastPopI != Begin) {
454192917b148 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-12-17 03:18:47 +0000 2085)     --LastPopI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2086)     if (!LastPopI->getFlag(MachineInstr::FrameDestroy) ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2087)         IsSVECalleeSave(LastPopI)) {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2088)       ++LastPopI;
454192917b148 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-12-17 03:18:47 +0000 2089)       break;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2090)     } else if (CombineSPBump)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2091)       fixupCalleeSaveRestoreStackOffset(*LastPopI, AFI->getLocalStackSize(),
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 2092)                                         NeedsWinCFI, &HasWinCFI);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2093)   }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2094) 
afb4e0f289ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-10-01 10:21:24 +0300 2095)   if (MF.hasWinCFI()) {
afb4e0f289ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-10-01 10:21:24 +0300 2096)     // If the prologue didn't contain any SEH opcodes and didn't set the
afb4e0f289ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-10-01 10:21:24 +0300 2097)     // MF.hasWinCFI() flag, assume the epilogue won't either, and skip the
afb4e0f289ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-10-01 10:21:24 +0300 2098)     // EpilogStart - to avoid generating CFI for functions that don't need it.
000400ca0aeb3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jay Foad                2020-11-20 15:42:52 +0000 2099)     // (And as we didn't generate any prologue at all, it would be asymmetrical
afb4e0f289ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-10-01 10:21:24 +0300 2100)     // to the epilogue.) By the end of the function, we assert that
afb4e0f289ac6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-10-01 10:21:24 +0300 2101)     // HasWinCFI is equal to MF.hasWinCFI(), to verify this assumption.
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 2102)     HasWinCFI = true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2103)     BuildMI(MBB, LastPopI, DL, TII->get(AArch64::SEH_EpilogStart))
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2104)         .setMIFlag(MachineInstr::FrameDestroy);
814435fe87412 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-05-15 21:23:41 +0000 2105)   }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2106) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2107)   if (hasFP(MF) && AFI->hasSwiftAsyncContext()) {
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2108)     switch (MF.getTarget().Options.SwiftAsyncFramePointer) {
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2109)     case SwiftAsyncFramePointerMode::DeploymentBased:
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2110)       // Avoid the reload as it is GOT relative, and instead fall back to the
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2111)       // hardcoded value below.  This allows a mismatch between the OS and
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2112)       // application without immediately terminating on the difference.
de9d80c1c579e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-08-08 11:24:15 -0700 2113)       [[fallthrough]];
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2114)     case SwiftAsyncFramePointerMode::Always:
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2115)       // We need to reset FP to its untagged state on return. Bit 60 is
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2116)       // currently used to show the presence of an extended frame.
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2117) 
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2118)       // BIC x29, x29, #0x1000_0000_0000_0000
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2119)       BuildMI(MBB, MBB.getFirstTerminator(), DL, TII->get(AArch64::ANDXri),
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2120)               AArch64::FP)
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2121)           .addUse(AArch64::FP)
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2122)           .addImm(0x10fe)
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2123)           .setMIFlag(MachineInstr::FrameDestroy);
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2124)       break;
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2125) 
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2126)     case SwiftAsyncFramePointerMode::Never:
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2127)       break;
c31f0a00503a3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-03-08 20:12:59 -0800 2128)     }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2129)   }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2130) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 2131)   const StackOffset &SVEStackSize = getSVEStackSize(MF);
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 2132) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2133)   // If there is a single SP update, insert it before the ret and we're done.
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2134)   if (CombineSPBump) {
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 2135)     assert(!SVEStackSize && "Cannot combine SP bump with SVE");
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2136) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2137)     // When we are about to restore the CSRs, the CFA register is SP again.
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2138)     if (EmitCFI && hasFP(MF)) {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2139)       const AArch64RegisterInfo &RegInfo = *Subtarget.getRegisterInfo();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2140)       unsigned Reg = RegInfo.getDwarfRegNum(AArch64::SP, true);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2141)       unsigned CFIIndex =
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2142)           MF.addFrameInst(MCCFIInstruction::cfiDefCfa(nullptr, Reg, NumBytes));
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2143)       BuildMI(MBB, LastPopI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2144)           .addCFIIndex(CFIIndex)
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2145)           .setMIFlags(MachineInstr::FrameDestroy);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2146)     }
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2147) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2148)     emitFrameOffset(MBB, MBB.getFirstTerminator(), DL, AArch64::SP, AArch64::SP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2149)                     StackOffset::getFixed(NumBytes + (int64_t)AfterCSRPopSize),
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2150)                     TII, MachineInstr::FrameDestroy, false, NeedsWinCFI,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2151)                     &HasWinCFI, EmitCFI, StackOffset::getFixed(NumBytes));
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2152)     return;
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2153)   }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2154) 
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 2155)   NumBytes -= PrologueSaveSize;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2156)   assert(NumBytes >= 0 && "Negative stack allocation size!?");
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2157) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2158)   // Process the SVE callee-saves to determine what space needs to be
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2159)   // deallocated.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2160)   StackOffset DeallocateBefore = {}, DeallocateAfter = SVEStackSize;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2161)   MachineBasicBlock::iterator RestoreBegin = LastPopI, RestoreEnd = LastPopI;
26b4ef3694973 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 14:16:55 +0100 2162)   if (int64_t CalleeSavedSize = AFI->getSVECalleeSavedStackSize()) {
5f47d4456d192 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-19 11:06:51 +0100 2163)     RestoreBegin = std::prev(RestoreEnd);
5f47d4456d192 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-19 11:06:51 +0100 2164)     while (RestoreBegin != MBB.begin() &&
5f47d4456d192 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-19 11:06:51 +0100 2165)            IsSVECalleeSave(std::prev(RestoreBegin)))
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2166)       --RestoreBegin;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2167) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2168)     assert(IsSVECalleeSave(RestoreBegin) &&
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2169)            IsSVECalleeSave(std::prev(RestoreEnd)) && "Unexpected instruction");
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2170) 
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2171)     StackOffset CalleeSavedSizeAsOffset =
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2172)         StackOffset::getScalable(CalleeSavedSize);
26b4ef3694973 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 14:16:55 +0100 2173)     DeallocateBefore = SVEStackSize - CalleeSavedSizeAsOffset;
26b4ef3694973 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 14:16:55 +0100 2174)     DeallocateAfter = CalleeSavedSizeAsOffset;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2175)   }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2176) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 2177)   // Deallocate the SVE area.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2178)   if (SVEStackSize) {
8f623f4ab0ceb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bradley Smith           2022-04-28 11:11:11 +0000 2179)     // If we have stack realignment or variable sized objects on the stack,
8f623f4ab0ceb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bradley Smith           2022-04-28 11:11:11 +0000 2180)     // restore the stack pointer from the frame pointer prior to SVE CSR
8f623f4ab0ceb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bradley Smith           2022-04-28 11:11:11 +0000 2181)     // restoration.
8f623f4ab0ceb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bradley Smith           2022-04-28 11:11:11 +0000 2182)     if (AFI->isStackRealigned() || MFI.hasVarSizedObjects()) {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2183)       if (int64_t CalleeSavedSize = AFI->getSVECalleeSavedStackSize()) {
cda2eb3ad2bbe llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-28 12:11:09 +0100 2184)         // Set SP to start of SVE callee-save area from which they can
cda2eb3ad2bbe llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-28 12:11:09 +0100 2185)         // be reloaded. The code below will deallocate the stack space
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2186)         // space by moving FP -> SP.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2187)         emitFrameOffset(MBB, RestoreBegin, DL, AArch64::SP, AArch64::FP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2188)                         StackOffset::getScalable(-CalleeSavedSize), TII,
cda2eb3ad2bbe llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-28 12:11:09 +0100 2189)                         MachineInstr::FrameDestroy);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2190)       }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2191)     } else {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2192)       if (AFI->getSVECalleeSavedStackSize()) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2193)         // Deallocate the non-SVE locals first before we can deallocate (and
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2194)         // restore callee saves) from the SVE area.
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2195)         emitFrameOffset(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2196)             MBB, RestoreBegin, DL, AArch64::SP, AArch64::SP,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2197)             StackOffset::getFixed(NumBytes), TII, MachineInstr::FrameDestroy,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2198)             false, false, nullptr, EmitCFI && !hasFP(MF),
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2199)             SVEStackSize + StackOffset::getFixed(NumBytes + PrologueSaveSize));
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2200)         NumBytes = 0;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2201)       }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2202) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2203)       emitFrameOffset(MBB, RestoreBegin, DL, AArch64::SP, AArch64::SP,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2204)                       DeallocateBefore, TII, MachineInstr::FrameDestroy, false,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2205)                       false, nullptr, EmitCFI && !hasFP(MF),
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2206)                       SVEStackSize +
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2207)                           StackOffset::getFixed(NumBytes + PrologueSaveSize));
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2208) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2209)       emitFrameOffset(MBB, RestoreEnd, DL, AArch64::SP, AArch64::SP,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2210)                       DeallocateAfter, TII, MachineInstr::FrameDestroy, false,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2211)                       false, nullptr, EmitCFI && !hasFP(MF),
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2212)                       DeallocateAfter +
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2213)                           StackOffset::getFixed(NumBytes + PrologueSaveSize));
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2214)     }
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2215)     if (EmitCFI)
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2216)       emitCalleeSavedSVERestores(MBB, RestoreEnd);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2217)   }
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 2218) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2219)   if (!hasFP(MF)) {
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2220)     bool RedZone = canUseRedZone(MF);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2221)     // If this was a redzone leaf function, we don't need to restore the
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2222)     // stack pointer (but we may need to pop stack args for fastcc).
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2223)     if (RedZone && AfterCSRPopSize == 0)
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2224)       return;
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2225) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2226)     // Pop the local variables off the stack. If there are no callee-saved
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2227)     // registers, it means we are actually positioned at the terminator and can
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2228)     // combine stack increment for the locals and the stack increment for
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2229)     // callee-popped arguments into (possibly) a single instruction and be done.
eacf4e408bb6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-08-01 21:13:54 +0000 2230)     bool NoCalleeSaveRestore = PrologueSaveSize == 0;
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 2231)     int64_t StackRestoreBytes = RedZone ? 0 : NumBytes;
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2232)     if (NoCalleeSaveRestore)
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2233)       StackRestoreBytes += AfterCSRPopSize;
c855e92ca9cf8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-27 15:30:54 +0000 2234) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2235)     emitFrameOffset(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2236)         MBB, LastPopI, DL, AArch64::SP, AArch64::SP,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2237)         StackOffset::getFixed(StackRestoreBytes), TII,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2238)         MachineInstr::FrameDestroy, false, NeedsWinCFI, &HasWinCFI, EmitCFI,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2239)         StackOffset::getFixed((RedZone ? 0 : NumBytes) + PrologueSaveSize));
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2240) 
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2241)     // If we were able to combine the local stack pop with the argument pop,
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2242)     // then we're done.
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2243)     if (NoCalleeSaveRestore || AfterCSRPopSize == 0) {
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2244)       return;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2245)     }
c855e92ca9cf8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-27 15:30:54 +0000 2246) 
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2247)     NumBytes = 0;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2248)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2249) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2250)   // Restore the original stack pointer.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2251)   // FIXME: Rather than doing the math here, we should instead just use
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2252)   // non-post-indexed loads for the restores if we aren't actually going to
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2253)   // be able to save any instructions.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2254)   if (!IsFunclet && (MFI.hasVarSizedObjects() || AFI->isStackRealigned())) {
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2255)     emitFrameOffset(
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2256)         MBB, LastPopI, DL, AArch64::SP, AArch64::FP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2257)         StackOffset::getFixed(-AFI->getCalleeSaveBaseToFrameRecordOffset()),
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2258)         TII, MachineInstr::FrameDestroy, false, NeedsWinCFI);
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2259)   } else if (NumBytes)
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000 2260)     emitFrameOffset(MBB, LastPopI, DL, AArch64::SP, AArch64::SP,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2261)                     StackOffset::getFixed(NumBytes), TII,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2262)                     MachineInstr::FrameDestroy, false, NeedsWinCFI);
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2263) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2264)   // When we are about to restore the CSRs, the CFA register is SP again.
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2265)   if (EmitCFI && hasFP(MF)) {
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2266)     const AArch64RegisterInfo &RegInfo = *Subtarget.getRegisterInfo();
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2267)     unsigned Reg = RegInfo.getDwarfRegNum(AArch64::SP, true);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2268)     unsigned CFIIndex = MF.addFrameInst(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2269)         MCCFIInstruction::cfiDefCfa(nullptr, Reg, PrologueSaveSize));
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2270)     BuildMI(MBB, LastPopI, DL, TII->get(TargetOpcode::CFI_INSTRUCTION))
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2271)         .addCFIIndex(CFIIndex)
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2272)         .setMIFlags(MachineInstr::FrameDestroy);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2273)   }
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2274) 
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2275)   // This must be placed after the callee-save restore code because that code
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2276)   // assumes the SP is at the same location as it was after the callee-save save
a1c6269c91a09 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-23 16:54:36 +0000 2277)   // code in the prologue.
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2278)   if (AfterCSRPopSize) {
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2279)     assert(AfterCSRPopSize > 0 && "attempting to reallocate arg stack that an "
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2280)                                   "interrupt may have clobbered");
f11eb3ebe7772 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2018-04-04 21:55:44 +0000 2281) 
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2282)     emitFrameOffset(
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2283)         MBB, MBB.getFirstTerminator(), DL, AArch64::SP, AArch64::SP,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2284)         StackOffset::getFixed(AfterCSRPopSize), TII, MachineInstr::FrameDestroy,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2285)         false, NeedsWinCFI, &HasWinCFI, EmitCFI,
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2286)         StackOffset::getFixed(CombineAfterCSRBump ? PrologueSaveSize : 0));
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2287)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2288) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2289) 
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 2290) bool AArch64FrameLowering::enableCFIFixup(MachineFunction &MF) const {
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 2291)   return TargetFrameLowering::enableCFIFixup(MF) &&
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 2292)          MF.getInfo<AArch64FunctionInfo>()->needsAsyncDwarfUnwindInfo(MF);
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 2293) }
6e54fccede402 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Igor Kudrin             2023-07-01 14:45:59 -0700 2294) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2295) /// getFrameIndexReference - Provide a base+offset reference to an FI slot for
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2296) /// debug info.  It's the same as what we use for resolving the code-gen
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2297) /// references for now.  FIXME: This can go wrong when references are
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2298) /// SP-relative and simple call frames aren't used.
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2299) StackOffset
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2300) AArch64FrameLowering::getFrameIndexReference(const MachineFunction &MF, int FI,
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2301)                                              Register &FrameReg) const {
4608868d2f4c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2019-06-22 00:06:51 +0000 2302)   return resolveFrameIndexReference(
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2303)       MF, FI, FrameReg,
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2304)       /*PreferFP=*/
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2305)       MF.getFunction().hasFnAttribute(Attribute::SanitizeHWAddress),
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2306)       /*ForSimm=*/false);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2307) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2308) 
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2309) StackOffset
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2310) AArch64FrameLowering::getNonLocalFrameIndexReference(const MachineFunction &MF,
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2311)                                                      int FI) const {
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2312)   return StackOffset::getFixed(getSEHFrameIndexOffset(MF, FI));
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2313) }
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2314) 
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2315) static StackOffset getFPOffset(const MachineFunction &MF,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2316)                                int64_t ObjectOffset) {
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2317)   const auto *AFI = MF.getInfo<AArch64FunctionInfo>();
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2318)   const auto &Subtarget = MF.getSubtarget<AArch64Subtarget>();
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2319)   bool IsWin64 =
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2320)       Subtarget.isCallingConvWin64(MF.getFunction().getCallingConv());
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 2321)   unsigned FixedObject =
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 2322)       getFixedObjectSize(MF, AFI, IsWin64, /*IsFunclet=*/false);
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2323)   int64_t CalleeSaveSize = AFI->getCalleeSavedStackSize(MF.getFrameInfo());
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2324)   int64_t FPAdjust =
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2325)       CalleeSaveSize - AFI->getCalleeSaveBaseToFrameRecordOffset();
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2326)   return StackOffset::getFixed(ObjectOffset + FixedObject + FPAdjust);
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2327) }
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2328) 
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2329) static StackOffset getStackOffset(const MachineFunction &MF,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2330)                                   int64_t ObjectOffset) {
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2331)   const auto &MFI = MF.getFrameInfo();
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2332)   return StackOffset::getFixed(ObjectOffset + (int64_t)MFI.getStackSize());
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2333) }
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2334) 
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 2335)   // TODO: This function currently does not work for scalable vectors.
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2336) int AArch64FrameLowering::getSEHFrameIndexOffset(const MachineFunction &MF,
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2337)                                                  int FI) const {
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2338)   const auto *RegInfo = static_cast<const AArch64RegisterInfo *>(
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2339)       MF.getSubtarget().getRegisterInfo());
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2340)   int ObjectOffset = MF.getFrameInfo().getObjectOffset(FI);
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2341)   return RegInfo->getLocalAddressRegister(MF) == AArch64::FP
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2342)              ? getFPOffset(MF, ObjectOffset).getFixed()
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2343)              : getStackOffset(MF, ObjectOffset).getFixed();
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2344) }
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2345) 
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000 2346) StackOffset AArch64FrameLowering::resolveFrameIndexReference(
2481f26ac3f22 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2020-04-07 16:33:58 -0400 2347)     const MachineFunction &MF, int FI, Register &FrameReg, bool PreferFP,
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000 2348)     bool ForSimm) const {
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2349)   const auto &MFI = MF.getFrameInfo();
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 2350)   int64_t ObjectOffset = MFI.getObjectOffset(FI);
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2351)   bool isFixed = MFI.isFixedObjectIndex(FI);
914e2f5a02f4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2021-01-12 16:19:37 +0800 2352)   bool isSVE = MFI.getStackID(FI) == TargetStackID::ScalableVector;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2353)   return resolveFrameOffsetReference(MF, ObjectOffset, isFixed, isSVE, FrameReg,
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2354)                                      PreferFP, ForSimm);
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2355) }
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2356) 
612b038966103 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-06 13:06:40 +0000 2357) StackOffset AArch64FrameLowering::resolveFrameOffsetReference(
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 2358)     const MachineFunction &MF, int64_t ObjectOffset, bool isFixed, bool isSVE,
2481f26ac3f22 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2020-04-07 16:33:58 -0400 2359)     Register &FrameReg, bool PreferFP, bool ForSimm) const {
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2360)   const auto &MFI = MF.getFrameInfo();
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2361)   const auto *RegInfo = static_cast<const AArch64RegisterInfo *>(
fc6de428c8ab1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2014-08-05 02:39:49 +0000 2362)       MF.getSubtarget().getRegisterInfo());
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2363)   const auto *AFI = MF.getInfo<AArch64FunctionInfo>();
70d484d94e3ec llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 21:41:33 +0000 2364)   const auto &Subtarget = MF.getSubtarget<AArch64Subtarget>();
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2365) 
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2366)   int64_t FPOffset = getFPOffset(MF, ObjectOffset).getFixed();
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2367)   int64_t Offset = getStackOffset(MF, ObjectOffset).getFixed();
32452487ae999 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgeniy Stepanov        2019-07-12 21:13:55 +0000 2368)   bool isCSR =
d6a7da80aae62 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-29 12:49:34 +0000 2369)       !isFixed && ObjectOffset >= -((int)AFI->getCalleeSavedStackSize(MFI));
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2370) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 2371)   const StackOffset &SVEStackSize = getSVEStackSize(MF);
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 2372) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2373)   // Use frame pointer to reference fixed objects. Use it for locals if
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 2374)   // there are VLAs or a dynamically realigned SP (and thus the SP isn't
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 2375)   // reliable as a base). Make sure useFPForScavengingIndex() does the
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 2376)   // right thing for the emergency spill slot.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2377)   bool UseFP = false;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2378)   if (AFI->hasStackFrame() && !isSVE) {
7c65d2288bfd0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2022-03-03 14:09:26 +0000 2379)     // We shouldn't prefer using the FP to access fixed-sized stack objects when
7c65d2288bfd0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2022-03-03 14:09:26 +0000 2380)     // there are scalable (SVE) objects in between the FP and the fixed-sized
7c65d2288bfd0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2022-03-03 14:09:26 +0000 2381)     // objects.
ea834c8365ca7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bradley Smith           2021-03-10 15:03:53 +0000 2382)     PreferFP &= !SVEStackSize;
ea834c8365ca7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Bradley Smith           2021-03-10 15:03:53 +0000 2383) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2384)     // Note: Keeping the following as multiple 'if' statements rather than
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2385)     // merging to a single expression for readability.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2386)     //
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2387)     // Argument access should always use the FP.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2388)     if (isFixed) {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2389)       UseFP = hasFP(MF);
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2390)     } else if (isCSR && RegInfo->hasStackRealignment(MF)) {
08ab8c9544122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2018-04-26 18:50:45 +0000 2391)       // References to the CSR area must use FP if we're re-aligning the stack
08ab8c9544122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2018-04-26 18:50:45 +0000 2392)       // since the dynamically-sized alignment padding is between the SP/BP and
08ab8c9544122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2018-04-26 18:50:45 +0000 2393)       // the CSR area.
08ab8c9544122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2018-04-26 18:50:45 +0000 2394)       assert(hasFP(MF) && "Re-aligned stack must have frame pointer");
08ab8c9544122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2018-04-26 18:50:45 +0000 2395)       UseFP = true;
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2396)     } else if (hasFP(MF) && !RegInfo->hasStackRealignment(MF)) {
4608868d2f4c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2019-06-22 00:06:51 +0000 2397)       // If the FPOffset is negative and we're producing a signed immediate, we
4608868d2f4c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2019-06-22 00:06:51 +0000 2398)       // have to keep in mind that the available offset range for negative
4608868d2f4c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2019-06-22 00:06:51 +0000 2399)       // offsets is smaller than for positive ones. If an offset is available
4608868d2f4c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2019-06-22 00:06:51 +0000 2400)       // via the FP and the SP, use whichever is closest.
4608868d2f4c0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2019-06-22 00:06:51 +0000 2401)       bool FPOffsetFits = !ForSimm || FPOffset >= -256;
7c65d2288bfd0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2022-03-03 14:09:26 +0000 2402)       PreferFP |= Offset > -FPOffset && !SVEStackSize;
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2403) 
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2404)       if (MFI.hasVarSizedObjects()) {
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2405)         // If we have variable sized objects, we can use either FP or BP, as the
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2406)         // SP offset is unknown. We can use the base pointer if we have one and
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2407)         // FP is not preferred. If not, we're stuck with using FP.
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2408)         bool CanUseBP = RegInfo->hasBasePointer(MF);
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2409)         if (FPOffsetFits && CanUseBP) // Both are ok. Pick the best.
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2410)           UseFP = PreferFP;
a8f4f85d84c17 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-13 17:19:04 +0100 2411)         else if (!CanUseBP) // Can't use BP. Forced to use FP.
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2412)           UseFP = true;
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2413)         // else we can use BP and FP, but the offset from FP won't fit.
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2414)         // That will make us scavenge registers which we can probably avoid by
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2415)         // using BP. If it won't fit for BP either, we'll scavenge anyway.
6463922e3a9e2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-11 12:36:55 +0000 2416)       } else if (FPOffset >= 0) {
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2417)         // Use SP or FP, whichever gives us the best chance of the offset
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2418)         // being in range for direct access. If the FPOffset is positive,
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2419)         // that'll always be best, as the SP will be even further away.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2420)         UseFP = true;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2421)       } else if (MF.hasEHFunclets() && !RegInfo->hasBasePointer(MF)) {
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2422)         // Funclets access the locals contained in the parent's stack frame
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2423)         // via the frame pointer, so we have to use the FP in the parent
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2424)         // function.
dc1e778369f14 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Mandeep Singh Grang     2019-02-01 23:42:34 +0000 2425)         (void) Subtarget;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2426)         assert(
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2427)             Subtarget.isCallingConvWin64(MF.getFunction().getCallingConv()) &&
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2428)             "Funclets should only be present on Win64");
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2429)         UseFP = true;
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2430)       } else {
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2431)         // We have the choice between FP and (SP or BP).
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2432)         if (FPOffsetFits && PreferFP) // If FP is the best fit, use it.
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2433)           UseFP = true;
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2434)       }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2435)     }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2436)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2437) 
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2438)   assert(
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2439)       ((isFixed || isCSR) || !RegInfo->hasStackRealignment(MF) || !UseFP) &&
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2440)       "In the presence of dynamic stack pointer realignment, "
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2441)       "non-argument/CSR objects cannot be accessed through the frame pointer");
17cb8982f4ac4 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2015-04-09 08:49:47 +0000 2442) 
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2443)   if (isSVE) {
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2444)     StackOffset FPOffset =
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2445)         StackOffset::get(-AFI->getCalleeSaveBaseToFrameRecordOffset(), ObjectOffset);
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2446)     StackOffset SPOffset =
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2447)         SVEStackSize +
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2448)         StackOffset::get(MFI.getStackSize() - AFI->getCalleeSavedStackSize(),
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2449)                          ObjectOffset);
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2450)     // Always use the FP for SVE spills if available and beneficial.
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2451)     if (hasFP(MF) && (SPOffset.getFixed() ||
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2452)                       FPOffset.getScalable() < SPOffset.getScalable() ||
a9968c0a339ab llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tomas Matheson          2021-03-15 13:01:34 +0000 2453)                       RegInfo->hasStackRealignment(MF))) {
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2454)       FrameReg = RegInfo->getFrameRegister(MF);
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2455)       return FPOffset;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2456)     }
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2457) 
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2458)     FrameReg = RegInfo->hasBasePointer(MF) ? RegInfo->getBaseRegister()
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2459)                                            : (unsigned)AArch64::SP;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2460)     return SPOffset;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2461)   }
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2462) 
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2463)   StackOffset ScalableOffset = {};
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2464)   if (UseFP && !(isFixed || isCSR))
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2465)     ScalableOffset = -SVEStackSize;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2466)   if (!UseFP && (isFixed || isCSR))
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2467)     ScalableOffset = SVEStackSize;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 2468) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2469)   if (UseFP) {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2470)     FrameReg = RegInfo->getFrameRegister(MF);
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2471)     return StackOffset::getFixed(FPOffset) + ScalableOffset;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2472)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2473) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2474)   // Use the base pointer if we have one.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2475)   if (RegInfo->hasBasePointer(MF))
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2476)     FrameReg = RegInfo->getBaseRegister();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2477)   else {
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2478)     assert(!MFI.hasVarSizedObjects() &&
f2c22050e8211 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-04-10 11:29:40 +0000 2479)            "Can't use SP when we have var sized objects.");
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000 2480)     FrameReg = AArch64::SP;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2481)     // If we're using the red zone for this function, the SP won't actually
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2482)     // be adjusted, so the offsets will be negative. They're also all
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2483)     // within range of the signed 9-bit immediate instructions.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2484)     if (canUseRedZone(MF))
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2485)       Offset -= AFI->getLocalStackSize();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2486)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2487) 
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 2488)   return StackOffset::getFixed(Offset) + ScalableOffset;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2489) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2490) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2491) static unsigned getPrologueDeath(MachineFunction &MF, unsigned Reg) {
74a0bd319ad9a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-04-13 21:43:16 +0000 2492)   // Do not set a kill flag on values that are also marked as live-in. This
74a0bd319ad9a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-04-13 21:43:16 +0000 2493)   // happens with the @llvm-returnaddress intrinsic and with arguments passed in
74a0bd319ad9a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-04-13 21:43:16 +0000 2494)   // callee saved registers.
74a0bd319ad9a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-04-13 21:43:16 +0000 2495)   // Omitting the kill flags is conservatively correct even if the live-in
74a0bd319ad9a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-04-13 21:43:16 +0000 2496)   // is not used after all.
74a0bd319ad9a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-04-13 21:43:16 +0000 2497)   bool IsLiveIn = MF.getRegInfo().isLiveIn(Reg);
74a0bd319ad9a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-04-13 21:43:16 +0000 2498)   return getKillRegState(!IsLiveIn);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2499) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2500) 
5751814edada5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Manman Ren              2016-04-11 21:08:06 +0000 2501) static bool produceCompactUnwindFrame(MachineFunction &MF) {
5751814edada5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Manman Ren              2016-04-11 21:08:06 +0000 2502)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 2503)   AttributeList Attrs = MF.getFunction().getAttributes();
5751814edada5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Manman Ren              2016-04-11 21:08:06 +0000 2504)   return Subtarget.isTargetMachO() &&
5751814edada5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Manman Ren              2016-04-11 21:08:06 +0000 2505)          !(Subtarget.getTargetLowering()->supportSwiftError() &&
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2506)            Attrs.hasAttrSomewhere(Attribute::SwiftError)) &&
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2507)          MF.getFunction().getCallingConv() != CallingConv::SwiftTail;
5751814edada5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Manman Ren              2016-04-11 21:08:06 +0000 2508) }
5751814edada5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Manman Ren              2016-04-11 21:08:06 +0000 2509) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2510) static bool invalidateWindowsRegisterPairing(unsigned Reg1, unsigned Reg2,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2511)                                              bool NeedsWinCFI, bool IsFirst,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2512)                                              const TargetRegisterInfo *TRI) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2513)   // If we are generating register pairs for a Windows function that requires
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2514)   // EH support, then pair consecutive registers only.  There are no unwind
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2515)   // opcodes for saves/restores of non-consectuve register pairs.
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2516)   // The unwind opcodes are save_regp, save_regp_x, save_fregp, save_frepg_x,
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2517)   // save_lrpair.
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2518)   // https://docs.microsoft.com/en-us/cpp/build/arm64-exception-handling
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2519) 
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2520)   if (Reg2 == AArch64::FP)
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2521)     return true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2522)   if (!NeedsWinCFI)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2523)     return false;
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2524)   if (TRI->getEncodingValue(Reg2) == TRI->getEncodingValue(Reg1) + 1)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2525)     return false;
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2526)   // If pairing a GPR with LR, the pair can be described by the save_lrpair
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2527)   // opcode. If this is the first register pair, it would end up with a
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2528)   // predecrement, but there's no save_lrpair_x opcode, so we can only do this
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2529)   // if LR is paired with something else than the first register.
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2530)   // The save_lrpair opcode requires the first register to be an odd one.
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2531)   if (Reg1 >= AArch64::X19 && Reg1 <= AArch64::X27 &&
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2532)       (Reg1 - AArch64::X19) % 2 == 0 && Reg2 == AArch64::LR && !IsFirst)
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2533)     return false;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2534)   return true;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2535) }
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2536) 
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2537) /// Returns true if Reg1 and Reg2 cannot be paired using a ldp/stp instruction.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2538) /// WindowsCFI requires that only consecutive registers can be paired.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2539) /// LR and FP need to be allocated together when the frame needs to save
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2540) /// the frame-record. This means any other register pairing with LR is invalid.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2541) static bool invalidateRegisterPairing(unsigned Reg1, unsigned Reg2,
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2542)                                       bool UsesWinAAPCS, bool NeedsWinCFI,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2543)                                       bool NeedsFrameRecord, bool IsFirst,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2544)                                       const TargetRegisterInfo *TRI) {
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2545)   if (UsesWinAAPCS)
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2546)     return invalidateWindowsRegisterPairing(Reg1, Reg2, NeedsWinCFI, IsFirst,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2547)                                             TRI);
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2548) 
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2549)   // If we need to store the frame record, don't pair any register
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2550)   // with LR other than FP.
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2551)   if (NeedsFrameRecord)
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2552)     return Reg2 == AArch64::LR;
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2553) 
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2554)   return false;
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2555) }
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2556) 
b7d3311c77f57 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2016-08-06 11:13:10 +0000 2557) namespace {
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000 2558) 
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2559) struct RegPairInfo {
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000 2560)   unsigned Reg1 = AArch64::NoRegister;
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000 2561)   unsigned Reg2 = AArch64::NoRegister;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2562)   int FrameIdx;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2563)   int Offset;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2564)   enum RegType { GPR, FPR64, FPR128, PPR, ZPR } Type;
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000 2565) 
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000 2566)   RegPairInfo() = default;
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000 2567) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2568)   bool isPaired() const { return Reg2 != AArch64::NoRegister; }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2569) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2570)   unsigned getScale() const {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2571)     switch (Type) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2572)     case PPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2573)       return 2;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2574)     case GPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2575)     case FPR64:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2576)       return 8;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2577)     case ZPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2578)     case FPR128:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2579)       return 16;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2580)     }
b47c7cd4d6a13 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Simon Pilgrim           2019-11-11 11:18:44 +0000 2581)     llvm_unreachable("Unsupported type");
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2582)   }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2583) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2584)   bool isScalable() const { return Type == PPR || Type == ZPR; }
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2585) };
11f6907f408ac llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eugene Zelenko          2017-01-25 00:29:26 +0000 2586) 
b7d3311c77f57 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2016-08-06 11:13:10 +0000 2587) } // end anonymous namespace
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2588) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2589) static void computeCalleeSaveRegisterPairs(
e4230a9f6c518 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2020-02-08 12:14:37 +0100 2590)     MachineFunction &MF, ArrayRef<CalleeSavedInfo> CSI,
f11eb3ebe7772 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2018-04-04 21:55:44 +0000 2591)     const TargetRegisterInfo *TRI, SmallVectorImpl<RegPairInfo> &RegPairs,
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 2592)     bool NeedsFrameRecord) {
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2593) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2594)   if (CSI.empty())
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2595)     return;
775aaeb7656dc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2015-11-05 21:54:58 +0000 2596) 
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2597)   bool IsWindows = isTargetWindows(MF);
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2598)   bool NeedsWinCFI = needsWinCFI(MF);
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2599)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
941a705b7bf15 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2016-07-28 18:40:00 +0000 2600)   MachineFrameInfo &MFI = MF.getFrameInfo();
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 2601)   CallingConv::ID CC = MF.getFunction().getCallingConv();
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2602)   unsigned Count = CSI.size();
2792b3f02f13e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Roman Levenstein        2016-03-10 04:35:09 +0000 2603)   (void)CC;
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2604)   // MachO's compact unwind format relies on all registers being stored in
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2605)   // pairs.
71aecbb75c7d8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Vladislav Dzhidzhoev    2022-07-27 23:54:56 +0300 2606)   assert((!produceCompactUnwindFrame(MF) || CC == CallingConv::PreserveMost ||
d75e70d7ae1f8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Kiss             2023-04-28 14:01:51 +0200 2607)           CC == CallingConv::PreserveAll || CC == CallingConv::CXX_FAST_TLS ||
d75e70d7ae1f8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Kiss             2023-04-28 14:01:51 +0200 2608)           CC == CallingConv::Win64 || (Count & 1) == 0) &&
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2609)          "Odd number of callee-saved regs to spill!");
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2610)   int ByteOffset = AFI->getCalleeSavedStackSize();
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2611)   int StackFillDir = -1;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2612)   int RegInc = 1;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2613)   unsigned FirstReg = 0;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2614)   if (NeedsWinCFI) {
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2615)     // For WinCFI, fill the stack from the bottom up.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2616)     ByteOffset = 0;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2617)     StackFillDir = 1;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2618)     // As the CSI array is reversed to match PrologEpilogInserter, iterate
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2619)     // backwards, to pair up registers starting from lower numbered registers.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2620)     RegInc = -1;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2621)     FirstReg = Count - 1;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2622)   }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2623)   int ScalableByteOffset = AFI->getSVECalleeSavedStackSize();
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2624)   bool NeedGapToAlignStack = AFI->hasCalleeSaveStackFreeSpace();
bb3344c7d8c27 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-08-04 11:10:32 +0100 2625) 
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2626)   // When iterating backwards, the loop condition relies on unsigned wraparound.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2627)   for (unsigned i = FirstReg; i < Count; i += RegInc) {
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2628)     RegPairInfo RPI;
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2629)     RPI.Reg1 = CSI[i].getReg();
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2630) 
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2631)     if (AArch64::GPR64RegClass.contains(RPI.Reg1))
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2632)       RPI.Type = RegPairInfo::GPR;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2633)     else if (AArch64::FPR64RegClass.contains(RPI.Reg1))
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2634)       RPI.Type = RegPairInfo::FPR64;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2635)     else if (AArch64::FPR128RegClass.contains(RPI.Reg1))
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2636)       RPI.Type = RegPairInfo::FPR128;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2637)     else if (AArch64::ZPRRegClass.contains(RPI.Reg1))
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2638)       RPI.Type = RegPairInfo::ZPR;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2639)     else if (AArch64::PPRRegClass.contains(RPI.Reg1))
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2640)       RPI.Type = RegPairInfo::PPR;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2641)     else
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2642)       llvm_unreachable("Unsupported register class.");
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2643) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2644)     // Add the next reg to the pair if it is in the same register class.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2645)     if (unsigned(i + RegInc) < Count) {
d6b0734837124 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jim Lin                 2022-01-19 17:25:52 +0800 2646)       Register NextReg = CSI[i + RegInc].getReg();
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2647)       bool IsFirst = i == FirstReg;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2648)       switch (RPI.Type) {
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2649)       case RegPairInfo::GPR:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2650)         if (AArch64::GPR64RegClass.contains(NextReg) &&
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2651)             !invalidateRegisterPairing(RPI.Reg1, NextReg, IsWindows,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2652)                                        NeedsWinCFI, NeedsFrameRecord, IsFirst,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2653)                                        TRI))
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2654)           RPI.Reg2 = NextReg;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2655)         break;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2656)       case RegPairInfo::FPR64:
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2657)         if (AArch64::FPR64RegClass.contains(NextReg) &&
890af2f003c83 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:26:45 +0300 2658)             !invalidateWindowsRegisterPairing(RPI.Reg1, NextReg, NeedsWinCFI,
49510c50200cf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-11-05 10:11:00 +0000 2659)                                               IsFirst, TRI))
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2660)           RPI.Reg2 = NextReg;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2661)         break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2662)       case RegPairInfo::FPR128:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2663)         if (AArch64::FPR128RegClass.contains(NextReg))
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2664)           RPI.Reg2 = NextReg;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2665)         break;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2666)       case RegPairInfo::PPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2667)       case RegPairInfo::ZPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2668)         break;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2669)       }
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2670)     }
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2671) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2672)     // GPRs and FPRs are saved in pairs of 64-bit regs. We expect the CSI
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2673)     // list to come in sorted by frame index so that we can issue the store
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2674)     // pair instructions directly. Assert if we see anything otherwise.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2675)     //
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2676)     // The order of the registers in the list is controlled by
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2677)     // getCalleeSavedRegs(), so they will always be in-order, as well.
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2678)     assert((!RPI.isPaired() ||
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2679)             (CSI[i].getFrameIdx() + RegInc == CSI[i + RegInc].getFrameIdx())) &&
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2680)            "Out of order callee saved regs!");
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2681) 
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2682)     assert((!RPI.isPaired() || !NeedsFrameRecord || RPI.Reg2 != AArch64::FP ||
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2683)             RPI.Reg1 == AArch64::LR) &&
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2684)            "FrameRecord must be allocated together with LR");
f28e1128d9efb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-16 15:42:28 +0000 2685) 
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2686)     // Windows AAPCS has FP and LR reversed.
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2687)     assert((!RPI.isPaired() || !NeedsFrameRecord || RPI.Reg1 != AArch64::FP ||
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2688)             RPI.Reg2 == AArch64::LR) &&
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2689)            "FrameRecord must be allocated together with LR");
1cc8fff420a76 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanne Wouda             2020-01-14 13:16:57 +0000 2690) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2691)     // MachO's compact unwind format relies on all registers being stored in
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2692)     // adjacent register pairs.
71aecbb75c7d8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Vladislav Dzhidzhoev    2022-07-27 23:54:56 +0300 2693)     assert((!produceCompactUnwindFrame(MF) || CC == CallingConv::PreserveMost ||
d75e70d7ae1f8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Kiss             2023-04-28 14:01:51 +0200 2694)             CC == CallingConv::PreserveAll || CC == CallingConv::CXX_FAST_TLS ||
d75e70d7ae1f8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Kiss             2023-04-28 14:01:51 +0200 2695)             CC == CallingConv::Win64 ||
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2696)             (RPI.isPaired() &&
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2697)              ((RPI.Reg1 == AArch64::LR && RPI.Reg2 == AArch64::FP) ||
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2698)               RPI.Reg1 + 1 == RPI.Reg2))) &&
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2699)            "Callee-save registers not saved as adjacent register pair!");
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2700) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2701)     RPI.FrameIdx = CSI[i].getFrameIdx();
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2702)     if (NeedsWinCFI &&
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2703)         RPI.isPaired()) // RPI.FrameIdx must be the lower index of the pair
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2704)       RPI.FrameIdx = CSI[i + RegInc].getFrameIdx();
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2705) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2706)     int Scale = RPI.getScale();
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2707) 
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2708)     int OffsetPre = RPI.isScalable() ? ScalableByteOffset : ByteOffset;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2709)     assert(OffsetPre % Scale == 0);
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2710) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2711)     if (RPI.isScalable())
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2712)       ScalableByteOffset += StackFillDir * Scale;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2713)     else
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2714)       ByteOffset += StackFillDir * (RPI.isPaired() ? 2 * Scale : Scale);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2715) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2716)     // Swift's async context is directly before FP, so allocate an extra
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2717)     // 8 bytes for it.
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2718)     if (NeedsFrameRecord && AFI->hasSwiftAsyncContext() &&
a90228b911d3c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hiroshi Yamauchi        2023-07-26 16:58:00 -0700 2719)         ((!IsWindows && RPI.Reg2 == AArch64::FP) ||
a90228b911d3c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hiroshi Yamauchi        2023-07-26 16:58:00 -0700 2720)          (IsWindows && RPI.Reg2 == AArch64::LR)))
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2721)       ByteOffset += StackFillDir * 8;
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2722) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2723)     assert(!(RPI.isScalable() && RPI.isPaired()) &&
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2724)            "Paired spill/fill instructions don't exist for SVE vectors");
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2725) 
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2726)     // Round up size of non-pair to pair size if we need to pad the
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2727)     // callee-save area to ensure 16-byte alignment.
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2728)     if (NeedGapToAlignStack && !NeedsWinCFI &&
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2729)         !RPI.isScalable() && RPI.Type != RegPairInfo::FPR128 &&
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2730)         !RPI.isPaired() && ByteOffset % 16 != 0) {
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2731)       ByteOffset += 8 * StackFillDir;
1dffa2550b535 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-04-01 13:49:04 +0000 2732)       assert(MFI.getObjectAlign(RPI.FrameIdx) <= Align(16));
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2733)       // A stack frame with a gap looks like this, bottom up:
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2734)       // d9, d8. x21, gap, x20, x19.
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2735)       // Set extra alignment on the x21 object to create the gap above it.
1dffa2550b535 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-04-01 13:49:04 +0000 2736)       MFI.setObjectAlignment(RPI.FrameIdx, Align(16));
82a0e808bb2cd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2020-11-19 12:32:50 +0000 2737)       NeedGapToAlignStack = false;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2738)     }
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2739) 
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2740)     int OffsetPost = RPI.isScalable() ? ScalableByteOffset : ByteOffset;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2741)     assert(OffsetPost % Scale == 0);
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2742)     // If filling top down (default), we want the offset after incrementing it.
cd09089549562 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2023-08-19 00:28:19 +0300 2743)     // If filling bottom up (WinCFI) we need the original offset.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2744)     int Offset = NeedsWinCFI ? OffsetPre : OffsetPost;
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2745) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2746)     // The FP, LR pair goes 8 bytes into our expanded 24-byte slot so that the
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2747)     // Swift context can directly precede FP.
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2748)     if (NeedsFrameRecord && AFI->hasSwiftAsyncContext() &&
a90228b911d3c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hiroshi Yamauchi        2023-07-26 16:58:00 -0700 2749)         ((!IsWindows && RPI.Reg2 == AArch64::FP) ||
a90228b911d3c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hiroshi Yamauchi        2023-07-26 16:58:00 -0700 2750)          (IsWindows && RPI.Reg2 == AArch64::LR)))
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 2751)       Offset += 8;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2752)     RPI.Offset = Offset / Scale;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2753) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2754)     assert(((!RPI.isScalable() && RPI.Offset >= -64 && RPI.Offset <= 63) ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2755)             (RPI.isScalable() && RPI.Offset >= -256 && RPI.Offset <= 255)) &&
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2756)            "Offset out of bounds for LDP/STP immediate");
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2757) 
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2758)     // Save the offset to frame record so that the FP register can point to the
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2759)     // innermost frame record (spilled FP and LR registers).
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2760)     if (NeedsFrameRecord && ((!IsWindows && RPI.Reg1 == AArch64::LR &&
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2761)                               RPI.Reg2 == AArch64::FP) ||
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2762)                              (IsWindows && RPI.Reg1 == AArch64::FP &&
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2763)                               RPI.Reg2 == AArch64::LR)))
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2764)       AFI->setCalleeSaveBaseToFrameRecordOffset(Offset);
5987da8764b71 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Owen Anderson           2020-09-01 19:25:30 +0000 2765) 
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2766)     RegPairs.push_back(RPI);
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2767)     if (RPI.isPaired())
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2768)       i += RegInc;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2769)   }
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2770)   if (NeedsWinCFI) {
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2771)     // If we need an alignment gap in the stack, align the topmost stack
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2772)     // object. A stack frame with a gap looks like this, bottom up:
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2773)     // x19, d8. d9, gap.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2774)     // Set extra alignment on the topmost stack object (the first element in
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2775)     // CSI, which goes top down), to create the gap above it.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2776)     if (AFI->hasCalleeSaveStackFreeSpace())
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2777)       MFI.setObjectAlignment(CSI[0].getFrameIdx(), Align(16));
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2778)     // We iterated bottom up over the registers; flip RegPairs back to top
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2779)     // down order.
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 2780)     std::reverse(RegPairs.begin(), RegPairs.end());
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2781)   }
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2782) }
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2783) 
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2784) bool AArch64FrameLowering::spillCalleeSavedRegisters(
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2785)     MachineBasicBlock &MBB, MachineBasicBlock::iterator MI,
e4230a9f6c518 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2020-02-08 12:14:37 +0100 2786)     ArrayRef<CalleeSavedInfo> CSI, const TargetRegisterInfo *TRI) const {
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2787)   MachineFunction &MF = *MBB.getParent();
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2788)   const TargetInstrInfo &TII = *MF.getSubtarget().getInstrInfo();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2789)   bool NeedsWinCFI = needsWinCFI(MF);
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2790)   DebugLoc DL;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2791)   SmallVector<RegPairInfo, 8> RegPairs;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2792) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 2793)   computeCalleeSaveRegisterPairs(MF, CSI, TRI, RegPairs, hasFP(MF));
f11eb3ebe7772 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2018-04-04 21:55:44 +0000 2794) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 2795)   const MachineRegisterInfo &MRI = MF.getRegInfo();
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2796)   if (homogeneousPrologEpilog(MF)) {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2797)     auto MIB = BuildMI(MBB, MI, DL, TII.get(AArch64::HOM_Prolog))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2798)                    .setMIFlag(MachineInstr::FrameSetup);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2799) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2800)     for (auto &RPI : RegPairs) {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2801)       MIB.addReg(RPI.Reg1);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2802)       MIB.addReg(RPI.Reg2);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2803) 
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2804)       // Update register live in.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2805)       if (!MRI.isReserved(RPI.Reg1))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2806)         MBB.addLiveIn(RPI.Reg1);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2807)       if (!MRI.isReserved(RPI.Reg2))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2808)         MBB.addLiveIn(RPI.Reg2);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2809)     }
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2810)     return true;
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 2811)   }
14d656b3d8057 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kazu Hirata             2021-11-06 13:08:21 -0700 2812)   for (const RegPairInfo &RPI : llvm::reverse(RegPairs)) {
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2813)     unsigned Reg1 = RPI.Reg1;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2814)     unsigned Reg2 = RPI.Reg2;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2815)     unsigned StrOpc;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2816) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2817)     // Issue sequence of spills for cs regs.  The first spill may be converted
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2818)     // to a pre-decrement store later by emitPrologue if the callee-save stack
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2819)     // area allocation can't be combined with the local stack area allocation.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2820)     // For example:
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2821)     //    stp     x22, x21, [sp, #0]     // addImm(+0)
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2822)     //    stp     x20, x19, [sp, #16]    // addImm(+2)
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2823)     //    stp     fp, lr, [sp, #32]      // addImm(+4)
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2824)     // Rationale: This sequence saves uop updates compared to a sequence of
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2825)     // pre-increment spills like stp xi,xj,[sp,#-16]!
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2826)     // Note: Similar rationale and sequence for restores in epilog.
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2827)     unsigned Size;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2828)     Align Alignment;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2829)     switch (RPI.Type) {
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2830)     case RegPairInfo::GPR:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2831)        StrOpc = RPI.isPaired() ? AArch64::STPXi : AArch64::STRXui;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2832)        Size = 8;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2833)        Alignment = Align(8);
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2834)        break;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2835)     case RegPairInfo::FPR64:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2836)        StrOpc = RPI.isPaired() ? AArch64::STPDi : AArch64::STRDui;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2837)        Size = 8;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2838)        Alignment = Align(8);
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2839)        break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2840)     case RegPairInfo::FPR128:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2841)        StrOpc = RPI.isPaired() ? AArch64::STPQi : AArch64::STRQui;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2842)        Size = 16;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2843)        Alignment = Align(16);
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2844)        break;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2845)     case RegPairInfo::ZPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2846)        StrOpc = AArch64::STR_ZXI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2847)        Size = 16;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2848)        Alignment = Align(16);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2849)        break;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2850)     case RegPairInfo::PPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2851)        StrOpc = AArch64::STR_PXI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2852)        Size = 2;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2853)        Alignment = Align(2);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2854)        break;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2855)     }
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2856)     LLVM_DEBUG(dbgs() << "CSR spill: (" << printReg(Reg1, TRI);
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2857)                if (RPI.isPaired()) dbgs() << ", " << printReg(Reg2, TRI);
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2858)                dbgs() << ") -> fi#(" << RPI.FrameIdx;
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2859)                if (RPI.isPaired()) dbgs() << ", " << RPI.FrameIdx + 1;
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2860)                dbgs() << ")\n");
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2861) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2862)     assert((!NeedsWinCFI || !(Reg1 == AArch64::LR && Reg2 == AArch64::FP)) &&
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2863)            "Windows unwdinding requires a consecutive (FP,LR) pair");
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2864)     // Windows unwind codes require consecutive registers if registers are
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2865)     // paired.  Make the switch here, so that the code below will save (x,x+1)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2866)     // and not (x+1,x).
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2867)     unsigned FrameIdxReg1 = RPI.FrameIdx;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2868)     unsigned FrameIdxReg2 = RPI.FrameIdx + 1;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2869)     if (NeedsWinCFI && RPI.isPaired()) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2870)       std::swap(Reg1, Reg2);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2871)       std::swap(FrameIdxReg1, FrameIdxReg2);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2872)     }
4a3ab28ac73ae llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-05-22 11:56:20 +0000 2873)     MachineInstrBuilder MIB = BuildMI(MBB, MI, DL, TII.get(StrOpc));
88c8c9847dcf2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-05-27 03:38:02 +0000 2874)     if (!MRI.isReserved(Reg1))
88c8c9847dcf2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-05-27 03:38:02 +0000 2875)       MBB.addLiveIn(Reg1);
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2876)     if (RPI.isPaired()) {
88c8c9847dcf2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-05-27 03:38:02 +0000 2877)       if (!MRI.isReserved(Reg2))
88c8c9847dcf2 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-05-27 03:38:02 +0000 2878)         MBB.addLiveIn(Reg2);
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2879)       MIB.addReg(Reg2, getPrologueDeath(MF, Reg2));
c376406669d40 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-04-15 15:16:19 +0000 2880)       MIB.addMemOperand(MF.getMachineMemOperand(
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2881)           MachinePointerInfo::getFixedStack(MF, FrameIdxReg2),
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2882)           MachineMemOperand::MOStore, Size, Alignment));
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2883)     }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2884)     MIB.addReg(Reg1, getPrologueDeath(MF, Reg1))
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2885)         .addReg(AArch64::SP)
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2886)         .addImm(RPI.Offset) // [sp, #offset*scale],
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2887)                             // where factor*scale is implicit
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2888)         .setMIFlag(MachineInstr::FrameSetup);
c376406669d40 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-04-15 15:16:19 +0000 2889)     MIB.addMemOperand(MF.getMachineMemOperand(
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2890)         MachinePointerInfo::getFixedStack(MF, FrameIdxReg1),
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2891)         MachineMemOperand::MOStore, Size, Alignment));
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2892)     if (NeedsWinCFI)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2893)       InsertSEH(MIB, TII, MachineInstr::FrameSetup);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2894) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2895)     // Update the StackIDs of the SVE stack slots.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2896)     MachineFrameInfo &MFI = MF.getFrameInfo();
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2897)     if (RPI.Type == RegPairInfo::ZPR || RPI.Type == RegPairInfo::PPR)
914e2f5a02f4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2021-01-12 16:19:37 +0800 2898)       MFI.setStackID(RPI.FrameIdx, TargetStackID::ScalableVector);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2899) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2900)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2901)   return true;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2902) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2903) 
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000 2904) bool AArch64FrameLowering::restoreCalleeSavedRegisters(
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2905)     MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI,
186dd63182718 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Benjamin Kramer         2020-02-29 09:50:23 +0100 2906)     MutableArrayRef<CalleeSavedInfo> CSI, const TargetRegisterInfo *TRI) const {
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2907)   MachineFunction &MF = *MBB.getParent();
fc6de428c8ab1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2014-08-05 02:39:49 +0000 2908)   const TargetInstrInfo &TII = *MF.getSubtarget().getInstrInfo();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2909)   DebugLoc DL;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2910)   SmallVector<RegPairInfo, 8> RegPairs;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 2911)   bool NeedsWinCFI = needsWinCFI(MF);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2912) 
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2913)   if (MBBI != MBB.end())
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2914)     DL = MBBI->getDebugLoc();
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2915) 
20a093e2bc310 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-25 10:50:02 +0000 2916)   computeCalleeSaveRegisterPairs(MF, CSI, TRI, RegPairs, hasFP(MF));
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2917) 
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2918)   auto EmitMI = [&](const RegPairInfo &RPI) -> MachineBasicBlock::iterator {
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2919)     unsigned Reg1 = RPI.Reg1;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2920)     unsigned Reg2 = RPI.Reg2;
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2921) 
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2922)     // Issue sequence of restores for cs regs. The last restore may be converted
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2923)     // to a post-increment load later by emitEpilogue if the callee-save stack
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2924)     // area allocation can't be combined with the local stack area allocation.
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2925)     // For example:
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2926)     //    ldp     fp, lr, [sp, #32]       // addImm(+4)
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2927)     //    ldp     x20, x19, [sp, #16]     // addImm(+2)
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2928)     //    ldp     x22, x21, [sp, #0]      // addImm(+0)
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2929)     // Note: see comment in spillCalleeSavedRegisters()
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 2930)     unsigned LdrOpc;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2931)     unsigned Size;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2932)     Align Alignment;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2933)     switch (RPI.Type) {
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2934)     case RegPairInfo::GPR:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2935)        LdrOpc = RPI.isPaired() ? AArch64::LDPXi : AArch64::LDRXui;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2936)        Size = 8;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2937)        Alignment = Align(8);
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2938)        break;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2939)     case RegPairInfo::FPR64:
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2940)        LdrOpc = RPI.isPaired() ? AArch64::LDPDi : AArch64::LDRDui;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2941)        Size = 8;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2942)        Alignment = Align(8);
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2943)        break;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2944)     case RegPairInfo::FPR128:
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2945)        LdrOpc = RPI.isPaired() ? AArch64::LDPQi : AArch64::LDRQui;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2946)        Size = 16;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2947)        Alignment = Align(16);
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 2948)        break;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2949)     case RegPairInfo::ZPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2950)        LdrOpc = AArch64::LDR_ZXI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2951)        Size = 16;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2952)        Alignment = Align(16);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2953)        break;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2954)     case RegPairInfo::PPR:
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2955)        LdrOpc = AArch64::LDR_PXI;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2956)        Size = 2;
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2957)        Alignment = Align(2);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2958)        break;
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2959)     }
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2960)     LLVM_DEBUG(dbgs() << "CSR restore: (" << printReg(Reg1, TRI);
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2961)                if (RPI.isPaired()) dbgs() << ", " << printReg(Reg2, TRI);
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2962)                dbgs() << ") -> fi#(" << RPI.FrameIdx;
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2963)                if (RPI.isPaired()) dbgs() << ", " << RPI.FrameIdx + 1;
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 2964)                dbgs() << ")\n");
29d4a695f45a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 19:07:06 +0000 2965) 
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2966)     // Windows unwind codes require consecutive registers if registers are
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2967)     // paired.  Make the switch here, so that the code below will save (x,x+1)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2968)     // and not (x+1,x).
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2969)     unsigned FrameIdxReg1 = RPI.FrameIdx;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2970)     unsigned FrameIdxReg2 = RPI.FrameIdx + 1;
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2971)     if (NeedsWinCFI && RPI.isPaired()) {
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2972)       std::swap(Reg1, Reg2);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2973)       std::swap(FrameIdxReg1, FrameIdxReg2);
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2974)     }
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2975)     MachineInstrBuilder MIB = BuildMI(MBB, MBBI, DL, TII.get(LdrOpc));
c376406669d40 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-04-15 15:16:19 +0000 2976)     if (RPI.isPaired()) {
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2977)       MIB.addReg(Reg2, getDefRegState(true));
c376406669d40 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-04-15 15:16:19 +0000 2978)       MIB.addMemOperand(MF.getMachineMemOperand(
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2979)           MachinePointerInfo::getFixedStack(MF, FrameIdxReg2),
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2980)           MachineMemOperand::MOLoad, Size, Alignment));
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2981)     }
a5335647d5e89 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-06 16:34:59 +0000 2982)     MIB.addReg(Reg1, getDefRegState(true))
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2983)         .addReg(AArch64::SP)
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2984)         .addImm(RPI.Offset) // [sp, #offset*scale]
7140363cd0122 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 09:44:46 +0000 2985)                             // where factor*scale is implicit
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 2986)         .setMIFlag(MachineInstr::FrameDestroy);
c376406669d40 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-04-15 15:16:19 +0000 2987)     MIB.addMemOperand(MF.getMachineMemOperand(
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2988)         MachinePointerInfo::getFixedStack(MF, FrameIdxReg1),
998118c3d3bd6 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-31 12:55:24 +0000 2989)         MachineMemOperand::MOLoad, Size, Alignment));
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2990)     if (NeedsWinCFI)
fadebc8aaefb9 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sanjin Sijaric          2018-10-31 09:27:01 +0000 2991)       InsertSEH(MIB, TII, MachineInstr::FrameDestroy);
d0ea42a7c1bcd llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-12 16:30:46 +0100 2992) 
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 2993)     return MIB->getIterator();
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2994)   };
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2995) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2996)   // SVE objects are always restored in reverse order.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2997)   for (const RegPairInfo &RPI : reverse(RegPairs))
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 2998)     if (RPI.isScalable())
164560bd74652 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Francis Visoiu Mistrih  2018-03-14 20:34:03 +0000 2999)       EmitMI(RPI);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3000) 
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3001)   if (homogeneousPrologEpilog(MF, &MBB)) {
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3002)     auto MIB = BuildMI(MBB, MBBI, DL, TII.get(AArch64::HOM_Epilog))
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3003)                    .setMIFlag(MachineInstr::FrameDestroy);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3004)     for (auto &RPI : RegPairs) {
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3005)       MIB.addReg(RPI.Reg1, RegState::Define);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3006)       MIB.addReg(RPI.Reg2, RegState::Define);
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3007)     }
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3008)     return true;
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3009)   }
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3010) 
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3011)   if (ReverseCSRRestoreSeq) {
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3012)     MachineBasicBlock::iterator First = MBB.end();
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3013)     for (const RegPairInfo &RPI : reverse(RegPairs)) {
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3014)       if (RPI.isScalable())
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3015)         continue;
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3016)       MachineBasicBlock::iterator It = EmitMI(RPI);
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3017)       if (First == MBB.end())
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3018)         First = It;
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3019)     }
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3020)     if (First != MBB.end())
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3021)       MBB.splice(MBBI, &MBB, First);
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3022)   } else {
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3023)     for (const RegPairInfo &RPI : RegPairs) {
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3024)       if (RPI.isScalable())
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3025)         continue;
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3026)       (void)EmitMI(RPI);
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3027)     }
17e85cd4109ca llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-02-24 18:36:37 +0000 3028)   }
f11eb3ebe7772 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Peter Collingbourne     2018-04-04 21:55:44 +0000 3029) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3030)   return true;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3031) }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3032) 
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3033) void AArch64FrameLowering::determineCalleeSaves(MachineFunction &MF,
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3034)                                                 BitVector &SavedRegs,
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3035)                                                 RegScavenger *RS) const {
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3036)   // All calls are tail calls in GHC calling conv, and functions have no
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3037)   // prologue/epilogue.
f1caa2833f505 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-12-15 22:22:58 +0000 3038)   if (MF.getFunction().getCallingConv() == CallingConv::GHC)
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3039)     return;
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3040) 
02564865328fc llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2015-07-14 17:17:13 +0000 3041)   TargetFrameLowering::determineCalleeSaves(MF, SavedRegs, RS);
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000 3042)   const AArch64RegisterInfo *RegInfo = static_cast<const AArch64RegisterInfo *>(
fc6de428c8ab1 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eric Christopher        2014-08-05 02:39:49 +0000 3043)       MF.getSubtarget().getRegisterInfo());
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3044)   const AArch64Subtarget &Subtarget = MF.getSubtarget<AArch64Subtarget>();
3b0846e8f7689 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2014-05-24 12:50:23 +0000 3045)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3046)   unsigned UnspilledCSGPR = AArch64::NoRegister;
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3047)   unsigned UnspilledCSGPRPaired = AArch64::NoRegister;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3048) 
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 3049)   MachineFrameInfo &MFI = MF.getFrameInfo();
6c47c62588573 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tri Vo                  2018-09-22 22:17:50 +0000 3050)   const MCPhysReg *CSRegs = MF.getRegInfo().getCalleeSavedRegs();
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 3051) 
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 3052)   unsigned BasePointerReg = RegInfo->hasBasePointer(MF)
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 3053)                                 ? RegInfo->getBaseRegister()
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 3054)                                 : (unsigned)AArch64::NoRegister;
2778fd0b59b64 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2017-12-20 06:51:45 +0000 3055) 
d78597ec08b9f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-04-21 22:42:08 +0000 3056)   unsigned ExtraCSSpill = 0;
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3057)   // Figure out which callee-saved registers to save/restore.
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3058)   for (unsigned i = 0; CSRegs[i]; ++i) {
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3059)     const unsigned Reg = CSRegs[i];
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3060) 
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000 3061)     // Add the base pointer register to SavedRegs if it is callee-save.
7e4ba3dc02dea llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-19 18:27:32 +0000 3062)     if (Reg == BasePointerReg)
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3063)       SavedRegs.set(Reg);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3064) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3065)     bool RegUsed = SavedRegs.test(Reg);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3066)     unsigned PairedReg = AArch64::NoRegister;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3067)     if (AArch64::GPR64RegClass.contains(Reg) ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3068)         AArch64::FPR64RegClass.contains(Reg) ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3069)         AArch64::FPR128RegClass.contains(Reg))
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3070)       PairedReg = CSRegs[i ^ 1];
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3071) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3072)     if (!RegUsed) {
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3073)       if (AArch64::GPR64RegClass.contains(Reg) &&
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3074)           !RegInfo->isReservedReg(MF, Reg)) {
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3075)         UnspilledCSGPR = Reg;
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3076)         UnspilledCSGPRPaired = PairedReg;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3077)       }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3078)       continue;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3079)     }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3080) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3081)     // MachO's compact unwind format relies on all registers being stored in
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3082)     // pairs.
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3083)     // FIXME: the usual format is actually better if unwinding isn't needed.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3084)     if (producePairRegisters(MF) && PairedReg != AArch64::NoRegister &&
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3085)         !SavedRegs.test(PairedReg)) {
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3086)       SavedRegs.set(PairedReg);
74cb718ea963f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-16 20:52:28 +0000 3087)       if (AArch64::GPR64RegClass.contains(PairedReg) &&
74cb718ea963f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-05-16 20:52:28 +0000 3088)           !RegInfo->isReservedReg(MF, PairedReg))
d78597ec08b9f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-04-21 22:42:08 +0000 3089)         ExtraCSSpill = PairedReg;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3090)     }
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3091)   }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3092) 
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3093)   if (MF.getFunction().getCallingConv() == CallingConv::Win64 &&
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3094)       !Subtarget.isTargetWindows()) {
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3095)     // For Windows calling convention on a non-windows OS, where X18 is treated
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3096)     // as reserved, back up X18 when entering non-windows code (marked with the
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3097)     // Windows calling convention) and restore when returning regardless of
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3098)     // whether the individual function uses it - it might call other functions
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3099)     // that clobber it.
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3100)     SavedRegs.set(AArch64::X18);
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3101)   }
cf97e0ec42b80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2019-04-30 11:50:09 +0300 3102) 
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3103)   // Calculates the callee saved stack size.
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3104)   unsigned CSStackSize = 0;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3105)   unsigned SVECSStackSize = 0;
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3106)   const TargetRegisterInfo *TRI = MF.getSubtarget().getRegisterInfo();
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3107)   const MachineRegisterInfo &MRI = MF.getRegInfo();
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3108)   for (unsigned Reg : SavedRegs.set_bits()) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3109)     auto RegSize = TRI->getRegSizeInBits(Reg, MRI) / 8;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3110)     if (AArch64::PPRRegClass.contains(Reg) ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3111)         AArch64::ZPRRegClass.contains(Reg))
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3112)       SVECSStackSize += RegSize;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3113)     else
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3114)       CSStackSize += RegSize;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3115)   }
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3116) 
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3117)   // Save number of saved regs, so we can easily update CSStackSize later.
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3118)   unsigned NumSavedRegs = SavedRegs.count();
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3119) 
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3120)   // The frame record needs to be created by saving the appropriate registers
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 3121)   uint64_t EstimatedStackSize = MFI.estimateStackSize(MF);
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3122)   if (hasFP(MF) ||
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3123)       windowsRequiresStackProbe(MF, EstimatedStackSize + CSStackSize + 16)) {
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3124)     SavedRegs.set(AArch64::FP);
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3125)     SavedRegs.set(AArch64::LR);
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3126)   }
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3127) 
7ebccfefb8ffa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-01 10:53:45 +0000 3128)   LLVM_DEBUG(dbgs() << "*** determineCalleeSaves\nSaved CSRs:";
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3129)              for (unsigned Reg
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3130)                   : SavedRegs.set_bits()) dbgs()
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3131)              << ' ' << printReg(Reg, RegInfo);
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3132)              dbgs() << "\n";);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3133) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3134)   // If any callee-saved registers are used, the frame cannot be eliminated.
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3135)   int64_t SVEStackSize =
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3136)       alignTo(SVECSStackSize + estimateSVEStackObjectOffsets(MFI), 16);
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3137)   bool CanEliminateFrame = (SavedRegs.count() == 0) && !SVEStackSize;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3138) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3139)   // The CSR spill slots have not been allocated yet, so estimateStackSize
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3140)   // won't include them.
2af1e90eb2697 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kristof Beyls           2017-05-30 06:58:41 +0000 3141)   unsigned EstimatedStackSizeLimit = estimateRSStackSizeLimit(MF);
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3142) 
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3143)   // We may address some of the stack above the canonical frame address, either
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3144)   // for our own arguments or during a call. Include that in calculating whether
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3145)   // we have complicated addressing concerns.
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3146)   int64_t CalleeStackUsed = 0;
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3147)   for (int I = MFI.getObjectIndexBegin(); I != 0; ++I) {
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3148)     int64_t FixedOff = MFI.getObjectOffset(I);
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3149)     if (FixedOff > CalleeStackUsed) CalleeStackUsed = FixedOff;
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3150)   }
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3151) 
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3152)   // Conservatively always assume BigStack when there are SVE spills.
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3153)   bool BigStack = SVEStackSize || (EstimatedStackSize + CSStackSize +
2002c82278f6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2023-01-27 13:18:59 +0000 3154)                                    CalleeStackUsed) > EstimatedStackSizeLimit;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3155)   if (BigStack || !CanEliminateFrame || RegInfo->cannotEliminateFrame(MF))
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3156)     AFI->setHasStackFrame(true);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3157) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3158)   // Estimate if we might need to scavenge a register at some point in order
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3159)   // to materialize a stack offset. If so, either spill one additional
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3160)   // callee-saved register or reserve a special spill slot to facilitate
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3161)   // register scavenging. If we already spilled an extra callee-saved register
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3162)   // above to keep the number of spills even, we don't need to do anything else
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3163)   // here.
d78597ec08b9f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-04-21 22:42:08 +0000 3164)   if (BigStack) {
d78597ec08b9f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-04-21 22:42:08 +0000 3165)     if (!ExtraCSSpill && UnspilledCSGPR != AArch64::NoRegister) {
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3166)       LLVM_DEBUG(dbgs() << "Spilling " << printReg(UnspilledCSGPR, RegInfo)
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3167)                         << " to get a scratch register.\n");
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3168)       SavedRegs.set(UnspilledCSGPR);
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3169)       // MachO's compact unwind format relies on all registers being stored in
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3170)       // pairs, so if we need to spill one extra for BigStack, then we need to
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3171)       // store the pair.
4f58b1bd29747 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kyungwoo Lee            2021-02-01 22:32:32 -0500 3172)       if (producePairRegisters(MF))
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3173)         SavedRegs.set(UnspilledCSGPRPaired);
7ebccfefb8ffa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-08-01 10:53:45 +0000 3174)       ExtraCSSpill = UnspilledCSGPR;
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3175)     }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3176) 
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3177)     // If we didn't find an extra callee-saved register to spill, create
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3178)     // an emergency spill slot.
d78597ec08b9f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matthias Braun          2017-04-21 22:42:08 +0000 3179)     if (!ExtraCSSpill || MF.getRegInfo().isPhysRegUsed(ExtraCSSpill)) {
44e25f37ae242 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Krzysztof Parzyszek     2017-04-24 18:55:33 +0000 3180)       const TargetRegisterInfo *TRI = MF.getSubtarget().getRegisterInfo();
44e25f37ae242 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Krzysztof Parzyszek     2017-04-24 18:55:33 +0000 3181)       const TargetRegisterClass &RC = AArch64::GPR64RegClass;
44e25f37ae242 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Krzysztof Parzyszek     2017-04-24 18:55:33 +0000 3182)       unsigned Size = TRI->getSpillSize(RC);
4f5133a4dcd0b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-06-30 07:49:21 +0000 3183)       Align Alignment = TRI->getSpillAlign(RC);
4f5133a4dcd0b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-06-30 07:49:21 +0000 3184)       int FI = MFI.CreateStackObject(Size, Alignment, false);
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3185)       RS->addScavengingFrameIndex(FI);
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3186)       LLVM_DEBUG(dbgs() << "No available CS registers, allocated fi#" << FI
d34e60ca85325 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Nicola Zaghen           2018-05-14 12:53:11 +0000 3187)                         << " as the emergency spill slot.\n");
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3188)     }
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3189)   }
04bf91a8c1c6f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-01 16:29:19 +0000 3190) 
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3191)   // Adding the size of additional 64bit GPR saves.
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3192)   CSStackSize += 8 * (SavedRegs.count() - NumSavedRegs);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3193) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3194)   // A Swift asynchronous context extends the frame record with a pointer
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3195)   // directly before FP.
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3196)   if (hasFP(MF) && AFI->hasSwiftAsyncContext())
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3197)     CSStackSize += 8;
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3198) 
965ed1e974e80 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kiran Chandramohan      2019-11-20 12:45:26 +0000 3199)   uint64_t AlignedCSStackSize = alignTo(CSStackSize, 16);
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3200)   LLVM_DEBUG(dbgs() << "Estimated stack frame size: "
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3201)                << EstimatedStackSize + AlignedCSStackSize
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3202)                << " bytes.\n");
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3203) 
d6a7da80aae62 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-29 12:49:34 +0000 3204)   assert((!MFI.isCalleeSavedInfoValid() ||
d6a7da80aae62 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-29 12:49:34 +0000 3205)           AFI->getCalleeSavedStackSize() == AlignedCSStackSize) &&
d6a7da80aae62 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-29 12:49:34 +0000 3206)          "Should not invalidate callee saved info");
d6a7da80aae62 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-29 12:49:34 +0000 3207) 
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3208)   // Round up to register pair alignment to avoid additional SP adjustment
c25d3bd23860c llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-02-12 16:31:41 +0000 3209)   // instructions.
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3210)   AFI->setCalleeSavedStackSize(AlignedCSStackSize);
2d77e788f2fd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2018-09-12 12:10:22 +0000 3211)   AFI->setCalleeSaveStackHasFreeSpace(AlignedCSStackSize != CSStackSize);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3212)   AFI->setSVECalleeSavedStackSize(alignTo(SVECSStackSize, 16));
00ed9964c6596 llvm/lib/Target/ARM64/ARM64FrameLowering.cpp     (Tim Northover           2014-03-29 10:18:08 +0000 3213) }
66f6b65fed8e3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-06-02 16:22:07 +0000 3214) 
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3215) bool AArch64FrameLowering::assignCalleeSavedSpillSlots(
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3216)     MachineFunction &MF, const TargetRegisterInfo *RegInfo,
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3217)     std::vector<CalleeSavedInfo> &CSI, unsigned &MinCSFrameIndex,
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3218)     unsigned &MaxCSFrameIndex) const {
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3219)   bool NeedsWinCFI = needsWinCFI(MF);
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3220)   // To match the canonical windows frame layout, reverse the list of
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3221)   // callee saved registers to get them laid out by PrologEpilogInserter
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3222)   // in the right order. (PrologEpilogInserter allocates stack objects top
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3223)   // down. Windows canonical prologs store higher numbered registers at
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3224)   // the top, thus have the CSI array start from the highest registers.)
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3225)   if (NeedsWinCFI)
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3226)     std::reverse(CSI.begin(), CSI.end());
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3227) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3228)   if (CSI.empty())
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3229)     return true; // Early exit if no callee saved registers are modified!
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3230) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3231)   // Now that we know which registers need to be saved and restored, allocate
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3232)   // stack slots for them.
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3233)   MachineFrameInfo &MFI = MF.getFrameInfo();
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3234)   auto *AFI = MF.getInfo<AArch64FunctionInfo>();
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3235) 
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3236)   bool UsesWinAAPCS = isTargetWindows(MF);
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3237)   if (UsesWinAAPCS && hasFP(MF) && AFI->hasSwiftAsyncContext()) {
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3238)     int FrameIdx = MFI.CreateStackObject(8, Align(16), true);
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3239)     AFI->setSwiftAsyncContextFrameIdx(FrameIdx);
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3240)     if ((unsigned)FrameIdx < MinCSFrameIndex) MinCSFrameIndex = FrameIdx;
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3241)     if ((unsigned)FrameIdx > MaxCSFrameIndex) MaxCSFrameIndex = FrameIdx;
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3242)   }
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3243) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3244)   for (auto &CS : CSI) {
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3245)     Register Reg = CS.getReg();
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3246)     const TargetRegisterClass *RC = RegInfo->getMinimalPhysRegClass(Reg);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3247) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3248)     unsigned Size = RegInfo->getSpillSize(*RC);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3249)     Align Alignment(RegInfo->getSpillAlign(*RC));
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3250)     int FrameIdx = MFI.CreateStackObject(Size, Alignment, true);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3251)     CS.setFrameIdx(FrameIdx);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3252) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3253)     if ((unsigned)FrameIdx < MinCSFrameIndex) MinCSFrameIndex = FrameIdx;
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3254)     if ((unsigned)FrameIdx > MaxCSFrameIndex) MaxCSFrameIndex = FrameIdx;
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3255) 
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3256)     // Grab 8 bytes below FP for the extended asynchronous frame info.
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3257)     if (hasFP(MF) && AFI->hasSwiftAsyncContext() && !UsesWinAAPCS &&
24ba1302b38bf llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Saleem Abdulrasool      2022-04-26 20:12:48 -0700 3258)         Reg == AArch64::FP) {
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3259)       FrameIdx = MFI.CreateStackObject(8, Alignment, true);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3260)       AFI->setSwiftAsyncContextFrameIdx(FrameIdx);
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3261)       if ((unsigned)FrameIdx < MinCSFrameIndex) MinCSFrameIndex = FrameIdx;
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3262)       if ((unsigned)FrameIdx > MaxCSFrameIndex) MaxCSFrameIndex = FrameIdx;
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3263)     }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3264)   }
ea0eec69f16e0 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Tim Northover           2021-01-20 10:14:03 +0000 3265)   return true;
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3266) }
3780a4e568ac7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Martin Storsjö          2020-09-23 14:14:05 +0300 3267) 
66f6b65fed8e3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-06-02 16:22:07 +0000 3268) bool AArch64FrameLowering::enableStackSlotScavenging(
66f6b65fed8e3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-06-02 16:22:07 +0000 3269)     const MachineFunction &MF) const {
66f6b65fed8e3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-06-02 16:22:07 +0000 3270)   const AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
66f6b65fed8e3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-06-02 16:22:07 +0000 3271)   return AFI->hasCalleeSaveStackFreeSpace();
66f6b65fed8e3 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Geoff Berry             2016-06-02 16:22:07 +0000 3272) }
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3273) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3274) /// returns true if there are any SVE callee saves.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3275) static bool getSVECalleeSaveSlotRange(const MachineFrameInfo &MFI,
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3276)                                       int &Min, int &Max) {
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3277)   Min = std::numeric_limits<int>::max();
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3278)   Max = std::numeric_limits<int>::min();
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3279) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3280)   if (!MFI.isCalleeSavedInfoValid())
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3281)     return false;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3282) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3283)   const std::vector<CalleeSavedInfo> &CSI = MFI.getCalleeSavedInfo();
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3284)   for (auto &CS : CSI) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3285)     if (AArch64::ZPRRegClass.contains(CS.getReg()) ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3286)         AArch64::PPRRegClass.contains(CS.getReg())) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3287)       assert((Max == std::numeric_limits<int>::min() ||
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3288)               Max + 1 == CS.getFrameIdx()) &&
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3289)              "SVE CalleeSaves are not consecutive");
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3290) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3291)       Min = std::min(Min, CS.getFrameIdx());
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3292)       Max = std::max(Max, CS.getFrameIdx());
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3293)     }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3294)   }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3295)   return Min != std::numeric_limits<int>::max();
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3296) }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3297) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3298) // Process all the SVE stack objects and determine offsets for each
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3299) // object. If AssignOffsets is true, the offsets get assigned.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3300) // Fills in the first and last callee-saved frame indices into
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3301) // Min/MaxCSFrameIndex, respectively.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3302) // Returns the size of the stack.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3303) static int64_t determineSVEStackObjectOffsets(MachineFrameInfo &MFI,
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3304)                                               int &MinCSFrameIndex,
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3305)                                               int &MaxCSFrameIndex,
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3306)                                               bool AssignOffsets) {
54492a5843a34 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 12:57:41 +0100 3307) #ifndef NDEBUG
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3308)   // First process all fixed stack objects.
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3309)   for (int I = MFI.getObjectIndexBegin(); I != 0; ++I)
914e2f5a02f4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2021-01-12 16:19:37 +0800 3310)     assert(MFI.getStackID(I) != TargetStackID::ScalableVector &&
54492a5843a34 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 12:57:41 +0100 3311)            "SVE vectors should never be passed on the stack by value, only by "
54492a5843a34 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 12:57:41 +0100 3312)            "reference.");
54492a5843a34 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 12:57:41 +0100 3313) #endif
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3314) 
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3315)   auto Assign = [&MFI](int FI, int64_t Offset) {
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3316)     LLVM_DEBUG(dbgs() << "alloc FI(" << FI << ") at SP[" << Offset << "]\n");
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3317)     MFI.setObjectOffset(FI, Offset);
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3318)   };
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3319) 
54492a5843a34 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 12:57:41 +0100 3320)   int64_t Offset = 0;
54492a5843a34 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 12:57:41 +0100 3321) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3322)   // Then process all callee saved slots.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3323)   if (getSVECalleeSaveSlotRange(MFI, MinCSFrameIndex, MaxCSFrameIndex)) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3324)     // Assign offsets to the callee save slots.
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3325)     for (int I = MinCSFrameIndex; I <= MaxCSFrameIndex; ++I) {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3326)       Offset += MFI.getObjectSize(I);
1dffa2550b535 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-04-01 13:49:04 +0000 3327)       Offset = alignTo(Offset, MFI.getObjectAlign(I));
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3328)       if (AssignOffsets)
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3329)         Assign(I, -Offset);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3330)     }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3331)   }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3332) 
26b4ef3694973 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 14:16:55 +0100 3333)   // Ensure that the Callee-save area is aligned to 16bytes.
26b4ef3694973 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 14:16:55 +0100 3334)   Offset = alignTo(Offset, Align(16U));
26b4ef3694973 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-07-27 14:16:55 +0100 3335) 
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3336)   // Create a buffer of SVE objects to allocate and sort it.
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3337)   SmallVector<int, 8> ObjectsToAllocate;
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3338)   // If we have a stack protector, and we've previously decided that we have SVE
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3339)   // objects on the stack and thus need it to go in the SVE stack area, then it
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3340)   // needs to go first.
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3341)   int StackProtectorFI = -1;
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3342)   if (MFI.hasStackProtectorIndex()) {
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3343)     StackProtectorFI = MFI.getStackProtectorIndex();
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3344)     if (MFI.getStackID(StackProtectorFI) == TargetStackID::ScalableVector)
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3345)       ObjectsToAllocate.push_back(StackProtectorFI);
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3346)   }
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3347)   for (int I = 0, E = MFI.getObjectIndexEnd(); I != E; ++I) {
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3348)     unsigned StackID = MFI.getStackID(I);
914e2f5a02f4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2021-01-12 16:19:37 +0800 3349)     if (StackID != TargetStackID::ScalableVector)
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3350)       continue;
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3351)     if (I == StackProtectorFI)
dc9f65be45554 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (John Brawn              2021-12-14 11:11:41 +0000 3352)       continue;
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3353)     if (MaxCSFrameIndex >= I && I >= MinCSFrameIndex)
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3354)       continue;
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3355)     if (MFI.isDeadObjectIndex(I))
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3356)       continue;
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3357) 
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3358)     ObjectsToAllocate.push_back(I);
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3359)   }
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3360) 
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3361)   // Allocate all SVE locals and spills
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3362)   for (unsigned FI : ObjectsToAllocate) {
1dffa2550b535 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-04-01 13:49:04 +0000 3363)     Align Alignment = MFI.getObjectAlign(FI);
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3364)     // FIXME: Given that the length of SVE vectors is not necessarily a power of
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3365)     // two, we'd need to align every object dynamically at runtime if the
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3366)     // alignment is larger than 16. This is not yet supported.
1dffa2550b535 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-04-01 13:49:04 +0000 3367)     if (Alignment > Align(16))
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3368)       report_fatal_error(
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3369)           "Alignment of scalable vectors > 16 bytes is not yet supported");
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3370) 
1dffa2550b535 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-04-01 13:49:04 +0000 3371)     Offset = alignTo(Offset + MFI.getObjectSize(FI), Alignment);
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3372)     if (AssignOffsets)
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3373)       Assign(FI, -Offset);
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3374)   }
9a1c243aa5ded llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-13 08:31:49 +0000 3375) 
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3376)   return Offset;
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3377) }
7774812965027 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-14 13:11:34 +0000 3378) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3379) int64_t AArch64FrameLowering::estimateSVEStackObjectOffsets(
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3380)     MachineFrameInfo &MFI) const {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3381)   int MinCSFrameIndex, MaxCSFrameIndex;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3382)   return determineSVEStackObjectOffsets(MFI, MinCSFrameIndex, MaxCSFrameIndex, false);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3383) }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3384) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3385) int64_t AArch64FrameLowering::assignSVEStackObjectOffsets(
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3386)     MachineFrameInfo &MFI, int &MinCSFrameIndex, int &MaxCSFrameIndex) const {
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3387)   return determineSVEStackObjectOffsets(MFI, MinCSFrameIndex, MaxCSFrameIndex,
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3388)                                         true);
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3389) }
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3390) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3391) void AArch64FrameLowering::processFunctionBeforeFrameFinalized(
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3392)     MachineFunction &MF, RegScavenger *RS) const {
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3393)   MachineFrameInfo &MFI = MF.getFrameInfo();
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3394) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3395)   assert(getStackGrowthDirection() == TargetFrameLowering::StackGrowsDown &&
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3396)          "Upwards growing stack unsupported");
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3397) 
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3398)   int MinCSFrameIndex, MaxCSFrameIndex;
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3399)   int64_t SVEStackSize =
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3400)       assignSVEStackObjectOffsets(MFI, MinCSFrameIndex, MaxCSFrameIndex);
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3401) 
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3402)   AArch64FunctionInfo *AFI = MF.getInfo<AArch64FunctionInfo>();
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3403)   AFI->setStackSizeSVE(alignTo(SVEStackSize, 16U));
84a0c8e3ae928 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-11-05 16:54:54 +0000 3404)   AFI->setMinMaxSVECSFrameIndex(MinCSFrameIndex, MaxCSFrameIndex);
4f99b6f0fe425 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2019-10-03 11:33:50 +0000 3405) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3406)   // If this function isn't doing Win64-style C++ EH, we don't need to do
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3407)   // anything.
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3408)   if (!MF.hasEHFunclets())
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3409)     return;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3410)   const TargetInstrInfo &TII = *MF.getSubtarget().getInstrInfo();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3411)   WinEHFuncInfo &EHInfo = *MF.getWinEHFuncInfo();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3412) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3413)   MachineBasicBlock &MBB = MF.front();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3414)   auto MBBI = MBB.begin();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3415)   while (MBBI != MBB.end() && MBBI->getFlag(MachineInstr::FrameSetup))
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3416)     ++MBBI;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3417) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3418)   // Create an UnwindHelp object.
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3419)   // The UnwindHelp object is allocated at the start of the fixed object area
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3420)   int64_t FixedObject =
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3421)       getFixedObjectSize(MF, AFI, /*IsWin64*/ true, /*IsFunclet*/ false);
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3422)   int UnwindHelpFI = MFI.CreateFixedObject(/*Size*/ 8,
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3423)                                            /*SPOffset*/ -FixedObject,
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3424)                                            /*IsImmutable=*/false);
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3425)   EHInfo.UnwindHelpFrameIdx = UnwindHelpFI;
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3426) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3427)   // We need to store -2 into the UnwindHelp object at the start of the
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3428)   // function.
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3429)   DebugLoc DL;
d19a7060c6bd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2019-02-28 20:38:45 +0000 3430)   RS->enterBasicBlockEnd(MBB);
d19a7060c6bd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2019-02-28 20:38:45 +0000 3431)   RS->backward(std::prev(MBBI));
d6b0734837124 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Jim Lin                 2022-01-19 17:25:52 +0800 3432)   Register DstReg = RS->FindUnusedReg(&AArch64::GPR64commonRegClass);
d19a7060c6bd5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2019-02-28 20:38:45 +0000 3433)   assert(DstReg && "There must be a free register after frame setup");
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3434)   BuildMI(MBB, MBBI, DL, TII.get(AArch64::MOVi64imm), DstReg).addImm(-2);
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3435)   BuildMI(MBB, MBBI, DL, TII.get(AArch64::STURXi))
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3436)       .addReg(DstReg, getKillRegState(true))
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3437)       .addFrameIndex(UnwindHelpFI)
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3438)       .addImm(0);
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3439) }
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3440) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3441) namespace {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3442) struct TagStoreInstr {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3443)   MachineInstr *MI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3444)   int64_t Offset, Size;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3445)   explicit TagStoreInstr(MachineInstr *MI, int64_t Offset, int64_t Size)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3446)       : MI(MI), Offset(Offset), Size(Size) {}
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3447) };
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3448) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3449) class TagStoreEdit {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3450)   MachineFunction *MF;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3451)   MachineBasicBlock *MBB;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3452)   MachineRegisterInfo *MRI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3453)   // Tag store instructions that are being replaced.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3454)   SmallVector<TagStoreInstr, 8> TagStores;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3455)   // Combined memref arguments of the above instructions.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3456)   SmallVector<MachineMemOperand *, 8> CombinedMemRefs;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3457) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3458)   // Replace allocation tags in [FrameReg + FrameRegOffset, FrameReg +
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3459)   // FrameRegOffset + Size) with the address tag of SP.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3460)   Register FrameReg;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3461)   StackOffset FrameRegOffset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3462)   int64_t Size;
1ca0cb717a095 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kazu Hirata             2023-04-25 23:53:32 -0700 3463)   // If not std::nullopt, move FrameReg to (FrameReg + FrameRegUpdate) at the
1ca0cb717a095 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kazu Hirata             2023-04-25 23:53:32 -0700 3464)   // end.
4f7e5930abf3f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kazu Hirata             2022-11-25 21:57:21 -0800 3465)   std::optional<int64_t> FrameRegUpdate;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3466)   // MIFlags for any FrameReg updating instructions.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3467)   unsigned FrameRegUpdateFlags;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3468) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3469)   // Use zeroing instruction variants.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3470)   bool ZeroData;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3471)   DebugLoc DL;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3472) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3473)   void emitUnrolled(MachineBasicBlock::iterator InsertI);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3474)   void emitLoop(MachineBasicBlock::iterator InsertI);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3475) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3476) public:
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3477)   TagStoreEdit(MachineBasicBlock *MBB, bool ZeroData)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3478)       : MBB(MBB), ZeroData(ZeroData) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3479)     MF = MBB->getParent();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3480)     MRI = &MF->getRegInfo();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3481)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3482)   // Add an instruction to be replaced. Instructions must be added in the
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3483)   // ascending order of Offset, and have to be adjacent.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3484)   void addInstruction(TagStoreInstr I) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3485)     assert((TagStores.empty() ||
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3486)             TagStores.back().Offset + TagStores.back().Size == I.Offset) &&
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3487)            "Non-adjacent tag store instructions.");
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3488)     TagStores.push_back(I);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3489)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3490)   void clear() { TagStores.clear(); }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3491)   // Emit equivalent code at the given location, and erase the current set of
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3492)   // instructions. May skip if the replacement is not profitable. May invalidate
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3493)   // the input iterator and replace it with a valid one.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3494)   void emitCode(MachineBasicBlock::iterator &InsertI,
24c84bd2363a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-15 12:19:02 +0100 3495)                 const AArch64FrameLowering *TFI, bool TryMergeSPUpdate);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3496) };
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3497) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3498) void TagStoreEdit::emitUnrolled(MachineBasicBlock::iterator InsertI) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3499)   const AArch64InstrInfo *TII =
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3500)       MF->getSubtarget<AArch64Subtarget>().getInstrInfo();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3501) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3502)   const int64_t kMinOffset = -256 * 16;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3503)   const int64_t kMaxOffset = 255 * 16;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3504) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3505)   Register BaseReg = FrameReg;
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 3506)   int64_t BaseRegOffsetBytes = FrameRegOffset.getFixed();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3507)   if (BaseRegOffsetBytes < kMinOffset ||
a4ab294bc01c8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2023-02-07 18:03:43 -0800 3508)       BaseRegOffsetBytes + (Size - Size % 32) > kMaxOffset ||
a4ab294bc01c8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2023-02-07 18:03:43 -0800 3509)       // BaseReg can be FP, which is not necessarily aligned to 16-bytes. In
a4ab294bc01c8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2023-02-07 18:03:43 -0800 3510)       // that case, BaseRegOffsetBytes will not be aligned to 16 bytes, which
a4ab294bc01c8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2023-02-07 18:03:43 -0800 3511)       // is required for the offset of ST2G.
a4ab294bc01c8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2023-02-07 18:03:43 -0800 3512)       BaseRegOffsetBytes % 16 != 0) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3513)     Register ScratchReg = MRI->createVirtualRegister(&AArch64::GPR64RegClass);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3514)     emitFrameOffset(*MBB, InsertI, DL, ScratchReg, BaseReg,
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 3515)                     StackOffset::getFixed(BaseRegOffsetBytes), TII);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3516)     BaseReg = ScratchReg;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3517)     BaseRegOffsetBytes = 0;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3518)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3519) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3520)   MachineInstr *LastI = nullptr;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3521)   while (Size) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3522)     int64_t InstrSize = (Size > 16) ? 32 : 16;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3523)     unsigned Opcode =
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3524)         InstrSize == 16
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3525)             ? (ZeroData ? AArch64::STZGi : AArch64::STGi)
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3526)             : (ZeroData ? AArch64::STZ2Gi : AArch64::ST2Gi);
a4ab294bc01c8 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Florian Mayer           2023-02-07 18:03:43 -0800 3527)     assert(BaseRegOffsetBytes % 16 == 0);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3528)     MachineInstr *I = BuildMI(*MBB, InsertI, DL, TII->get(Opcode))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3529)                           .addReg(AArch64::SP)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3530)                           .addReg(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3531)                           .addImm(BaseRegOffsetBytes / 16)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3532)                           .setMemRefs(CombinedMemRefs);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3533)     // A store to [BaseReg, #0] should go last for an opportunity to fold the
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3534)     // final SP adjustment in the epilogue.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3535)     if (BaseRegOffsetBytes == 0)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3536)       LastI = I;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3537)     BaseRegOffsetBytes += InstrSize;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3538)     Size -= InstrSize;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3539)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3540) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3541)   if (LastI)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3542)     MBB->splice(InsertI, MBB, LastI);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3543) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3544) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3545) void TagStoreEdit::emitLoop(MachineBasicBlock::iterator InsertI) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3546)   const AArch64InstrInfo *TII =
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3547)       MF->getSubtarget<AArch64Subtarget>().getInstrInfo();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3548) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3549)   Register BaseReg = FrameRegUpdate
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3550)                          ? FrameReg
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3551)                          : MRI->createVirtualRegister(&AArch64::GPR64RegClass);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3552)   Register SizeReg = MRI->createVirtualRegister(&AArch64::GPR64RegClass);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3553) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3554)   emitFrameOffset(*MBB, InsertI, DL, BaseReg, FrameReg, FrameRegOffset, TII);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3555) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3556)   int64_t LoopSize = Size;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3557)   // If the loop size is not a multiple of 32, split off one 16-byte store at
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3558)   // the end to fold BaseReg update into.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3559)   if (FrameRegUpdate && *FrameRegUpdate)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3560)     LoopSize -= LoopSize % 32;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3561)   MachineInstr *LoopI = BuildMI(*MBB, InsertI, DL,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3562)                                 TII->get(ZeroData ? AArch64::STZGloop_wback
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3563)                                                   : AArch64::STGloop_wback))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3564)                             .addDef(SizeReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3565)                             .addDef(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3566)                             .addImm(LoopSize)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3567)                             .addReg(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3568)                             .setMemRefs(CombinedMemRefs);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3569)   if (FrameRegUpdate)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3570)     LoopI->setFlags(FrameRegUpdateFlags);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3571) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3572)   int64_t ExtraBaseRegUpdate =
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 3573)       FrameRegUpdate ? (*FrameRegUpdate - FrameRegOffset.getFixed() - Size) : 0;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3574)   if (LoopSize < Size) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3575)     assert(FrameRegUpdate);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3576)     assert(Size - LoopSize == 16);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3577)     // Tag 16 more bytes at BaseReg and update BaseReg.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3578)     BuildMI(*MBB, InsertI, DL,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3579)             TII->get(ZeroData ? AArch64::STZGPostIndex : AArch64::STGPostIndex))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3580)         .addDef(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3581)         .addReg(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3582)         .addReg(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3583)         .addImm(1 + ExtraBaseRegUpdate / 16)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3584)         .setMemRefs(CombinedMemRefs)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3585)         .setMIFlags(FrameRegUpdateFlags);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3586)   } else if (ExtraBaseRegUpdate) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3587)     // Update BaseReg.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3588)     BuildMI(
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3589)         *MBB, InsertI, DL,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3590)         TII->get(ExtraBaseRegUpdate > 0 ? AArch64::ADDXri : AArch64::SUBXri))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3591)         .addDef(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3592)         .addReg(BaseReg)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3593)         .addImm(std::abs(ExtraBaseRegUpdate))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3594)         .addImm(0)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3595)         .setMIFlags(FrameRegUpdateFlags);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3596)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3597) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3598) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3599) // Check if *II is a register update that can be merged into STGloop that ends
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3600) // at (Reg + Size). RemainingOffset is the required adjustment to Reg after the
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3601) // end of the loop.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3602) bool canMergeRegUpdate(MachineBasicBlock::iterator II, unsigned Reg,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3603)                        int64_t Size, int64_t *TotalOffset) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3604)   MachineInstr &MI = *II;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3605)   if ((MI.getOpcode() == AArch64::ADDXri ||
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3606)        MI.getOpcode() == AArch64::SUBXri) &&
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3607)       MI.getOperand(0).getReg() == Reg && MI.getOperand(1).getReg() == Reg) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3608)     unsigned Shift = AArch64_AM::getShiftValue(MI.getOperand(3).getImm());
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3609)     int64_t Offset = MI.getOperand(2).getImm() << Shift;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3610)     if (MI.getOpcode() == AArch64::SUBXri)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3611)       Offset = -Offset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3612)     int64_t AbsPostOffset = std::abs(Offset - Size);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3613)     const int64_t kMaxOffset =
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3614)         0xFFF; // Max encoding for unshifted ADDXri / SUBXri
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3615)     if (AbsPostOffset <= kMaxOffset && AbsPostOffset % 16 == 0) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3616)       *TotalOffset = Offset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3617)       return true;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3618)     }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3619)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3620)   return false;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3621) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3622) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3623) void mergeMemRefs(const SmallVectorImpl<TagStoreInstr> &TSE,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3624)                   SmallVectorImpl<MachineMemOperand *> &MemRefs) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3625)   MemRefs.clear();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3626)   for (auto &TS : TSE) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3627)     MachineInstr *MI = TS.MI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3628)     // An instruction without memory operands may access anything. Be
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3629)     // conservative and return an empty list.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3630)     if (MI->memoperands_empty()) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3631)       MemRefs.clear();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3632)       return;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3633)     }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3634)     MemRefs.append(MI->memoperands_begin(), MI->memoperands_end());
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3635)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3636) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3637) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3638) void TagStoreEdit::emitCode(MachineBasicBlock::iterator &InsertI,
24c84bd2363a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-15 12:19:02 +0100 3639)                             const AArch64FrameLowering *TFI,
24c84bd2363a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-15 12:19:02 +0100 3640)                             bool TryMergeSPUpdate) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3641)   if (TagStores.empty())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3642)     return;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3643)   TagStoreInstr &FirstTagStore = TagStores[0];
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3644)   TagStoreInstr &LastTagStore = TagStores[TagStores.size() - 1];
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3645)   Size = LastTagStore.Offset - FirstTagStore.Offset + LastTagStore.Size;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3646)   DL = TagStores[0].MI->getDebugLoc();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3647) 
2481f26ac3f22 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2020-04-07 16:33:58 -0400 3648)   Register Reg;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3649)   FrameRegOffset = TFI->resolveFrameOffsetReference(
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3650)       *MF, FirstTagStore.Offset, false /*isFixed*/, false /*isSVE*/, Reg,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3651)       /*PreferFP=*/false, /*ForSimm=*/true);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3652)   FrameReg = Reg;
20cde15415d2b llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kazu Hirata             2022-12-02 20:36:06 -0800 3653)   FrameRegUpdate = std::nullopt;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3654) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3655)   mergeMemRefs(TagStores, CombinedMemRefs);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3656) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3657)   LLVM_DEBUG(dbgs() << "Replacing adjacent STG instructions:\n";
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3658)              for (const auto &Instr
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3659)                   : TagStores) { dbgs() << "  " << *Instr.MI; });
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3660) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3661)   // Size threshold where a loop becomes shorter than a linear sequence of
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3662)   // tagging instructions.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3663)   const int kSetTagLoopThreshold = 176;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3664)   if (Size < kSetTagLoopThreshold) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3665)     if (TagStores.size() < 2)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3666)       return;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3667)     emitUnrolled(InsertI);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3668)   } else {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3669)     MachineInstr *UpdateInstr = nullptr;
24c84bd2363a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-15 12:19:02 +0100 3670)     int64_t TotalOffset = 0;
24c84bd2363a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-15 12:19:02 +0100 3671)     if (TryMergeSPUpdate) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3672)       // See if we can merge base register update into the STGloop.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3673)       // This is done in AArch64LoadStoreOptimizer for "normal" stores,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3674)       // but STGloop is way too unusual for that, and also it only
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3675)       // realistically happens in function epilogue. Also, STGloop is expanded
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3676)       // before that pass.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3677)       if (InsertI != MBB->end() &&
73b6cb67dcdad llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-03 16:44:20 +0000 3678)           canMergeRegUpdate(InsertI, FrameReg, FrameRegOffset.getFixed() + Size,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3679)                             &TotalOffset)) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3680)         UpdateInstr = &*InsertI++;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3681)         LLVM_DEBUG(dbgs() << "Folding SP update into loop:\n  "
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3682)                           << *UpdateInstr);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3683)       }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3684)     }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3685) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3686)     if (!UpdateInstr && TagStores.size() < 2)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3687)       return;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3688) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3689)     if (UpdateInstr) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3690)       FrameRegUpdate = TotalOffset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3691)       FrameRegUpdateFlags = UpdateInstr->getFlags();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3692)     }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3693)     emitLoop(InsertI);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3694)     if (UpdateInstr)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3695)       UpdateInstr->eraseFromParent();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3696)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3697) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3698)   for (auto &TS : TagStores)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3699)     TS.MI->eraseFromParent();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3700) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3701) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3702) bool isMergeableStackTaggingInstruction(MachineInstr &MI, int64_t &Offset,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3703)                                         int64_t &Size, bool &ZeroData) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3704)   MachineFunction &MF = *MI.getParent()->getParent();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3705)   const MachineFrameInfo &MFI = MF.getFrameInfo();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3706) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3707)   unsigned Opcode = MI.getOpcode();
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3708)   ZeroData = (Opcode == AArch64::STZGloop || Opcode == AArch64::STZGi ||
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3709)               Opcode == AArch64::STZ2Gi);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3710) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3711)   if (Opcode == AArch64::STGloop || Opcode == AArch64::STZGloop) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3712)     if (!MI.getOperand(0).isDead() || !MI.getOperand(1).isDead())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3713)       return false;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3714)     if (!MI.getOperand(2).isImm() || !MI.getOperand(3).isFI())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3715)       return false;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3716)     Offset = MFI.getObjectOffset(MI.getOperand(3).getIndex());
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3717)     Size = MI.getOperand(2).getImm();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3718)     return true;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3719)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3720) 
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3721)   if (Opcode == AArch64::STGi || Opcode == AArch64::STZGi)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3722)     Size = 16;
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3723)   else if (Opcode == AArch64::ST2Gi || Opcode == AArch64::STZ2Gi)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3724)     Size = 32;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3725)   else
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3726)     return false;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3727) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3728)   if (MI.getOperand(0).getReg() != AArch64::SP || !MI.getOperand(1).isFI())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3729)     return false;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3730) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3731)   Offset = MFI.getObjectOffset(MI.getOperand(1).getIndex()) +
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3732)            16 * MI.getOperand(2).getImm();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3733)   return true;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3734) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3735) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3736) // Detect a run of memory tagging instructions for adjacent stack frame slots,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3737) // and replace them with a shorter instruction sequence:
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3738) // * replace STG + STG with ST2G
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3739) // * replace STGloop + STGloop with STGloop
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3740) // This code needs to run when stack slot offsets are already known, but before
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3741) // FrameIndex operands in STG instructions are eliminated.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3742) MachineBasicBlock::iterator tryMergeAdjacentSTG(MachineBasicBlock::iterator II,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3743)                                                 const AArch64FrameLowering *TFI,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3744)                                                 RegScavenger *RS) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3745)   bool FirstZeroData;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3746)   int64_t Size, Offset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3747)   MachineInstr &MI = *II;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3748)   MachineBasicBlock *MBB = MI.getParent();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3749)   MachineBasicBlock::iterator NextI = ++II;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3750)   if (&MI == &MBB->instr_back())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3751)     return II;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3752)   if (!isMergeableStackTaggingInstruction(MI, Offset, Size, FirstZeroData))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3753)     return II;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3754) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3755)   SmallVector<TagStoreInstr, 4> Instrs;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3756)   Instrs.emplace_back(&MI, Offset, Size);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3757) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3758)   constexpr int kScanLimit = 10;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3759)   int Count = 0;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3760)   for (MachineBasicBlock::iterator E = MBB->end();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3761)        NextI != E && Count < kScanLimit; ++NextI) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3762)     MachineInstr &MI = *NextI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3763)     bool ZeroData;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3764)     int64_t Size, Offset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3765)     // Collect instructions that update memory tags with a FrameIndex operand
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3766)     // and (when applicable) constant size, and whose output registers are dead
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3767)     // (the latter is almost always the case in practice). Since these
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3768)     // instructions effectively have no inputs or outputs, we are free to skip
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3769)     // any non-aliasing instructions in between without tracking used registers.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3770)     if (isMergeableStackTaggingInstruction(MI, Offset, Size, ZeroData)) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3771)       if (ZeroData != FirstZeroData)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3772)         break;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3773)       Instrs.emplace_back(&MI, Offset, Size);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3774)       continue;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3775)     }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3776) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3777)     // Only count non-transient, non-tagging instructions toward the scan
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3778)     // limit.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3779)     if (!MI.isTransient())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3780)       ++Count;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3781) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3782)     // Just in case, stop before the epilogue code starts.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3783)     if (MI.getFlag(MachineInstr::FrameSetup) ||
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3784)         MI.getFlag(MachineInstr::FrameDestroy))
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3785)       break;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3786) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3787)     // Reject anything that may alias the collected instructions.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3788)     if (MI.mayLoadOrStore() || MI.hasUnmodeledSideEffects())
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3789)       break;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3790)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3791) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3792)   // New code will be inserted after the last tagging instruction we've found.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3793)   MachineBasicBlock::iterator InsertI = Instrs.back().MI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3794)   InsertI++;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3795) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3796)   llvm::stable_sort(Instrs,
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3797)                     [](const TagStoreInstr &Left, const TagStoreInstr &Right) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3798)                       return Left.Offset < Right.Offset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3799)                     });
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3800) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3801)   // Make sure that we don't have any overlapping stores.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3802)   int64_t CurOffset = Instrs[0].Offset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3803)   for (auto &Instr : Instrs) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3804)     if (CurOffset > Instr.Offset)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3805)       return NextI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3806)     CurOffset = Instr.Offset + Instr.Size;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3807)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3808) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3809)   // Find contiguous runs of tagged memory and emit shorter instruction
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3810)   // sequencies for them when possible.
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3811)   TagStoreEdit TSE(MBB, FirstZeroData);
4f7e5930abf3f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Kazu Hirata             2022-11-25 21:57:21 -0800 3812)   std::optional<int64_t> EndOffset;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3813)   for (auto &Instr : Instrs) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3814)     if (EndOffset && *EndOffset != Instr.Offset) {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3815)       // Found a gap.
24c84bd2363a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-15 12:19:02 +0100 3816)       TSE.emitCode(InsertI, TFI, /*TryMergeSPUpdate = */ false);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3817)       TSE.clear();
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3818)     }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3819) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3820)     TSE.addInstruction(Instr);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3821)     EndOffset = Instr.Offset + Instr.Size;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3822)   }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3823) 
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500 3824)   const MachineFunction *MF = MBB->getParent();
24c84bd2363a7 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Momchil Velikov         2022-04-15 12:19:02 +0100 3825)   // Multiple FP/SP updates in a loop cannot be described by CFI instructions.
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500 3826)   TSE.emitCode(
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500 3827)       InsertI, TFI, /*TryMergeSPUpdate = */
588ecc11b8959 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2022-12-16 12:13:47 -0500 3828)       !MF->getInfo<AArch64FunctionInfo>()->needsAsyncDwarfUnwindInfo(*MF));
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3829) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3830)   return InsertI;
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3831) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3832) } // namespace
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3833) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3834) void AArch64FrameLowering::processFunctionBeforeFrameIndicesReplaced(
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3835)     MachineFunction &MF, RegScavenger *RS = nullptr) const {
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3836)   if (StackTaggingMergeSetTag)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3837)     for (auto &BB : MF)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3838)       for (MachineBasicBlock::iterator II = BB.begin(); II != BB.end();)
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3839)         II = tryMergeAdjacentSTG(II, this, RS);
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3840) }
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3841) 
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3842) /// For Win64 AArch64 EH, the offset to the Unwind object is from the SP
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3843) /// before the update.  This is easily retrieved as it is exactly the offset
d081962dead08 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-01-08 14:48:37 -0800 3844) /// that is set in processFunctionBeforeFrameFinalized.
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 3845) StackOffset AArch64FrameLowering::getFrameIndexReferencePreferSP(
2481f26ac3f22 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Matt Arsenault          2020-04-07 16:33:58 -0400 3846)     const MachineFunction &MF, int FI, Register &FrameReg,
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3847)     bool IgnoreSPUpdates) const {
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3848)   const MachineFrameInfo &MFI = MF.getFrameInfo();
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3849)   if (IgnoreSPUpdates) {
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3850)     LLVM_DEBUG(dbgs() << "Offset from the SP for " << FI << " is "
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3851)                       << MFI.getObjectOffset(FI) << "\n");
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3852)     FrameReg = AArch64::SP;
d57bba7cf831a llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Sander de Smalen        2020-11-04 08:56:54 +0000 3853)     return StackOffset::getFixed(MFI.getObjectOffset(FI));
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3854)   }
494abe139a9aa llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Daniel Frampton         2020-03-31 13:12:54 -0700 3855) 
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3856)   // Go to common code if we cannot provide sp + offset.
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3857)   if (MFI.hasVarSizedObjects() ||
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3858)       MF.getInfo<AArch64FunctionInfo>()->getStackSizeSVE() ||
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3859)       MF.getSubtarget().getRegisterInfo()->hasStackRealignment(MF))
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3860)     return getFrameIndexReference(MF, FI, FrameReg);
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3861) 
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3862)   FrameReg = AArch64::SP;
3557f493534bb llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Serguei Katkov          2021-10-05 13:28:23 +0700 3863)   return getStackOffset(MF, MFI.getObjectOffset(FI));
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3864) }
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3865) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3866) /// The parent frame offset (aka dispFrame) is only used on X86_64 to retrieve
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3867) /// the parent's frame pointer
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3868) unsigned AArch64FrameLowering::getWinEHParentFrameOffset(
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3869)     const MachineFunction &MF) const {
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3870)   return 0;
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3871) }
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3872) 
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3873) /// Funclets only need to account for space for the callee saved registers,
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3874) /// as the locals are accounted for in the parent's stack frame.
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3875) unsigned AArch64FrameLowering::getWinEHFuncletFrameSize(
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3876)     const MachineFunction &MF) const {
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3877)   // This is the size of the pushed CSRs.
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3878)   unsigned CSSize =
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3879)       MF.getInfo<AArch64FunctionInfo>()->getCalleeSavedStackSize();
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3880)   // This is the amount of stack a funclet needs to allocate.
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3881)   return alignTo(CSSize + MF.getFrameInfo().getMaxCallFrameSize(),
b727aabcb8c67 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Guillaume Chatelet      2020-03-26 17:51:25 +0000 3882)                  getStackAlign());
ad1151cf6a75f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Eli Friedman            2018-11-09 23:33:30 +0000 3883) }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3884) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3885) namespace {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3886) struct FrameObject {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3887)   bool IsValid = false;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3888)   // Index of the object in MFI.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3889)   int ObjectIndex = 0;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3890)   // Group ID this object belongs to.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3891)   int GroupIndex = -1;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3892)   // This object should be placed first (closest to SP).
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3893)   bool ObjectFirst = false;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3894)   // This object's group (which always contains the object with
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3895)   // ObjectFirst==true) should be placed first.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3896)   bool GroupFirst = false;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3897) };
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3898) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3899) class GroupBuilder {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3900)   SmallVector<int, 8> CurrentMembers;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3901)   int NextGroupIndex = 0;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3902)   std::vector<FrameObject> &Objects;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3903) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3904) public:
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3905)   GroupBuilder(std::vector<FrameObject> &Objects) : Objects(Objects) {}
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3906)   void AddMember(int Index) { CurrentMembers.push_back(Index); }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3907)   void EndCurrentGroup() {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3908)     if (CurrentMembers.size() > 1) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3909)       // Create a new group with the current member list. This might remove them
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3910)       // from their pre-existing groups. That's OK, dealing with overlapping
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3911)       // groups is too hard and unlikely to make a difference.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3912)       LLVM_DEBUG(dbgs() << "group:");
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3913)       for (int Index : CurrentMembers) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3914)         Objects[Index].GroupIndex = NextGroupIndex;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3915)         LLVM_DEBUG(dbgs() << " " << Index);
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3916)       }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3917)       LLVM_DEBUG(dbgs() << "\n");
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3918)       NextGroupIndex++;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3919)     }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3920)     CurrentMembers.clear();
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3921)   }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3922) };
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3923) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3924) bool FrameObjectCompare(const FrameObject &A, const FrameObject &B) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3925)   // Objects at a lower index are closer to FP; objects at a higher index are
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3926)   // closer to SP.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3927)   //
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3928)   // For consistency in our comparison, all invalid objects are placed
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3929)   // at the end. This also allows us to stop walking when we hit the
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3930)   // first invalid item after it's all sorted.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3931)   //
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3932)   // The "first" object goes first (closest to SP), followed by the members of
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3933)   // the "first" group.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3934)   //
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3935)   // The rest are sorted by the group index to keep the groups together.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3936)   // Higher numbered groups are more likely to be around longer (i.e. untagged
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3937)   // in the function epilogue and not at some earlier point). Place them closer
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3938)   // to SP.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3939)   //
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3940)   // If all else equal, sort by the object index to keep the objects in the
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3941)   // original order.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3942)   return std::make_tuple(!A.IsValid, A.ObjectFirst, A.GroupFirst, A.GroupIndex,
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3943)                          A.ObjectIndex) <
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3944)          std::make_tuple(!B.IsValid, B.ObjectFirst, B.GroupFirst, B.GroupIndex,
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3945)                          B.ObjectIndex);
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3946) }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3947) } // namespace
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3948) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3949) void AArch64FrameLowering::orderFrameObjects(
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3950)     const MachineFunction &MF, SmallVectorImpl<int> &ObjectsToAllocate) const {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3951)   if (!OrderFrameObjects || ObjectsToAllocate.empty())
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3952)     return;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3953) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3954)   const MachineFrameInfo &MFI = MF.getFrameInfo();
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3955)   std::vector<FrameObject> FrameObjects(MFI.getObjectIndexEnd());
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3956)   for (auto &Obj : ObjectsToAllocate) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3957)     FrameObjects[Obj].IsValid = true;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3958)     FrameObjects[Obj].ObjectIndex = Obj;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3959)   }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3960) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3961)   // Identify stack slots that are tagged at the same time.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3962)   GroupBuilder GB(FrameObjects);
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3963)   for (auto &MBB : MF) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3964)     for (auto &MI : MBB) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3965)       if (MI.isDebugInstr())
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3966)         continue;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3967)       int OpIndex;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3968)       switch (MI.getOpcode()) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3969)       case AArch64::STGloop:
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3970)       case AArch64::STZGloop:
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3971)         OpIndex = 3;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3972)         break;
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3973)       case AArch64::STGi:
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3974)       case AArch64::STZGi:
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3975)       case AArch64::ST2Gi:
0847cc06a6c4f llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Hsiangkai Wang          2023-01-16 04:21:51 +0000 3976)       case AArch64::STZ2Gi:
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3977)         OpIndex = 1;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3978)         break;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3979)       default:
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3980)         OpIndex = -1;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3981)       }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3982) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3983)       int TaggedFI = -1;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3984)       if (OpIndex >= 0) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3985)         const MachineOperand &MO = MI.getOperand(OpIndex);
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3986)         if (MO.isFI()) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3987)           int FI = MO.getIndex();
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3988)           if (FI >= 0 && FI < MFI.getObjectIndexEnd() &&
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3989)               FrameObjects[FI].IsValid)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3990)             TaggedFI = FI;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3991)         }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3992)       }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3993) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3994)       // If this is a stack tagging instruction for a slot that is not part of a
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3995)       // group yet, either start a new group or add it to the current one.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3996)       if (TaggedFI >= 0)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3997)         GB.AddMember(TaggedFI);
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3998)       else
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 3999)         GB.EndCurrentGroup();
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4000)     }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4001)     // Groups should never span multiple basic blocks.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4002)     GB.EndCurrentGroup();
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4003)   }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4004) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4005)   // If the function's tagged base pointer is pinned to a stack slot, we want to
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4006)   // put that slot first when possible. This will likely place it at SP + 0,
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4007)   // and save one instruction when generating the base pointer because IRG does
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4008)   // not allow an immediate offset.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4009)   const AArch64FunctionInfo &AFI = *MF.getInfo<AArch64FunctionInfo>();
b0df70403d20e llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Fangrui Song            2022-12-04 22:43:14 +0000 4010)   std::optional<int> TBPI = AFI.getTaggedBasePointerIndex();
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4011)   if (TBPI) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4012)     FrameObjects[*TBPI].ObjectFirst = true;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4013)     FrameObjects[*TBPI].GroupFirst = true;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4014)     int FirstGroupIndex = FrameObjects[*TBPI].GroupIndex;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4015)     if (FirstGroupIndex >= 0)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4016)       for (FrameObject &Object : FrameObjects)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4017)         if (Object.GroupIndex == FirstGroupIndex)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4018)           Object.GroupFirst = true;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4019)   }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4020) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4021)   llvm::stable_sort(FrameObjects, FrameObjectCompare);
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4022) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4023)   int i = 0;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4024)   for (auto &Obj : FrameObjects) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4025)     // All invalid items are sorted at the end, so it's safe to stop.
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4026)     if (!Obj.IsValid)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4027)       break;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4028)     ObjectsToAllocate[i++] = Obj.ObjectIndex;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4029)   }
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4030) 
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4031)   LLVM_DEBUG(dbgs() << "Final frame order:\n"; for (auto &Obj
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4032)                                                     : FrameObjects) {
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4033)     if (!Obj.IsValid)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4034)       break;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4035)     dbgs() << "  " << Obj.ObjectIndex << ": group " << Obj.GroupIndex;
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4036)     if (Obj.ObjectFirst)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4037)       dbgs() << ", first";
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4038)     if (Obj.GroupFirst)
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4039)       dbgs() << ", group-first";
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4040)     dbgs() << "\n";
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4041)   });
2e794a46b58c5 llvm/lib/Target/AArch64/AArch64FrameLowering.cpp (Evgenii Stepanov        2020-10-02 13:09:13 -0700 4042) }
