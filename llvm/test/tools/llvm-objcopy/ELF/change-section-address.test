# Tests behavior of --change-section-address option
# --------------------------------------------------
# yaml2obj generates an object file %ti that looks like this:
#
# llvm-readelf --section-headers %ti
# Section Headers:
#   [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
#   [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
#   [ 1] .text1            PROGBITS        0000000000000100 000040 000100 00      0   0  0
#   [ 2] .text2            PROGBITS        0000000000000200 000140 000100 00      0   0  0
#   [ 3] .anotherone       PROGBITS        0000000000000300 000240 000100 00      0   0  0
#   [ 4] =a-b+c++d         PROGBITS        0000000000000400 000340 000100 00      0   0  0
#   [ 5] .strtab           STRTAB          0000000000000000 000440 000001 00      0   0  1
#   [ 6] .shstrtab         STRTAB          0000000000000000 000441 000037 00      0   0  1
#
# Various changes are applied to this file using llvm-objcopy --change-section-address and
# results are checked for expected address values, or errors.
#

# RUN: yaml2obj -DTYPE=REL %s -o %ti

# Basic check that the option processes wildcards and changes the address as expected
# RUN: llvm-objcopy --change-section-address *+0x20 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-ADD-ALL

# Check --change-section-address alias --adjust-section-vma
# RUN: llvm-objcopy --adjust-section-vma *+0x20 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-ADD-ALL

# Check negative adjustment
# RUN: llvm-objcopy --change-section-address .anotherone-0x30 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-SUB-SECTION

# Check wildcard that does not change all sections
# RUN: llvm-objcopy --change-section-address .text*+0x20 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-ADD-PATTERN

# Check regex
# RUN: llvm-objcopy --regex --change-section-address .text.+0x20 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-ADD-PATTERN

# Check setting the address to a specific value
# RUN: llvm-objcopy --change-section-address .text*=0x10 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-SET-PATTERN

# Check adjustment to max possible value (UINT64_MAX)
# RUN: llvm-objcopy --change-section-address .text2+0xfffffffffffffdff %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-MAX

# Check adjustment to min possible value (0)
# RUN: llvm-objcopy --change-section-address .text2-0x200 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-ZERO

# Check setting to max possible value (UINT64_MAX)
# RUN: llvm-objcopy --change-section-address .text2=0xffffffffffffffff %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-MAX

# Check maximum negative adjustment
# RUN: llvm-objcopy --change-section-address .text2=0xffffffffffffffff %ti %to1
# RUN: llvm-objcopy --change-section-address .text2-0xffffffffffffffff %to1 %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-ZERO

# Check two independent changes
# RUN: llvm-objcopy --change-section-address .text1=0x110 --change-section-address .text2=0x210 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-INDEPENDENT

# check two overlapping changes
# RUN: llvm-objcopy --change-section-address .anotherone-0x30 --change-section-address .anotherone+0x20 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-USE-LAST

# Check unused option
# RUN: llvm-objcopy --change-section-address .anotherone=0x455 --change-section-address *+0x20 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-NOTSUPERSET-SET

# Check partial overlap (.anotherone overlaps)
# RUN: llvm-objcopy --change-section-address *+0x20 --change-section-address .anotherone=0x455 %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-SUPERSET-SET

# Check more complex partial overlap (P1: .anotherone, .text2, P2: .text1, text2) (.text2 overlaps)
# RUN: llvm-objcopy --regex  --change-section-address  ".(text2|anotherone)+0x20" --change-section-address .text.*+0x30  %ti %to
# RUN: llvm-readelf --section-headers %to | FileCheck %s --check-prefix=CHECK-PARTIAL-OVERLAP

# CHECK-ADD-ALL:          [Nr] Name              Type            Address
# CHECK-ADD-ALL:               .text1
# CHECK-ADD-ALL-SAME:                                            0000000000000120
# CHECK-ADD-ALL:               .text2
# CHECK-ADD-ALL-SAME:                                            0000000000000220
# CHECK-ADD-ALL:               .anotherone
# CHECK-ADD-ALL-SAME:                                            0000000000000320
# CHECK-ADD-ALL:               =a-b+c++d
# CHECK-ADD-ALL-SAME:                                            0000000000000420
# CHECK-ADD-ALL:               .strtab
# CHECK-ADD_ALL-SAME:                                            0000000000000020
# CHECK-ADD-ALL:               .shstrtab
# CHECK-ADD-ALL-SAME:                                            0000000000000020

# CHECK-SUB-SECTION:           .text1
# CHECK-SUB-SECTION-SAME:                                        0000000000000100
# CHECK-SUB-SECTION:           .text2
# CHECK-SUB-SECTION-SAME:                                        0000000000000200
# CHECK-SUB-SECTION:           .anotherone
# CHECK-SUB-SECTION-SAME:                                        00000000000002d0

# CHECK-ADD-PATTERN:           .text1
# CHECK-ADD-PATTERN-SAME:                                        0000000000000120
# CHECK-ADD-PATTERN:           .text2
# CHECK-ADD-PATTERN-SAME:                                        0000000000000220
# CHECK-ADD-PATTERN:           .anotherone
# CHECK-ADD-PATTERN-SAME:                                        0000000000000300

# CHECK-SET-PATTERN:           .text1
# CHECK-SET-PATTERN-SAME:                                        0000000000000010
# CHECK-SET-PATTERN:           .text2
# CHECK-SET-PATTERN-SAME:                                        0000000000000010
# CHECK-SET-PATTERN:           .anotherone
# CHECK-SET-PATTERN-SAME:                                        0000000000000300

# CHECK-MAX:                   .text2
# CHECK-MAX-SAME:                                                ffffffffffffffff
# CHECK-ZERO:                  .text2
# CHECK-ZERO-SAME:                                               0000000000000000

# CHECK-INDEPENDENT:           .text1
# CHECK-INDEPENDENT-SAME:                                        0000000000000110
# CHECK-INDEPENDENT:           .text2
# CHECK-INDEPENDENT-SAME:                                        0000000000000210

# CHECK-USE-LAST:              .anotherone
# CHECK-USE-LAST-SAME:                                           0000000000000320

# CHECK-NOTSUPERSET-SET:       .text1
# CHECK-NOTSUPERSET-SET-SAME:                                    0000000000000120
# CHECK-NOTSUPERSET-SET:       .text2
# CHECK-NOTSUPERSET-SET-SAME:                                    0000000000000220
# CHECK-NOTSUPERSET-SET:       .anotherone
# CHECK-NOTSUPERSET-SET-SAME:                                    0000000000000320

# CHECK-SUPERSET-SET:          .text1
# CHECK-SUPERSET-SET-SAME:                                       0000000000000120
# CHECK-SUPERSET-SET:          .text2
# CHECK-SUPERSET-SET-SAME:                                       0000000000000220
# CHECK-SUPERSET-SET:          .anotherone
# CHECK-SUPERSET-SET-SAME:                                       0000000000000455

# CHECK-PARTIAL-OVERLAP:        .text1
# CHECK-PARTIAL-OVERLAP-SAME:                                    0000000000000130
# CHECK-PARTIAL-OVERLAP:        .text2
# CHECK-PARTIAL-OVERLAP-SAME:                                    0000000000000230
# CHECK-PARTIAL-OVERLAP:        .anotherone
# CHECK-PARTIAL-OVERLAP-SAME:                                    0000000000000320

# Overflow by 1
# RUN: not llvm-objcopy --change-section-address .anotherone+0xfffffffffffffd00 %ti 2>&1 | FileCheck %s --check-prefix=ERR-OVERFLOW
# Underflow by 1
# RUN: not llvm-objcopy --change-section-address .text2-0x201 %ti 2>&1 | FileCheck %s --check-prefix=ERR-UNDERFLOW
# Invalid argument value
# RUN: not llvm-objcopy --change-section-address 0 %ti 2>&1 | FileCheck %s --check-prefix=ERR-IVALID-VAL
# Invalid value in argument value
# RUN: not llvm-objcopy --change-section-address .anotherone+0c50 %ti 2>&1 | FileCheck %s --check-prefix=ERR-NOT-INTEGER
# Value does not fit in uint64_t
# RUN  not llvm-objcopy --change-section-address .text1=0x10000000000000000 %ti %to 2>&1 | FileCheck %s --chack-prefix=ERR-NOT-INTEGER
# Missing section pattern
# RUN: not llvm-objcopy --change-section-address =0x10 %ti 2>&1 | FileCheck %s --check-prefix=ERR-MISSING-SECTION
# Missing value after -
# RUN: not llvm-objcopy --change-section-address .text1- %ti 2>&1 | FileCheck %s --check-prefix=ERR-MISSING-VALUE-MINUS
# Missing value after +
# RUN: not llvm-objcopy --change-section-address .text1+ %ti 2>&1 | FileCheck %s --check-prefix=ERR-MISSING-VALUE-PLUS
# Missing value after =
# RUN: not llvm-objcopy --change-section-address .text1= %ti 2>&1 | FileCheck %s --check-prefix=ERR-MISSING-VALUE-EQUAL
# Invalid regex
# RUN: not llvm-objcopy --regex --change-section-address  "ab**-0x20" %ti 2>&1 | FileCheck %s --check-prefix=ERR-MATCHER-FAILURE

# ERR-OVERFLOW: address 0x300 cannot be increased by 0xfffffffffffffd00. The result would overflow
# ERR-UNDERFLOW: address 0x200 cannot be decreased by 0x201. The result would underflow
# ERR-IVALID-VAL: error: bad format for --change-section-address: argument value 0 is invalid. See --help
# ERR-NOT-INTEGER: error: bad format for --change-section-address: value after + is 0c50 when it should be a 64-bit integer
# ERR-MISSING-SECTION: error: bad format for --change-section-address: missing section pattern to apply address change to
# ERR-MISSING-VALUE-MINUS: error: bad format for --change-section-address: missing value of offset after '-'
# ERR-MISSING-VALUE-PLUS: error: bad format for --change-section-address: missing value of offset after '+'
# ERR-MISSING-VALUE-EQUAL: error: bad format for --change-section-address: missing address value after '='
# ERR-MATCHER-FAILURE: error: cannot compile regular expression 'ab**': repetition-operator operand invalid

--- !ELF
FileHeader:
  Class:           ELFCLASS64
  Data:            ELFDATA2LSB
  Type:            ET_[[TYPE]]
Sections:
  - Name:          .text1
    Type:          SHT_PROGBITS
    Size:          0x100
    Address:       0x100
  - Name:          .text2
    Type:          SHT_PROGBITS
    Size:          0x100
    Address:       0x200
  - Name:          .anotherone
    Type:          SHT_PROGBITS
    Size:          0x100
    Address:       0x300
  - Name:          =a-b+c++d
    Type:          SHT_PROGBITS
    Size:          0x100
    Address:       0x400

# RUN: yaml2obj -DTYPE=EXEC %s -o %ti

# Input file is not ET_REL
# RUN: not llvm-objcopy --change-section-address *+0x20 %ti  2>&1 | FileCheck %s --check-prefix=ERR-FILE-TYPE

# ERR-FILE-TYPE: cannot change section address in a non-relocatable file
