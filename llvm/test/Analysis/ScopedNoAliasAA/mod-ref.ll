; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=gvn -S < %s | FileCheck %s

declare void @use(i64)

define i64 @foo(ptr noalias nocapture noundef align 8 dereferenceable(24) %p) {
; CHECK-LABEL: define i64 @foo(
; CHECK-SAME: ptr noalias nocapture noundef align 8 dereferenceable(24) [[P:%.*]]) {
; CHECK-NEXT:    [[P1:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 16
; CHECK-NEXT:    [[V1:%.*]] = load i64, ptr [[P1]], align 8
; CHECK-NEXT:    call void @use(i64 [[V1]])
; CHECK-NEXT:    [[P2:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) [[P2]], i8 0, i64 16, i1 false), !alias.scope !0
; CHECK-NEXT:    ret i64 [[V1]]
;
  %p1 = getelementptr inbounds i8, ptr %p, i64 16
  %v1 = load i64, ptr %p1, align 8
  call void @use(i64 %v1)
  %p2 = getelementptr inbounds i8, ptr %p, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %p2, i8 0, i64 16, i1 false), !alias.scope !0
  %v2 = load i64, ptr %p1, align 8, !noalias !0
  ret i64 %v2
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!0 = !{!1}
!1 = distinct !{!1, !2}
!2 = distinct !{!2}
