; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=instsimplify < %s -S | FileCheck %s

define i1 @shl_C_X_ugt(i8 %x) {
; CHECK-LABEL: @shl_C_X_ugt(
; CHECK-NEXT:    ret i1 false
;
  %shl = shl i8 7, %x
  %r = icmp ugt i8 %shl, 224
  ret i1 %r
}

define i1 @shl_C_X_ugt2(i8 %x) {
; CHECK-LABEL: @shl_C_X_ugt2(
; CHECK-NEXT:    ret i1 false
;
  %shl = shl i8 5, %x
  %r = icmp ugt i8 %shl, 192
  ret i1 %r
}

define i1 @shl_C_X_ugt_fail(i8 %x) {
; CHECK-LABEL: @shl_C_X_ugt_fail(
; CHECK-NEXT:    [[SHL:%.*]] = shl i8 1, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp ugt i8 [[SHL]], 127
; CHECK-NEXT:    ret i1 [[R]]
;
  %shl = shl i8 1, %x
  %r = icmp ugt i8 %shl, 127
  ret i1 %r
}

define i1 @shl_C_X_ugt_fail2(i8 %x) {
; CHECK-LABEL: @shl_C_X_ugt_fail2(
; CHECK-NEXT:    [[SHL:%.*]] = shl i8 3, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp ugt i8 [[SHL]], -66
; CHECK-NEXT:    ret i1 [[R]]
;
  %shl = shl i8 3, %x
  %r = icmp ugt i8 %shl, 190
  ret i1 %r
}

define i1 @shl_C_X_ugt_fail3(i8 %x) {
; CHECK-LABEL: @shl_C_X_ugt_fail3(
; CHECK-NEXT:    [[SHL:%.*]] = shl i8 -1, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp ugt i8 [[SHL]], -2
; CHECK-NEXT:    ret i1 [[R]]
;
  %shl = shl i8 -1, %x
  %r = icmp ugt i8 %shl, 254
  ret i1 %r
}

define i1 @shl_C_X_ugt_todo(i8 %x) {
; CHECK-LABEL: @shl_C_X_ugt_todo(
; CHECK-NEXT:    [[SHL:%.*]] = shl i8 -127, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp ugt i8 [[SHL]], -116
; CHECK-NEXT:    ret i1 [[R]]
;
  %shl = shl i8 129, %x
  %r = icmp ugt i8 %shl, 140
  ret i1 %r
}

define i1 @shl_X_C_ugt(i8 %x) {
; CHECK-LABEL: @shl_X_C_ugt(
; CHECK-NEXT:    ret i1 false
;
  %shl = shl i8 %x, 6
  %r = icmp ugt i8 %shl, 192
  ret i1 %r
}

define i1 @shl_X_C_ugt_fail(i8 %x) {
; CHECK-LABEL: @shl_X_C_ugt_fail(
; CHECK-NEXT:    [[SHL:%.*]] = shl i8 [[X:%.*]], 6
; CHECK-NEXT:    [[R:%.*]] = icmp ugt i8 [[SHL]], -65
; CHECK-NEXT:    ret i1 [[R]]
;
  %shl = shl i8 %x, 6
  %r = icmp ugt i8 %shl, 191
  ret i1 %r
}

define i1 @shl_X_C_ugt_fail2(i8 %x) {
; CHECK-LABEL: @shl_X_C_ugt_fail2(
; CHECK-NEXT:    [[SHL:%.*]] = shl i8 [[X:%.*]], 5
; CHECK-NEXT:    [[R:%.*]] = icmp ugt i8 [[SHL]], -64
; CHECK-NEXT:    ret i1 [[R]]
;
  %shl = shl i8 %x, 5
  %r = icmp ugt i8 %shl, 192
  ret i1 %r
}

define i1 @and_ugt(i8 %xx) {
; CHECK-LABEL: @and_ugt(
; CHECK-NEXT:    ret i1 false
;
  %x = mul i8 %xx, %xx  ; thwart complexity-based canonicalization
  %negx = sub i8 0, %x
  %x_p2 = and i8 %negx, %x
  %r = icmp ugt i8 %x_p2, 128
  ret i1 %r
}

define i1 @and_ugt2(i8 %xx) {
; CHECK-LABEL: @and_ugt2(
; CHECK-NEXT:    ret i1 false
;
  %x = mul i8 %xx, %xx  ; thwart complexity-based canonicalization
  %negx = sub i8 0, %x
  %x_p2 = and i8 %x, %negx
  %r = icmp ugt i8 %x_p2, 128
  ret i1 %r
}

define i1 @and_ugt_fail(i8 %xx) {
; CHECK-LABEL: @and_ugt_fail(
; CHECK-NEXT:    [[X:%.*]] = mul i8 [[XX:%.*]], [[XX]]
; CHECK-NEXT:    [[NEGX:%.*]] = sub i8 0, [[X]]
; CHECK-NEXT:    [[X_P2:%.*]] = and i8 [[X]], [[NEGX]]
; CHECK-NEXT:    [[R:%.*]] = icmp ugt i8 [[X_P2]], 127
; CHECK-NEXT:    ret i1 [[R]]
;
  %x = mul i8 %xx, %xx  ; thwart complexity-based canonicalization
  %negx = sub i8 0, %x
  %x_p2 = and i8 %x, %negx
  %r = icmp ugt i8 %x_p2, 127
  ret i1 %r
}

define i1 @urem_okay(i8 %x) {
; CHECK-LABEL: @urem_okay(
; CHECK-NEXT:    ret i1 true
;
  %val = urem i8 34, %x
  %r = icmp ule i8 %val, 35
  ret i1 %r
}

define i1 @urem_fail(i8 %x) {
; CHECK-LABEL: @urem_fail(
; CHECK-NEXT:    [[VAL:%.*]] = urem i8 34, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp ule i8 [[VAL]], 33
; CHECK-NEXT:    ret i1 [[R]]
;
  %val = urem i8 34, %x
  %r = icmp ule i8 %val, 33
  ret i1 %r
}

define i1 @srem_posC_okay0(i8 %x) {
; CHECK-LABEL: @srem_posC_okay0(
; CHECK-NEXT:    ret i1 true
;
  %val = srem i8 34, %x
  %r = icmp sle i8 %val, 34
  ret i1 %r
}

define i1 @srem_posC_okay1(i8 %x) {
; CHECK-LABEL: @srem_posC_okay1(
; CHECK-NEXT:    ret i1 true
;
  %val = srem i8 34, %x
  %r = icmp sge i8 %val, -3
  ret i1 %r
}

define i1 @srem_negC_okay0(i8 %x) {
; CHECK-LABEL: @srem_negC_okay0(
; CHECK-NEXT:    ret i1 true
;
  %val = srem i8 -34, %x
  %r = icmp sle i8 %val, 0
  ret i1 %r
}

define i1 @srem_negC_okay1(i8 %x) {
; CHECK-LABEL: @srem_negC_okay1(
; CHECK-NEXT:    ret i1 true
;
  %val = srem i8 -34, %x
  %r = icmp sge i8 %val, -34
  ret i1 %r
}

define i1 @srem_posC_fail0(i8 %x) {
; CHECK-LABEL: @srem_posC_fail0(
; CHECK-NEXT:    [[VAL:%.*]] = srem i8 34, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp sle i8 [[VAL]], 32
; CHECK-NEXT:    ret i1 [[R]]
;
  %val = srem i8 34, %x
  %r = icmp sle i8 %val, 32
  ret i1 %r
}

define i1 @srem_posC_fail1(i8 %x) {
; CHECK-LABEL: @srem_posC_fail1(
; CHECK-NEXT:    [[VAL:%.*]] = srem i8 34, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp sge i8 [[VAL]], 1
; CHECK-NEXT:    ret i1 [[R]]
;
  %val = srem i8 34, %x
  %r = icmp sge i8 %val, 1
  ret i1 %r
}

define i1 @srem_negC_fail0(i8 %x) {
; CHECK-LABEL: @srem_negC_fail0(
; CHECK-NEXT:    [[VAL:%.*]] = srem i8 -34, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp sle i8 [[VAL]], -1
; CHECK-NEXT:    ret i1 [[R]]
;
  %val = srem i8 -34, %x
  %r = icmp sle i8 %val, -1
  ret i1 %r
}

define i1 @srem_negC_fail1(i8 %x) {
; CHECK-LABEL: @srem_negC_fail1(
; CHECK-NEXT:    [[VAL:%.*]] = srem i8 -34, [[X:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp sge i8 [[VAL]], -33
; CHECK-NEXT:    ret i1 [[R]]
;
  %val = srem i8 -34, %x
  %r = icmp sge i8 %val, -33
  ret i1 %r
}

define i1 @intrinsic_test1(i64 %x, i32 %y, i64 %z) {
; CHECK-LABEL: @intrinsic_test1(
; CHECK-NEXT:    ret i1 false
;
  %sh_prom = zext nneg i32 %y to i64
  %shl = shl nuw i64 1, %sh_prom
  %cmp1 = icmp eq i64 %z, 0
  %umin1 = call i64 @llvm.umin.i64(i64 %shl, i64 %z)
  %sel = select i1 %cmp1, i64 1, i64 %umin1
  %umin2 = call i64 @llvm.umin.i64(i64 %x, i64 %sel)
  %cmp = icmp ugt i64 %umin2, -71777214294589697
  ret i1 %cmp
}

define i1 @intrinsic_test2(i32 %x, i32 %y) {
; CHECK-LABEL: @intrinsic_test2(
; CHECK-NEXT:    [[SH:%.*]] = shl nuw nsw i32 16, [[X:%.*]]
; CHECK-NEXT:    [[UMIN:%.*]] = call i32 @llvm.umin.i32(i32 [[SH]], i32 64)
; CHECK-NEXT:    [[ADD:%.*]] = add nuw nsw i32 [[Y:%.*]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD]], [[UMIN]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %sh = shl nuw nsw i32 16, %x
  %umin = call i32 @llvm.umin.i32(i32 %sh, i32 64)
  %umax = call i32 @llvm.umax.i32(i32 %umin, i32 1)
  %add = add nuw nsw i32 %y, 1
  %cmp = icmp eq i32 %add, %umax
  ret i1 %cmp
}

define i1 @constant_test(i64 %x, i1 %cond) {
; CHECK-LABEL: @constant_test(
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[COND:%.*]], i64 2147483647, i64 18446744073709551
; CHECK-NEXT:    [[CMP2:%.*]] = icmp ugt i64 [[X:%.*]], [[SEL]]
; CHECK-NEXT:    ret i1 [[CMP2]]
;
  %sel = select i1 %cond, i64 2147483647, i64 18446744073709551
  %cmp1 = icmp slt i64 %x, 0
  %cmp2 = icmp ugt i64 %x, %sel
  %or.cond = or i1 %cmp1, %cmp2
  ret i1 %or.cond
}

; Make sure that we don't return a full range for an imm arg.
define i1 @immarg_test(i32 %x, i32 %y, i1 %c1, i1 %c2, i1 %c3, i1 %c4, i1 %c5, i1 %c6, i1 %c7) {
; CHECK-LABEL: @immarg_test(
; CHECK-NEXT:    [[ABS:%.*]] = call i32 @llvm.abs.i32(i32 [[Y:%.*]], i1 true)
; CHECK-NEXT:    [[M1:%.*]] = select i1 [[C1:%.*]], i32 [[ABS]], i32 0
; CHECK-NEXT:    [[M2:%.*]] = select i1 [[C2:%.*]], i32 [[M1]], i32 1
; CHECK-NEXT:    [[M3:%.*]] = select i1 [[C3:%.*]], i32 [[M2]], i32 2
; CHECK-NEXT:    [[M4:%.*]] = select i1 [[C4:%.*]], i32 [[M3]], i32 3
; CHECK-NEXT:    [[M5:%.*]] = select i1 [[C5:%.*]], i32 [[M4]], i32 4
; CHECK-NEXT:    [[M6:%.*]] = select i1 [[C6:%.*]], i32 [[M5]], i32 5
; CHECK-NEXT:    [[M7:%.*]] = select i1 [[C7:%.*]], i32 [[M6]], i32 6
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[M7]], 1
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %abs = call i32 @llvm.abs.i32(i32 %y, i1 true)
  %m1 = select i1 %c1, i32 %abs, i32 0
  %m2 = select i1 %c2, i32 %m1, i32 1
  %m3 = select i1 %c3, i32 %m2, i32 2
  %m4 = select i1 %c4, i32 %m3, i32 3
  %m5 = select i1 %c5, i32 %m4, i32 4
  %m6 = select i1 %c6, i32 %m5, i32 5
  %m7 = select i1 %c7, i32 %m6, i32 6
  %cmp = icmp eq i32 %m7, 1
  ret i1 %cmp
}
