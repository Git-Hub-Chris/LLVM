; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple arm64e-apple-darwin             -verify-machineinstrs \
; RUN:   -global-isel=0 | FileCheck %s --check-prefixes=DARWIN,CHECK
; RUN: llc < %s -mtriple arm64e-apple-darwin             -verify-machineinstrs \
; RUN:   -global-isel=1 -global-isel-abort=1 | FileCheck %s --check-prefixes=DARWIN,CHECK
; RUN: llc < %s -mtriple aarch64-linux-gnu -mattr=+pauth -verify-machineinstrs \
; RUN:   -global-isel=0 | FileCheck %s --check-prefixes=ELF,CHECK
; RUN: llc < %s -mtriple aarch64-linux-gnu -mattr=+pauth -verify-machineinstrs \
; RUN:   -global-isel=1 -global-isel-abort=1 | FileCheck %s --check-prefixes=ELF,CHECK

define i64 @test_sign_ia(i64 %arg, i64 %arg1) {
; DARWIN-LABEL: _test_sign_ia:
; ELF-LABEL:    test_sign_ia:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     pacia x0, x1
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 0, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_sign_ia_zero(i64 %arg) {
; DARWIN-LABEL: _test_sign_ia_zero:
; ELF-LABEL:    test_sign_ia_zero:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     paciza x0
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 0, i64 0)
  ret i64 %tmp
}

define i64 @test_sign_ib(i64 %arg, i64 %arg1) {
; DARWIN-LABEL: _test_sign_ib:
; ELF-LABEL:    test_sign_ib:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     pacib x0, x1
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 1, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_sign_ib_zero(i64 %arg) {
; DARWIN-LABEL: _test_sign_ib_zero:
; ELF-LABEL:    test_sign_ib_zero:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     pacizb x0
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 1, i64 0)
  ret i64 %tmp
}

define i64 @test_sign_da(i64 %arg, i64 %arg1) {
; DARWIN-LABEL: _test_sign_da:
; ELF:          test_sign_da:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     pacda x0, x1
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 2, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_sign_da_zero(i64 %arg) {
; DARWIN-LABEL: _test_sign_da_zero:
; ELF-LABEL:    test_sign_da_zero:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     pacdza x0
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 2, i64 0)
  ret i64 %tmp
}

define i64 @test_sign_db(i64 %arg, i64 %arg1) {
; DARWIN-LABEL: _test_sign_db:
; ELF-LABEL:    test_sign_db:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     pacdb x0, x1
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 3, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_sign_db_zero(i64 %arg) {
; DARWIN-LABEL: _test_sign_db_zero:
; ELF-LABEL:    test_sign_db_zero:
; DARWIN:       ; %bb.0:
; ELF:          // %bb.0:
; CHECK-NEXT:     pacdzb x0
; CHECK-NEXT:     ret
  %tmp = call i64 @llvm.ptrauth.sign(i64 %arg, i32 3, i64 0)
  ret i64 %tmp
}

declare i64 @llvm.ptrauth.sign(i64, i32, i64)
