; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme2 < %s | FileCheck %s

define i32 @no_tpidr2_save_required() "aarch64_pstate_za_shared" {
; CHECK-LABEL: no_tpidr2_save_required:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w0, #42 // =0x2a
; CHECK-NEXT:    ret
entry:
  ret i32 42
}

define float @multi_bb_stpidr2_save_required(i32 %a, float %b, float %c) "aarch64_pstate_za_shared" {
; CHECK-LABEL: multi_bb_stpidr2_save_required:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cbz w0, .LBB1_2
; CHECK-NEXT:  // %bb.1: // %use_b
; CHECK-NEXT:    fmov s1, #4.00000000
; CHECK-NEXT:    fadd s0, s0, s1
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB1_2: // %use_c
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset w30, -16
; CHECK-NEXT:    fmov s0, s1
; CHECK-NEXT:    bl cosf
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
  %cmp = icmp ne i32 %a, 0
  br i1 %cmp, label %use_b, label %use_c

use_b:
  %faddr = fadd float %b, 4.0
  br label %exit

use_c:
  %res2 = call float @llvm.cos.f32(float %c)
  br label %exit

exit:
  %ret = phi float [%faddr, %use_b], [%res2, %use_c]
  ret float %ret
}

declare float @llvm.cos.f32(float)
