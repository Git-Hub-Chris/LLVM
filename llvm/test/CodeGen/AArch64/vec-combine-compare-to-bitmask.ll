; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=aarch64-apple-darwin -mattr=+neon -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,SDAG
; RUN: llc -mtriple=aarch64-apple-darwin -mattr=+neon -global-isel -global-isel-abort=2 -verify-machineinstrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECK,GISEL

; Basic tests from input vector to bitmask
; IR generated from clang for:
; __builtin_convertvector + reinterpret_cast<uint16&>

; GISEL: warning: Instruction selection used fallback path for convert_to_bitmask4
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask2
; GISEL-NEXT: warning: Instruction selection used fallback path for clang_builtins_undef_concat_convert_to_bitmask4
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_no_compare
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_with_compare_chain
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_with_trunc_in_chain
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_with_unknown_type_in_long_chain
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_with_different_types_in_chain
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_2xi32
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_4xi8
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_8xi2
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_to_bitmask_float
; GISEL-NEXT: warning: Instruction selection used fallback path for convert_legalized_illegal_element_size
; GISEL-NEXT: warning: Instruction selection used fallback path for no_direct_convert_for_bad_concat
; GISEL-NEXT: warning: Instruction selection used fallback path for no_combine_illegal_num_elements

define i16 @convert_to_bitmask16(<16 x i8> %vec) {
; Bits used in mask
; SDAG-LABEL: convert_to_bitmask16:
; SDAG:       ; %bb.0:
; SDAG-NEXT:  Lloh0:
; SDAG-NEXT:    adrp x8, lCPI0_0@PAGE
; SDAG-NEXT:    cmeq.16b v0, v0, #0
; SDAG-NEXT:  Lloh1:
; SDAG-NEXT:    ldr q1, [x8, lCPI0_0@PAGEOFF]
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:    ext.16b v1, v0, v0, #8
; SDAG-NEXT:    zip1.16b v0, v0, v1
; SDAG-NEXT:    addv.8h h0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh0, Lloh1
;
; GISEL-LABEL: convert_to_bitmask16:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    sub sp, sp, #16
; GISEL-NEXT:    .cfi_def_cfa_offset 16
; GISEL-NEXT:    cmeq.16b v0, v0, #0
; GISEL-NEXT:    mvn.16b v0, v0
; GISEL-NEXT:    umov.b w8, v0[1]
; GISEL-NEXT:    umov.b w9, v0[0]
; GISEL-NEXT:    umov.b w10, v0[2]
; GISEL-NEXT:    umov.b w11, v0[3]
; GISEL-NEXT:    and w8, w8, #0x1
; GISEL-NEXT:    bfi w9, w8, #1, #31
; GISEL-NEXT:    and w8, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[4]
; GISEL-NEXT:    orr w8, w9, w8, lsl #2
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[5]
; GISEL-NEXT:    orr w8, w8, w9, lsl #3
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[6]
; GISEL-NEXT:    orr w8, w8, w9, lsl #4
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[7]
; GISEL-NEXT:    orr w8, w8, w9, lsl #5
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[8]
; GISEL-NEXT:    orr w8, w8, w9, lsl #6
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[9]
; GISEL-NEXT:    orr w8, w8, w9, lsl #7
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[10]
; GISEL-NEXT:    orr w8, w8, w9, lsl #8
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[11]
; GISEL-NEXT:    orr w8, w8, w9, lsl #9
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[12]
; GISEL-NEXT:    orr w8, w8, w9, lsl #10
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[13]
; GISEL-NEXT:    orr w8, w8, w9, lsl #11
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[14]
; GISEL-NEXT:    orr w8, w8, w9, lsl #12
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[15]
; GISEL-NEXT:    orr w8, w8, w9, lsl #13
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #14
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #15
; GISEL-NEXT:    strh w8, [sp, #14]
; GISEL-NEXT:    and w0, w8, #0xffff
; GISEL-NEXT:    add sp, sp, #16
; GISEL-NEXT:    ret

; Actual conversion

  %cmp_result = icmp ne <16 x i8> %vec, zeroinitializer
  %bitmask = bitcast <16 x i1> %cmp_result to i16
  ret i16 %bitmask
}

define i16 @convert_to_bitmask8(<8 x i16> %vec) {
; SDAG-LABEL: convert_to_bitmask8:
; SDAG:       ; %bb.0:
; SDAG-NEXT:  Lloh2:
; SDAG-NEXT:    adrp x8, lCPI1_0@PAGE
; SDAG-NEXT:    cmeq.8h v0, v0, #0
; SDAG-NEXT:  Lloh3:
; SDAG-NEXT:    ldr q1, [x8, lCPI1_0@PAGEOFF]
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:    addv.8h h0, v0
; SDAG-NEXT:    fmov w8, s0
; SDAG-NEXT:    and w0, w8, #0xff
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh2, Lloh3
;
; GISEL-LABEL: convert_to_bitmask8:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    sub sp, sp, #16
; GISEL-NEXT:    .cfi_def_cfa_offset 16
; GISEL-NEXT:    cmeq.8h v0, v0, #0
; GISEL-NEXT:    mvn.16b v0, v0
; GISEL-NEXT:    xtn.8b v0, v0
; GISEL-NEXT:    umov.b w8, v0[1]
; GISEL-NEXT:    umov.b w9, v0[0]
; GISEL-NEXT:    umov.b w10, v0[2]
; GISEL-NEXT:    umov.b w11, v0[3]
; GISEL-NEXT:    and w8, w8, #0x1
; GISEL-NEXT:    bfi w9, w8, #1, #31
; GISEL-NEXT:    and w8, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[4]
; GISEL-NEXT:    orr w8, w9, w8, lsl #2
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[5]
; GISEL-NEXT:    orr w8, w8, w9, lsl #3
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[6]
; GISEL-NEXT:    orr w8, w8, w9, lsl #4
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[7]
; GISEL-NEXT:    orr w8, w8, w9, lsl #5
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #6
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #7
; GISEL-NEXT:    strb w8, [sp, #15]
; GISEL-NEXT:    and w0, w8, #0xff
; GISEL-NEXT:    add sp, sp, #16
; GISEL-NEXT:    ret


  %cmp_result = icmp ne <8 x i16> %vec, zeroinitializer
  %bitmask = bitcast <8 x i1> %cmp_result to i8
  %extended_bitmask = zext i8 %bitmask to i16
  ret i16 %extended_bitmask
}

define i4 @convert_to_bitmask4(<4 x i32> %vec) {
; SDAG-LABEL: convert_to_bitmask4:
; SDAG:       ; %bb.0:
; SDAG-NEXT:  Lloh4:
; SDAG-NEXT:    adrp x8, lCPI2_0@PAGE
; SDAG-NEXT:    cmeq.4s v0, v0, #0
; SDAG-NEXT:  Lloh5:
; SDAG-NEXT:    ldr q1, [x8, lCPI2_0@PAGEOFF]
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:    addv.4s s0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh4, Lloh5
;
; GISEL-LABEL: convert_to_bitmask4:
; GISEL:       ; %bb.0:
; GISEL-NEXT:  Lloh0:
; GISEL-NEXT:    adrp x8, lCPI2_0@PAGE
; GISEL-NEXT:    cmeq.4s v0, v0, #0
; GISEL-NEXT:  Lloh1:
; GISEL-NEXT:    ldr q1, [x8, lCPI2_0@PAGEOFF]
; GISEL-NEXT:    bic.16b v0, v1, v0
; GISEL-NEXT:    addv.4s s0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh0, Lloh1


  %cmp_result = icmp ne <4 x i32> %vec, zeroinitializer
  %bitmask = bitcast <4 x i1> %cmp_result to i4
  ret i4 %bitmask
}

define i8 @convert_to_bitmask2(<2 x i64> %vec) {
; SDAG-LABEL: convert_to_bitmask2:
; SDAG:       ; %bb.0:
; SDAG-NEXT:  Lloh6:
; SDAG-NEXT:    adrp x8, lCPI3_0@PAGE
; SDAG-NEXT:    cmeq.2d v0, v0, #0
; SDAG-NEXT:  Lloh7:
; SDAG-NEXT:    ldr q1, [x8, lCPI3_0@PAGEOFF]
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:    addp.2d d0, v0
; SDAG-NEXT:    fmov w8, s0
; SDAG-NEXT:    and w0, w8, #0x3
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh6, Lloh7
;
; GISEL-LABEL: convert_to_bitmask2:
; GISEL:       ; %bb.0:
; GISEL-NEXT:  Lloh2:
; GISEL-NEXT:    adrp x8, lCPI3_0@PAGE
; GISEL-NEXT:    cmeq.2d v0, v0, #0
; GISEL-NEXT:  Lloh3:
; GISEL-NEXT:    ldr q1, [x8, lCPI3_0@PAGEOFF]
; GISEL-NEXT:    bic.16b v0, v1, v0
; GISEL-NEXT:    addp.2d d0, v0
; GISEL-NEXT:    fmov w8, s0
; GISEL-NEXT:    and w0, w8, #0x3
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh2, Lloh3


  %cmp_result = icmp ne <2 x i64> %vec, zeroinitializer
  %bitmask = bitcast <2 x i1> %cmp_result to i2
  %extended_bitmask = zext i2 %bitmask to i8
  ret i8 %extended_bitmask
}

; Clang's __builtin_convertvector adds an undef vector concat for vectors with <8 elements.
define i8 @clang_builtins_undef_concat_convert_to_bitmask4(<4 x i32> %vec) {
; SDAG-LABEL: clang_builtins_undef_concat_convert_to_bitmask4:
; SDAG:       ; %bb.0:
; SDAG-NEXT:  Lloh8:
; SDAG-NEXT:    adrp x8, lCPI4_0@PAGE
; SDAG-NEXT:    cmeq.4s v0, v0, #0
; SDAG-NEXT:  Lloh9:
; SDAG-NEXT:    ldr q1, [x8, lCPI4_0@PAGEOFF]
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:    addv.4s s0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh8, Lloh9
;
; GISEL-LABEL: clang_builtins_undef_concat_convert_to_bitmask4:
; GISEL:       ; %bb.0:
; GISEL-NEXT:  Lloh4:
; GISEL-NEXT:    adrp x8, lCPI4_0@PAGE
; GISEL-NEXT:    cmeq.4s v0, v0, #0
; GISEL-NEXT:  Lloh5:
; GISEL-NEXT:    ldr q1, [x8, lCPI4_0@PAGEOFF]
; GISEL-NEXT:    bic.16b v0, v1, v0
; GISEL-NEXT:    addv.4s s0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh4, Lloh5


  %cmp_result = icmp ne <4 x i32> %vec, zeroinitializer
  %vector_pad = shufflevector <4 x i1> %cmp_result, <4 x i1> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %bitmask = bitcast <8 x i1> %vector_pad to i8
  ret i8 %bitmask
}


define i4 @convert_to_bitmask_no_compare(<4 x i32> %vec1, <4 x i32> %vec2) {
; SDAG-LABEL: convert_to_bitmask_no_compare:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    and.16b v0, v0, v1
; SDAG-NEXT:  Lloh10:
; SDAG-NEXT:    adrp x8, lCPI5_0@PAGE
; SDAG-NEXT:  Lloh11:
; SDAG-NEXT:    ldr q1, [x8, lCPI5_0@PAGEOFF]
; SDAG-NEXT:    shl.4s v0, v0, #31
; SDAG-NEXT:    cmlt.4s v0, v0, #0
; SDAG-NEXT:    and.16b v0, v0, v1
; SDAG-NEXT:    addv.4s s0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh10, Lloh11
;
; GISEL-LABEL: convert_to_bitmask_no_compare:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    and.16b v0, v0, v1
; GISEL-NEXT:  Lloh6:
; GISEL-NEXT:    adrp x8, lCPI5_0@PAGE
; GISEL-NEXT:  Lloh7:
; GISEL-NEXT:    ldr q1, [x8, lCPI5_0@PAGEOFF]
; GISEL-NEXT:    shl.4s v0, v0, #31
; GISEL-NEXT:    cmlt.4s v0, v0, #0
; GISEL-NEXT:    and.16b v0, v0, v1
; GISEL-NEXT:    addv.4s s0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh6, Lloh7


  %cmp = and <4 x i32> %vec1, %vec2
  %trunc = trunc <4 x i32> %cmp to <4 x i1>
  %bitmask = bitcast <4 x i1> %trunc to i4
  ret i4 %bitmask
}

define i4 @convert_to_bitmask_with_compare_chain(<4 x i32> %vec1, <4 x i32> %vec2) {
; SDAG-LABEL: convert_to_bitmask_with_compare_chain:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    cmeq.4s v2, v0, #0
; SDAG-NEXT:    cmeq.4s v0, v0, v1
; SDAG-NEXT:  Lloh12:
; SDAG-NEXT:    adrp x8, lCPI6_0@PAGE
; SDAG-NEXT:  Lloh13:
; SDAG-NEXT:    ldr q1, [x8, lCPI6_0@PAGEOFF]
; SDAG-NEXT:    bic.16b v0, v0, v2
; SDAG-NEXT:    and.16b v0, v0, v1
; SDAG-NEXT:    addv.4s s0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh12, Lloh13
;
; GISEL-LABEL: convert_to_bitmask_with_compare_chain:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    cmeq.4s v2, v0, #0
; GISEL-NEXT:    cmeq.4s v0, v0, v1
; GISEL-NEXT:  Lloh8:
; GISEL-NEXT:    adrp x8, lCPI6_0@PAGE
; GISEL-NEXT:  Lloh9:
; GISEL-NEXT:    ldr q1, [x8, lCPI6_0@PAGEOFF]
; GISEL-NEXT:    bic.16b v0, v0, v2
; GISEL-NEXT:    and.16b v0, v0, v1
; GISEL-NEXT:    addv.4s s0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh8, Lloh9


  %cmp1 = icmp ne <4 x i32> %vec1, zeroinitializer
  %cmp2 = icmp eq <4 x i32> %vec1, %vec2
  %cmp3 = and <4 x i1> %cmp1, %cmp2
  %bitmask = bitcast <4 x i1> %cmp3 to i4
  ret i4 %bitmask
}

define i4 @convert_to_bitmask_with_trunc_in_chain(<4 x i32> %vec1, <4 x i32> %vec2) {
; SDAG-LABEL: convert_to_bitmask_with_trunc_in_chain:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    cmeq.4s v0, v0, #0
; SDAG-NEXT:  Lloh14:
; SDAG-NEXT:    adrp x8, lCPI7_0@PAGE
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:  Lloh15:
; SDAG-NEXT:    ldr q1, [x8, lCPI7_0@PAGEOFF]
; SDAG-NEXT:    shl.4s v0, v0, #31
; SDAG-NEXT:    cmlt.4s v0, v0, #0
; SDAG-NEXT:    and.16b v0, v0, v1
; SDAG-NEXT:    addv.4s s0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh14, Lloh15
;
; GISEL-LABEL: convert_to_bitmask_with_trunc_in_chain:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    cmeq.4s v0, v0, #0
; GISEL-NEXT:  Lloh10:
; GISEL-NEXT:    adrp x8, lCPI7_0@PAGE
; GISEL-NEXT:    bic.16b v0, v1, v0
; GISEL-NEXT:  Lloh11:
; GISEL-NEXT:    ldr q1, [x8, lCPI7_0@PAGEOFF]
; GISEL-NEXT:    shl.4s v0, v0, #31
; GISEL-NEXT:    cmlt.4s v0, v0, #0
; GISEL-NEXT:    and.16b v0, v0, v1
; GISEL-NEXT:    addv.4s s0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh10, Lloh11


  %cmp1 = icmp ne <4 x i32> %vec1, zeroinitializer
  %trunc_vec = trunc <4 x i32> %vec2 to <4 x i1>
  %and_res = and <4 x i1> %cmp1, %trunc_vec
  %bitmask = bitcast <4 x i1> %and_res to i4
  ret i4 %bitmask
}

define i4 @convert_to_bitmask_with_unknown_type_in_long_chain(<4 x i32> %vec1, <4 x i32> %vec2) {
; SDAG-LABEL: convert_to_bitmask_with_unknown_type_in_long_chain:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    cmeq.4s v0, v0, #0
; SDAG-NEXT:    cmeq.4s v1, v1, #0
; SDAG-NEXT:  Lloh16:
; SDAG-NEXT:    adrp x8, lCPI8_0@PAGE
; SDAG-NEXT:    movi d2, #0x000000ffffffff
; SDAG-NEXT:    movi d3, #0x00ffffffffffff
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:    movi d1, #0xffff0000ffff0000
; SDAG-NEXT:    xtn.4h v0, v0
; SDAG-NEXT:    orr.8b v0, v0, v2
; SDAG-NEXT:    movi d2, #0x00ffffffff0000
; SDAG-NEXT:    eor.8b v1, v0, v1
; SDAG-NEXT:    eor.8b v0, v0, v2
; SDAG-NEXT:    mov.h v1[2], wzr
; SDAG-NEXT:    orr.8b v0, v0, v3
; SDAG-NEXT:    orr.8b v0, v1, v0
; SDAG-NEXT:  Lloh17:
; SDAG-NEXT:    ldr d1, [x8, lCPI8_0@PAGEOFF]
; SDAG-NEXT:    shl.4h v0, v0, #15
; SDAG-NEXT:    cmlt.4h v0, v0, #0
; SDAG-NEXT:    and.8b v0, v0, v1
; SDAG-NEXT:    addv.4h h0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh16, Lloh17
;
; GISEL-LABEL: convert_to_bitmask_with_unknown_type_in_long_chain:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    cmeq.4s v0, v0, #0
; GISEL-NEXT:    cmeq.4s v1, v1, #0
; GISEL-NEXT:  Lloh12:
; GISEL-NEXT:    adrp x8, lCPI8_0@PAGE
; GISEL-NEXT:    movi d2, #0x000000ffffffff
; GISEL-NEXT:    movi d3, #0x00ffffffffffff
; GISEL-NEXT:    bic.16b v0, v1, v0
; GISEL-NEXT:    movi d1, #0xffff0000ffff0000
; GISEL-NEXT:    xtn.4h v0, v0
; GISEL-NEXT:    orr.8b v0, v0, v2
; GISEL-NEXT:    movi d2, #0x00ffffffff0000
; GISEL-NEXT:    eor.8b v1, v0, v1
; GISEL-NEXT:    eor.8b v0, v0, v2
; GISEL-NEXT:    mov.h v1[2], wzr
; GISEL-NEXT:    orr.8b v0, v0, v3
; GISEL-NEXT:    orr.8b v0, v1, v0
; GISEL-NEXT:  Lloh13:
; GISEL-NEXT:    ldr d1, [x8, lCPI8_0@PAGEOFF]
; GISEL-NEXT:    shl.4h v0, v0, #15
; GISEL-NEXT:    cmlt.4h v0, v0, #0
; GISEL-NEXT:    and.8b v0, v0, v1
; GISEL-NEXT:    addv.4h h0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh12, Lloh13


  %cmp1 = icmp ne <4 x i32> %vec1, zeroinitializer
  %cmp2 = icmp eq <4 x i32> %vec2, zeroinitializer

  ; Artificially make this a long chain to hide the original type
  %chain1 = and <4 x i1> %cmp1, %cmp2;
  %chain2 = or <4 x i1> %chain1, <i1 1, i1 1, i1 0, i1 0>;
  %chain3 = xor <4 x i1> %chain2, <i1 0, i1 1, i1 0, i1 1>;
  %chain4 = and <4 x i1> %chain3, <i1 1, i1 1, i1 0, i1 1>;
  %chain5 = or <4 x i1> %chain4, <i1 1, i1 1, i1 1, i1 0>;
  %chain6 = xor <4 x i1> <i1 0, i1 1, i1 1, i1 0>, %chain2;
  %chain7 = or <4 x i1> %chain5, %chain6;
  %bitmask = bitcast <4 x i1> %chain7 to i4
  ret i4 %bitmask
}

define i4 @convert_to_bitmask_with_different_types_in_chain(<4 x i16> %vec1, <4 x i32> %vec2) {
; SDAG-LABEL: convert_to_bitmask_with_different_types_in_chain:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    cmeq.4s v1, v1, #0
; SDAG-NEXT:    cmeq.4h v0, v0, #0
; SDAG-NEXT:  Lloh18:
; SDAG-NEXT:    adrp x8, lCPI9_0@PAGE
; SDAG-NEXT:    xtn.4h v1, v1
; SDAG-NEXT:    orn.8b v0, v1, v0
; SDAG-NEXT:  Lloh19:
; SDAG-NEXT:    ldr d1, [x8, lCPI9_0@PAGEOFF]
; SDAG-NEXT:    and.8b v0, v0, v1
; SDAG-NEXT:    addv.4h h0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh18, Lloh19
;
; GISEL-LABEL: convert_to_bitmask_with_different_types_in_chain:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    cmeq.4s v1, v1, #0
; GISEL-NEXT:    cmeq.4h v0, v0, #0
; GISEL-NEXT:  Lloh14:
; GISEL-NEXT:    adrp x8, lCPI9_0@PAGE
; GISEL-NEXT:    xtn.4h v1, v1
; GISEL-NEXT:    orn.8b v0, v1, v0
; GISEL-NEXT:  Lloh15:
; GISEL-NEXT:    ldr d1, [x8, lCPI9_0@PAGEOFF]
; GISEL-NEXT:    and.8b v0, v0, v1
; GISEL-NEXT:    addv.4h h0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh14, Lloh15


  %cmp1 = icmp ne <4 x i16> %vec1, zeroinitializer
  %cmp2 = icmp eq <4 x i32> %vec2, zeroinitializer
  %chain1 = or <4 x i1> %cmp1, %cmp2
  %bitmask = bitcast <4 x i1> %chain1 to i4
  ret i4 %bitmask
}

define i16 @convert_to_bitmask_without_knowing_type(<16 x i1> %vec) {
; SDAG-LABEL: convert_to_bitmask_without_knowing_type:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    shl.16b v0, v0, #7
; SDAG-NEXT:  Lloh20:
; SDAG-NEXT:    adrp x8, lCPI10_0@PAGE
; SDAG-NEXT:  Lloh21:
; SDAG-NEXT:    ldr q1, [x8, lCPI10_0@PAGEOFF]
; SDAG-NEXT:    cmlt.16b v0, v0, #0
; SDAG-NEXT:    and.16b v0, v0, v1
; SDAG-NEXT:    ext.16b v1, v0, v0, #8
; SDAG-NEXT:    zip1.16b v0, v0, v1
; SDAG-NEXT:    addv.8h h0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh20, Lloh21
;
; GISEL-LABEL: convert_to_bitmask_without_knowing_type:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    sub sp, sp, #16
; GISEL-NEXT:    .cfi_def_cfa_offset 16
; GISEL-NEXT:    umov.b w8, v0[1]
; GISEL-NEXT:    umov.b w9, v0[0]
; GISEL-NEXT:    umov.b w10, v0[2]
; GISEL-NEXT:    umov.b w11, v0[3]
; GISEL-NEXT:    and w8, w8, #0x1
; GISEL-NEXT:    bfi w9, w8, #1, #31
; GISEL-NEXT:    and w8, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[4]
; GISEL-NEXT:    orr w8, w9, w8, lsl #2
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[5]
; GISEL-NEXT:    orr w8, w8, w9, lsl #3
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[6]
; GISEL-NEXT:    orr w8, w8, w9, lsl #4
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[7]
; GISEL-NEXT:    orr w8, w8, w9, lsl #5
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[8]
; GISEL-NEXT:    orr w8, w8, w9, lsl #6
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[9]
; GISEL-NEXT:    orr w8, w8, w9, lsl #7
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[10]
; GISEL-NEXT:    orr w8, w8, w9, lsl #8
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[11]
; GISEL-NEXT:    orr w8, w8, w9, lsl #9
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[12]
; GISEL-NEXT:    orr w8, w8, w9, lsl #10
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[13]
; GISEL-NEXT:    orr w8, w8, w9, lsl #11
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[14]
; GISEL-NEXT:    orr w8, w8, w9, lsl #12
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[15]
; GISEL-NEXT:    orr w8, w8, w9, lsl #13
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #14
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #15
; GISEL-NEXT:    strh w8, [sp, #14]
; GISEL-NEXT:    and w0, w8, #0xffff
; GISEL-NEXT:    add sp, sp, #16
; GISEL-NEXT:    ret

  %bitmask = bitcast <16 x i1> %vec to i16
  ret i16 %bitmask
}

define i2 @convert_to_bitmask_2xi32(<2 x i32> %vec) {
; SDAG-LABEL: convert_to_bitmask_2xi32:
; SDAG:       ; %bb.0:
; SDAG-NEXT:  Lloh22:
; SDAG-NEXT:    adrp x8, lCPI11_0@PAGE
; SDAG-NEXT:    cmeq.2s v0, v0, #0
; SDAG-NEXT:  Lloh23:
; SDAG-NEXT:    ldr d1, [x8, lCPI11_0@PAGEOFF]
; SDAG-NEXT:    bic.8b v0, v1, v0
; SDAG-NEXT:    addp.2s v0, v0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh22, Lloh23
;
; GISEL-LABEL: convert_to_bitmask_2xi32:
; GISEL:       ; %bb.0:
; GISEL-NEXT:  Lloh16:
; GISEL-NEXT:    adrp x8, lCPI11_0@PAGE
; GISEL-NEXT:    cmeq.2s v0, v0, #0
; GISEL-NEXT:  Lloh17:
; GISEL-NEXT:    ldr d1, [x8, lCPI11_0@PAGEOFF]
; GISEL-NEXT:    bic.8b v0, v1, v0
; GISEL-NEXT:    addp.2s v0, v0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh16, Lloh17

  %cmp_result = icmp ne <2 x i32> %vec, zeroinitializer
  %bitmask = bitcast <2 x i1> %cmp_result to i2
  ret i2 %bitmask
}

define i4 @convert_to_bitmask_4xi8(<4 x i8> %vec) {
; SDAG-LABEL: convert_to_bitmask_4xi8:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    bic.4h v0, #255, lsl #8
; SDAG-NEXT:  Lloh24:
; SDAG-NEXT:    adrp x8, lCPI12_0@PAGE
; SDAG-NEXT:  Lloh25:
; SDAG-NEXT:    ldr d1, [x8, lCPI12_0@PAGEOFF]
; SDAG-NEXT:    cmeq.4h v0, v0, #0
; SDAG-NEXT:    bic.8b v0, v1, v0
; SDAG-NEXT:    addv.4h h0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh24, Lloh25
;
; GISEL-LABEL: convert_to_bitmask_4xi8:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    bic.4h v0, #255, lsl #8
; GISEL-NEXT:  Lloh18:
; GISEL-NEXT:    adrp x8, lCPI12_0@PAGE
; GISEL-NEXT:  Lloh19:
; GISEL-NEXT:    ldr d1, [x8, lCPI12_0@PAGEOFF]
; GISEL-NEXT:    cmeq.4h v0, v0, #0
; GISEL-NEXT:    bic.8b v0, v1, v0
; GISEL-NEXT:    addv.4h h0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh18, Lloh19

  %cmp_result = icmp ne <4 x i8> %vec, zeroinitializer
  %bitmask = bitcast <4 x i1> %cmp_result to i4
  ret i4 %bitmask
}

define i8 @convert_to_bitmask_8xi2(<8 x i2> %vec) {
; SDAG-LABEL: convert_to_bitmask_8xi2:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    movi.8b v1, #3
; SDAG-NEXT:  Lloh26:
; SDAG-NEXT:    adrp x8, lCPI13_0@PAGE
; SDAG-NEXT:    and.8b v0, v0, v1
; SDAG-NEXT:  Lloh27:
; SDAG-NEXT:    ldr d1, [x8, lCPI13_0@PAGEOFF]
; SDAG-NEXT:    cmeq.8b v0, v0, #0
; SDAG-NEXT:    bic.8b v0, v1, v0
; SDAG-NEXT:    addv.8b b0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh26, Lloh27
;
; GISEL-LABEL: convert_to_bitmask_8xi2:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    movi.8b v1, #3
; GISEL-NEXT:  Lloh20:
; GISEL-NEXT:    adrp x8, lCPI13_0@PAGE
; GISEL-NEXT:    and.8b v0, v0, v1
; GISEL-NEXT:  Lloh21:
; GISEL-NEXT:    ldr d1, [x8, lCPI13_0@PAGEOFF]
; GISEL-NEXT:    cmeq.8b v0, v0, #0
; GISEL-NEXT:    bic.8b v0, v1, v0
; GISEL-NEXT:    addv.8b b0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh20, Lloh21

  %cmp_result = icmp ne <8 x i2> %vec, zeroinitializer
  %bitmask = bitcast <8 x i1> %cmp_result to i8
  ret i8 %bitmask
}

define i4 @convert_to_bitmask_float(<4 x float> %vec) {
; SDAG-LABEL: convert_to_bitmask_float:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    fcmgt.4s v1, v0, #0.0
; SDAG-NEXT:    fcmlt.4s v0, v0, #0.0
; SDAG-NEXT:  Lloh28:
; SDAG-NEXT:    adrp x8, lCPI14_0@PAGE
; SDAG-NEXT:    orr.16b v0, v0, v1
; SDAG-NEXT:  Lloh29:
; SDAG-NEXT:    ldr q1, [x8, lCPI14_0@PAGEOFF]
; SDAG-NEXT:    and.16b v0, v0, v1
; SDAG-NEXT:    addv.4s s0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh28, Lloh29
;
; GISEL-LABEL: convert_to_bitmask_float:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    fcmgt.4s v1, v0, #0.0
; GISEL-NEXT:    fcmlt.4s v0, v0, #0.0
; GISEL-NEXT:  Lloh22:
; GISEL-NEXT:    adrp x8, lCPI14_0@PAGE
; GISEL-NEXT:    orr.16b v0, v0, v1
; GISEL-NEXT:  Lloh23:
; GISEL-NEXT:    ldr q1, [x8, lCPI14_0@PAGEOFF]
; GISEL-NEXT:    and.16b v0, v0, v1
; GISEL-NEXT:    addv.4s s0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh22, Lloh23


  %cmp_result = fcmp one <4 x float> %vec, zeroinitializer
  %bitmask = bitcast <4 x i1> %cmp_result to i4
  ret i4 %bitmask
}

; Larger vector types don't map directly, but the can be split/truncated and then converted.
; After the comparison against 0, this is truncated to <8 x i16>, which is valid again.
define i8 @convert_large_vector(<8 x i32> %vec) {
; SDAG-LABEL: convert_large_vector:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    sub sp, sp, #16
; SDAG-NEXT:    .cfi_def_cfa_offset 16
; SDAG-NEXT:    cmeq.4s v1, v1, #0
; SDAG-NEXT:    cmeq.4s v0, v0, #0
; SDAG-NEXT:  Lloh30:
; SDAG-NEXT:    adrp x8, lCPI15_0@PAGE
; SDAG-NEXT:    uzp1.8h v0, v0, v1
; SDAG-NEXT:  Lloh31:
; SDAG-NEXT:    ldr q1, [x8, lCPI15_0@PAGEOFF]
; SDAG-NEXT:    bic.16b v0, v1, v0
; SDAG-NEXT:    addv.8h h0, v0
; SDAG-NEXT:    fmov w8, s0
; SDAG-NEXT:    and w0, w8, #0xff
; SDAG-NEXT:    add sp, sp, #16
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh30, Lloh31
;
; GISEL-LABEL: convert_large_vector:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    sub sp, sp, #16
; GISEL-NEXT:    .cfi_def_cfa_offset 16
; GISEL-NEXT:    cmeq.4s v0, v0, #0
; GISEL-NEXT:    cmeq.4s v1, v1, #0
; GISEL-NEXT:    mvn.16b v0, v0
; GISEL-NEXT:    mvn.16b v1, v1
; GISEL-NEXT:    uzp1.8h v0, v0, v1
; GISEL-NEXT:    xtn.8b v0, v0
; GISEL-NEXT:    umov.b w8, v0[1]
; GISEL-NEXT:    umov.b w9, v0[0]
; GISEL-NEXT:    umov.b w10, v0[2]
; GISEL-NEXT:    umov.b w11, v0[3]
; GISEL-NEXT:    and w8, w8, #0x1
; GISEL-NEXT:    bfi w9, w8, #1, #31
; GISEL-NEXT:    and w8, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[4]
; GISEL-NEXT:    orr w8, w9, w8, lsl #2
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[5]
; GISEL-NEXT:    orr w8, w8, w9, lsl #3
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    umov.b w10, v0[6]
; GISEL-NEXT:    orr w8, w8, w9, lsl #4
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    umov.b w11, v0[7]
; GISEL-NEXT:    orr w8, w8, w9, lsl #5
; GISEL-NEXT:    and w9, w10, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #6
; GISEL-NEXT:    and w9, w11, #0x1
; GISEL-NEXT:    orr w8, w8, w9, lsl #7
; GISEL-NEXT:    strb w8, [sp, #15]
; GISEL-NEXT:    and w0, w8, #0xff
; GISEL-NEXT:    add sp, sp, #16
; GISEL-NEXT:    ret


   %cmp_result = icmp ne <8 x i32> %vec, zeroinitializer
   %bitmask = bitcast <8 x i1> %cmp_result to i8
   ret i8 %bitmask
}

define i4 @convert_legalized_illegal_element_size(<4 x i22> %vec) {
; SDAG-LABEL: convert_legalized_illegal_element_size:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    movi.4s v1, #63, msl #16
; SDAG-NEXT:  Lloh32:
; SDAG-NEXT:    adrp x8, lCPI16_0@PAGE
; SDAG-NEXT:    cmtst.4s v0, v0, v1
; SDAG-NEXT:  Lloh33:
; SDAG-NEXT:    ldr d1, [x8, lCPI16_0@PAGEOFF]
; SDAG-NEXT:    xtn.4h v0, v0
; SDAG-NEXT:    and.8b v0, v0, v1
; SDAG-NEXT:    addv.4h h0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh32, Lloh33
;
; GISEL-LABEL: convert_legalized_illegal_element_size:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    movi.4s v1, #63, msl #16
; GISEL-NEXT:  Lloh24:
; GISEL-NEXT:    adrp x8, lCPI16_0@PAGE
; GISEL-NEXT:    cmtst.4s v0, v0, v1
; GISEL-NEXT:  Lloh25:
; GISEL-NEXT:    ldr d1, [x8, lCPI16_0@PAGEOFF]
; GISEL-NEXT:    xtn.4h v0, v0
; GISEL-NEXT:    and.8b v0, v0, v1
; GISEL-NEXT:    addv.4h h0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh24, Lloh25

  %cmp_result = icmp ne <4 x i22> %vec, zeroinitializer
  %bitmask = bitcast <4 x i1> %cmp_result to i4
  ret i4 %bitmask
}

; This may still be converted as a v8i8 after the vector concat (but not as v4iX).
define i8 @no_direct_convert_for_bad_concat(<4 x i32> %vec) {
; SDAG-LABEL: no_direct_convert_for_bad_concat:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    cmtst.4s v0, v0, v0
; SDAG-NEXT:  Lloh34:
; SDAG-NEXT:    adrp x8, lCPI17_0@PAGE
; SDAG-NEXT:    xtn.4h v0, v0
; SDAG-NEXT:    umov.h w9, v0[0]
; SDAG-NEXT:    mov.b v1[4], w9
; SDAG-NEXT:    umov.h w9, v0[1]
; SDAG-NEXT:    mov.b v1[5], w9
; SDAG-NEXT:    umov.h w9, v0[2]
; SDAG-NEXT:    mov.b v1[6], w9
; SDAG-NEXT:    umov.h w9, v0[3]
; SDAG-NEXT:    mov.b v1[7], w9
; SDAG-NEXT:    shl.8b v0, v1, #7
; SDAG-NEXT:  Lloh35:
; SDAG-NEXT:    ldr d1, [x8, lCPI17_0@PAGEOFF]
; SDAG-NEXT:    cmlt.8b v0, v0, #0
; SDAG-NEXT:    and.8b v0, v0, v1
; SDAG-NEXT:    addv.8b b0, v0
; SDAG-NEXT:    fmov w0, s0
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh34, Lloh35
;
; GISEL-LABEL: no_direct_convert_for_bad_concat:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    cmtst.4s v0, v0, v0
; GISEL-NEXT:  Lloh26:
; GISEL-NEXT:    adrp x8, lCPI17_0@PAGE
; GISEL-NEXT:    xtn.4h v0, v0
; GISEL-NEXT:    umov.h w9, v0[0]
; GISEL-NEXT:    mov.b v1[4], w9
; GISEL-NEXT:    umov.h w9, v0[1]
; GISEL-NEXT:    mov.b v1[5], w9
; GISEL-NEXT:    umov.h w9, v0[2]
; GISEL-NEXT:    mov.b v1[6], w9
; GISEL-NEXT:    umov.h w9, v0[3]
; GISEL-NEXT:    mov.b v1[7], w9
; GISEL-NEXT:    shl.8b v0, v1, #7
; GISEL-NEXT:  Lloh27:
; GISEL-NEXT:    ldr d1, [x8, lCPI17_0@PAGEOFF]
; GISEL-NEXT:    cmlt.8b v0, v0, #0
; GISEL-NEXT:    and.8b v0, v0, v1
; GISEL-NEXT:    addv.8b b0, v0
; GISEL-NEXT:    fmov w0, s0
; GISEL-NEXT:    ret
; GISEL-NEXT:    .loh AdrpLdr Lloh26, Lloh27

  %cmp_result = icmp ne <4 x i32> %vec, zeroinitializer
  %vector_pad = shufflevector <4 x i1> poison, <4 x i1> %cmp_result, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %bitmask = bitcast <8 x i1> %vector_pad to i8
  ret i8 %bitmask
}

define <8 x i1> @no_convert_without_direct_bitcast(<8 x i16> %vec) {
; SDAG-LABEL: no_convert_without_direct_bitcast:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    cmtst.8h v0, v0, v0
; SDAG-NEXT:    xtn.8b v0, v0
; SDAG-NEXT:    ret
;
; GISEL-LABEL: no_convert_without_direct_bitcast:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    cmeq.8h v0, v0, #0
; GISEL-NEXT:    mvn.16b v0, v0
; GISEL-NEXT:    xtn.8b v0, v0
; GISEL-NEXT:    ret

   %cmp_result = icmp ne <8 x i16> %vec, zeroinitializer
   ret <8 x i1> %cmp_result
}

define i6 @no_combine_illegal_num_elements(<6 x i32> %vec) {
; CHECK-LABEL: no_combine_illegal_num_elements:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    fmov s0, w0
; CHECK-NEXT:    fmov s1, w4
; CHECK-NEXT:    mov.s v0[1], w1
; CHECK-NEXT:    mov.s v1[1], w5
; CHECK-NEXT:    mov.s v0[2], w2
; CHECK-NEXT:    cmeq.4s v1, v1, #0
; CHECK-NEXT:    mov.s v0[3], w3
; CHECK-NEXT:    cmeq.4s v0, v0, #0
; CHECK-NEXT:    uzp1.8h v0, v0, v1
; CHECK-NEXT:    mvn.16b v0, v0
; CHECK-NEXT:    xtn.8b v0, v0
; CHECK-NEXT:    umov.b w8, v0[0]
; CHECK-NEXT:    umov.b w9, v0[1]
; CHECK-NEXT:    umov.b w10, v0[2]
; CHECK-NEXT:    and w8, w8, #0x1
; CHECK-NEXT:    bfi w8, w9, #1, #1
; CHECK-NEXT:    umov.b w9, v0[3]
; CHECK-NEXT:    bfi w8, w10, #2, #1
; CHECK-NEXT:    umov.b w10, v0[4]
; CHECK-NEXT:    bfi w8, w9, #3, #1
; CHECK-NEXT:    umov.b w9, v0[5]
; CHECK-NEXT:    bfi w8, w10, #4, #1
; CHECK-NEXT:    orr w8, w8, w9, lsl #5
; CHECK-NEXT:    and w0, w8, #0x3f
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret

  %cmp_result = icmp ne <6 x i32> %vec, zeroinitializer
  %bitmask = bitcast <6 x i1> %cmp_result to i6
  ret i6 %bitmask
}

; Only apply the combine when casting a vector to a scalar.
define <2 x i8> @vector_to_vector_cast(<16 x i1> %arg) nounwind {
; SDAG-LABEL: vector_to_vector_cast:
; SDAG:       ; %bb.0:
; SDAG-NEXT:    sub sp, sp, #16
; SDAG-NEXT:    shl.16b v0, v0, #7
; SDAG-NEXT:  Lloh36:
; SDAG-NEXT:    adrp x8, lCPI20_0@PAGE
; SDAG-NEXT:  Lloh37:
; SDAG-NEXT:    ldr q1, [x8, lCPI20_0@PAGEOFF]
; SDAG-NEXT:    add x8, sp, #14
; SDAG-NEXT:    cmlt.16b v0, v0, #0
; SDAG-NEXT:    and.16b v0, v0, v1
; SDAG-NEXT:    ext.16b v1, v0, v0, #8
; SDAG-NEXT:    zip1.16b v0, v0, v1
; SDAG-NEXT:    addv.8h h0, v0
; SDAG-NEXT:    str h0, [sp, #14]
; SDAG-NEXT:    ld1.b { v0 }[0], [x8]
; SDAG-NEXT:    orr x8, x8, #0x1
; SDAG-NEXT:    ld1.b { v0 }[4], [x8]
; SDAG-NEXT:    ; kill: def $d0 killed $d0 killed $q0
; SDAG-NEXT:    add sp, sp, #16
; SDAG-NEXT:    ret
; SDAG-NEXT:    .loh AdrpLdr Lloh36, Lloh37
;
; GISEL-LABEL: vector_to_vector_cast:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    sub sp, sp, #16
; GISEL-NEXT:    umov.b w8, v0[1]
; GISEL-NEXT:    mov d1, v0[1]
; GISEL-NEXT:    umov.b w10, v0[1]
; GISEL-NEXT:    umov.b w9, v0[0]
; GISEL-NEXT:    umov.b w13, v0[0]
; GISEL-NEXT:    umov.b w14, v0[2]
; GISEL-NEXT:    umov.b w15, v0[3]
; GISEL-NEXT:    umov.b w11, v0[2]
; GISEL-NEXT:    umov.b w16, v0[4]
; GISEL-NEXT:    umov.b w17, v0[5]
; GISEL-NEXT:    umov.b w12, v0[3]
; GISEL-NEXT:    and w8, w8, #0x1
; GISEL-NEXT:    and w10, w10, #0x1
; GISEL-NEXT:    umov.b w0, v1[1]
; GISEL-NEXT:    bfi w9, w8, #1, #31
; GISEL-NEXT:    bfi w13, w10, #1, #31
; GISEL-NEXT:    and w14, w14, #0x1
; GISEL-NEXT:    umov.b w8, v1[0]
; GISEL-NEXT:    umov.b w10, v1[2]
; GISEL-NEXT:    and w15, w15, #0x1
; GISEL-NEXT:    orr w13, w13, w14, lsl #2
; GISEL-NEXT:    umov.b w14, v1[3]
; GISEL-NEXT:    and w11, w11, #0x1
; GISEL-NEXT:    and w0, w0, #0x1
; GISEL-NEXT:    and w16, w16, #0x1
; GISEL-NEXT:    orr w9, w9, w11, lsl #2
; GISEL-NEXT:    orr w13, w13, w15, lsl #3
; GISEL-NEXT:    umov.b w15, v1[4]
; GISEL-NEXT:    umov.b w11, v0[6]
; GISEL-NEXT:    bfi w8, w0, #1, #31
; GISEL-NEXT:    and w10, w10, #0x1
; GISEL-NEXT:    and w17, w17, #0x1
; GISEL-NEXT:    orr w13, w13, w16, lsl #4
; GISEL-NEXT:    and w14, w14, #0x1
; GISEL-NEXT:    umov.b w0, v0[7]
; GISEL-NEXT:    orr w8, w8, w10, lsl #2
; GISEL-NEXT:    umov.b w10, v1[5]
; GISEL-NEXT:    umov.b w16, v1[6]
; GISEL-NEXT:    orr w13, w13, w17, lsl #5
; GISEL-NEXT:    umov.b w17, v0[4]
; GISEL-NEXT:    and w15, w15, #0x1
; GISEL-NEXT:    orr w8, w8, w14, lsl #3
; GISEL-NEXT:    and w12, w12, #0x1
; GISEL-NEXT:    and w11, w11, #0x1
; GISEL-NEXT:    umov.b w14, v1[7]
; GISEL-NEXT:    orr w9, w9, w12, lsl #3
; GISEL-NEXT:    orr w11, w13, w11, lsl #6
; GISEL-NEXT:    orr w8, w8, w15, lsl #4
; GISEL-NEXT:    umov.b w15, v0[5]
; GISEL-NEXT:    and w10, w10, #0x1
; GISEL-NEXT:    and w0, w0, #0x1
; GISEL-NEXT:    and w12, w17, #0x1
; GISEL-NEXT:    umov.b w13, v0[1]
; GISEL-NEXT:    orr w8, w8, w10, lsl #5
; GISEL-NEXT:    and w16, w16, #0x1
; GISEL-NEXT:    orr w9, w9, w12, lsl #4
; GISEL-NEXT:    umov.b w10, v0[0]
; GISEL-NEXT:    orr w11, w11, w0, lsl #7
; GISEL-NEXT:    and w14, w14, #0x1
; GISEL-NEXT:    and w12, w15, #0x1
; GISEL-NEXT:    umov.b w15, v0[2]
; GISEL-NEXT:    orr w8, w8, w16, lsl #6
; GISEL-NEXT:    orr w9, w9, w12, lsl #5
; GISEL-NEXT:    umov.b w12, v0[6]
; GISEL-NEXT:    strb w11, [sp, #8]
; GISEL-NEXT:    and w11, w13, #0x1
; GISEL-NEXT:    umov.b w13, v0[3]
; GISEL-NEXT:    orr w8, w8, w14, lsl #7
; GISEL-NEXT:    umov.b w14, v0[7]
; GISEL-NEXT:    ldr b0, [sp, #8]
; GISEL-NEXT:    bfi w10, w11, #1, #31
; GISEL-NEXT:    and w11, w15, #0x1
; GISEL-NEXT:    strb w8, [sp, #9]
; GISEL-NEXT:    umov.b w15, v0[4]
; GISEL-NEXT:    and w8, w12, #0x1
; GISEL-NEXT:    orr w10, w10, w11, lsl #2
; GISEL-NEXT:    orr w8, w9, w8, lsl #6
; GISEL-NEXT:    and w9, w13, #0x1
; GISEL-NEXT:    umov.b w11, v0[1]
; GISEL-NEXT:    orr w9, w10, w9, lsl #3
; GISEL-NEXT:    umov.b w10, v0[5]
; GISEL-NEXT:    umov.b w12, v0[0]
; GISEL-NEXT:    and w13, w14, #0x1
; GISEL-NEXT:    umov.b w16, v0[2]
; GISEL-NEXT:    umov.b w17, v0[3]
; GISEL-NEXT:    and w14, w15, #0x1
; GISEL-NEXT:    umov.b w15, v0[2]
; GISEL-NEXT:    orr w8, w8, w13, lsl #7
; GISEL-NEXT:    orr w9, w9, w14, lsl #4
; GISEL-NEXT:    umov.b w13, v0[6]
; GISEL-NEXT:    and w11, w11, #0x1
; GISEL-NEXT:    umov.b w14, v0[3]
; GISEL-NEXT:    strb w8, [sp, #10]
; GISEL-NEXT:    and w8, w10, #0x1
; GISEL-NEXT:    bfi w12, w11, #1, #31
; GISEL-NEXT:    orr w8, w9, w8, lsl #5
; GISEL-NEXT:    umov.b w10, v0[4]
; GISEL-NEXT:    and w9, w15, #0x1
; GISEL-NEXT:    umov.b w11, v0[7]
; GISEL-NEXT:    umov.b w15, v0[1]
; GISEL-NEXT:    orr w9, w12, w9, lsl #2
; GISEL-NEXT:    umov.b w12, v0[5]
; GISEL-NEXT:    and w13, w13, #0x1
; GISEL-NEXT:    and w14, w14, #0x1
; GISEL-NEXT:    orr w8, w8, w13, lsl #6
; GISEL-NEXT:    umov.b w13, v0[0]
; GISEL-NEXT:    orr w9, w9, w14, lsl #3
; GISEL-NEXT:    and w10, w10, #0x1
; GISEL-NEXT:    umov.b w14, v0[6]
; GISEL-NEXT:    and w11, w11, #0x1
; GISEL-NEXT:    and w15, w15, #0x1
; GISEL-NEXT:    umov.b w0, v0[3]
; GISEL-NEXT:    orr w9, w9, w10, lsl #4
; GISEL-NEXT:    and w10, w12, #0x1
; GISEL-NEXT:    umov.b w12, v0[7]
; GISEL-NEXT:    orr w8, w8, w11, lsl #7
; GISEL-NEXT:    bfi w13, w15, #1, #31
; GISEL-NEXT:    and w11, w16, #0x1
; GISEL-NEXT:    orr w9, w9, w10, lsl #5
; GISEL-NEXT:    and w10, w14, #0x1
; GISEL-NEXT:    umov.b w14, v0[4]
; GISEL-NEXT:    strb w8, [sp, #11]
; GISEL-NEXT:    umov.b w15, v0[1]
; GISEL-NEXT:    umov.b w16, v0[3]
; GISEL-NEXT:    orr w8, w9, w10, lsl #6
; GISEL-NEXT:    orr w9, w13, w11, lsl #2
; GISEL-NEXT:    and w10, w12, #0x1
; GISEL-NEXT:    and w11, w17, #0x1
; GISEL-NEXT:    umov.b w12, v0[5]
; GISEL-NEXT:    umov.b w17, v0[0]
; GISEL-NEXT:    orr w8, w8, w10, lsl #7
; GISEL-NEXT:    orr w9, w9, w11, lsl #3
; GISEL-NEXT:    umov.b w10, v0[1]
; GISEL-NEXT:    and w11, w14, #0x1
; GISEL-NEXT:    umov.b w14, v0[0]
; GISEL-NEXT:    and w15, w15, #0x1
; GISEL-NEXT:    orr w9, w9, w11, lsl #4
; GISEL-NEXT:    umov.b w11, v0[2]
; GISEL-NEXT:    umov.b w13, v0[6]
; GISEL-NEXT:    and w12, w12, #0x1
; GISEL-NEXT:    bfi w17, w15, #1, #31
; GISEL-NEXT:    umov.b w15, v0[5]
; GISEL-NEXT:    orr w9, w9, w12, lsl #5
; GISEL-NEXT:    and w10, w10, #0x1
; GISEL-NEXT:    umov.b w12, v0[2]
; GISEL-NEXT:    bfi w14, w10, #1, #31
; GISEL-NEXT:    umov.b w10, v0[4]
; GISEL-NEXT:    ldr b1, [sp, #9]
; GISEL-NEXT:    and w11, w11, #0x1
; GISEL-NEXT:    and w13, w13, #0x1
; GISEL-NEXT:    strb w8, [sp, #12]
; GISEL-NEXT:    orr w11, w14, w11, lsl #2
; GISEL-NEXT:    and w14, w16, #0x1
; GISEL-NEXT:    umov.b w16, v0[4]
; GISEL-NEXT:    and w12, w12, #0x1
; GISEL-NEXT:    and w15, w15, #0x1
; GISEL-NEXT:    orr w9, w9, w13, lsl #6
; GISEL-NEXT:    orr w11, w11, w14, lsl #3
; GISEL-NEXT:    orr w12, w17, w12, lsl #2
; GISEL-NEXT:    and w10, w10, #0x1
; GISEL-NEXT:    and w17, w0, #0x1
; GISEL-NEXT:    umov.b w0, v0[5]
; GISEL-NEXT:    umov.b w14, v0[6]
; GISEL-NEXT:    orr w10, w11, w10, lsl #4
; GISEL-NEXT:    orr w12, w12, w17, lsl #3
; GISEL-NEXT:    umov.b w11, v0[7]
; GISEL-NEXT:    and w16, w16, #0x1
; GISEL-NEXT:    umov.b w17, v0[6]
; GISEL-NEXT:    orr w10, w10, w15, lsl #5
; GISEL-NEXT:    umov.b w15, v0[7]
; GISEL-NEXT:    orr w12, w12, w16, lsl #4
; GISEL-NEXT:    and w16, w0, #0x1
; GISEL-NEXT:    umov.b w0, v0[7]
; GISEL-NEXT:    and w14, w14, #0x1
; GISEL-NEXT:    orr w12, w12, w16, lsl #5
; GISEL-NEXT:    orr w10, w10, w14, lsl #6
; GISEL-NEXT:    and w11, w11, #0x1
; GISEL-NEXT:    and w13, w17, #0x1
; GISEL-NEXT:    orr w9, w9, w11, lsl #7
; GISEL-NEXT:    mov.s v0[1], v1[0]
; GISEL-NEXT:    orr w11, w12, w13, lsl #6
; GISEL-NEXT:    and w12, w15, #0x1
; GISEL-NEXT:    ; kill: def $d0 killed $d0 killed $q0
; GISEL-NEXT:    orr w8, w10, w12, lsl #7
; GISEL-NEXT:    and w10, w0, #0x1
; GISEL-NEXT:    strb w9, [sp, #13]
; GISEL-NEXT:    orr w9, w11, w10, lsl #7
; GISEL-NEXT:    strb w8, [sp, #14]
; GISEL-NEXT:    strb w9, [sp, #15]
; GISEL-NEXT:    add sp, sp, #16
; GISEL-NEXT:    ret
  %bc = bitcast <16 x i1> %arg to <2 x i8>
  ret <2 x i8> %bc
}
