; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64 -mattr=+sve2,+dotprod %s -o - | FileCheck %s
; RUN: llc -mtriple=aarch64 -mattr=+sve2 %s -o - | FileCheck %s --check-prefix=CHECK-NODOTPROD

define <vscale x 4 x i32> @dotp(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-LABEL: dotp:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    udot z0.s, z1.b, z2.b
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    udot z0.s, z1.b, z2.b
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = zext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %b.wide = zext <vscale x 16 x i8> %b to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 2 x i64> @dotp_wide(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b) {
; CHECK-LABEL: dotp_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    udot z0.d, z1.h, z2.h
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp_wide:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    udot z0.d, z1.h, z2.h
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = zext <vscale x 8 x i16> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 4 x i32> @dotp_sext(<vscale x 4 x i32> %accc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-LABEL: dotp_sext:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sdot z0.s, z1.b, z2.b
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp_sext:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    sdot z0.s, z1.b, z2.b
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = sext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %b.wide = sext <vscale x 16 x i8> %b to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %accc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 2 x i64> @dotp_wide_sext(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b) {
; CHECK-LABEL: dotp_wide_sext:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sdot z0.d, z1.h, z2.h
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp_wide_sext:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    sdot z0.d, z1.h, z2.h
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = sext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = sext <vscale x 8 x i16> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <4 x i32> @dotp_fixed(<4 x i32> %acc, <16 x i8> %a, <16 x i8> %b) {
; CHECK-LABEL: dotp_fixed:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    udot v0.4s, v1.16b, v2.16b
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp_fixed:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    umull v3.8h, v1.8b, v2.8b
; CHECK-NODOTPROD-NEXT:    umull2 v1.8h, v1.16b, v2.16b
; CHECK-NODOTPROD-NEXT:    ushll v2.4s, v1.4h, #0
; CHECK-NODOTPROD-NEXT:    uaddw v0.4s, v0.4s, v3.4h
; CHECK-NODOTPROD-NEXT:    uaddw2 v2.4s, v2.4s, v3.8h
; CHECK-NODOTPROD-NEXT:    uaddw2 v0.4s, v0.4s, v1.8h
; CHECK-NODOTPROD-NEXT:    add v0.4s, v2.4s, v0.4s
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = zext <16 x i8> %a to <16 x i32>
  %b.wide = zext <16 x i8> %b to <16 x i32>
  %mult = mul nuw nsw <16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <4 x i32> @llvm.experimental.vector.partial.reduce.add.v4i32.v16i32(<4 x i32> %acc, <16 x i32> %mult)
  ret <4 x i32> %partial.reduce
}

define <2 x i64> @dotp_fixed_wide(<2 x i64> %acc, <8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: dotp_fixed_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    umull v3.4s, v1.4h, v2.4h
; CHECK-NEXT:    umull2 v1.4s, v1.8h, v2.8h
; CHECK-NEXT:    ushll v2.2d, v1.2s, #0
; CHECK-NEXT:    uaddw v0.2d, v0.2d, v3.2s
; CHECK-NEXT:    uaddw2 v2.2d, v2.2d, v3.4s
; CHECK-NEXT:    uaddw2 v0.2d, v0.2d, v1.4s
; CHECK-NEXT:    add v0.2d, v2.2d, v0.2d
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp_fixed_wide:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    umull v3.4s, v1.4h, v2.4h
; CHECK-NODOTPROD-NEXT:    umull2 v1.4s, v1.8h, v2.8h
; CHECK-NODOTPROD-NEXT:    ushll v2.2d, v1.2s, #0
; CHECK-NODOTPROD-NEXT:    uaddw v0.2d, v0.2d, v3.2s
; CHECK-NODOTPROD-NEXT:    uaddw2 v2.2d, v2.2d, v3.4s
; CHECK-NODOTPROD-NEXT:    uaddw2 v0.2d, v0.2d, v1.4s
; CHECK-NODOTPROD-NEXT:    add v0.2d, v2.2d, v0.2d
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = zext <8 x i16> %a to <8 x i64>
  %b.wide = zext <8 x i16> %b to <8 x i64>
  %mult = mul nuw nsw <8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <2 x i64> @llvm.experimental.vector.partial.reduce.add.v2i64.v8i64(<2 x i64> %acc, <8 x i64> %mult)
  ret <2 x i64> %partial.reduce
}

define <4 x i32> @dotp_fixed_sext(<4 x i32> %accc, <16 x i8> %a, <16 x i8> %b) {
; CHECK-LABEL: dotp_fixed_sext:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sdot v0.4s, v1.16b, v2.16b
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp_fixed_sext:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    smull v3.8h, v1.8b, v2.8b
; CHECK-NODOTPROD-NEXT:    smull2 v1.8h, v1.16b, v2.16b
; CHECK-NODOTPROD-NEXT:    sshll v2.4s, v1.4h, #0
; CHECK-NODOTPROD-NEXT:    saddw v0.4s, v0.4s, v3.4h
; CHECK-NODOTPROD-NEXT:    saddw2 v2.4s, v2.4s, v3.8h
; CHECK-NODOTPROD-NEXT:    saddw2 v0.4s, v0.4s, v1.8h
; CHECK-NODOTPROD-NEXT:    add v0.4s, v2.4s, v0.4s
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = sext <16 x i8> %a to <16 x i32>
  %b.wide = sext <16 x i8> %b to <16 x i32>
  %mult = mul nuw nsw <16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <4 x i32> @llvm.experimental.vector.partial.reduce.add.v4i32.v16i32(<4 x i32> %accc, <16 x i32> %mult)
  ret <4 x i32> %partial.reduce
}

define <2 x i64> @dotp_fixed_wide_sext(<2 x i64> %acc, <8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: dotp_fixed_wide_sext:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    smull v3.4s, v1.4h, v2.4h
; CHECK-NEXT:    smull2 v1.4s, v1.8h, v2.8h
; CHECK-NEXT:    sshll v2.2d, v1.2s, #0
; CHECK-NEXT:    saddw v0.2d, v0.2d, v3.2s
; CHECK-NEXT:    saddw2 v2.2d, v2.2d, v3.4s
; CHECK-NEXT:    saddw2 v0.2d, v0.2d, v1.4s
; CHECK-NEXT:    add v0.2d, v2.2d, v0.2d
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: dotp_fixed_wide_sext:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    smull v3.4s, v1.4h, v2.4h
; CHECK-NODOTPROD-NEXT:    smull2 v1.4s, v1.8h, v2.8h
; CHECK-NODOTPROD-NEXT:    sshll v2.2d, v1.2s, #0
; CHECK-NODOTPROD-NEXT:    saddw v0.2d, v0.2d, v3.2s
; CHECK-NODOTPROD-NEXT:    saddw2 v2.2d, v2.2d, v3.4s
; CHECK-NODOTPROD-NEXT:    saddw2 v0.2d, v0.2d, v1.4s
; CHECK-NODOTPROD-NEXT:    add v0.2d, v2.2d, v0.2d
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = sext <8 x i16> %a to <8 x i64>
  %b.wide = sext <8 x i16> %b to <8 x i64>
  %mult = mul nuw nsw <8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <2 x i64> @llvm.experimental.vector.partial.reduce.add.v2i64.v8i64(<2 x i64> %acc, <8 x i64> %mult)
  ret <2 x i64> %partial.reduce
}

define <vscale x 4 x i32> @not_dotp(<vscale x 4 x i32> %acc, <vscale x 8 x i8> %a, <vscale x 8 x i8> %b) {
; CHECK-LABEL: not_dotp:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEXT:    ptrue p0.s
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: not_dotp:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NODOTPROD-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NODOTPROD-NEXT:    ptrue p0.s
; CHECK-NODOTPROD-NEXT:    uunpklo z3.s, z1.h
; CHECK-NODOTPROD-NEXT:    uunpklo z4.s, z2.h
; CHECK-NODOTPROD-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NODOTPROD-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NODOTPROD-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NODOTPROD-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i8> %a to <vscale x 8 x i32>
  %b.wide = zext <vscale x 8 x i8> %b to <vscale x 8 x i32>
  %mult = mul nuw nsw <vscale x 8 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 8 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 2 x i64> @not_dotp_wide(<vscale x 2 x i64> %acc, <vscale x 4 x i16> %a, <vscale x 4 x i16> %b) {
; CHECK-LABEL: not_dotp_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z1.s, z1.s, #0xffff
; CHECK-NEXT:    and z2.s, z2.s, #0xffff
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    uunpklo z3.d, z1.s
; CHECK-NEXT:    uunpklo z4.d, z2.s
; CHECK-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NODOTPROD-LABEL: not_dotp_wide:
; CHECK-NODOTPROD:       // %bb.0: // %entry
; CHECK-NODOTPROD-NEXT:    and z1.s, z1.s, #0xffff
; CHECK-NODOTPROD-NEXT:    and z2.s, z2.s, #0xffff
; CHECK-NODOTPROD-NEXT:    ptrue p0.d
; CHECK-NODOTPROD-NEXT:    uunpklo z3.d, z1.s
; CHECK-NODOTPROD-NEXT:    uunpklo z4.d, z2.s
; CHECK-NODOTPROD-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NODOTPROD-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NODOTPROD-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NODOTPROD-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NODOTPROD-NEXT:    ret
entry:
  %a.wide = zext <vscale x 4 x i16> %a to <vscale x 4 x i64>
  %b.wide = zext <vscale x 4 x i16> %b to <vscale x 4 x i64>
  %mult = mul nuw nsw <vscale x 4 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv4i64(<vscale x 2 x i64> %acc, <vscale x 4 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}
