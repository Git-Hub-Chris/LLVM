; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=aarch64-none-linux-gnu %s -o - | FileCheck %s

define void @func_set_rounding_dyn(i32 %rm) {
; CHECK-LABEL: func_set_rounding_dyn:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub w9, w0, #1
; CHECK-NEXT:    mrs x8, FPCR
; CHECK-NEXT:    and w9, w9, #0x3
; CHECK-NEXT:    and x8, x8, #0xffffffffff3fffff
; CHECK-NEXT:    lsl w9, w9, #22
; CHECK-NEXT:    orr x8, x8, x9
; CHECK-NEXT:    msr FPCR, x8
; CHECK-NEXT:    ret
  call void @llvm.set.rounding(i32 %rm)
  ret void
}

define void @func_set_rounding_toward_zero() {
; CHECK-LABEL: func_set_rounding_toward_zero:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mrs x8, FPCR
; CHECK-NEXT:    orr x8, x8, #0xc00000
; CHECK-NEXT:    msr FPCR, x8
; CHECK-NEXT:    ret
  call void @llvm.set.rounding(i32 0)
  ret void
}

define void @func_set_rounding_tonearest_even() {
; CHECK-LABEL: func_set_rounding_tonearest_even:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mrs x8, FPCR
; CHECK-NEXT:    and x8, x8, #0xffffffffff3fffff
; CHECK-NEXT:    msr FPCR, x8
; CHECK-NEXT:    ret
  call void @llvm.set.rounding(i32 1)
  ret void
}

define void @func_set_rounding_upward() {
; CHECK-LABEL: func_set_rounding_upward:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mrs x8, FPCR
; CHECK-NEXT:    and x8, x8, #0xffffffffff3fffff
; CHECK-NEXT:    orr x8, x8, #0x400000
; CHECK-NEXT:    msr FPCR, x8
; CHECK-NEXT:    ret
  call void @llvm.set.rounding(i32 2)
  ret void
}

define void @func_set_rounding_downward() {
; CHECK-LABEL: func_set_rounding_downward:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mrs x8, FPCR
; CHECK-NEXT:    and x8, x8, #0xffffffffff3fffff
; CHECK-NEXT:    orr x8, x8, #0x800000
; CHECK-NEXT:    msr FPCR, x8
; CHECK-NEXT:    ret
  call void @llvm.set.rounding(i32 3)
  ret void
}

define i64 @get_fpenv_01() nounwind {
; CHECK-LABEL: get_fpenv_01:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    add x0, sp, #8
; CHECK-NEXT:    bl fegetenv
; CHECK-NEXT:    ldr x0, [sp, #8]
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %fpenv = call i64 @llvm.get.fpenv.i64()
  ret i64 %fpenv
}

define void @set_fpenv_01(i64 %fpenv) nounwind {
; CHECK-LABEL: set_fpenv_01:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    stp x30, x0, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    add x0, sp, #8
; CHECK-NEXT:    bl fesetenv
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  call void @llvm.set.fpenv.i64(i64 %fpenv)
  ret void
}

define void @reset_fpenv_01() nounwind {
; CHECK-LABEL: reset_fpenv_01:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    mov x0, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    bl fesetenv
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  call void @llvm.reset.fpenv()
  ret void
}

declare void @llvm.set.rounding(i32)
declare i64 @llvm.get.fpenv.i64()
declare void @llvm.set.fpenv.i64(i64 %fpenv)
declare void @llvm.reset.fpenv()
