# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -run-pass=prologepilog -o - %s | FileCheck %s
--- |
  target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
  target triple = "arm64e-apple-ios18.4.0"

  declare void @spam()

  define i32 @check_lr_live(ptr %arg) #0 {
  bb:
    %icmp = icmp eq ptr %arg, null
    %or = or i1 %icmp, false
    br i1 %or, label %bb2, label %bb1

  bb1:                                              ; preds = %bb
    call void @spam()
    br label %bb2

  bb2:                                              ; preds = %bb1, %bb
    %phi = phi i32 [ -536870206, %bb ], [ 0, %bb1 ]
    ret i32 %phi
  }

  attributes #0 = { nounwind "target-features"="+fp-armv8,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+reserve-lr-for-ra" }

...
# This test checks that the live-in flags for LR are correctly set when LR is reserved, but live for a call.
---
name:            check_lr_live
alignment:       4
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$x0' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 0
  savePoint:       '%bb.2'
  restorePoint:    '%bb.2'
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: check_lr_live
  ; CHECK: bb.0.bb:
  ; CHECK-NEXT:   successors: %bb.1(0x20000000), %bb.2(0x60000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x8 = COPY $x0
  ; CHECK-NEXT:   renamable $w0 = MOVi32imm -536870206
  ; CHECK-NEXT:   CBNZX killed renamable $x8, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   B %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.bb:
  ; CHECK-NEXT:   successors: %bb.4(0x2aaaaaab), %bb.3(0x55555555)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CBNZW $wzr, %bb.4
  ; CHECK-NEXT:   B %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.bb1:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT:   liveins: $lr
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp, -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  ; CHECK-NEXT:   BL @spam, csr_darwin_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ; CHECK-NEXT:   renamable $w0 = COPY $wzr
  ; CHECK-NEXT:   early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp, 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.bb2:
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET_ReallyLR implicit $w0
  bb.0.bb:
    successors: %bb.4(0x20000000), %bb.1(0x60000000)
    liveins: $x0

    renamable $x8 = COPY $x0
    renamable $w0 = MOVi32imm -536870206
    CBNZX killed renamable $x8, %bb.1

  bb.4:
    liveins: $w0

    B %bb.3

  bb.1.bb:
    successors: %bb.3(0x2aaaaaab), %bb.2(0x55555555)
    liveins: $w0

    CBNZW $wzr, %bb.3
    B %bb.2

  bb.2.bb1:
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL @spam, csr_darwin_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    renamable $w0 = COPY $wzr

  bb.3.bb2:
    liveins: $w0

    RET_ReallyLR implicit $w0

...
