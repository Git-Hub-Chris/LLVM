; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -global-isel -mtriple=aarch64-linux-gnu < %s | FileCheck %s

define i8 @mul_i8(i8 %x, i8 %y) {
; CHECK-LABEL: mul_i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul w0, w0, w1
; CHECK-NEXT:    ret
  %mul = mul i8 %x, %y
  ret i8 %mul
}

define i16 @mul_i16(i16 %x, i16 %y) {
; CHECK-LABEL: mul_i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul w0, w0, w1
; CHECK-NEXT:    ret
  %mul = mul i16 %x, %y
  ret i16 %mul
}

define i32 @mul_i32(i32 %x, i32 %y) {
; CHECK-LABEL: mul_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul w0, w0, w1
; CHECK-NEXT:    ret
  %mul = mul i32 %x, %y
  ret i32 %mul
}

define i64 @mul_i64(i64 %x, i64 %y) {
; CHECK-LABEL: mul_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x0, x0, x1
; CHECK-NEXT:    ret
  %mul = mul i64 %x, %y
  ret i64 %mul
}

define i96 @mul_i96(i96 %x, i96 %y) {
; CHECK-LABEL: mul_i96:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x9, x0, x3
; CHECK-NEXT:    mul x8, x0, x2
; CHECK-NEXT:    umulh x10, x0, x2
; CHECK-NEXT:    madd x9, x1, x2, x9
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    add x1, x9, x10
; CHECK-NEXT:    ret
  %mul = mul i96 %x, %y
  ret i96 %mul
}

define i128 @mul_i128(i128 %x, i128 %y) {
; CHECK-LABEL: mul_i128:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x9, x0, x3
; CHECK-NEXT:    mul x8, x0, x2
; CHECK-NEXT:    umulh x10, x0, x2
; CHECK-NEXT:    madd x9, x1, x2, x9
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    add x1, x9, x10
; CHECK-NEXT:    ret
  %mul = mul i128 %x, %y
  ret i128 %mul
}

define i160 @mul_i160(i160 %x, i160 %y) {
; CHECK-LABEL: mul_i160:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x8, x1, x4
; CHECK-NEXT:    mul x9, x0, x5
; CHECK-NEXT:    umulh x10, x0, x4
; CHECK-NEXT:    mul x11, x2, x4
; CHECK-NEXT:    adds x8, x8, x9
; CHECK-NEXT:    mul x12, x1, x5
; CHECK-NEXT:    mul x13, x0, x6
; CHECK-NEXT:    umulh x14, x1, x4
; CHECK-NEXT:    adcs x1, x8, x10
; CHECK-NEXT:    adc x9, xzr, xzr
; CHECK-NEXT:    adds x10, x11, x12
; CHECK-NEXT:    umulh x8, x0, x5
; CHECK-NEXT:    cset w11, hs
; CHECK-NEXT:    adc x10, x10, x13
; CHECK-NEXT:    cmp w11, #1
; CHECK-NEXT:    mul x0, x0, x4
; CHECK-NEXT:    adc x10, x10, x14
; CHECK-NEXT:    adc x8, x10, x8
; CHECK-NEXT:    adc x2, x8, x9
; CHECK-NEXT:    ret
  %mul = mul i160 %x, %y
  ret i160 %mul
}

define i192 @mul_i192(i192 %x, i192 %y) {
; CHECK-LABEL: mul_i192:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x8, x1, x4
; CHECK-NEXT:    mul x9, x0, x5
; CHECK-NEXT:    umulh x10, x0, x4
; CHECK-NEXT:    mul x11, x2, x4
; CHECK-NEXT:    adds x8, x8, x9
; CHECK-NEXT:    mul x12, x1, x5
; CHECK-NEXT:    mul x13, x0, x6
; CHECK-NEXT:    umulh x14, x1, x4
; CHECK-NEXT:    adcs x1, x8, x10
; CHECK-NEXT:    adc x9, xzr, xzr
; CHECK-NEXT:    adds x10, x11, x12
; CHECK-NEXT:    umulh x8, x0, x5
; CHECK-NEXT:    cset w11, hs
; CHECK-NEXT:    adc x10, x10, x13
; CHECK-NEXT:    cmp w11, #1
; CHECK-NEXT:    mul x0, x0, x4
; CHECK-NEXT:    adc x10, x10, x14
; CHECK-NEXT:    adc x8, x10, x8
; CHECK-NEXT:    adc x2, x8, x9
; CHECK-NEXT:    ret
  %mul = mul i192 %x, %y
  ret i192 %mul
}

define i224 @mul_i224(i224 %x, i224 %y) {
; CHECK-LABEL: mul_i224:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x8, x1, x4
; CHECK-NEXT:    mul x9, x0, x5
; CHECK-NEXT:    umulh x10, x0, x4
; CHECK-NEXT:    mul x11, x2, x4
; CHECK-NEXT:    adds x8, x8, x9
; CHECK-NEXT:    mul x12, x1, x5
; CHECK-NEXT:    adcs x8, x8, x10
; CHECK-NEXT:    mul x14, x2, x5
; CHECK-NEXT:    adc x10, xzr, xzr
; CHECK-NEXT:    mul x13, x0, x6
; CHECK-NEXT:    adds x11, x11, x12
; CHECK-NEXT:    umulh x15, x1, x4
; CHECK-NEXT:    madd x14, x3, x4, x14
; CHECK-NEXT:    umulh x16, x0, x5
; CHECK-NEXT:    madd x12, x1, x6, x14
; CHECK-NEXT:    cset w14, hs
; CHECK-NEXT:    adcs x11, x11, x13
; CHECK-NEXT:    adc x13, xzr, xzr
; CHECK-NEXT:    cmp w14, #1
; CHECK-NEXT:    umulh x17, x2, x4
; CHECK-NEXT:    adcs x11, x11, x15
; CHECK-NEXT:    adc x13, x13, xzr
; CHECK-NEXT:    cmp w14, #1
; CHECK-NEXT:    umulh x9, x1, x5
; CHECK-NEXT:    adcs x11, x11, x16
; CHECK-NEXT:    mov x1, x8
; CHECK-NEXT:    adc x13, x13, xzr
; CHECK-NEXT:    cmp w14, #1
; CHECK-NEXT:    umulh x18, x0, x6
; CHECK-NEXT:    adcs x2, x11, x10
; CHECK-NEXT:    adc x10, x13, xzr
; CHECK-NEXT:    madd x12, x0, x7, x12
; CHECK-NEXT:    add x9, x17, x9
; CHECK-NEXT:    mul x0, x0, x4
; CHECK-NEXT:    add x9, x9, x18
; CHECK-NEXT:    add x9, x9, x10
; CHECK-NEXT:    add x3, x12, x9
; CHECK-NEXT:    ret
  %mul = mul i224 %x, %y
  ret i224 %mul
}

define i256 @mul_i256(i256 %x, i256 %y) {
; CHECK-LABEL: mul_i256:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x8, x1, x4
; CHECK-NEXT:    mul x9, x0, x5
; CHECK-NEXT:    umulh x10, x0, x4
; CHECK-NEXT:    mul x11, x2, x4
; CHECK-NEXT:    adds x8, x8, x9
; CHECK-NEXT:    mul x12, x1, x5
; CHECK-NEXT:    adcs x8, x8, x10
; CHECK-NEXT:    mul x14, x2, x5
; CHECK-NEXT:    adc x10, xzr, xzr
; CHECK-NEXT:    mul x13, x0, x6
; CHECK-NEXT:    adds x11, x11, x12
; CHECK-NEXT:    umulh x15, x1, x4
; CHECK-NEXT:    madd x14, x3, x4, x14
; CHECK-NEXT:    umulh x16, x0, x5
; CHECK-NEXT:    madd x12, x1, x6, x14
; CHECK-NEXT:    cset w14, hs
; CHECK-NEXT:    adcs x11, x11, x13
; CHECK-NEXT:    adc x13, xzr, xzr
; CHECK-NEXT:    cmp w14, #1
; CHECK-NEXT:    umulh x17, x2, x4
; CHECK-NEXT:    adcs x11, x11, x15
; CHECK-NEXT:    adc x13, x13, xzr
; CHECK-NEXT:    cmp w14, #1
; CHECK-NEXT:    umulh x9, x1, x5
; CHECK-NEXT:    adcs x11, x11, x16
; CHECK-NEXT:    mov x1, x8
; CHECK-NEXT:    adc x13, x13, xzr
; CHECK-NEXT:    cmp w14, #1
; CHECK-NEXT:    umulh x18, x0, x6
; CHECK-NEXT:    adcs x2, x11, x10
; CHECK-NEXT:    adc x10, x13, xzr
; CHECK-NEXT:    madd x12, x0, x7, x12
; CHECK-NEXT:    add x9, x17, x9
; CHECK-NEXT:    mul x0, x0, x4
; CHECK-NEXT:    add x9, x9, x18
; CHECK-NEXT:    add x9, x9, x10
; CHECK-NEXT:    add x3, x12, x9
; CHECK-NEXT:    ret
  %mul = mul i256 %x, %y
  ret i256 %mul
}
