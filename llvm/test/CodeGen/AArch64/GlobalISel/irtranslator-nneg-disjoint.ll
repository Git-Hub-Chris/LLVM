; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=aarch64-linux-gnu -O0 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o - 2>&1 | FileCheck %s

define i32 @call_nneg(i16 %a) {
  ; CHECK-LABEL: name: call_nneg
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $w0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   %2:_(s32) = nneg G_ZEXT [[TRUNC]](s16)
  ; CHECK-NEXT:   $w0 = COPY %2(s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $w0
entry:
  %result = zext nneg i16 %a to i32
  ret i32 %result
}

define i32 @call_not_nneg(i16 %a) {
  ; CHECK-LABEL: name: call_not_nneg
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $w0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[TRUNC]](s16)
  ; CHECK-NEXT:   $w0 = COPY [[ZEXT]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $w0
entry:
  %result = zext i16 %a to i32
  ret i32 %result
}

define i32 @call_disjoint(i32 %a, i32 %b) {
  ; CHECK-LABEL: name: call_disjoint
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $w0, $w1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $w0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
  ; CHECK-NEXT:   %2:_(s32) = disjoint G_OR [[COPY]], [[COPY1]]
  ; CHECK-NEXT:   $w0 = COPY %2(s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $w0
entry:
  %result = or disjoint i32 %a, %b
  ret i32 %result
}

define i32 @call_add(i32 %a, i32 %b) {
  ; CHECK-LABEL: name: call_add
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $w0, $w1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $w0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:_(s32) = nsw G_ADD [[COPY]], [[COPY1]]
  ; CHECK-NEXT:   $w0 = COPY [[ADD]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $w0
entry:
  %result = add nsw i32 %a, %b
  ret i32 %result
}

define i32 @call_not_disjoint(i32 %a, i32 %b) {
  ; CHECK-LABEL: name: call_not_disjoint
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $w0, $w1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $w0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
  ; CHECK-NEXT:   [[OR:%[0-9]+]]:_(s32) = G_OR [[COPY]], [[COPY1]]
  ; CHECK-NEXT:   $w0 = COPY [[OR]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $w0
entry:
  %result = or i32 %a, %b
  ret i32 %result
}
