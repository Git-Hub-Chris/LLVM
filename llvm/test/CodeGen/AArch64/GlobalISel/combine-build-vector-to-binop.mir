# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -o - -mtriple=aarch64 -run-pass=aarch64-prelegalizer-combiner -verify-machineinstrs %s | FileCheck %s

---
name:            build_vector_success_add
liveins:
body:             |
  bb.0:

    ; CHECK-LABEL: name: build_vector_success_add
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 10
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR [[COPY]](s32), [[COPY1]](s32)
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32)
    ; CHECK-NEXT: %bv:_(<2 x s32>) = G_ADD [[BUILD_VECTOR]], [[BUILD_VECTOR1]]
    ; CHECK-NEXT: %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), [[COPY]](s32)
    ; CHECK-NEXT: %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), [[COPY1]](s32)
    ; CHECK-NEXT: $w0 = COPY %extract(s32)
    ; CHECK-NEXT: $w1 = COPY %extract2(s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s32) = G_CONSTANT i32 10
    %3:_(s32) = G_CONSTANT i32 1
    %4:_(s32) = G_ADD %0, %2
    %5:_(s32) = G_ADD %1, %3
    %bv:_(<2 x s32>) = G_BUILD_VECTOR %4(s32), %5(s32)
    %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), %0(s32)
    %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), %1(s32)
    $w0 = COPY %extract(s32)
    $w1 = COPY %extract2(s32)
    RET_ReallyLR implicit $w0

...
---
name:            build_vector_failure_mixed
liveins:
body:             |
  bb.0:

    ; CHECK-LABEL: name: build_vector_failure_mixed
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 11
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY1]], [[C1]]
    ; CHECK-NEXT: %bv:_(<2 x s32>) = G_BUILD_VECTOR [[ADD]](s32), [[SUB]](s32)
    ; CHECK-NEXT: %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), [[COPY]](s32)
    ; CHECK-NEXT: %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), [[COPY1]](s32)
    ; CHECK-NEXT: $w0 = COPY %extract(s32)
    ; CHECK-NEXT: $w1 = COPY %extract2(s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s32) = G_CONSTANT i32 5
    %3:_(s32) = G_CONSTANT i32 11
    %4:_(s32) = G_ADD %0, %2
    %5:_(s32) = G_SUB %1, %3
    %bv:_(<2 x s32>) = G_BUILD_VECTOR %4(s32), %5(s32)
    %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), %0(s32)
    %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<2 x s32>), %1(s32)
    $w0 = COPY %extract(s32)
    $w1 = COPY %extract2(s32)
    RET_ReallyLR implicit $w0

...
---
name:            build_vector_success_sub
liveins:
body:             |
  bb.0:

    ; CHECK-LABEL: name: build_vector_success_sub
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $w2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $w3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 10
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[COPY]](s32), [[COPY1]](s32), [[COPY2]](s32), [[COPY3]](s32)
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32), [[C2]](s32), [[C3]](s32)
    ; CHECK-NEXT: %bv:_(<4 x s32>) = G_SUB [[BUILD_VECTOR]], [[BUILD_VECTOR1]]
    ; CHECK-NEXT: %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY3]](s32)
    ; CHECK-NEXT: %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY]](s32)
    ; CHECK-NEXT: $w0 = COPY %extract(s32)
    ; CHECK-NEXT: $w1 = COPY %extract2(s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s32) = COPY $w2
    %3:_(s32) = COPY $w3
    %4:_(s32) = G_CONSTANT i32 10
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(s32) = G_CONSTANT i32 2
    %7:_(s32) = G_CONSTANT i32 3
    %8:_(s32) = G_SUB %0, %4
    %9:_(s32) = G_SUB %1, %5
    %10:_(s32) = G_SUB %2, %6
    %11:_(s32) = G_SUB %3, %7
    %bv:_(<4 x s32>) = G_BUILD_VECTOR %8(s32), %9(s32), %10(s32), %11(s32)
    %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %3(s32)
    %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %0(s32)
    $w0 = COPY %extract(s32)
    $w1 = COPY %extract2(s32)
    RET_ReallyLR implicit $w0


...
---
name:            build_vector_success_fadd
liveins:
body:             |
  bb.0:

    ; CHECK-LABEL: name: build_vector_success_fadd
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $w2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $w3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.000000e+01
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.100000e+01
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.200000e+01
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.400000e+01
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[COPY]](s32), [[COPY1]](s32), [[COPY2]](s32), [[COPY3]](s32)
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C1]](s32), [[C2]](s32), [[C3]](s32)
    ; CHECK-NEXT: %bv:_(<4 x s32>) = G_FADD [[BUILD_VECTOR]], [[BUILD_VECTOR1]]
    ; CHECK-NEXT: %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY3]](s32)
    ; CHECK-NEXT: %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY]](s32)
    ; CHECK-NEXT: $w0 = COPY %extract(s32)
    ; CHECK-NEXT: $w1 = COPY %extract2(s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s32) = COPY $w2
    %3:_(s32) = COPY $w3
    %4:_(s32) = G_FCONSTANT float 10.000000e+00
    %5:_(s32) = G_FCONSTANT float 11.000000e+00
    %6:_(s32) = G_FCONSTANT float 12.000000e+00
    %7:_(s32) = G_FCONSTANT float 14.000000e+00
    %8:_(s32) = G_FADD %0, %4
    %9:_(s32) = G_FADD %1, %5
    %10:_(s32) = G_FADD %2, %6
    %11:_(s32) = G_FADD %3, %7
    %bv:_(<4 x s32>) = G_BUILD_VECTOR %8(s32), %9(s32), %10(s32), %11(s32)
    %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %3(s32)
    %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %0(s32)
    $w0 = COPY %extract(s32)
    $w1 = COPY %extract2(s32)
    RET_ReallyLR implicit $w0

...
---
name:            build_vector_failed_no_constant_for_you
liveins:
body:             |
  bb.0:

    ; CHECK-LABEL: name: build_vector_failed_no_constant_for_you
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $w2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $w3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.000000e+01
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.100000e+01
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.200000e+01
    ; CHECK-NEXT: [[FADD:%[0-9]+]]:_(s32) = G_FADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[FADD1:%[0-9]+]]:_(s32) = G_FADD [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[FADD2:%[0-9]+]]:_(s32) = G_FADD [[COPY2]], [[C2]]
    ; CHECK-NEXT: [[FADD3:%[0-9]+]]:_(s32) = G_FADD [[COPY3]], [[COPY]]
    ; CHECK-NEXT: %bv:_(<4 x s32>) = G_BUILD_VECTOR [[FADD]](s32), [[FADD1]](s32), [[FADD2]](s32), [[FADD3]](s32)
    ; CHECK-NEXT: %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY3]](s32)
    ; CHECK-NEXT: %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY]](s32)
    ; CHECK-NEXT: $w0 = COPY %extract(s32)
    ; CHECK-NEXT: $w1 = COPY %extract2(s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s32) = COPY $w2
    %3:_(s32) = COPY $w3
    %4:_(s32) = G_FCONSTANT float 10.000000e+00
    %5:_(s32) = G_FCONSTANT float 11.000000e+00
    %6:_(s32) = G_FCONSTANT float 12.000000e+00
    %8:_(s32) = G_FADD %0, %4
    %9:_(s32) = G_FADD %1, %5
    %10:_(s32) = G_FADD %2, %6
    %11:_(s32) = G_FADD %3, %0
    %bv:_(<4 x s32>) = G_BUILD_VECTOR %8(s32), %9(s32), %10(s32), %11(s32)
    %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %3(s32)
    %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %0(s32)
    $w0 = COPY %extract(s32)
    $w1 = COPY %extract2(s32)
    RET_ReallyLR implicit $w0

...
---
name:            build_vector_failed_no_binop
liveins:
body:             |
  bb.0:

    ; CHECK-LABEL: name: build_vector_failed_no_binop
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $w2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $w3
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(s32) = G_FNEG [[COPY]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(s32) = G_FNEG [[COPY1]]
    ; CHECK-NEXT: [[FNEG2:%[0-9]+]]:_(s32) = G_FNEG [[COPY2]]
    ; CHECK-NEXT: [[FNEG3:%[0-9]+]]:_(s32) = G_FNEG [[COPY3]]
    ; CHECK-NEXT: %bv:_(<4 x s32>) = G_BUILD_VECTOR [[FNEG]](s32), [[FNEG1]](s32), [[FNEG2]](s32), [[FNEG3]](s32)
    ; CHECK-NEXT: %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY3]](s32)
    ; CHECK-NEXT: %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), [[COPY]](s32)
    ; CHECK-NEXT: $w0 = COPY %extract(s32)
    ; CHECK-NEXT: $w1 = COPY %extract2(s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s32) = COPY $w2
    %3:_(s32) = COPY $w3
    %8:_(s32) = G_FNEG %0
    %9:_(s32) = G_FNEG %1
    %10:_(s32) = G_FNEG %2
    %11:_(s32) = G_FNEG %3
    %bv:_(<4 x s32>) = G_BUILD_VECTOR %8(s32), %9(s32), %10(s32), %11(s32)
    %extract:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %3(s32)
    %extract2:_(s32) = G_EXTRACT_VECTOR_ELT %bv(<4 x s32>), %0(s32)
    $w0 = COPY %extract(s32)
    $w1 = COPY %extract2(s32)
    RET_ReallyLR implicit $w0

...
