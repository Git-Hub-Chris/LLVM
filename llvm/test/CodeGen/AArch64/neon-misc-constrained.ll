; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s
target triple = "arm64-none-linux-gnu"

define <2 x double> @test_vrndaq_f64(<2 x double> %a) #0 {
; CHECK-LABEL: test_vrndaq_f64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    frinta v0.2d, v0.2d
; CHECK-NEXT:    ret
entry:
  %vrnda1.i = call <2 x double> @llvm.experimental.constrained.round.v2f64(<2 x double> %a, metadata !"fpexcept.strict") #1
  ret <2 x double> %vrnda1.i
}

define <2 x double> @test_vrndpq_f64(<2 x double> %a) #0 {
; CHECK-LABEL: test_vrndpq_f64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    frintp v0.2d, v0.2d
; CHECK-NEXT:    ret
entry:
  %vrndp1.i = call <2 x double> @llvm.experimental.constrained.ceil.v2f64(<2 x double> %a, metadata !"fpexcept.strict") #1
  ret <2 x double> %vrndp1.i
}

define <4 x float> @test_vsqrtq_f32(<4 x float> %a) #0 {
; CHECK-LABEL: test_vsqrtq_f32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fsqrt v0.4s, v0.4s
; CHECK-NEXT:    ret
entry:
  %vsqrt.i = call <4 x float> @llvm.experimental.constrained.sqrt.v4f32(<4 x float> %a, metadata !"round.tonearest", metadata !"fpexcept.strict") #1
  ret <4 x float> %vsqrt.i
}

define <2 x double> @test_vsqrtq_f64(<2 x double> %a) #0 {
; CHECK-LABEL: test_vsqrtq_f64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fsqrt v0.2d, v0.2d
; CHECK-NEXT:    ret
entry:
  %vsqrt.i = call <2 x double> @llvm.experimental.constrained.sqrt.v2f64(<2 x double> %a, metadata !"round.tonearest", metadata !"fpexcept.strict") #1
  ret <2 x double> %vsqrt.i
}

attributes #0 = { noinline nounwind strictfp "target-features"="+neon" }
attributes #1 = { strictfp }
