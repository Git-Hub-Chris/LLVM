; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -aarch64-streaming-hazard-size=64 -force-streaming-compatible -mattr=+sve < %s | FileCheck %s
; RUN: llc -aarch64-streaming-hazard-size=64 -force-streaming -mattr=+sme < %s | FileCheck %s
; RUN: llc -force-streaming -mattr=+sme < %s | FileCheck %s --check-prefix=NOHAZARD

target triple = "aarch64-unknown-linux-gnu"

; This test checks that in streaming[-compatible] functions if there could be
; a hazard between GPR and FPR memory operations, then integer stores are not
; used for floating-point constants.

define void @"store_f64_0.0"(ptr %num) {
; CHECK-LABEL: store_f64_0.0:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fmov d0, xzr
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_f64_0.0:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    str xzr, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store double 0.000000e+00, ptr %num, align 8
  ret void
}

define void @"store_f64_1.0"(ptr %num) {
; CHECK-LABEL: store_f64_1.0:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fmov d0, #1.00000000
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_f64_1.0:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    mov x8, #4607182418800017408 // =0x3ff0000000000000
; NOHAZARD-NEXT:    str x8, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store double 1.000000e+00, ptr %num, align 8
  ret void
}

define void @"store_f64_1.23456789"(ptr %num) {
; CHECK-LABEL: store_f64_1.23456789:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    adrp x8, .LCPI2_0
; CHECK-NEXT:    ldr d0, [x8, :lo12:.LCPI2_0]
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_f64_1.23456789:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    mov x8, #56859 // =0xde1b
; NOHAZARD-NEXT:    movk x8, #17027, lsl #16
; NOHAZARD-NEXT:    movk x8, #49354, lsl #32
; NOHAZARD-NEXT:    movk x8, #16371, lsl #48
; NOHAZARD-NEXT:    str x8, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store double 0x3FF3C0CA4283DE1B, ptr %num, align 8
  ret void
}

define void @"store_f32_0.0"(ptr %num) {
; CHECK-LABEL: store_f32_0.0:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    str s0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_f32_0.0:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    str wzr, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store float 0.000000e+00, ptr %num, align 4
  ret void
}

define void @"store_f32_1.0"(ptr %num) {
; CHECK-LABEL: store_f32_1.0:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fmov s0, #1.00000000
; CHECK-NEXT:    str s0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_f32_1.0:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    mov w8, #1065353216 // =0x3f800000
; NOHAZARD-NEXT:    str w8, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store float 1.000000e+00, ptr %num, align 4
  ret void
}

define void @"store_f32_1.23456789"(ptr %num) {
; CHECK-LABEL: store_f32_1.23456789:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, #1618 // =0x652
; CHECK-NEXT:    movk w8, #16286, lsl #16
; CHECK-NEXT:    fmov s0, w8
; CHECK-NEXT:    str s0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_f32_1.23456789:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    mov w8, #1618 // =0x652
; NOHAZARD-NEXT:    movk w8, #16286, lsl #16
; NOHAZARD-NEXT:    str w8, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store float 0x3FF3C0CA40000000, ptr %num, align 4
  ret void
}

define void @"store_v4f32_0.0"(ptr %num) {
; CHECK-LABEL: store_v4f32_0.0:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov z0.s, #0 // =0x0
; CHECK-NEXT:    str q0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_v4f32_0.0:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    stp xzr, xzr, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store <4 x float> zeroinitializer, ptr %num, align 16
  ret void
}

define void @"store_v4f32_1.0"(ptr %num) {
; CHECK-LABEL: store_v4f32_1.0:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fmov z0.s, #1.00000000
; CHECK-NEXT:    str q0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_v4f32_1.0:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    fmov z0.s, #1.00000000
; NOHAZARD-NEXT:    str q0, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, ptr %num, align 16
  ret void
}

define void @"store_v4f32_1.23456789"(ptr %num) {
; CHECK-LABEL: store_v4f32_1.23456789:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, #1618 // =0x652
; CHECK-NEXT:    movk w8, #16286, lsl #16
; CHECK-NEXT:    mov z0.s, w8
; CHECK-NEXT:    str q0, [x0]
; CHECK-NEXT:    ret
;
; NOHAZARD-LABEL: store_v4f32_1.23456789:
; NOHAZARD:       // %bb.0: // %entry
; NOHAZARD-NEXT:    mov w8, #1618 // =0x652
; NOHAZARD-NEXT:    movk w8, #16286, lsl #16
; NOHAZARD-NEXT:    mov z0.s, w8
; NOHAZARD-NEXT:    str q0, [x0]
; NOHAZARD-NEXT:    ret
entry:
  store <4 x float> <float 0x3FF3C0CA40000000, float 0x3FF3C0CA40000000, float 0x3FF3C0CA40000000, float 0x3FF3C0CA40000000>, ptr %num, align 16
  ret void
}
