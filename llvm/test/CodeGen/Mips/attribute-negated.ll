; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=mipsel -mattr=+fp64,+mips32r2 < %s \
; RUN:   | FileCheck %s --check-prefixes=CHECK

define dso_local double @x1(double noundef %a, double noundef %b, double noundef %c) local_unnamed_addr #0 {
; CHECK-LABEL: x1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mul.d $f0, $f12, $f14
; CHECK-NEXT:    ldc1 $f1, 16($sp)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sub.d $f0, $f0, $f1
entry:
  %neg = fneg double %a
  %0 = tail call double @llvm.experimental.constrained.fmuladd.f64(double negated %neg, double %b, double %c, metadata !"round.dynamic", metadata !"fpexcept.ignore")
  ret double %0
}
define dso_local double @x2(double noundef %a, double noundef %b, double noundef %c) local_unnamed_addr #0 {
; CHECK-LABEL: x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mul.d $f0, $f12, $f14
; CHECK-NEXT:    ldc1 $f1, 16($sp)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sub.d $f0, $f0, $f1
entry:
  %neg = fneg double %b
  %0 = tail call double @llvm.experimental.constrained.fmuladd.f64(double %a, double negated %neg, double %c, metadata !"round.dynamic", metadata !"fpexcept.ignore")
  ret double %0
}
define dso_local double @x3(double noundef %a, double noundef %b, double noundef %c) local_unnamed_addr #0 {
; CHECK-LABEL: x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    neg.d $f0, $f12
; CHECK-NEXT:    mul.d $f0, $f0, $f14
; CHECK-NEXT:    ldc1 $f1, 16($sp)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    add.d $f0, $f0, $f1
entry:
  %neg = fneg double %a
  %0 = tail call double @llvm.experimental.constrained.fmuladd.f64(double %neg, double %b, double %c, metadata !"round.dynamic", metadata !"fpexcept.ignore")
  ret double %0
}
define dso_local double @x4(double noundef %a, double noundef %b, double noundef %c) local_unnamed_addr #0 {
; CHECK-LABEL: x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    neg.d $f0, $f14
; CHECK-NEXT:    mul.d $f0, $f12, $f0
; CHECK-NEXT:    ldc1 $f1, 16($sp)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    add.d $f0, $f0, $f1
entry:
  %neg = fneg double %b
  %0 = tail call double @llvm.experimental.constrained.fmuladd.f64(double %a, double %neg, double %c, metadata !"round.dynamic", metadata !"fpexcept.ignore")
  ret double %0
}
