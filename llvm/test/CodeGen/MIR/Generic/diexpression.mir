# NOTE: Hand-modified after being autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -run-pass none -o - %s 2>&1 | FileCheck %s
# Note: generated via:
# printf 'extern long long sink; int func(int arg) { int purelocal = arg * 42; int pinnedlocal = arg * 43; sink = (long long)&pinnedlocal; return purelocal; }' | clang -cc1 -O1 -triple x86_64-unknown-linux-gnu -debug-info-kind=limited -S -mllvm -stop-after=x86-isel - -o -
--- |
  source_filename = "-"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  @sink = external local_unnamed_addr global i64, align 8

  define dso_local i32 @func(i32 noundef %arg) local_unnamed_addr #0 !dbg !8 {
  entry:
    %pinnedlocal = alloca i32, align 4, !DIAssignID !16
      #dbg_assign(i1 undef, !15, !DIExpression(), !16, ptr %pinnedlocal, !DIExpression(), !17)
      #dbg_value(i32 %arg, !13, !DIExpression(), !17)
    %mul = mul nsw i32 %arg, 42, !dbg !18
      #dbg_value(i32 %mul, !14, !DIExpression(), !17)
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %pinnedlocal) #2, !dbg !19
    %mul1 = mul nsw i32 %arg, 43, !dbg !20
    store i32 %mul1, ptr %pinnedlocal, align 4, !dbg !21, !tbaa !22, !DIAssignID !26
      #dbg_assign(i32 %mul1, !15, !DIExpression(), !26, ptr %pinnedlocal, !DIExpression(), !17)
    %0 = ptrtoint ptr %pinnedlocal to i64, !dbg !27
    store i64 %0, ptr @sink, align 8, !dbg !28, !tbaa !29
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %pinnedlocal) #2, !dbg !31
    ret i32 %mul, !dbg !32
  }

  declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

  declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

  attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
  attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
  attributes #2 = { nounwind }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!4, !5, !6}
  !llvm.ident = !{!7}

  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 19.0.0git (git@github.com:slinder1/llvm-project.git a32b7199f0c15ea1c6c9490b6166c019c9d4bd2b)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "<stdin>", directory: "/home/slinder1/llvm-project/main")
  !2 = !{!3}
  !3 = !DIBasicType(name: "long long", size: 64, encoding: DW_ATE_signed)
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{i32 7, !"debug-info-assignment-tracking", i1 true}
  !7 = !{!"clang version 19.0.0git (git@github.com:slinder1/llvm-project.git a32b7199f0c15ea1c6c9490b6166c019c9d4bd2b)"}
  !8 = distinct !DISubprogram(name: "func", scope: !1, file: !1, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
  !9 = !DISubroutineType(types: !10)
  !10 = !{!11, !11}
  !11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !12 = !{!13, !14, !15}
  !13 = !DILocalVariable(name: "arg", arg: 1, scope: !8, file: !1, line: 1, type: !11)
  !14 = !DILocalVariable(name: "purelocal", scope: !8, file: !1, line: 1, type: !11)
  !15 = !DILocalVariable(name: "pinnedlocal", scope: !8, file: !1, line: 1, type: !11)
  !16 = distinct !DIAssignID()
  !17 = !DILocation(line: 0, scope: !8)
  !18 = !DILocation(line: 1, column: 64, scope: !8)
  !19 = !DILocation(line: 1, column: 70, scope: !8)
  !20 = !DILocation(line: 1, column: 92, scope: !8)
  !21 = !DILocation(line: 1, column: 74, scope: !8)
  !22 = !{!23, !23, i64 0}
  !23 = !{!"int", !24, i64 0}
  !24 = !{!"omnipotent char", !25, i64 0}
  !25 = !{!"Simple C/C++ TBAA"}
  !26 = distinct !DIAssignID()
  !27 = !DILocation(line: 1, column: 105, scope: !8)
  !28 = !DILocation(line: 1, column: 103, scope: !8)
  !29 = !{!30, !30, i64 0}
  !30 = !{!"long long", !24, i64 0}
  !31 = !DILocation(line: 1, column: 148, scope: !8)
  !32 = !DILocation(line: 1, column: 130, scope: !8)

...
---
name:            func
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: pinnedlocal, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '!15', debug-info-expression: '!DIExpression()',
      debug-info-location: '!17' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0.entry:
    liveins: $edi

    ; CHECK-LABEL: name: func
    ; CHECK: debug-info-expression: '!DIExpression()',
    ; CHECK: liveins: $edi
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: DBG_VALUE $edi, $noreg, !13, !DIExpression(), debug-location !17
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gr32 = COPY $edi
    ; CHECK-NEXT: [[IMUL32rri:%[0-9]+]]:gr32 = nsw IMUL32rri [[COPY]], 42, implicit-def dead $eflags, debug-instr-number 1, debug-location !18
    ; CHECK-NEXT: DBG_INSTR_REF !14, !DIExpression(DW_OP_LLVM_arg, 0), dbg-instr-ref(1, 0), debug-location !17
    ; CHECK-NEXT: LIFETIME_START %stack.0.pinnedlocal, debug-location !19
    ; CHECK-NEXT: [[MOV64rm:%[0-9]+]]:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @sink, $noreg, debug-location !28 :: (load (s64) from got)
    ; CHECK-NEXT: [[LEA64r:%[0-9]+]]:gr64 = LEA64r %stack.0.pinnedlocal, 1, $noreg, 0, $noreg
    ; CHECK-NEXT: MOV64mr killed [[MOV64rm]], 1, $noreg, 0, $noreg, killed [[LEA64r]], debug-location !28 :: (store (s64) into @sink, !tbaa !29)
    ; CHECK-NEXT: LIFETIME_END %stack.0.pinnedlocal, debug-location !31
    ; CHECK-NEXT: $eax = COPY [[IMUL32rri]], debug-location !32
    ; CHECK-NEXT: RET 0, $eax, debug-location !32
    DBG_VALUE $edi, $noreg, !13, !DIExpression(), debug-location !17
    %0:gr32 = COPY $edi
    %1:gr32 = nsw IMUL32rri %0, 42, implicit-def dead $eflags, debug-instr-number 1, debug-location !18
    DBG_INSTR_REF !14, !DIExpression(DW_OP_LLVM_arg, 0), dbg-instr-ref(1, 0), debug-location !17
    LIFETIME_START %stack.0.pinnedlocal, debug-location !19
    %2:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @sink, $noreg, debug-location !28 :: (load (s64) from got)
    %3:gr64 = LEA64r %stack.0.pinnedlocal, 1, $noreg, 0, $noreg
    MOV64mr killed %2, 1, $noreg, 0, $noreg, killed %3, debug-location !28 :: (store (s64) into @sink, !tbaa !29)
    LIFETIME_END %stack.0.pinnedlocal, debug-location !31
    $eax = COPY %1, debug-location !32
    RET 0, $eax, debug-location !32

...
