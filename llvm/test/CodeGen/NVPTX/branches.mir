# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 3
# RUN: llc -o - %s -march=nvptx64 -run-pass=branch-folder | FileCheck %s
---
name:            two_way_conditional
tracksRegLiveness: true
registers:
  - { id: 0, class: int32regs, preferred-register: '' }
  - { id: 1, class: int32regs, preferred-register: '' }
  - { id: 2, class: int1regs, preferred-register: '' }
  - { id: 3, class: int1regs, preferred-register: '' }
body:             |
  ; CHECK-LABEL: name: two_way_conditional
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF2:%[0-9]+]]:int1regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF3:%[0-9]+]]:int1regs = IMPLICIT_DEF
  ; CHECK-NEXT:   Bra %bb.1, [[DEF3]], 0
  ; CHECK-NEXT:   Jump %bb.2, [[DEF2]], 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   StoreRetvalI32 [[DEF]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   StoreRetvalI32 [[DEF1]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)

    %0:int32regs = IMPLICIT_DEF
    %1:int32regs = IMPLICIT_DEF
    %2:int1regs = IMPLICIT_DEF
    %3:int1regs = IMPLICIT_DEF
    Bra %bb.1, %3, 0
    Jump %bb.2, %2, 0

  bb.1:
    StoreRetvalI32 %0, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

  bb.2:
    StoreRetvalI32 %1, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

...
---
name:            conditional_with_fallthrough
tracksRegLiveness: true
registers:
  - { id: 0, class: int32regs, preferred-register: '' }
  - { id: 1, class: int32regs, preferred-register: '' }
  - { id: 2, class: int32regs, preferred-register: '' }
  - { id: 3, class: int32regs, preferred-register: '' }
  - { id: 4, class: int1regs, preferred-register: '' }
body:             |
  ; CHECK-LABEL: name: conditional_with_fallthrough
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LD_i32_avar:%[0-9]+]]:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_1, $noreg, 0
  ; CHECK-NEXT:   [[LD_i32_avar1:%[0-9]+]]:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_0, $noreg, 0
  ; CHECK-NEXT:   [[SETP_s32ri:%[0-9]+]]:int1regs = SETP_s32ri [[LD_i32_avar1]], 4, 1, $noreg, 0
  ; CHECK-NEXT:   Bra %bb.2, killed [[SETP_s32ri]], 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   StoreRetvalI32 [[LD_i32_avar]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   StoreRetvalI32 [[LD_i32_avar1]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)

    %3:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_1, $noreg, 0
    %2:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_0, $noreg, 0
    %4:int1regs = SETP_s32ri %2, 4, 1, $noreg, 0
    Bra %bb.2, killed %4, 0

  bb.1:
    StoreRetvalI32 %3, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

  bb.2:
    StoreRetvalI32 %2, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

...
---
name:            two_way_inverted_conditional
tracksRegLiveness: true
registers:
  - { id: 0, class: int32regs, preferred-register: '' }
  - { id: 1, class: int32regs, preferred-register: '' }
  - { id: 2, class: int32regs, preferred-register: '' }
  - { id: 3, class: int32regs, preferred-register: '' }
  - { id: 4, class: int1regs, preferred-register: '' }
body:             |
  ; CHECK-LABEL: name: two_way_inverted_conditional
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LD_i32_avar:%[0-9]+]]:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_1, $noreg, 0
  ; CHECK-NEXT:   [[LD_i32_avar1:%[0-9]+]]:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_0, $noreg, 0
  ; CHECK-NEXT:   [[SETP_s32ri:%[0-9]+]]:int1regs = SETP_s32ri [[LD_i32_avar1]], 4, 1, $noreg, 0
  ; CHECK-NEXT:   Bra %bb.2, [[SETP_s32ri]], 0
  ; CHECK-NEXT:   Bra %bb.1, killed [[SETP_s32ri]], -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   StoreRetvalI32 [[LD_i32_avar]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   StoreRetvalI32 [[LD_i32_avar1]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)

    %3:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_1, $noreg, 0
    %2:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_0, $noreg, 0
    %4:int1regs = SETP_s32ri %2, 4, 1, $noreg, 0
    Bra %bb.2, %4, 0
    Bra %bb.1, killed %4, -1

  bb.1:
    StoreRetvalI32 %3, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

  bb.2:
    StoreRetvalI32 %2, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

...
---
name:            empty_block_with_fallthrough
tracksRegLiveness: true
registers:
  - { id: 1, class: int32regs, preferred-register: '' }
body:             |
  ; CHECK-LABEL: name: empty_block_with_fallthrough
  ; CHECK: bb.0:
  ; CHECK-NEXT:   [[LD_i32_avar:%[0-9]+]]:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_1, $noreg, 0
  ; CHECK-NEXT:   StoreRetvalI32 [[LD_i32_avar]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  bb.0:
    successors: %bb.1(0x80000000)

  bb.1:
    %1:int32regs = LD_i32_avar 0, 4, 1, 0, 32, &foo_param_1, $noreg, 0
    StoreRetvalI32 %1, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

...
---
name:            empty_return_block
tracksRegLiveness: true
registers:
body:             |
  ; CHECK-LABEL: name: empty_return_block
  ; CHECK: bb.0:
  ; CHECK-NEXT:   Ret $noreg, 0
  bb.0:
    successors: %bb.1(0x80000000)

  bb.1:
    Ret $noreg, 0

...
---
name:            three_way_branch
tracksRegLiveness: true
registers:
  - { id: 0, class: int32regs, preferred-register: '' }
  - { id: 1, class: int32regs, preferred-register: '' }
  - { id: 2, class: int32regs, preferred-register: '' }
  - { id: 3, class: int1regs, preferred-register: '' }
  - { id: 4, class: int1regs, preferred-register: '' }
body:             |
  ; CHECK-LABEL: name: three_way_branch
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF2:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF3:%[0-9]+]]:int1regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF4:%[0-9]+]]:int1regs = IMPLICIT_DEF
  ; CHECK-NEXT:   Bra %bb.2, killed [[DEF4]], 0
  ; CHECK-NEXT:   Bra %bb.1, killed [[DEF3]], -1
  ; CHECK-NEXT:   Jump %bb.-1, $noreg, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   StoreRetvalI32 [[DEF1]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   StoreRetvalI32 [[DEF2]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)

    %0:int32regs = IMPLICIT_DEF
    %1:int32regs = IMPLICIT_DEF
    %2:int32regs = IMPLICIT_DEF
    %3:int1regs = IMPLICIT_DEF
    %4:int1regs = IMPLICIT_DEF
    Bra %bb.2, killed %4, 0
    Bra %bb.1, killed %3, -1
    Jump %bb.3, $noreg, 0

  bb.1:
    StoreRetvalI32 %1, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

  bb.2:
    StoreRetvalI32 %2, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

  bb.3:
    StoreRetvalI32 %0, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

...


---
name:            back_to_back_jumps
tracksRegLiveness: true
registers:
  - { id: 0, class: int32regs, preferred-register: '' }
  - { id: 1, class: int32regs, preferred-register: '' }
  - { id: 2, class: int32regs, preferred-register: '' }
  - { id: 3, class: int1regs, preferred-register: '' }
  - { id: 4, class: int1regs, preferred-register: '' }
body:             |
  ; CHECK-LABEL: name: back_to_back_jumps
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x2aaaaaab), %bb.2(0x2aaaaaab), %bb.3(0x2aaaaaab)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF2:%[0-9]+]]:int32regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF3:%[0-9]+]]:int1regs = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF4:%[0-9]+]]:int1regs = IMPLICIT_DEF
  ; CHECK-NEXT:   Jump %bb.3, [[DEF3]], 0
  ; CHECK-NEXT:   Jump %bb.2, [[DEF4]], 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   StoreRetvalI32 [[DEF1]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   StoreRetvalI32 [[DEF2]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   StoreRetvalI32 [[DEF]], 0, $noreg, 0 :: (store (s32), align 1)
  ; CHECK-NEXT:   Ret $noreg, 0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000), %bb.3(0x40000000)

    %0:int32regs = IMPLICIT_DEF
    %1:int32regs = IMPLICIT_DEF
    %2:int32regs = IMPLICIT_DEF
    %3:int1regs = IMPLICIT_DEF
    %4:int1regs = IMPLICIT_DEF
    Jump %bb.3, %3, 0
    Jump %bb.2, %4, 0

  bb.1:
    StoreRetvalI32 %1, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

  bb.2:
    StoreRetvalI32 %2, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

  bb.3:
    StoreRetvalI32 %0, 0, $noreg, 0 :: (store (s32), align 1)
    Ret $noreg, 0

...
