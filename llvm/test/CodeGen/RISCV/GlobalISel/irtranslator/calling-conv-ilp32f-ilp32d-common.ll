; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=riscv32 -mattr=+f -target-abi ilp32f \
; RUN:    -global-isel -stop-after=irtranslator -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32-ILP32FD %s
; RUN: llc -mtriple=riscv32 -mattr=+d -target-abi ilp32d \
; RUN:    -global-isel -stop-after=irtranslator -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32-ILP32FD %s

; This file contains tests that should have identical output for the ilp32f
; and ilp32d ABIs.

define i32 @callee_float_in_fpr(i32 %a, float %b) nounwind {
  ; RV32-ILP32FD-LABEL: name: callee_float_in_fpr
  ; RV32-ILP32FD: bb.1 (%ir-block.0):
  ; RV32-ILP32FD-NEXT:   liveins: $x10, $f10_f
  ; RV32-ILP32FD-NEXT: {{  $}}
  ; RV32-ILP32FD-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $x10
  ; RV32-ILP32FD-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
  ; RV32-ILP32FD-NEXT:   [[FPTOSI:%[0-9]+]]:_(s32) = G_FPTOSI [[COPY1]](s32)
  ; RV32-ILP32FD-NEXT:   [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[FPTOSI]]
  ; RV32-ILP32FD-NEXT:   $x10 = COPY [[ADD]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoRET implicit $x10
  %b_fptosi = fptosi float %b to i32
  %1 = add i32 %a, %b_fptosi
  ret i32 %1
}

define i32 @caller_float_in_fpr() nounwind {
  ; RV32-ILP32FD-LABEL: name: caller_float_in_fpr
  ; RV32-ILP32FD: bb.1 (%ir-block.0):
  ; RV32-ILP32FD-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; RV32-ILP32FD-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_FCONSTANT float 2.000000e+00
  ; RV32-ILP32FD-NEXT:   $x10 = COPY [[C]](s32)
  ; RV32-ILP32FD-NEXT:   $f10_f = COPY [[C1]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoCALL target-flags(riscv-call) @callee_float_in_fpr, implicit-def $x1, implicit $x10, implicit $f10_f, implicit-def $x10
  ; RV32-ILP32FD-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $x10
  ; RV32-ILP32FD-NEXT:   $x10 = COPY [[COPY]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoRET implicit $x10
  %1 = call i32 @callee_float_in_fpr(i32 1, float 2.0)
  ret i32 %1
}

; Must keep define on a single line due to an update_llc_test_checks.py limitation
define i32 @callee_float_in_gpr_exhausted_fprs(float %a, float %b, float %c, float %d, float %e, float %f, float %g, float %h, float %i) nounwind {
  ; RV32-ILP32FD-LABEL: name: callee_float_in_gpr_exhausted_fprs
  ; RV32-ILP32FD: bb.1 (%ir-block.0):
  ; RV32-ILP32FD-NEXT:   liveins: $x10, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f, $f16_f, $f17_f
  ; RV32-ILP32FD-NEXT: {{  $}}
  ; RV32-ILP32FD-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
  ; RV32-ILP32FD-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $f11_f
  ; RV32-ILP32FD-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $f12_f
  ; RV32-ILP32FD-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $f13_f
  ; RV32-ILP32FD-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $f14_f
  ; RV32-ILP32FD-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $f15_f
  ; RV32-ILP32FD-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $f16_f
  ; RV32-ILP32FD-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $f17_f
  ; RV32-ILP32FD-NEXT:   [[COPY8:%[0-9]+]]:_(s32) = COPY $x10
  ; RV32-ILP32FD-NEXT:   [[FPTOSI:%[0-9]+]]:_(s32) = G_FPTOSI [[COPY7]](s32)
  ; RV32-ILP32FD-NEXT:   [[FPTOSI1:%[0-9]+]]:_(s32) = G_FPTOSI [[COPY8]](s32)
  ; RV32-ILP32FD-NEXT:   [[ADD:%[0-9]+]]:_(s32) = G_ADD [[FPTOSI]], [[FPTOSI1]]
  ; RV32-ILP32FD-NEXT:   $x10 = COPY [[ADD]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoRET implicit $x10
  %h_fptosi = fptosi float %h to i32
  %i_fptosi = fptosi float %i to i32
  %1 = add i32 %h_fptosi, %i_fptosi
  ret i32 %1
}

define i32 @caller_float_in_gpr_exhausted_fprs() nounwind {
  ; RV32-ILP32FD-LABEL: name: caller_float_in_gpr_exhausted_fprs
  ; RV32-ILP32FD: bb.1 (%ir-block.0):
  ; RV32-ILP32FD-NEXT:   [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_FCONSTANT float 2.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_FCONSTANT float 3.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C3:%[0-9]+]]:_(s32) = G_FCONSTANT float 4.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C4:%[0-9]+]]:_(s32) = G_FCONSTANT float 5.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C5:%[0-9]+]]:_(s32) = G_FCONSTANT float 6.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C6:%[0-9]+]]:_(s32) = G_FCONSTANT float 7.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C7:%[0-9]+]]:_(s32) = G_FCONSTANT float 8.000000e+00
  ; RV32-ILP32FD-NEXT:   [[C8:%[0-9]+]]:_(s32) = G_FCONSTANT float 9.000000e+00
  ; RV32-ILP32FD-NEXT:   $f10_f = COPY [[C]](s32)
  ; RV32-ILP32FD-NEXT:   $f11_f = COPY [[C1]](s32)
  ; RV32-ILP32FD-NEXT:   $f12_f = COPY [[C2]](s32)
  ; RV32-ILP32FD-NEXT:   $f13_f = COPY [[C3]](s32)
  ; RV32-ILP32FD-NEXT:   $f14_f = COPY [[C4]](s32)
  ; RV32-ILP32FD-NEXT:   $f15_f = COPY [[C5]](s32)
  ; RV32-ILP32FD-NEXT:   $f16_f = COPY [[C6]](s32)
  ; RV32-ILP32FD-NEXT:   $f17_f = COPY [[C7]](s32)
  ; RV32-ILP32FD-NEXT:   $x10 = COPY [[C8]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoCALL target-flags(riscv-call) @callee_float_in_gpr_exhausted_fprs, implicit-def $x1, implicit $f10_f, implicit $f11_f, implicit $f12_f, implicit $f13_f, implicit $f14_f, implicit $f15_f, implicit $f16_f, implicit $f17_f, implicit $x10, implicit-def $x10
  ; RV32-ILP32FD-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $x10
  ; RV32-ILP32FD-NEXT:   $x10 = COPY [[COPY]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoRET implicit $x10
  %1 = call i32 @callee_float_in_gpr_exhausted_fprs(
      float 1.0, float 2.0, float 3.0, float 4.0, float 5.0, float 6.0,
      float 7.0, float 8.0, float 9.0)
  ret i32 %1
}

define float @callee_float_ret() nounwind {
  ; RV32-ILP32FD-LABEL: name: callee_float_ret
  ; RV32-ILP32FD: bb.1 (%ir-block.0):
  ; RV32-ILP32FD-NEXT:   [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.000000e+00
  ; RV32-ILP32FD-NEXT:   $f10_f = COPY [[C]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoRET implicit $f10_f
  ret float 1.0
}

define i32 @caller_float_ret() nounwind {
  ; RV32-ILP32FD-LABEL: name: caller_float_ret
  ; RV32-ILP32FD: bb.1 (%ir-block.0):
  ; RV32-ILP32FD-NEXT:   PseudoCALL target-flags(riscv-call) @callee_float_ret, implicit-def $x1, implicit-def $f10_f
  ; RV32-ILP32FD-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
  ; RV32-ILP32FD-NEXT:   $x10 = COPY [[COPY]](s32)
  ; RV32-ILP32FD-NEXT:   PseudoRET implicit $x10
  %1 = call float @callee_float_ret()
  %2 = bitcast float %1 to i32
  ret i32 %2
}
