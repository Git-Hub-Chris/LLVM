; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=riscv32 -mattr=+f,+d,+zfh,+m,+v -global-isel -global-isel-abort=1 -verify-machineinstrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECK,RV32
; RUN: llc -mtriple=riscv64 -mattr=+f,+d,+zfh,+m,+v -global-isel -global-isel-abort=1 -verify-machineinstrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECK,RV64

define i32 @freeze_int(i32 %x) {
; RV32-LABEL: freeze_int:
; RV32:       # %bb.0:
; RV32-NEXT:    mul a0, a0, a0
; RV32-NEXT:    ret
;
; RV64-LABEL: freeze_int:
; RV64:       # %bb.0:
; RV64-NEXT:    mulw a0, a0, a0
; RV64-NEXT:    ret
  %y1 = freeze i32 %x
  %t1 = mul i32 %y1, %y1
  ret i32 %t1
}

define i5 @freeze_int2(i5 %x) {
; RV32-LABEL: freeze_int2:
; RV32:       # %bb.0:
; RV32-NEXT:    mul a0, a0, a0
; RV32-NEXT:    ret
;
; RV64-LABEL: freeze_int2:
; RV64:       # %bb.0:
; RV64-NEXT:    mulw a0, a0, a0
; RV64-NEXT:    ret
  %y1 = freeze i5 %x
  %t1 = mul i5 %y1, %y1
  ret i5 %t1
}

define float @freeze_float(float %x) {
; CHECK-LABEL: freeze_float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fadd.s fa0, fa0, fa0
; CHECK-NEXT:    ret
  %y1 = freeze float %x
  %t1 = fadd float %y1, %y1
  ret float %t1
}

define double @freeze_double(double %x) nounwind {
; RV32-LABEL: freeze_double:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    fsd fa0, 8(sp)
; RV32-NEXT:    lw a0, 8(sp)
; RV32-NEXT:    lw a1, 12(sp)
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    sw a1, 12(sp)
; RV32-NEXT:    fld fa5, 8(sp)
; RV32-NEXT:    fadd.d fa0, fa5, fa5
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: freeze_double:
; RV64:       # %bb.0:
; RV64-NEXT:    fadd.d fa0, fa0, fa0
; RV64-NEXT:    ret
  %y1 = freeze double %x
  %t1 = fadd double %y1, %y1
  ret double %t1
}

define void @freeze_half(ptr %p) {
; CHECK-LABEL: freeze_half:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lh a1, 0(a0)
; CHECK-NEXT:    sh a1, 0(a0)
; CHECK-NEXT:    ret
  %x = load half, ptr %p
  %y1 = freeze half %x
  store half %y1, ptr %p
  ret void
}

; FIXME: Legalize G_FREEZE with fixed-length vectors.
; define void @freeze_ivec(ptr %p) {
;   %x = load <2 x i32>, ptr %p
;   %y = freeze <2 x i32> %x
;   store <2 x i32> %y, ptr %p
;   ret void
; }

; define void @freeze_fvec(ptr %p) {
;   %x = load <2 x float>, ptr %p
;   %y = freeze <2 x float> %x
;   store <2 x float> %y, ptr %p
;   ret void
; }

define ptr @freeze_ptr(ptr %x) {
; CHECK-LABEL: freeze_ptr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    ret
  %y1 = freeze ptr %x
  %t1 = getelementptr i8, ptr %y1, i64 4
  ret ptr %t1
}
