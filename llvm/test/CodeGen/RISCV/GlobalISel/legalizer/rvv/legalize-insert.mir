# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -mattr=+v -run-pass=legalizer %s -o - | FileCheck %s

# Special handling for i1-element vectors with non-zero index
---
name:            extract_nxv2i1_nxv4i1
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv2i1_nxv4i1
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 4 x s1>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[SPLAT_VECTOR:%[0-9]+]]:_(<vscale x 4 x s8>) = G_SPLAT_VECTOR [[ANYEXT]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[SPLAT_VECTOR1:%[0-9]+]]:_(<vscale x 4 x s8>) = G_SPLAT_VECTOR [[ANYEXT1]](s64)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<vscale x 4 x s8>) = G_SELECT [[DEF]](<vscale x 4 x s1>), [[SPLAT_VECTOR1]], [[SPLAT_VECTOR]]
    ; CHECK-NEXT: [[READ_VLENB:%[0-9]+]]:_(s64) = G_READ_VLENB
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s64) = G_LSHR [[READ_VLENB]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 2 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 4 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[VSLIDEDOWN_VL:%[0-9]+]]:_(<vscale x 4 x s8>) = G_VSLIDEDOWN_VL [[DEF1]], [[SELECT]], [[LSHR]](s64), [[VMSET_VL]](<vscale x 2 x s1>), $x0, 3
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 2 x s8>) = G_EXTRACT [[VSLIDEDOWN_VL]](<vscale x 4 x s8>), 0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<vscale x 2 x s8>) = G_BITCAST [[EXTRACT]](<vscale x 2 x s8>)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(s64) = G_ANYEXT [[C3]](s32)
    ; CHECK-NEXT: [[SPLAT_VECTOR2:%[0-9]+]]:_(<vscale x 2 x s8>) = G_SPLAT_VECTOR [[ANYEXT2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(<vscale x 2 x s1>) = G_ICMP intpred(ne), [[BITCAST]](<vscale x 2 x s8>), [[SPLAT_VECTOR2]]
    ; CHECK-NEXT: $v8 = COPY [[ICMP]](<vscale x 2 x s1>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s1>) = G_IMPLICIT_DEF
    %1:_(<vscale x 2 x s1>) = G_EXTRACT %0(<vscale x 4 x s1>), 2
    $v8 = COPY %1(<vscale x 2 x s1>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv4i1_nxv8i1
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv4i1_nxv8i1
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 8 x s1>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[SPLAT_VECTOR:%[0-9]+]]:_(<vscale x 8 x s8>) = G_SPLAT_VECTOR [[ANYEXT]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[SPLAT_VECTOR1:%[0-9]+]]:_(<vscale x 8 x s8>) = G_SPLAT_VECTOR [[ANYEXT1]](s64)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(<vscale x 8 x s8>) = G_SELECT [[DEF]](<vscale x 8 x s1>), [[SPLAT_VECTOR1]], [[SPLAT_VECTOR]]
    ; CHECK-NEXT: [[READ_VLENB:%[0-9]+]]:_(s64) = G_READ_VLENB
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s64) = G_LSHR [[READ_VLENB]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 4 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 8 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[VSLIDEDOWN_VL:%[0-9]+]]:_(<vscale x 8 x s8>) = G_VSLIDEDOWN_VL [[DEF1]], [[SELECT]], [[LSHR]](s64), [[VMSET_VL]](<vscale x 4 x s1>), $x0, 3
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 4 x s8>) = G_EXTRACT [[VSLIDEDOWN_VL]](<vscale x 8 x s8>), 0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<vscale x 4 x s8>) = G_BITCAST [[EXTRACT]](<vscale x 4 x s8>)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(s64) = G_ANYEXT [[C3]](s32)
    ; CHECK-NEXT: [[SPLAT_VECTOR2:%[0-9]+]]:_(<vscale x 4 x s8>) = G_SPLAT_VECTOR [[ANYEXT2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(<vscale x 4 x s1>) = G_ICMP intpred(ne), [[BITCAST]](<vscale x 4 x s8>), [[SPLAT_VECTOR2]]
    ; CHECK-NEXT: $v8 = COPY [[ICMP]](<vscale x 4 x s1>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 8 x s1>) = G_IMPLICIT_DEF
    %1:_(<vscale x 4 x s1>) = G_EXTRACT %0(<vscale x 8 x s1>), 2
    $v8 = COPY %1(<vscale x 4 x s1>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv32i1_nxv64i1
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv32i1_nxv64i1
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 64 x s1>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<vscale x 8 x s8>) = G_BITCAST [[DEF]](<vscale x 64 x s1>)
    ; CHECK-NEXT: [[READ_VLENB:%[0-9]+]]:_(s64) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s64) = G_LSHR [[READ_VLENB]], [[C]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 4 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 8 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[VSLIDEDOWN_VL:%[0-9]+]]:_(<vscale x 8 x s8>) = G_VSLIDEDOWN_VL [[DEF1]], [[BITCAST]], [[LSHR]](s64), [[VMSET_VL]](<vscale x 4 x s1>), $x0, 3
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 4 x s8>) = G_EXTRACT [[VSLIDEDOWN_VL]](<vscale x 8 x s8>), 0
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<vscale x 32 x s1>) = G_BITCAST [[EXTRACT]](<vscale x 4 x s8>)
    ; CHECK-NEXT: $v8 = COPY [[BITCAST1]](<vscale x 32 x s1>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 64 x s1>) = G_IMPLICIT_DEF
    %1:_(<vscale x 32 x s1>) = G_EXTRACT %0(<vscale x 64 x s1>), 16
    $v8 = COPY %1(<vscale x 32 x s1>)
    PseudoRET implicit $v8
...

# i1-element vectors with zero index
---
name:            extract_nxv2i1_nxv4i1_zero
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv2i1_nxv4i1_zero
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 4 x s1>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 2 x s1>) = G_EXTRACT [[DEF]](<vscale x 4 x s1>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 2 x s1>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s1>) = G_IMPLICIT_DEF
    %1:_(<vscale x 2 x s1>) = G_EXTRACT %0(<vscale x 4 x s1>), 0
    $v8 = COPY %1(<vscale x 2 x s1>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv4i1_nxv8i1_zero
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv4i1_nxv8i1_zero
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 8 x s1>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 4 x s1>) = G_EXTRACT [[DEF]](<vscale x 8 x s1>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 4 x s1>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 8 x s1>) = G_IMPLICIT_DEF
    %1:_(<vscale x 4 x s1>) = G_EXTRACT %0(<vscale x 8 x s1>), 0
    $v8 = COPY %1(<vscale x 4 x s1>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv32i1_nxv64i1_zero
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv32i1_nxv64i1_zero
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 64 x s1>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 32 x s1>) = G_EXTRACT [[DEF]](<vscale x 64 x s1>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 32 x s1>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 64 x s1>) = G_IMPLICIT_DEF
    %1:_(<vscale x 32 x s1>) = G_EXTRACT %0(<vscale x 64 x s1>), 0
    $v8 = COPY %1(<vscale x 32 x s1>)
    PseudoRET implicit $v8
...

# Extract with zero index
---
name:            extract_nxv1i8_nxv2i8_zero
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv1i8_nxv2i8_zero
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 1 x s8>) = G_EXTRACT [[DEF]](<vscale x 2 x s8>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 1 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    %1:_(<vscale x 1 x s8>) = G_EXTRACT %0(<vscale x 2 x s8>), 0
    $v8 = COPY %1(<vscale x 1 x s8>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv2i16_nxv4i16_zero
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv2i16_nxv4i16_zero
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 4 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 2 x s16>) = G_EXTRACT [[DEF]](<vscale x 4 x s16>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 2 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s16>) = G_IMPLICIT_DEF
    %1:_(<vscale x 2 x s16>) = G_EXTRACT %0(<vscale x 4 x s16>), 0
    $v8 = COPY %1(<vscale x 2 x s16>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv4i32_nxv8i32_zero
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv4i32_nxv8i32_zero
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 4 x s32>) = G_EXTRACT [[DEF]](<vscale x 8 x s32>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 8 x s32>) = G_IMPLICIT_DEF
    %1:_(<vscale x 4 x s32>) = G_EXTRACT %0(<vscale x 8 x s32>), 0
    $v8 = COPY %1(<vscale x 4 x s32>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv2i64_nxv8i64_zero
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv2i64_nxv8i64_zero
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 2 x s64>) = G_EXTRACT [[DEF]](<vscale x 8 x s64>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 2 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    %1:_(<vscale x 2 x s64>) = G_EXTRACT %0(<vscale x 8 x s64>), 0
    $v8 = COPY %1(<vscale x 2 x s64>)
    PseudoRET implicit $v8
...

# Extract with non-zero index
---
name:            extract_nxv1i8_nxv2i8
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv1i8_nxv2i8
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 1 x s8>) = G_EXTRACT [[DEF]](<vscale x 2 x s8>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 1 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    %1:_(<vscale x 1 x s8>) = G_EXTRACT %0(<vscale x 2 x s8>), 0
    $v8 = COPY %1(<vscale x 1 x s8>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv2i16_nxv4i16
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv2i16_nxv4i16
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 4 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 2 x s16>) = G_EXTRACT [[DEF]](<vscale x 4 x s16>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 2 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s16>) = G_IMPLICIT_DEF
    %1:_(<vscale x 2 x s16>) = G_EXTRACT %0(<vscale x 4 x s16>), 0
    $v8 = COPY %1(<vscale x 2 x s16>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv4i32_nxv8i32
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv4i32_nxv8i32
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 4 x s32>) = G_EXTRACT [[DEF]](<vscale x 8 x s32>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 8 x s32>) = G_IMPLICIT_DEF
    %1:_(<vscale x 4 x s32>) = G_EXTRACT %0(<vscale x 8 x s32>), 0
    $v8 = COPY %1(<vscale x 4 x s32>)
    PseudoRET implicit $v8
...
---
name:            extract_nxv2i64_nxv8i64
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_nxv2i64_nxv8i64
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 2 x s64>) = G_EXTRACT [[DEF]](<vscale x 8 x s64>), 0
    ; CHECK-NEXT: $v8 = COPY [[EXTRACT]](<vscale x 2 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    %1:_(<vscale x 2 x s64>) = G_EXTRACT %0(<vscale x 8 x s64>), 0
    $v8 = COPY %1(<vscale x 2 x s64>)
    PseudoRET implicit $v8
...
