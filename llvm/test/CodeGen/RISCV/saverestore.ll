; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=riscv32 < %s | FileCheck %s -check-prefix=RV32I
; RUN: llc -mtriple=riscv64 < %s | FileCheck %s -check-prefix=RV64I
; RUN: llc -mtriple=riscv32 -mattr=+save-restore < %s | FileCheck %s -check-prefix=RV32I-SR
; RUN: llc -mtriple=riscv64 -mattr=+save-restore < %s | FileCheck %s -check-prefix=RV64I-SR
; RUN: llc -mtriple=riscv32 -mattr=+f,+save-restore -target-abi=ilp32f < %s | FileCheck %s -check-prefix=RV32I-FP-SR
; RUN: llc -mtriple=riscv64 -mattr=+f,+d,+save-restore -target-abi=lp64d < %s | FileCheck %s -check-prefix=RV64I-FP-SR

; Check that the correct save/restore libcalls are generated.

@var0 = global [18 x i32] zeroinitializer
@var1 = global [24 x i32] zeroinitializer
@var2 = global [30 x i32] zeroinitializer

define void @callee_saved0() nounwind {
; RV32I-LABEL: callee_saved0:
; RV32I:       # %bb.0:
; RV32I-NEXT:    addi sp, sp, -16
; RV32I-NEXT:    sw s0, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s1, 8(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s2, 4(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s3, 0(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lui a0, %hi(var0)
; RV32I-NEXT:    addi a0, a0, %lo(var0)
; RV32I-NEXT:    lw a1, 0(a0)
; RV32I-NEXT:    lw a2, 4(a0)
; RV32I-NEXT:    lw a3, 8(a0)
; RV32I-NEXT:    lw a4, 12(a0)
; RV32I-NEXT:    lw a5, 16(a0)
; RV32I-NEXT:    lw a6, 20(a0)
; RV32I-NEXT:    lw a7, 24(a0)
; RV32I-NEXT:    lw t0, 28(a0)
; RV32I-NEXT:    lw t1, 32(a0)
; RV32I-NEXT:    lw t2, 36(a0)
; RV32I-NEXT:    lw t3, 40(a0)
; RV32I-NEXT:    lw t4, 44(a0)
; RV32I-NEXT:    lw t5, 48(a0)
; RV32I-NEXT:    lw t6, 52(a0)
; RV32I-NEXT:    lw s0, 68(a0)
; RV32I-NEXT:    lw s1, 64(a0)
; RV32I-NEXT:    lw s2, 60(a0)
; RV32I-NEXT:    lw s3, 56(a0)
; RV32I-NEXT:    sw s0, 68(a0)
; RV32I-NEXT:    sw s1, 64(a0)
; RV32I-NEXT:    sw s2, 60(a0)
; RV32I-NEXT:    sw s3, 56(a0)
; RV32I-NEXT:    sw t6, 52(a0)
; RV32I-NEXT:    sw t5, 48(a0)
; RV32I-NEXT:    sw t4, 44(a0)
; RV32I-NEXT:    sw t3, 40(a0)
; RV32I-NEXT:    sw t2, 36(a0)
; RV32I-NEXT:    sw t1, 32(a0)
; RV32I-NEXT:    sw t0, 28(a0)
; RV32I-NEXT:    sw a7, 24(a0)
; RV32I-NEXT:    sw a6, 20(a0)
; RV32I-NEXT:    sw a5, 16(a0)
; RV32I-NEXT:    sw a4, 12(a0)
; RV32I-NEXT:    sw a3, 8(a0)
; RV32I-NEXT:    sw a2, 4(a0)
; RV32I-NEXT:    sw a1, 0(a0)
; RV32I-NEXT:    lw s0, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s1, 8(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s2, 4(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s3, 0(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 16
; RV32I-NEXT:    ret
;
; RV64I-LABEL: callee_saved0:
; RV64I:       # %bb.0:
; RV64I-NEXT:    addi sp, sp, -32
; RV64I-NEXT:    sd s0, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s1, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s2, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s3, 0(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lui a0, %hi(var0)
; RV64I-NEXT:    addi a0, a0, %lo(var0)
; RV64I-NEXT:    lw a1, 0(a0)
; RV64I-NEXT:    lw a2, 4(a0)
; RV64I-NEXT:    lw a3, 8(a0)
; RV64I-NEXT:    lw a4, 12(a0)
; RV64I-NEXT:    lw a5, 16(a0)
; RV64I-NEXT:    lw a6, 20(a0)
; RV64I-NEXT:    lw a7, 24(a0)
; RV64I-NEXT:    lw t0, 28(a0)
; RV64I-NEXT:    lw t1, 32(a0)
; RV64I-NEXT:    lw t2, 36(a0)
; RV64I-NEXT:    lw t3, 40(a0)
; RV64I-NEXT:    lw t4, 44(a0)
; RV64I-NEXT:    lw t5, 48(a0)
; RV64I-NEXT:    lw t6, 52(a0)
; RV64I-NEXT:    lw s0, 68(a0)
; RV64I-NEXT:    lw s1, 64(a0)
; RV64I-NEXT:    lw s2, 60(a0)
; RV64I-NEXT:    lw s3, 56(a0)
; RV64I-NEXT:    sw s0, 68(a0)
; RV64I-NEXT:    sw s1, 64(a0)
; RV64I-NEXT:    sw s2, 60(a0)
; RV64I-NEXT:    sw s3, 56(a0)
; RV64I-NEXT:    sw t6, 52(a0)
; RV64I-NEXT:    sw t5, 48(a0)
; RV64I-NEXT:    sw t4, 44(a0)
; RV64I-NEXT:    sw t3, 40(a0)
; RV64I-NEXT:    sw t2, 36(a0)
; RV64I-NEXT:    sw t1, 32(a0)
; RV64I-NEXT:    sw t0, 28(a0)
; RV64I-NEXT:    sw a7, 24(a0)
; RV64I-NEXT:    sw a6, 20(a0)
; RV64I-NEXT:    sw a5, 16(a0)
; RV64I-NEXT:    sw a4, 12(a0)
; RV64I-NEXT:    sw a3, 8(a0)
; RV64I-NEXT:    sw a2, 4(a0)
; RV64I-NEXT:    sw a1, 0(a0)
; RV64I-NEXT:    ld s0, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s1, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s2, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s3, 0(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 32
; RV64I-NEXT:    ret
;
; RV32I-SR-LABEL: callee_saved0:
; RV32I-SR:       # %bb.0:
; RV32I-SR-NEXT:    call t0, __riscv_save_4
; RV32I-SR-NEXT:    lui a0, %hi(var0)
; RV32I-SR-NEXT:    addi a0, a0, %lo(var0)
; RV32I-SR-NEXT:    lw a1, 0(a0)
; RV32I-SR-NEXT:    lw a2, 4(a0)
; RV32I-SR-NEXT:    lw a3, 8(a0)
; RV32I-SR-NEXT:    lw a4, 12(a0)
; RV32I-SR-NEXT:    lw a5, 16(a0)
; RV32I-SR-NEXT:    lw a6, 20(a0)
; RV32I-SR-NEXT:    lw a7, 24(a0)
; RV32I-SR-NEXT:    lw t0, 28(a0)
; RV32I-SR-NEXT:    lw t1, 32(a0)
; RV32I-SR-NEXT:    lw t2, 36(a0)
; RV32I-SR-NEXT:    lw t3, 40(a0)
; RV32I-SR-NEXT:    lw t4, 44(a0)
; RV32I-SR-NEXT:    lw t5, 48(a0)
; RV32I-SR-NEXT:    lw t6, 52(a0)
; RV32I-SR-NEXT:    lw s0, 68(a0)
; RV32I-SR-NEXT:    lw s1, 64(a0)
; RV32I-SR-NEXT:    lw s2, 60(a0)
; RV32I-SR-NEXT:    lw s3, 56(a0)
; RV32I-SR-NEXT:    sw s0, 68(a0)
; RV32I-SR-NEXT:    sw s1, 64(a0)
; RV32I-SR-NEXT:    sw s2, 60(a0)
; RV32I-SR-NEXT:    sw s3, 56(a0)
; RV32I-SR-NEXT:    sw t6, 52(a0)
; RV32I-SR-NEXT:    sw t5, 48(a0)
; RV32I-SR-NEXT:    sw t4, 44(a0)
; RV32I-SR-NEXT:    sw t3, 40(a0)
; RV32I-SR-NEXT:    sw t2, 36(a0)
; RV32I-SR-NEXT:    sw t1, 32(a0)
; RV32I-SR-NEXT:    sw t0, 28(a0)
; RV32I-SR-NEXT:    sw a7, 24(a0)
; RV32I-SR-NEXT:    sw a6, 20(a0)
; RV32I-SR-NEXT:    sw a5, 16(a0)
; RV32I-SR-NEXT:    sw a4, 12(a0)
; RV32I-SR-NEXT:    sw a3, 8(a0)
; RV32I-SR-NEXT:    sw a2, 4(a0)
; RV32I-SR-NEXT:    sw a1, 0(a0)
; RV32I-SR-NEXT:    tail __riscv_restore_4
;
; RV64I-SR-LABEL: callee_saved0:
; RV64I-SR:       # %bb.0:
; RV64I-SR-NEXT:    call t0, __riscv_save_4
; RV64I-SR-NEXT:    lui a0, %hi(var0)
; RV64I-SR-NEXT:    addi a0, a0, %lo(var0)
; RV64I-SR-NEXT:    lw a1, 0(a0)
; RV64I-SR-NEXT:    lw a2, 4(a0)
; RV64I-SR-NEXT:    lw a3, 8(a0)
; RV64I-SR-NEXT:    lw a4, 12(a0)
; RV64I-SR-NEXT:    lw a5, 16(a0)
; RV64I-SR-NEXT:    lw a6, 20(a0)
; RV64I-SR-NEXT:    lw a7, 24(a0)
; RV64I-SR-NEXT:    lw t0, 28(a0)
; RV64I-SR-NEXT:    lw t1, 32(a0)
; RV64I-SR-NEXT:    lw t2, 36(a0)
; RV64I-SR-NEXT:    lw t3, 40(a0)
; RV64I-SR-NEXT:    lw t4, 44(a0)
; RV64I-SR-NEXT:    lw t5, 48(a0)
; RV64I-SR-NEXT:    lw t6, 52(a0)
; RV64I-SR-NEXT:    lw s0, 68(a0)
; RV64I-SR-NEXT:    lw s1, 64(a0)
; RV64I-SR-NEXT:    lw s2, 60(a0)
; RV64I-SR-NEXT:    lw s3, 56(a0)
; RV64I-SR-NEXT:    sw s0, 68(a0)
; RV64I-SR-NEXT:    sw s1, 64(a0)
; RV64I-SR-NEXT:    sw s2, 60(a0)
; RV64I-SR-NEXT:    sw s3, 56(a0)
; RV64I-SR-NEXT:    sw t6, 52(a0)
; RV64I-SR-NEXT:    sw t5, 48(a0)
; RV64I-SR-NEXT:    sw t4, 44(a0)
; RV64I-SR-NEXT:    sw t3, 40(a0)
; RV64I-SR-NEXT:    sw t2, 36(a0)
; RV64I-SR-NEXT:    sw t1, 32(a0)
; RV64I-SR-NEXT:    sw t0, 28(a0)
; RV64I-SR-NEXT:    sw a7, 24(a0)
; RV64I-SR-NEXT:    sw a6, 20(a0)
; RV64I-SR-NEXT:    sw a5, 16(a0)
; RV64I-SR-NEXT:    sw a4, 12(a0)
; RV64I-SR-NEXT:    sw a3, 8(a0)
; RV64I-SR-NEXT:    sw a2, 4(a0)
; RV64I-SR-NEXT:    sw a1, 0(a0)
; RV64I-SR-NEXT:    tail __riscv_restore_4
;
; RV32I-FP-SR-LABEL: callee_saved0:
; RV32I-FP-SR:       # %bb.0:
; RV32I-FP-SR-NEXT:    call t0, __riscv_save_4
; RV32I-FP-SR-NEXT:    lui a0, %hi(var0)
; RV32I-FP-SR-NEXT:    addi a0, a0, %lo(var0)
; RV32I-FP-SR-NEXT:    lw a1, 0(a0)
; RV32I-FP-SR-NEXT:    lw a2, 4(a0)
; RV32I-FP-SR-NEXT:    lw a3, 8(a0)
; RV32I-FP-SR-NEXT:    lw a4, 12(a0)
; RV32I-FP-SR-NEXT:    lw a5, 16(a0)
; RV32I-FP-SR-NEXT:    lw a6, 20(a0)
; RV32I-FP-SR-NEXT:    lw a7, 24(a0)
; RV32I-FP-SR-NEXT:    lw t0, 28(a0)
; RV32I-FP-SR-NEXT:    lw t1, 32(a0)
; RV32I-FP-SR-NEXT:    lw t2, 36(a0)
; RV32I-FP-SR-NEXT:    lw t3, 40(a0)
; RV32I-FP-SR-NEXT:    lw t4, 44(a0)
; RV32I-FP-SR-NEXT:    lw t5, 48(a0)
; RV32I-FP-SR-NEXT:    lw t6, 52(a0)
; RV32I-FP-SR-NEXT:    lw s0, 68(a0)
; RV32I-FP-SR-NEXT:    lw s1, 64(a0)
; RV32I-FP-SR-NEXT:    lw s2, 60(a0)
; RV32I-FP-SR-NEXT:    lw s3, 56(a0)
; RV32I-FP-SR-NEXT:    sw s0, 68(a0)
; RV32I-FP-SR-NEXT:    sw s1, 64(a0)
; RV32I-FP-SR-NEXT:    sw s2, 60(a0)
; RV32I-FP-SR-NEXT:    sw s3, 56(a0)
; RV32I-FP-SR-NEXT:    sw t6, 52(a0)
; RV32I-FP-SR-NEXT:    sw t5, 48(a0)
; RV32I-FP-SR-NEXT:    sw t4, 44(a0)
; RV32I-FP-SR-NEXT:    sw t3, 40(a0)
; RV32I-FP-SR-NEXT:    sw t2, 36(a0)
; RV32I-FP-SR-NEXT:    sw t1, 32(a0)
; RV32I-FP-SR-NEXT:    sw t0, 28(a0)
; RV32I-FP-SR-NEXT:    sw a7, 24(a0)
; RV32I-FP-SR-NEXT:    sw a6, 20(a0)
; RV32I-FP-SR-NEXT:    sw a5, 16(a0)
; RV32I-FP-SR-NEXT:    sw a4, 12(a0)
; RV32I-FP-SR-NEXT:    sw a3, 8(a0)
; RV32I-FP-SR-NEXT:    sw a2, 4(a0)
; RV32I-FP-SR-NEXT:    sw a1, 0(a0)
; RV32I-FP-SR-NEXT:    tail __riscv_restore_4
;
; RV64I-FP-SR-LABEL: callee_saved0:
; RV64I-FP-SR:       # %bb.0:
; RV64I-FP-SR-NEXT:    call t0, __riscv_save_4
; RV64I-FP-SR-NEXT:    lui a0, %hi(var0)
; RV64I-FP-SR-NEXT:    addi a0, a0, %lo(var0)
; RV64I-FP-SR-NEXT:    lw a1, 0(a0)
; RV64I-FP-SR-NEXT:    lw a2, 4(a0)
; RV64I-FP-SR-NEXT:    lw a3, 8(a0)
; RV64I-FP-SR-NEXT:    lw a4, 12(a0)
; RV64I-FP-SR-NEXT:    lw a5, 16(a0)
; RV64I-FP-SR-NEXT:    lw a6, 20(a0)
; RV64I-FP-SR-NEXT:    lw a7, 24(a0)
; RV64I-FP-SR-NEXT:    lw t0, 28(a0)
; RV64I-FP-SR-NEXT:    lw t1, 32(a0)
; RV64I-FP-SR-NEXT:    lw t2, 36(a0)
; RV64I-FP-SR-NEXT:    lw t3, 40(a0)
; RV64I-FP-SR-NEXT:    lw t4, 44(a0)
; RV64I-FP-SR-NEXT:    lw t5, 48(a0)
; RV64I-FP-SR-NEXT:    lw t6, 52(a0)
; RV64I-FP-SR-NEXT:    lw s0, 68(a0)
; RV64I-FP-SR-NEXT:    lw s1, 64(a0)
; RV64I-FP-SR-NEXT:    lw s2, 60(a0)
; RV64I-FP-SR-NEXT:    lw s3, 56(a0)
; RV64I-FP-SR-NEXT:    sw s0, 68(a0)
; RV64I-FP-SR-NEXT:    sw s1, 64(a0)
; RV64I-FP-SR-NEXT:    sw s2, 60(a0)
; RV64I-FP-SR-NEXT:    sw s3, 56(a0)
; RV64I-FP-SR-NEXT:    sw t6, 52(a0)
; RV64I-FP-SR-NEXT:    sw t5, 48(a0)
; RV64I-FP-SR-NEXT:    sw t4, 44(a0)
; RV64I-FP-SR-NEXT:    sw t3, 40(a0)
; RV64I-FP-SR-NEXT:    sw t2, 36(a0)
; RV64I-FP-SR-NEXT:    sw t1, 32(a0)
; RV64I-FP-SR-NEXT:    sw t0, 28(a0)
; RV64I-FP-SR-NEXT:    sw a7, 24(a0)
; RV64I-FP-SR-NEXT:    sw a6, 20(a0)
; RV64I-FP-SR-NEXT:    sw a5, 16(a0)
; RV64I-FP-SR-NEXT:    sw a4, 12(a0)
; RV64I-FP-SR-NEXT:    sw a3, 8(a0)
; RV64I-FP-SR-NEXT:    sw a2, 4(a0)
; RV64I-FP-SR-NEXT:    sw a1, 0(a0)
; RV64I-FP-SR-NEXT:    tail __riscv_restore_4
  %val = load [18 x i32], ptr @var0
  store volatile [18 x i32] %val, ptr @var0
  ret void
}

define void @callee_saved1() nounwind {
; RV32I-LABEL: callee_saved1:
; RV32I:       # %bb.0:
; RV32I-NEXT:    addi sp, sp, -48
; RV32I-NEXT:    sw s0, 44(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s1, 40(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s2, 36(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s3, 32(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s4, 28(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s5, 24(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s6, 20(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s7, 16(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s8, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s9, 8(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lui a0, %hi(var1)
; RV32I-NEXT:    addi a0, a0, %lo(var1)
; RV32I-NEXT:    lw a1, 0(a0)
; RV32I-NEXT:    lw a2, 4(a0)
; RV32I-NEXT:    lw a3, 8(a0)
; RV32I-NEXT:    lw a4, 12(a0)
; RV32I-NEXT:    lw a5, 16(a0)
; RV32I-NEXT:    lw a6, 20(a0)
; RV32I-NEXT:    lw a7, 24(a0)
; RV32I-NEXT:    lw t0, 28(a0)
; RV32I-NEXT:    lw t1, 32(a0)
; RV32I-NEXT:    lw t2, 36(a0)
; RV32I-NEXT:    lw t3, 40(a0)
; RV32I-NEXT:    lw t4, 44(a0)
; RV32I-NEXT:    lw t5, 48(a0)
; RV32I-NEXT:    lw t6, 52(a0)
; RV32I-NEXT:    lw s0, 56(a0)
; RV32I-NEXT:    lw s1, 60(a0)
; RV32I-NEXT:    lw s2, 64(a0)
; RV32I-NEXT:    lw s3, 68(a0)
; RV32I-NEXT:    lw s4, 72(a0)
; RV32I-NEXT:    lw s5, 76(a0)
; RV32I-NEXT:    lw s6, 92(a0)
; RV32I-NEXT:    lw s7, 88(a0)
; RV32I-NEXT:    lw s8, 84(a0)
; RV32I-NEXT:    lw s9, 80(a0)
; RV32I-NEXT:    sw s6, 92(a0)
; RV32I-NEXT:    sw s7, 88(a0)
; RV32I-NEXT:    sw s8, 84(a0)
; RV32I-NEXT:    sw s9, 80(a0)
; RV32I-NEXT:    sw s5, 76(a0)
; RV32I-NEXT:    sw s4, 72(a0)
; RV32I-NEXT:    sw s3, 68(a0)
; RV32I-NEXT:    sw s2, 64(a0)
; RV32I-NEXT:    sw s1, 60(a0)
; RV32I-NEXT:    sw s0, 56(a0)
; RV32I-NEXT:    sw t6, 52(a0)
; RV32I-NEXT:    sw t5, 48(a0)
; RV32I-NEXT:    sw t4, 44(a0)
; RV32I-NEXT:    sw t3, 40(a0)
; RV32I-NEXT:    sw t2, 36(a0)
; RV32I-NEXT:    sw t1, 32(a0)
; RV32I-NEXT:    sw t0, 28(a0)
; RV32I-NEXT:    sw a7, 24(a0)
; RV32I-NEXT:    sw a6, 20(a0)
; RV32I-NEXT:    sw a5, 16(a0)
; RV32I-NEXT:    sw a4, 12(a0)
; RV32I-NEXT:    sw a3, 8(a0)
; RV32I-NEXT:    sw a2, 4(a0)
; RV32I-NEXT:    sw a1, 0(a0)
; RV32I-NEXT:    lw s0, 44(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s1, 40(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s2, 36(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s3, 32(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s4, 28(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s5, 24(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s6, 20(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s7, 16(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s8, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s9, 8(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 48
; RV32I-NEXT:    ret
;
; RV64I-LABEL: callee_saved1:
; RV64I:       # %bb.0:
; RV64I-NEXT:    addi sp, sp, -80
; RV64I-NEXT:    sd s0, 72(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s1, 64(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s2, 56(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s3, 48(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s4, 40(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s5, 32(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s6, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s7, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s8, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s9, 0(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lui a0, %hi(var1)
; RV64I-NEXT:    addi a0, a0, %lo(var1)
; RV64I-NEXT:    lw a1, 0(a0)
; RV64I-NEXT:    lw a2, 4(a0)
; RV64I-NEXT:    lw a3, 8(a0)
; RV64I-NEXT:    lw a4, 12(a0)
; RV64I-NEXT:    lw a5, 16(a0)
; RV64I-NEXT:    lw a6, 20(a0)
; RV64I-NEXT:    lw a7, 24(a0)
; RV64I-NEXT:    lw t0, 28(a0)
; RV64I-NEXT:    lw t1, 32(a0)
; RV64I-NEXT:    lw t2, 36(a0)
; RV64I-NEXT:    lw t3, 40(a0)
; RV64I-NEXT:    lw t4, 44(a0)
; RV64I-NEXT:    lw t5, 48(a0)
; RV64I-NEXT:    lw t6, 52(a0)
; RV64I-NEXT:    lw s0, 56(a0)
; RV64I-NEXT:    lw s1, 60(a0)
; RV64I-NEXT:    lw s2, 64(a0)
; RV64I-NEXT:    lw s3, 68(a0)
; RV64I-NEXT:    lw s4, 72(a0)
; RV64I-NEXT:    lw s5, 76(a0)
; RV64I-NEXT:    lw s6, 92(a0)
; RV64I-NEXT:    lw s7, 88(a0)
; RV64I-NEXT:    lw s8, 84(a0)
; RV64I-NEXT:    lw s9, 80(a0)
; RV64I-NEXT:    sw s6, 92(a0)
; RV64I-NEXT:    sw s7, 88(a0)
; RV64I-NEXT:    sw s8, 84(a0)
; RV64I-NEXT:    sw s9, 80(a0)
; RV64I-NEXT:    sw s5, 76(a0)
; RV64I-NEXT:    sw s4, 72(a0)
; RV64I-NEXT:    sw s3, 68(a0)
; RV64I-NEXT:    sw s2, 64(a0)
; RV64I-NEXT:    sw s1, 60(a0)
; RV64I-NEXT:    sw s0, 56(a0)
; RV64I-NEXT:    sw t6, 52(a0)
; RV64I-NEXT:    sw t5, 48(a0)
; RV64I-NEXT:    sw t4, 44(a0)
; RV64I-NEXT:    sw t3, 40(a0)
; RV64I-NEXT:    sw t2, 36(a0)
; RV64I-NEXT:    sw t1, 32(a0)
; RV64I-NEXT:    sw t0, 28(a0)
; RV64I-NEXT:    sw a7, 24(a0)
; RV64I-NEXT:    sw a6, 20(a0)
; RV64I-NEXT:    sw a5, 16(a0)
; RV64I-NEXT:    sw a4, 12(a0)
; RV64I-NEXT:    sw a3, 8(a0)
; RV64I-NEXT:    sw a2, 4(a0)
; RV64I-NEXT:    sw a1, 0(a0)
; RV64I-NEXT:    ld s0, 72(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s1, 64(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s2, 56(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s3, 48(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s4, 40(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s5, 32(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s6, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s7, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s8, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s9, 0(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 80
; RV64I-NEXT:    ret
;
; RV32I-SR-LABEL: callee_saved1:
; RV32I-SR:       # %bb.0:
; RV32I-SR-NEXT:    call t0, __riscv_save_10
; RV32I-SR-NEXT:    lui a0, %hi(var1)
; RV32I-SR-NEXT:    addi a0, a0, %lo(var1)
; RV32I-SR-NEXT:    lw a1, 0(a0)
; RV32I-SR-NEXT:    lw a2, 4(a0)
; RV32I-SR-NEXT:    lw a3, 8(a0)
; RV32I-SR-NEXT:    lw a4, 12(a0)
; RV32I-SR-NEXT:    lw a5, 16(a0)
; RV32I-SR-NEXT:    lw a6, 20(a0)
; RV32I-SR-NEXT:    lw a7, 24(a0)
; RV32I-SR-NEXT:    lw t0, 28(a0)
; RV32I-SR-NEXT:    lw t1, 32(a0)
; RV32I-SR-NEXT:    lw t2, 36(a0)
; RV32I-SR-NEXT:    lw t3, 40(a0)
; RV32I-SR-NEXT:    lw t4, 44(a0)
; RV32I-SR-NEXT:    lw t5, 48(a0)
; RV32I-SR-NEXT:    lw t6, 52(a0)
; RV32I-SR-NEXT:    lw s0, 56(a0)
; RV32I-SR-NEXT:    lw s1, 60(a0)
; RV32I-SR-NEXT:    lw s2, 64(a0)
; RV32I-SR-NEXT:    lw s3, 68(a0)
; RV32I-SR-NEXT:    lw s4, 72(a0)
; RV32I-SR-NEXT:    lw s5, 76(a0)
; RV32I-SR-NEXT:    lw s6, 92(a0)
; RV32I-SR-NEXT:    lw s7, 88(a0)
; RV32I-SR-NEXT:    lw s8, 84(a0)
; RV32I-SR-NEXT:    lw s9, 80(a0)
; RV32I-SR-NEXT:    sw s6, 92(a0)
; RV32I-SR-NEXT:    sw s7, 88(a0)
; RV32I-SR-NEXT:    sw s8, 84(a0)
; RV32I-SR-NEXT:    sw s9, 80(a0)
; RV32I-SR-NEXT:    sw s5, 76(a0)
; RV32I-SR-NEXT:    sw s4, 72(a0)
; RV32I-SR-NEXT:    sw s3, 68(a0)
; RV32I-SR-NEXT:    sw s2, 64(a0)
; RV32I-SR-NEXT:    sw s1, 60(a0)
; RV32I-SR-NEXT:    sw s0, 56(a0)
; RV32I-SR-NEXT:    sw t6, 52(a0)
; RV32I-SR-NEXT:    sw t5, 48(a0)
; RV32I-SR-NEXT:    sw t4, 44(a0)
; RV32I-SR-NEXT:    sw t3, 40(a0)
; RV32I-SR-NEXT:    sw t2, 36(a0)
; RV32I-SR-NEXT:    sw t1, 32(a0)
; RV32I-SR-NEXT:    sw t0, 28(a0)
; RV32I-SR-NEXT:    sw a7, 24(a0)
; RV32I-SR-NEXT:    sw a6, 20(a0)
; RV32I-SR-NEXT:    sw a5, 16(a0)
; RV32I-SR-NEXT:    sw a4, 12(a0)
; RV32I-SR-NEXT:    sw a3, 8(a0)
; RV32I-SR-NEXT:    sw a2, 4(a0)
; RV32I-SR-NEXT:    sw a1, 0(a0)
; RV32I-SR-NEXT:    tail __riscv_restore_10
;
; RV64I-SR-LABEL: callee_saved1:
; RV64I-SR:       # %bb.0:
; RV64I-SR-NEXT:    call t0, __riscv_save_10
; RV64I-SR-NEXT:    lui a0, %hi(var1)
; RV64I-SR-NEXT:    addi a0, a0, %lo(var1)
; RV64I-SR-NEXT:    lw a1, 0(a0)
; RV64I-SR-NEXT:    lw a2, 4(a0)
; RV64I-SR-NEXT:    lw a3, 8(a0)
; RV64I-SR-NEXT:    lw a4, 12(a0)
; RV64I-SR-NEXT:    lw a5, 16(a0)
; RV64I-SR-NEXT:    lw a6, 20(a0)
; RV64I-SR-NEXT:    lw a7, 24(a0)
; RV64I-SR-NEXT:    lw t0, 28(a0)
; RV64I-SR-NEXT:    lw t1, 32(a0)
; RV64I-SR-NEXT:    lw t2, 36(a0)
; RV64I-SR-NEXT:    lw t3, 40(a0)
; RV64I-SR-NEXT:    lw t4, 44(a0)
; RV64I-SR-NEXT:    lw t5, 48(a0)
; RV64I-SR-NEXT:    lw t6, 52(a0)
; RV64I-SR-NEXT:    lw s0, 56(a0)
; RV64I-SR-NEXT:    lw s1, 60(a0)
; RV64I-SR-NEXT:    lw s2, 64(a0)
; RV64I-SR-NEXT:    lw s3, 68(a0)
; RV64I-SR-NEXT:    lw s4, 72(a0)
; RV64I-SR-NEXT:    lw s5, 76(a0)
; RV64I-SR-NEXT:    lw s6, 92(a0)
; RV64I-SR-NEXT:    lw s7, 88(a0)
; RV64I-SR-NEXT:    lw s8, 84(a0)
; RV64I-SR-NEXT:    lw s9, 80(a0)
; RV64I-SR-NEXT:    sw s6, 92(a0)
; RV64I-SR-NEXT:    sw s7, 88(a0)
; RV64I-SR-NEXT:    sw s8, 84(a0)
; RV64I-SR-NEXT:    sw s9, 80(a0)
; RV64I-SR-NEXT:    sw s5, 76(a0)
; RV64I-SR-NEXT:    sw s4, 72(a0)
; RV64I-SR-NEXT:    sw s3, 68(a0)
; RV64I-SR-NEXT:    sw s2, 64(a0)
; RV64I-SR-NEXT:    sw s1, 60(a0)
; RV64I-SR-NEXT:    sw s0, 56(a0)
; RV64I-SR-NEXT:    sw t6, 52(a0)
; RV64I-SR-NEXT:    sw t5, 48(a0)
; RV64I-SR-NEXT:    sw t4, 44(a0)
; RV64I-SR-NEXT:    sw t3, 40(a0)
; RV64I-SR-NEXT:    sw t2, 36(a0)
; RV64I-SR-NEXT:    sw t1, 32(a0)
; RV64I-SR-NEXT:    sw t0, 28(a0)
; RV64I-SR-NEXT:    sw a7, 24(a0)
; RV64I-SR-NEXT:    sw a6, 20(a0)
; RV64I-SR-NEXT:    sw a5, 16(a0)
; RV64I-SR-NEXT:    sw a4, 12(a0)
; RV64I-SR-NEXT:    sw a3, 8(a0)
; RV64I-SR-NEXT:    sw a2, 4(a0)
; RV64I-SR-NEXT:    sw a1, 0(a0)
; RV64I-SR-NEXT:    tail __riscv_restore_10
;
; RV32I-FP-SR-LABEL: callee_saved1:
; RV32I-FP-SR:       # %bb.0:
; RV32I-FP-SR-NEXT:    call t0, __riscv_save_10
; RV32I-FP-SR-NEXT:    lui a0, %hi(var1)
; RV32I-FP-SR-NEXT:    addi a0, a0, %lo(var1)
; RV32I-FP-SR-NEXT:    lw a1, 0(a0)
; RV32I-FP-SR-NEXT:    lw a2, 4(a0)
; RV32I-FP-SR-NEXT:    lw a3, 8(a0)
; RV32I-FP-SR-NEXT:    lw a4, 12(a0)
; RV32I-FP-SR-NEXT:    lw a5, 16(a0)
; RV32I-FP-SR-NEXT:    lw a6, 20(a0)
; RV32I-FP-SR-NEXT:    lw a7, 24(a0)
; RV32I-FP-SR-NEXT:    lw t0, 28(a0)
; RV32I-FP-SR-NEXT:    lw t1, 32(a0)
; RV32I-FP-SR-NEXT:    lw t2, 36(a0)
; RV32I-FP-SR-NEXT:    lw t3, 40(a0)
; RV32I-FP-SR-NEXT:    lw t4, 44(a0)
; RV32I-FP-SR-NEXT:    lw t5, 48(a0)
; RV32I-FP-SR-NEXT:    lw t6, 52(a0)
; RV32I-FP-SR-NEXT:    lw s0, 56(a0)
; RV32I-FP-SR-NEXT:    lw s1, 60(a0)
; RV32I-FP-SR-NEXT:    lw s2, 64(a0)
; RV32I-FP-SR-NEXT:    lw s3, 68(a0)
; RV32I-FP-SR-NEXT:    lw s4, 72(a0)
; RV32I-FP-SR-NEXT:    lw s5, 76(a0)
; RV32I-FP-SR-NEXT:    lw s6, 92(a0)
; RV32I-FP-SR-NEXT:    lw s7, 88(a0)
; RV32I-FP-SR-NEXT:    lw s8, 84(a0)
; RV32I-FP-SR-NEXT:    lw s9, 80(a0)
; RV32I-FP-SR-NEXT:    sw s6, 92(a0)
; RV32I-FP-SR-NEXT:    sw s7, 88(a0)
; RV32I-FP-SR-NEXT:    sw s8, 84(a0)
; RV32I-FP-SR-NEXT:    sw s9, 80(a0)
; RV32I-FP-SR-NEXT:    sw s5, 76(a0)
; RV32I-FP-SR-NEXT:    sw s4, 72(a0)
; RV32I-FP-SR-NEXT:    sw s3, 68(a0)
; RV32I-FP-SR-NEXT:    sw s2, 64(a0)
; RV32I-FP-SR-NEXT:    sw s1, 60(a0)
; RV32I-FP-SR-NEXT:    sw s0, 56(a0)
; RV32I-FP-SR-NEXT:    sw t6, 52(a0)
; RV32I-FP-SR-NEXT:    sw t5, 48(a0)
; RV32I-FP-SR-NEXT:    sw t4, 44(a0)
; RV32I-FP-SR-NEXT:    sw t3, 40(a0)
; RV32I-FP-SR-NEXT:    sw t2, 36(a0)
; RV32I-FP-SR-NEXT:    sw t1, 32(a0)
; RV32I-FP-SR-NEXT:    sw t0, 28(a0)
; RV32I-FP-SR-NEXT:    sw a7, 24(a0)
; RV32I-FP-SR-NEXT:    sw a6, 20(a0)
; RV32I-FP-SR-NEXT:    sw a5, 16(a0)
; RV32I-FP-SR-NEXT:    sw a4, 12(a0)
; RV32I-FP-SR-NEXT:    sw a3, 8(a0)
; RV32I-FP-SR-NEXT:    sw a2, 4(a0)
; RV32I-FP-SR-NEXT:    sw a1, 0(a0)
; RV32I-FP-SR-NEXT:    tail __riscv_restore_10
;
; RV64I-FP-SR-LABEL: callee_saved1:
; RV64I-FP-SR:       # %bb.0:
; RV64I-FP-SR-NEXT:    call t0, __riscv_save_10
; RV64I-FP-SR-NEXT:    lui a0, %hi(var1)
; RV64I-FP-SR-NEXT:    addi a0, a0, %lo(var1)
; RV64I-FP-SR-NEXT:    lw a1, 0(a0)
; RV64I-FP-SR-NEXT:    lw a2, 4(a0)
; RV64I-FP-SR-NEXT:    lw a3, 8(a0)
; RV64I-FP-SR-NEXT:    lw a4, 12(a0)
; RV64I-FP-SR-NEXT:    lw a5, 16(a0)
; RV64I-FP-SR-NEXT:    lw a6, 20(a0)
; RV64I-FP-SR-NEXT:    lw a7, 24(a0)
; RV64I-FP-SR-NEXT:    lw t0, 28(a0)
; RV64I-FP-SR-NEXT:    lw t1, 32(a0)
; RV64I-FP-SR-NEXT:    lw t2, 36(a0)
; RV64I-FP-SR-NEXT:    lw t3, 40(a0)
; RV64I-FP-SR-NEXT:    lw t4, 44(a0)
; RV64I-FP-SR-NEXT:    lw t5, 48(a0)
; RV64I-FP-SR-NEXT:    lw t6, 52(a0)
; RV64I-FP-SR-NEXT:    lw s0, 56(a0)
; RV64I-FP-SR-NEXT:    lw s1, 60(a0)
; RV64I-FP-SR-NEXT:    lw s2, 64(a0)
; RV64I-FP-SR-NEXT:    lw s3, 68(a0)
; RV64I-FP-SR-NEXT:    lw s4, 72(a0)
; RV64I-FP-SR-NEXT:    lw s5, 76(a0)
; RV64I-FP-SR-NEXT:    lw s6, 92(a0)
; RV64I-FP-SR-NEXT:    lw s7, 88(a0)
; RV64I-FP-SR-NEXT:    lw s8, 84(a0)
; RV64I-FP-SR-NEXT:    lw s9, 80(a0)
; RV64I-FP-SR-NEXT:    sw s6, 92(a0)
; RV64I-FP-SR-NEXT:    sw s7, 88(a0)
; RV64I-FP-SR-NEXT:    sw s8, 84(a0)
; RV64I-FP-SR-NEXT:    sw s9, 80(a0)
; RV64I-FP-SR-NEXT:    sw s5, 76(a0)
; RV64I-FP-SR-NEXT:    sw s4, 72(a0)
; RV64I-FP-SR-NEXT:    sw s3, 68(a0)
; RV64I-FP-SR-NEXT:    sw s2, 64(a0)
; RV64I-FP-SR-NEXT:    sw s1, 60(a0)
; RV64I-FP-SR-NEXT:    sw s0, 56(a0)
; RV64I-FP-SR-NEXT:    sw t6, 52(a0)
; RV64I-FP-SR-NEXT:    sw t5, 48(a0)
; RV64I-FP-SR-NEXT:    sw t4, 44(a0)
; RV64I-FP-SR-NEXT:    sw t3, 40(a0)
; RV64I-FP-SR-NEXT:    sw t2, 36(a0)
; RV64I-FP-SR-NEXT:    sw t1, 32(a0)
; RV64I-FP-SR-NEXT:    sw t0, 28(a0)
; RV64I-FP-SR-NEXT:    sw a7, 24(a0)
; RV64I-FP-SR-NEXT:    sw a6, 20(a0)
; RV64I-FP-SR-NEXT:    sw a5, 16(a0)
; RV64I-FP-SR-NEXT:    sw a4, 12(a0)
; RV64I-FP-SR-NEXT:    sw a3, 8(a0)
; RV64I-FP-SR-NEXT:    sw a2, 4(a0)
; RV64I-FP-SR-NEXT:    sw a1, 0(a0)
; RV64I-FP-SR-NEXT:    tail __riscv_restore_10
  %val = load [24 x i32], ptr @var1
  store volatile [24 x i32] %val, ptr @var1
  ret void
}

define void @callee_saved2() nounwind {
; RV32I-LABEL: callee_saved2:
; RV32I:       # %bb.0:
; RV32I-NEXT:    addi sp, sp, -64
; RV32I-NEXT:    sw ra, 60(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s0, 56(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s1, 52(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s2, 48(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s3, 44(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s4, 40(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s5, 36(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s6, 32(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s7, 28(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s8, 24(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s9, 20(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s10, 16(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s11, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lui a0, %hi(var2)
; RV32I-NEXT:    addi a0, a0, %lo(var2)
; RV32I-NEXT:    lw a1, 0(a0)
; RV32I-NEXT:    sw a1, 8(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lw a1, 4(a0)
; RV32I-NEXT:    sw a1, 4(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lw a1, 8(a0)
; RV32I-NEXT:    sw a1, 0(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lw a4, 12(a0)
; RV32I-NEXT:    lw a5, 16(a0)
; RV32I-NEXT:    lw a6, 20(a0)
; RV32I-NEXT:    lw a7, 24(a0)
; RV32I-NEXT:    lw t0, 28(a0)
; RV32I-NEXT:    lw t1, 32(a0)
; RV32I-NEXT:    lw t2, 36(a0)
; RV32I-NEXT:    lw t3, 40(a0)
; RV32I-NEXT:    lw t4, 44(a0)
; RV32I-NEXT:    lw t5, 48(a0)
; RV32I-NEXT:    lw t6, 52(a0)
; RV32I-NEXT:    lw s0, 56(a0)
; RV32I-NEXT:    lw s1, 60(a0)
; RV32I-NEXT:    lw s2, 64(a0)
; RV32I-NEXT:    lw s3, 68(a0)
; RV32I-NEXT:    lw s4, 72(a0)
; RV32I-NEXT:    lw s5, 76(a0)
; RV32I-NEXT:    lw s6, 80(a0)
; RV32I-NEXT:    lw s7, 84(a0)
; RV32I-NEXT:    lw s8, 88(a0)
; RV32I-NEXT:    lw s9, 92(a0)
; RV32I-NEXT:    lw s10, 96(a0)
; RV32I-NEXT:    lw s11, 100(a0)
; RV32I-NEXT:    lw ra, 116(a0)
; RV32I-NEXT:    lw a1, 112(a0)
; RV32I-NEXT:    lw a2, 108(a0)
; RV32I-NEXT:    lw a3, 104(a0)
; RV32I-NEXT:    sw ra, 116(a0)
; RV32I-NEXT:    sw a1, 112(a0)
; RV32I-NEXT:    sw a2, 108(a0)
; RV32I-NEXT:    sw a3, 104(a0)
; RV32I-NEXT:    sw s11, 100(a0)
; RV32I-NEXT:    sw s10, 96(a0)
; RV32I-NEXT:    sw s9, 92(a0)
; RV32I-NEXT:    sw s8, 88(a0)
; RV32I-NEXT:    sw s7, 84(a0)
; RV32I-NEXT:    sw s6, 80(a0)
; RV32I-NEXT:    sw s5, 76(a0)
; RV32I-NEXT:    sw s4, 72(a0)
; RV32I-NEXT:    sw s3, 68(a0)
; RV32I-NEXT:    sw s2, 64(a0)
; RV32I-NEXT:    sw s1, 60(a0)
; RV32I-NEXT:    sw s0, 56(a0)
; RV32I-NEXT:    sw t6, 52(a0)
; RV32I-NEXT:    sw t5, 48(a0)
; RV32I-NEXT:    sw t4, 44(a0)
; RV32I-NEXT:    sw t3, 40(a0)
; RV32I-NEXT:    sw t2, 36(a0)
; RV32I-NEXT:    sw t1, 32(a0)
; RV32I-NEXT:    sw t0, 28(a0)
; RV32I-NEXT:    sw a7, 24(a0)
; RV32I-NEXT:    sw a6, 20(a0)
; RV32I-NEXT:    sw a5, 16(a0)
; RV32I-NEXT:    sw a4, 12(a0)
; RV32I-NEXT:    lw a1, 0(sp) # 4-byte Folded Reload
; RV32I-NEXT:    sw a1, 8(a0)
; RV32I-NEXT:    lw a1, 4(sp) # 4-byte Folded Reload
; RV32I-NEXT:    sw a1, 4(a0)
; RV32I-NEXT:    lw a1, 8(sp) # 4-byte Folded Reload
; RV32I-NEXT:    sw a1, 0(a0)
; RV32I-NEXT:    lw ra, 60(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s0, 56(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s1, 52(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s2, 48(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s3, 44(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s4, 40(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s5, 36(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s6, 32(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s7, 28(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s8, 24(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s9, 20(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s10, 16(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s11, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 64
; RV32I-NEXT:    ret
;
; RV64I-LABEL: callee_saved2:
; RV64I:       # %bb.0:
; RV64I-NEXT:    addi sp, sp, -128
; RV64I-NEXT:    sd ra, 120(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s0, 112(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s1, 104(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s2, 96(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s3, 88(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s4, 80(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s5, 72(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s6, 64(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s7, 56(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s8, 48(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s9, 40(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s10, 32(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s11, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lui a0, %hi(var2)
; RV64I-NEXT:    addi a0, a0, %lo(var2)
; RV64I-NEXT:    lw a1, 0(a0)
; RV64I-NEXT:    sd a1, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lw a1, 4(a0)
; RV64I-NEXT:    sd a1, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lw a1, 8(a0)
; RV64I-NEXT:    sd a1, 0(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lw a4, 12(a0)
; RV64I-NEXT:    lw a5, 16(a0)
; RV64I-NEXT:    lw a6, 20(a0)
; RV64I-NEXT:    lw a7, 24(a0)
; RV64I-NEXT:    lw t0, 28(a0)
; RV64I-NEXT:    lw t1, 32(a0)
; RV64I-NEXT:    lw t2, 36(a0)
; RV64I-NEXT:    lw t3, 40(a0)
; RV64I-NEXT:    lw t4, 44(a0)
; RV64I-NEXT:    lw t5, 48(a0)
; RV64I-NEXT:    lw t6, 52(a0)
; RV64I-NEXT:    lw s0, 56(a0)
; RV64I-NEXT:    lw s1, 60(a0)
; RV64I-NEXT:    lw s2, 64(a0)
; RV64I-NEXT:    lw s3, 68(a0)
; RV64I-NEXT:    lw s4, 72(a0)
; RV64I-NEXT:    lw s5, 76(a0)
; RV64I-NEXT:    lw s6, 80(a0)
; RV64I-NEXT:    lw s7, 84(a0)
; RV64I-NEXT:    lw s8, 88(a0)
; RV64I-NEXT:    lw s9, 92(a0)
; RV64I-NEXT:    lw s10, 96(a0)
; RV64I-NEXT:    lw s11, 100(a0)
; RV64I-NEXT:    lw ra, 116(a0)
; RV64I-NEXT:    lw a1, 112(a0)
; RV64I-NEXT:    lw a2, 108(a0)
; RV64I-NEXT:    lw a3, 104(a0)
; RV64I-NEXT:    sw ra, 116(a0)
; RV64I-NEXT:    sw a1, 112(a0)
; RV64I-NEXT:    sw a2, 108(a0)
; RV64I-NEXT:    sw a3, 104(a0)
; RV64I-NEXT:    sw s11, 100(a0)
; RV64I-NEXT:    sw s10, 96(a0)
; RV64I-NEXT:    sw s9, 92(a0)
; RV64I-NEXT:    sw s8, 88(a0)
; RV64I-NEXT:    sw s7, 84(a0)
; RV64I-NEXT:    sw s6, 80(a0)
; RV64I-NEXT:    sw s5, 76(a0)
; RV64I-NEXT:    sw s4, 72(a0)
; RV64I-NEXT:    sw s3, 68(a0)
; RV64I-NEXT:    sw s2, 64(a0)
; RV64I-NEXT:    sw s1, 60(a0)
; RV64I-NEXT:    sw s0, 56(a0)
; RV64I-NEXT:    sw t6, 52(a0)
; RV64I-NEXT:    sw t5, 48(a0)
; RV64I-NEXT:    sw t4, 44(a0)
; RV64I-NEXT:    sw t3, 40(a0)
; RV64I-NEXT:    sw t2, 36(a0)
; RV64I-NEXT:    sw t1, 32(a0)
; RV64I-NEXT:    sw t0, 28(a0)
; RV64I-NEXT:    sw a7, 24(a0)
; RV64I-NEXT:    sw a6, 20(a0)
; RV64I-NEXT:    sw a5, 16(a0)
; RV64I-NEXT:    sw a4, 12(a0)
; RV64I-NEXT:    ld a1, 0(sp) # 8-byte Folded Reload
; RV64I-NEXT:    sw a1, 8(a0)
; RV64I-NEXT:    ld a1, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    sw a1, 4(a0)
; RV64I-NEXT:    ld a1, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    sw a1, 0(a0)
; RV64I-NEXT:    ld ra, 120(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s0, 112(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s1, 104(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s2, 96(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s3, 88(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s4, 80(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s5, 72(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s6, 64(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s7, 56(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s8, 48(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s9, 40(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s10, 32(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s11, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 128
; RV64I-NEXT:    ret
;
; RV32I-SR-LABEL: callee_saved2:
; RV32I-SR:       # %bb.0:
; RV32I-SR-NEXT:    call t0, __riscv_save_12
; RV32I-SR-NEXT:    addi sp, sp, -16
; RV32I-SR-NEXT:    lui a0, %hi(var2)
; RV32I-SR-NEXT:    addi a0, a0, %lo(var2)
; RV32I-SR-NEXT:    lw a1, 0(a0)
; RV32I-SR-NEXT:    sw a1, 12(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    lw a1, 4(a0)
; RV32I-SR-NEXT:    sw a1, 8(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    lw a1, 8(a0)
; RV32I-SR-NEXT:    sw a1, 4(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    lw a4, 12(a0)
; RV32I-SR-NEXT:    lw a5, 16(a0)
; RV32I-SR-NEXT:    lw a6, 20(a0)
; RV32I-SR-NEXT:    lw a7, 24(a0)
; RV32I-SR-NEXT:    lw t0, 28(a0)
; RV32I-SR-NEXT:    lw t1, 32(a0)
; RV32I-SR-NEXT:    lw t2, 36(a0)
; RV32I-SR-NEXT:    lw t3, 40(a0)
; RV32I-SR-NEXT:    lw t4, 44(a0)
; RV32I-SR-NEXT:    lw t5, 48(a0)
; RV32I-SR-NEXT:    lw t6, 52(a0)
; RV32I-SR-NEXT:    lw s0, 56(a0)
; RV32I-SR-NEXT:    lw s1, 60(a0)
; RV32I-SR-NEXT:    lw s2, 64(a0)
; RV32I-SR-NEXT:    lw s3, 68(a0)
; RV32I-SR-NEXT:    lw s4, 72(a0)
; RV32I-SR-NEXT:    lw s5, 76(a0)
; RV32I-SR-NEXT:    lw s6, 80(a0)
; RV32I-SR-NEXT:    lw s7, 84(a0)
; RV32I-SR-NEXT:    lw s8, 88(a0)
; RV32I-SR-NEXT:    lw s9, 92(a0)
; RV32I-SR-NEXT:    lw s10, 96(a0)
; RV32I-SR-NEXT:    lw s11, 100(a0)
; RV32I-SR-NEXT:    lw ra, 116(a0)
; RV32I-SR-NEXT:    lw a1, 112(a0)
; RV32I-SR-NEXT:    lw a2, 108(a0)
; RV32I-SR-NEXT:    lw a3, 104(a0)
; RV32I-SR-NEXT:    sw ra, 116(a0)
; RV32I-SR-NEXT:    sw a1, 112(a0)
; RV32I-SR-NEXT:    sw a2, 108(a0)
; RV32I-SR-NEXT:    sw a3, 104(a0)
; RV32I-SR-NEXT:    sw s11, 100(a0)
; RV32I-SR-NEXT:    sw s10, 96(a0)
; RV32I-SR-NEXT:    sw s9, 92(a0)
; RV32I-SR-NEXT:    sw s8, 88(a0)
; RV32I-SR-NEXT:    sw s7, 84(a0)
; RV32I-SR-NEXT:    sw s6, 80(a0)
; RV32I-SR-NEXT:    sw s5, 76(a0)
; RV32I-SR-NEXT:    sw s4, 72(a0)
; RV32I-SR-NEXT:    sw s3, 68(a0)
; RV32I-SR-NEXT:    sw s2, 64(a0)
; RV32I-SR-NEXT:    sw s1, 60(a0)
; RV32I-SR-NEXT:    sw s0, 56(a0)
; RV32I-SR-NEXT:    sw t6, 52(a0)
; RV32I-SR-NEXT:    sw t5, 48(a0)
; RV32I-SR-NEXT:    sw t4, 44(a0)
; RV32I-SR-NEXT:    sw t3, 40(a0)
; RV32I-SR-NEXT:    sw t2, 36(a0)
; RV32I-SR-NEXT:    sw t1, 32(a0)
; RV32I-SR-NEXT:    sw t0, 28(a0)
; RV32I-SR-NEXT:    sw a7, 24(a0)
; RV32I-SR-NEXT:    sw a6, 20(a0)
; RV32I-SR-NEXT:    sw a5, 16(a0)
; RV32I-SR-NEXT:    sw a4, 12(a0)
; RV32I-SR-NEXT:    lw a1, 4(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    sw a1, 8(a0)
; RV32I-SR-NEXT:    lw a1, 8(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    sw a1, 4(a0)
; RV32I-SR-NEXT:    lw a1, 12(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    sw a1, 0(a0)
; RV32I-SR-NEXT:    addi sp, sp, 16
; RV32I-SR-NEXT:    tail __riscv_restore_12
;
; RV64I-SR-LABEL: callee_saved2:
; RV64I-SR:       # %bb.0:
; RV64I-SR-NEXT:    call t0, __riscv_save_12
; RV64I-SR-NEXT:    addi sp, sp, -32
; RV64I-SR-NEXT:    lui a0, %hi(var2)
; RV64I-SR-NEXT:    addi a0, a0, %lo(var2)
; RV64I-SR-NEXT:    lw a1, 0(a0)
; RV64I-SR-NEXT:    sd a1, 24(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    lw a1, 4(a0)
; RV64I-SR-NEXT:    sd a1, 16(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    lw a1, 8(a0)
; RV64I-SR-NEXT:    sd a1, 8(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    lw a4, 12(a0)
; RV64I-SR-NEXT:    lw a5, 16(a0)
; RV64I-SR-NEXT:    lw a6, 20(a0)
; RV64I-SR-NEXT:    lw a7, 24(a0)
; RV64I-SR-NEXT:    lw t0, 28(a0)
; RV64I-SR-NEXT:    lw t1, 32(a0)
; RV64I-SR-NEXT:    lw t2, 36(a0)
; RV64I-SR-NEXT:    lw t3, 40(a0)
; RV64I-SR-NEXT:    lw t4, 44(a0)
; RV64I-SR-NEXT:    lw t5, 48(a0)
; RV64I-SR-NEXT:    lw t6, 52(a0)
; RV64I-SR-NEXT:    lw s0, 56(a0)
; RV64I-SR-NEXT:    lw s1, 60(a0)
; RV64I-SR-NEXT:    lw s2, 64(a0)
; RV64I-SR-NEXT:    lw s3, 68(a0)
; RV64I-SR-NEXT:    lw s4, 72(a0)
; RV64I-SR-NEXT:    lw s5, 76(a0)
; RV64I-SR-NEXT:    lw s6, 80(a0)
; RV64I-SR-NEXT:    lw s7, 84(a0)
; RV64I-SR-NEXT:    lw s8, 88(a0)
; RV64I-SR-NEXT:    lw s9, 92(a0)
; RV64I-SR-NEXT:    lw s10, 96(a0)
; RV64I-SR-NEXT:    lw s11, 100(a0)
; RV64I-SR-NEXT:    lw ra, 116(a0)
; RV64I-SR-NEXT:    lw a1, 112(a0)
; RV64I-SR-NEXT:    lw a2, 108(a0)
; RV64I-SR-NEXT:    lw a3, 104(a0)
; RV64I-SR-NEXT:    sw ra, 116(a0)
; RV64I-SR-NEXT:    sw a1, 112(a0)
; RV64I-SR-NEXT:    sw a2, 108(a0)
; RV64I-SR-NEXT:    sw a3, 104(a0)
; RV64I-SR-NEXT:    sw s11, 100(a0)
; RV64I-SR-NEXT:    sw s10, 96(a0)
; RV64I-SR-NEXT:    sw s9, 92(a0)
; RV64I-SR-NEXT:    sw s8, 88(a0)
; RV64I-SR-NEXT:    sw s7, 84(a0)
; RV64I-SR-NEXT:    sw s6, 80(a0)
; RV64I-SR-NEXT:    sw s5, 76(a0)
; RV64I-SR-NEXT:    sw s4, 72(a0)
; RV64I-SR-NEXT:    sw s3, 68(a0)
; RV64I-SR-NEXT:    sw s2, 64(a0)
; RV64I-SR-NEXT:    sw s1, 60(a0)
; RV64I-SR-NEXT:    sw s0, 56(a0)
; RV64I-SR-NEXT:    sw t6, 52(a0)
; RV64I-SR-NEXT:    sw t5, 48(a0)
; RV64I-SR-NEXT:    sw t4, 44(a0)
; RV64I-SR-NEXT:    sw t3, 40(a0)
; RV64I-SR-NEXT:    sw t2, 36(a0)
; RV64I-SR-NEXT:    sw t1, 32(a0)
; RV64I-SR-NEXT:    sw t0, 28(a0)
; RV64I-SR-NEXT:    sw a7, 24(a0)
; RV64I-SR-NEXT:    sw a6, 20(a0)
; RV64I-SR-NEXT:    sw a5, 16(a0)
; RV64I-SR-NEXT:    sw a4, 12(a0)
; RV64I-SR-NEXT:    ld a1, 8(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    sw a1, 8(a0)
; RV64I-SR-NEXT:    ld a1, 16(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    sw a1, 4(a0)
; RV64I-SR-NEXT:    ld a1, 24(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    sw a1, 0(a0)
; RV64I-SR-NEXT:    addi sp, sp, 32
; RV64I-SR-NEXT:    tail __riscv_restore_12
;
; RV32I-FP-SR-LABEL: callee_saved2:
; RV32I-FP-SR:       # %bb.0:
; RV32I-FP-SR-NEXT:    call t0, __riscv_save_12
; RV32I-FP-SR-NEXT:    addi sp, sp, -16
; RV32I-FP-SR-NEXT:    lui a0, %hi(var2)
; RV32I-FP-SR-NEXT:    addi a0, a0, %lo(var2)
; RV32I-FP-SR-NEXT:    lw a1, 0(a0)
; RV32I-FP-SR-NEXT:    sw a1, 12(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    lw a1, 4(a0)
; RV32I-FP-SR-NEXT:    sw a1, 8(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    lw a1, 8(a0)
; RV32I-FP-SR-NEXT:    sw a1, 4(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    lw a4, 12(a0)
; RV32I-FP-SR-NEXT:    lw a5, 16(a0)
; RV32I-FP-SR-NEXT:    lw a6, 20(a0)
; RV32I-FP-SR-NEXT:    lw a7, 24(a0)
; RV32I-FP-SR-NEXT:    lw t0, 28(a0)
; RV32I-FP-SR-NEXT:    lw t1, 32(a0)
; RV32I-FP-SR-NEXT:    lw t2, 36(a0)
; RV32I-FP-SR-NEXT:    lw t3, 40(a0)
; RV32I-FP-SR-NEXT:    lw t4, 44(a0)
; RV32I-FP-SR-NEXT:    lw t5, 48(a0)
; RV32I-FP-SR-NEXT:    lw t6, 52(a0)
; RV32I-FP-SR-NEXT:    lw s0, 56(a0)
; RV32I-FP-SR-NEXT:    lw s1, 60(a0)
; RV32I-FP-SR-NEXT:    lw s2, 64(a0)
; RV32I-FP-SR-NEXT:    lw s3, 68(a0)
; RV32I-FP-SR-NEXT:    lw s4, 72(a0)
; RV32I-FP-SR-NEXT:    lw s5, 76(a0)
; RV32I-FP-SR-NEXT:    lw s6, 80(a0)
; RV32I-FP-SR-NEXT:    lw s7, 84(a0)
; RV32I-FP-SR-NEXT:    lw s8, 88(a0)
; RV32I-FP-SR-NEXT:    lw s9, 92(a0)
; RV32I-FP-SR-NEXT:    lw s10, 96(a0)
; RV32I-FP-SR-NEXT:    lw s11, 100(a0)
; RV32I-FP-SR-NEXT:    lw ra, 116(a0)
; RV32I-FP-SR-NEXT:    lw a1, 112(a0)
; RV32I-FP-SR-NEXT:    lw a2, 108(a0)
; RV32I-FP-SR-NEXT:    lw a3, 104(a0)
; RV32I-FP-SR-NEXT:    sw ra, 116(a0)
; RV32I-FP-SR-NEXT:    sw a1, 112(a0)
; RV32I-FP-SR-NEXT:    sw a2, 108(a0)
; RV32I-FP-SR-NEXT:    sw a3, 104(a0)
; RV32I-FP-SR-NEXT:    sw s11, 100(a0)
; RV32I-FP-SR-NEXT:    sw s10, 96(a0)
; RV32I-FP-SR-NEXT:    sw s9, 92(a0)
; RV32I-FP-SR-NEXT:    sw s8, 88(a0)
; RV32I-FP-SR-NEXT:    sw s7, 84(a0)
; RV32I-FP-SR-NEXT:    sw s6, 80(a0)
; RV32I-FP-SR-NEXT:    sw s5, 76(a0)
; RV32I-FP-SR-NEXT:    sw s4, 72(a0)
; RV32I-FP-SR-NEXT:    sw s3, 68(a0)
; RV32I-FP-SR-NEXT:    sw s2, 64(a0)
; RV32I-FP-SR-NEXT:    sw s1, 60(a0)
; RV32I-FP-SR-NEXT:    sw s0, 56(a0)
; RV32I-FP-SR-NEXT:    sw t6, 52(a0)
; RV32I-FP-SR-NEXT:    sw t5, 48(a0)
; RV32I-FP-SR-NEXT:    sw t4, 44(a0)
; RV32I-FP-SR-NEXT:    sw t3, 40(a0)
; RV32I-FP-SR-NEXT:    sw t2, 36(a0)
; RV32I-FP-SR-NEXT:    sw t1, 32(a0)
; RV32I-FP-SR-NEXT:    sw t0, 28(a0)
; RV32I-FP-SR-NEXT:    sw a7, 24(a0)
; RV32I-FP-SR-NEXT:    sw a6, 20(a0)
; RV32I-FP-SR-NEXT:    sw a5, 16(a0)
; RV32I-FP-SR-NEXT:    sw a4, 12(a0)
; RV32I-FP-SR-NEXT:    lw a1, 4(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    sw a1, 8(a0)
; RV32I-FP-SR-NEXT:    lw a1, 8(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    sw a1, 4(a0)
; RV32I-FP-SR-NEXT:    lw a1, 12(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    sw a1, 0(a0)
; RV32I-FP-SR-NEXT:    addi sp, sp, 16
; RV32I-FP-SR-NEXT:    tail __riscv_restore_12
;
; RV64I-FP-SR-LABEL: callee_saved2:
; RV64I-FP-SR:       # %bb.0:
; RV64I-FP-SR-NEXT:    call t0, __riscv_save_12
; RV64I-FP-SR-NEXT:    addi sp, sp, -32
; RV64I-FP-SR-NEXT:    lui a0, %hi(var2)
; RV64I-FP-SR-NEXT:    addi a0, a0, %lo(var2)
; RV64I-FP-SR-NEXT:    lw a1, 0(a0)
; RV64I-FP-SR-NEXT:    sd a1, 24(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    lw a1, 4(a0)
; RV64I-FP-SR-NEXT:    sd a1, 16(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    lw a1, 8(a0)
; RV64I-FP-SR-NEXT:    sd a1, 8(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    lw a4, 12(a0)
; RV64I-FP-SR-NEXT:    lw a5, 16(a0)
; RV64I-FP-SR-NEXT:    lw a6, 20(a0)
; RV64I-FP-SR-NEXT:    lw a7, 24(a0)
; RV64I-FP-SR-NEXT:    lw t0, 28(a0)
; RV64I-FP-SR-NEXT:    lw t1, 32(a0)
; RV64I-FP-SR-NEXT:    lw t2, 36(a0)
; RV64I-FP-SR-NEXT:    lw t3, 40(a0)
; RV64I-FP-SR-NEXT:    lw t4, 44(a0)
; RV64I-FP-SR-NEXT:    lw t5, 48(a0)
; RV64I-FP-SR-NEXT:    lw t6, 52(a0)
; RV64I-FP-SR-NEXT:    lw s0, 56(a0)
; RV64I-FP-SR-NEXT:    lw s1, 60(a0)
; RV64I-FP-SR-NEXT:    lw s2, 64(a0)
; RV64I-FP-SR-NEXT:    lw s3, 68(a0)
; RV64I-FP-SR-NEXT:    lw s4, 72(a0)
; RV64I-FP-SR-NEXT:    lw s5, 76(a0)
; RV64I-FP-SR-NEXT:    lw s6, 80(a0)
; RV64I-FP-SR-NEXT:    lw s7, 84(a0)
; RV64I-FP-SR-NEXT:    lw s8, 88(a0)
; RV64I-FP-SR-NEXT:    lw s9, 92(a0)
; RV64I-FP-SR-NEXT:    lw s10, 96(a0)
; RV64I-FP-SR-NEXT:    lw s11, 100(a0)
; RV64I-FP-SR-NEXT:    lw ra, 116(a0)
; RV64I-FP-SR-NEXT:    lw a1, 112(a0)
; RV64I-FP-SR-NEXT:    lw a2, 108(a0)
; RV64I-FP-SR-NEXT:    lw a3, 104(a0)
; RV64I-FP-SR-NEXT:    sw ra, 116(a0)
; RV64I-FP-SR-NEXT:    sw a1, 112(a0)
; RV64I-FP-SR-NEXT:    sw a2, 108(a0)
; RV64I-FP-SR-NEXT:    sw a3, 104(a0)
; RV64I-FP-SR-NEXT:    sw s11, 100(a0)
; RV64I-FP-SR-NEXT:    sw s10, 96(a0)
; RV64I-FP-SR-NEXT:    sw s9, 92(a0)
; RV64I-FP-SR-NEXT:    sw s8, 88(a0)
; RV64I-FP-SR-NEXT:    sw s7, 84(a0)
; RV64I-FP-SR-NEXT:    sw s6, 80(a0)
; RV64I-FP-SR-NEXT:    sw s5, 76(a0)
; RV64I-FP-SR-NEXT:    sw s4, 72(a0)
; RV64I-FP-SR-NEXT:    sw s3, 68(a0)
; RV64I-FP-SR-NEXT:    sw s2, 64(a0)
; RV64I-FP-SR-NEXT:    sw s1, 60(a0)
; RV64I-FP-SR-NEXT:    sw s0, 56(a0)
; RV64I-FP-SR-NEXT:    sw t6, 52(a0)
; RV64I-FP-SR-NEXT:    sw t5, 48(a0)
; RV64I-FP-SR-NEXT:    sw t4, 44(a0)
; RV64I-FP-SR-NEXT:    sw t3, 40(a0)
; RV64I-FP-SR-NEXT:    sw t2, 36(a0)
; RV64I-FP-SR-NEXT:    sw t1, 32(a0)
; RV64I-FP-SR-NEXT:    sw t0, 28(a0)
; RV64I-FP-SR-NEXT:    sw a7, 24(a0)
; RV64I-FP-SR-NEXT:    sw a6, 20(a0)
; RV64I-FP-SR-NEXT:    sw a5, 16(a0)
; RV64I-FP-SR-NEXT:    sw a4, 12(a0)
; RV64I-FP-SR-NEXT:    ld a1, 8(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    sw a1, 8(a0)
; RV64I-FP-SR-NEXT:    ld a1, 16(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    sw a1, 4(a0)
; RV64I-FP-SR-NEXT:    ld a1, 24(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    sw a1, 0(a0)
; RV64I-FP-SR-NEXT:    addi sp, sp, 32
; RV64I-FP-SR-NEXT:    tail __riscv_restore_12
  %val = load [30 x i32], ptr @var2
  store volatile [30 x i32] %val, ptr @var2
  ret void
}

; Check that floating point callee saved registers are still manually saved and
; restored.

define void @callee_saved_fp() nounwind {
; RV32I-LABEL: callee_saved_fp:
; RV32I:       # %bb.0:
; RV32I-NEXT:    addi sp, sp, -32
; RV32I-NEXT:    sw s1, 28(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s2, 24(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s3, 20(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s4, 16(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s5, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s6, 8(sp) # 4-byte Folded Spill
; RV32I-NEXT:    #APP
; RV32I-NEXT:    #NO_APP
; RV32I-NEXT:    lw s1, 28(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s2, 24(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s3, 20(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s4, 16(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s5, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s6, 8(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 32
; RV32I-NEXT:    ret
;
; RV64I-LABEL: callee_saved_fp:
; RV64I:       # %bb.0:
; RV64I-NEXT:    addi sp, sp, -48
; RV64I-NEXT:    sd s1, 40(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s2, 32(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s3, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s4, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s5, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s6, 0(sp) # 8-byte Folded Spill
; RV64I-NEXT:    #APP
; RV64I-NEXT:    #NO_APP
; RV64I-NEXT:    ld s1, 40(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s2, 32(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s3, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s4, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s5, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s6, 0(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 48
; RV64I-NEXT:    ret
;
; RV32I-SR-LABEL: callee_saved_fp:
; RV32I-SR:       # %bb.0:
; RV32I-SR-NEXT:    call t0, __riscv_save_7
; RV32I-SR-NEXT:    #APP
; RV32I-SR-NEXT:    #NO_APP
; RV32I-SR-NEXT:    tail __riscv_restore_7
;
; RV64I-SR-LABEL: callee_saved_fp:
; RV64I-SR:       # %bb.0:
; RV64I-SR-NEXT:    call t0, __riscv_save_7
; RV64I-SR-NEXT:    #APP
; RV64I-SR-NEXT:    #NO_APP
; RV64I-SR-NEXT:    tail __riscv_restore_7
;
; RV32I-FP-SR-LABEL: callee_saved_fp:
; RV32I-FP-SR:       # %bb.0:
; RV32I-FP-SR-NEXT:    call t0, __riscv_save_7
; RV32I-FP-SR-NEXT:    addi sp, sp, -16
; RV32I-FP-SR-NEXT:    fsw fs0, 12(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    #APP
; RV32I-FP-SR-NEXT:    #NO_APP
; RV32I-FP-SR-NEXT:    flw fs0, 12(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    addi sp, sp, 16
; RV32I-FP-SR-NEXT:    tail __riscv_restore_7
;
; RV64I-FP-SR-LABEL: callee_saved_fp:
; RV64I-FP-SR:       # %bb.0:
; RV64I-FP-SR-NEXT:    call t0, __riscv_save_7
; RV64I-FP-SR-NEXT:    addi sp, sp, -16
; RV64I-FP-SR-NEXT:    fsd fs0, 8(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    #APP
; RV64I-FP-SR-NEXT:    #NO_APP
; RV64I-FP-SR-NEXT:    fld fs0, 8(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    addi sp, sp, 16
; RV64I-FP-SR-NEXT:    tail __riscv_restore_7
  call void asm sideeffect "", "~{f8},~{x9},~{x18},~{x19},~{x20},~{x21},~{x22}"()
  ret void
}

; Check that preserving tail calls is preferred over save/restore

declare i32 @tail_callee(i32 %i)

define i32 @tail_call(i32 %i) nounwind {
; RV32I-LABEL: tail_call:
; RV32I:       # %bb.0: # %entry
; RV32I-NEXT:    addi sp, sp, -32
; RV32I-NEXT:    sw s0, 28(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s1, 24(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s2, 20(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s3, 16(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s4, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lui a1, %hi(var0)
; RV32I-NEXT:    addi a1, a1, %lo(var0)
; RV32I-NEXT:    lw a2, 0(a1)
; RV32I-NEXT:    lw a3, 4(a1)
; RV32I-NEXT:    lw a4, 8(a1)
; RV32I-NEXT:    lw a5, 12(a1)
; RV32I-NEXT:    lw a6, 16(a1)
; RV32I-NEXT:    lw a7, 20(a1)
; RV32I-NEXT:    lw t0, 24(a1)
; RV32I-NEXT:    lw t1, 28(a1)
; RV32I-NEXT:    lw t2, 32(a1)
; RV32I-NEXT:    lw t3, 36(a1)
; RV32I-NEXT:    lw t4, 40(a1)
; RV32I-NEXT:    lw t5, 44(a1)
; RV32I-NEXT:    lw t6, 48(a1)
; RV32I-NEXT:    lw s0, 52(a1)
; RV32I-NEXT:    lw s1, 68(a1)
; RV32I-NEXT:    lw s2, 64(a1)
; RV32I-NEXT:    lw s3, 60(a1)
; RV32I-NEXT:    lw s4, 56(a1)
; RV32I-NEXT:    sw s1, 68(a1)
; RV32I-NEXT:    sw s2, 64(a1)
; RV32I-NEXT:    sw s3, 60(a1)
; RV32I-NEXT:    sw s4, 56(a1)
; RV32I-NEXT:    sw s0, 52(a1)
; RV32I-NEXT:    sw t6, 48(a1)
; RV32I-NEXT:    sw t5, 44(a1)
; RV32I-NEXT:    sw t4, 40(a1)
; RV32I-NEXT:    sw t3, 36(a1)
; RV32I-NEXT:    sw t2, 32(a1)
; RV32I-NEXT:    sw t1, 28(a1)
; RV32I-NEXT:    sw t0, 24(a1)
; RV32I-NEXT:    sw a7, 20(a1)
; RV32I-NEXT:    sw a6, 16(a1)
; RV32I-NEXT:    sw a5, 12(a1)
; RV32I-NEXT:    sw a4, 8(a1)
; RV32I-NEXT:    sw a3, 4(a1)
; RV32I-NEXT:    sw a2, 0(a1)
; RV32I-NEXT:    lw s0, 28(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s1, 24(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s2, 20(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s3, 16(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s4, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 32
; RV32I-NEXT:    tail tail_callee
;
; RV64I-LABEL: tail_call:
; RV64I:       # %bb.0: # %entry
; RV64I-NEXT:    addi sp, sp, -48
; RV64I-NEXT:    sd s0, 40(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s1, 32(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s2, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s3, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s4, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lui a1, %hi(var0)
; RV64I-NEXT:    addi a1, a1, %lo(var0)
; RV64I-NEXT:    lw a2, 0(a1)
; RV64I-NEXT:    lw a3, 4(a1)
; RV64I-NEXT:    lw a4, 8(a1)
; RV64I-NEXT:    lw a5, 12(a1)
; RV64I-NEXT:    lw a6, 16(a1)
; RV64I-NEXT:    lw a7, 20(a1)
; RV64I-NEXT:    lw t0, 24(a1)
; RV64I-NEXT:    lw t1, 28(a1)
; RV64I-NEXT:    lw t2, 32(a1)
; RV64I-NEXT:    lw t3, 36(a1)
; RV64I-NEXT:    lw t4, 40(a1)
; RV64I-NEXT:    lw t5, 44(a1)
; RV64I-NEXT:    lw t6, 48(a1)
; RV64I-NEXT:    lw s0, 52(a1)
; RV64I-NEXT:    lw s1, 68(a1)
; RV64I-NEXT:    lw s2, 64(a1)
; RV64I-NEXT:    lw s3, 60(a1)
; RV64I-NEXT:    lw s4, 56(a1)
; RV64I-NEXT:    sw s1, 68(a1)
; RV64I-NEXT:    sw s2, 64(a1)
; RV64I-NEXT:    sw s3, 60(a1)
; RV64I-NEXT:    sw s4, 56(a1)
; RV64I-NEXT:    sw s0, 52(a1)
; RV64I-NEXT:    sw t6, 48(a1)
; RV64I-NEXT:    sw t5, 44(a1)
; RV64I-NEXT:    sw t4, 40(a1)
; RV64I-NEXT:    sw t3, 36(a1)
; RV64I-NEXT:    sw t2, 32(a1)
; RV64I-NEXT:    sw t1, 28(a1)
; RV64I-NEXT:    sw t0, 24(a1)
; RV64I-NEXT:    sw a7, 20(a1)
; RV64I-NEXT:    sw a6, 16(a1)
; RV64I-NEXT:    sw a5, 12(a1)
; RV64I-NEXT:    sw a4, 8(a1)
; RV64I-NEXT:    sw a3, 4(a1)
; RV64I-NEXT:    sw a2, 0(a1)
; RV64I-NEXT:    ld s0, 40(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s1, 32(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s2, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s3, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s4, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 48
; RV64I-NEXT:    tail tail_callee
;
; RV32I-SR-LABEL: tail_call:
; RV32I-SR:       # %bb.0: # %entry
; RV32I-SR-NEXT:    addi sp, sp, -32
; RV32I-SR-NEXT:    sw s0, 28(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw s1, 24(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw s2, 20(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw s3, 16(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw s4, 12(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    lui a1, %hi(var0)
; RV32I-SR-NEXT:    addi a1, a1, %lo(var0)
; RV32I-SR-NEXT:    lw a2, 0(a1)
; RV32I-SR-NEXT:    lw a3, 4(a1)
; RV32I-SR-NEXT:    lw a4, 8(a1)
; RV32I-SR-NEXT:    lw a5, 12(a1)
; RV32I-SR-NEXT:    lw a6, 16(a1)
; RV32I-SR-NEXT:    lw a7, 20(a1)
; RV32I-SR-NEXT:    lw t0, 24(a1)
; RV32I-SR-NEXT:    lw t1, 28(a1)
; RV32I-SR-NEXT:    lw t2, 32(a1)
; RV32I-SR-NEXT:    lw t3, 36(a1)
; RV32I-SR-NEXT:    lw t4, 40(a1)
; RV32I-SR-NEXT:    lw t5, 44(a1)
; RV32I-SR-NEXT:    lw t6, 48(a1)
; RV32I-SR-NEXT:    lw s0, 52(a1)
; RV32I-SR-NEXT:    lw s1, 68(a1)
; RV32I-SR-NEXT:    lw s2, 64(a1)
; RV32I-SR-NEXT:    lw s3, 60(a1)
; RV32I-SR-NEXT:    lw s4, 56(a1)
; RV32I-SR-NEXT:    sw s1, 68(a1)
; RV32I-SR-NEXT:    sw s2, 64(a1)
; RV32I-SR-NEXT:    sw s3, 60(a1)
; RV32I-SR-NEXT:    sw s4, 56(a1)
; RV32I-SR-NEXT:    sw s0, 52(a1)
; RV32I-SR-NEXT:    sw t6, 48(a1)
; RV32I-SR-NEXT:    sw t5, 44(a1)
; RV32I-SR-NEXT:    sw t4, 40(a1)
; RV32I-SR-NEXT:    sw t3, 36(a1)
; RV32I-SR-NEXT:    sw t2, 32(a1)
; RV32I-SR-NEXT:    sw t1, 28(a1)
; RV32I-SR-NEXT:    sw t0, 24(a1)
; RV32I-SR-NEXT:    sw a7, 20(a1)
; RV32I-SR-NEXT:    sw a6, 16(a1)
; RV32I-SR-NEXT:    sw a5, 12(a1)
; RV32I-SR-NEXT:    sw a4, 8(a1)
; RV32I-SR-NEXT:    sw a3, 4(a1)
; RV32I-SR-NEXT:    sw a2, 0(a1)
; RV32I-SR-NEXT:    lw s0, 28(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw s1, 24(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw s2, 20(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw s3, 16(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw s4, 12(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    addi sp, sp, 32
; RV32I-SR-NEXT:    tail tail_callee
;
; RV64I-SR-LABEL: tail_call:
; RV64I-SR:       # %bb.0: # %entry
; RV64I-SR-NEXT:    addi sp, sp, -48
; RV64I-SR-NEXT:    sd s0, 40(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd s1, 32(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd s2, 24(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd s3, 16(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd s4, 8(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    lui a1, %hi(var0)
; RV64I-SR-NEXT:    addi a1, a1, %lo(var0)
; RV64I-SR-NEXT:    lw a2, 0(a1)
; RV64I-SR-NEXT:    lw a3, 4(a1)
; RV64I-SR-NEXT:    lw a4, 8(a1)
; RV64I-SR-NEXT:    lw a5, 12(a1)
; RV64I-SR-NEXT:    lw a6, 16(a1)
; RV64I-SR-NEXT:    lw a7, 20(a1)
; RV64I-SR-NEXT:    lw t0, 24(a1)
; RV64I-SR-NEXT:    lw t1, 28(a1)
; RV64I-SR-NEXT:    lw t2, 32(a1)
; RV64I-SR-NEXT:    lw t3, 36(a1)
; RV64I-SR-NEXT:    lw t4, 40(a1)
; RV64I-SR-NEXT:    lw t5, 44(a1)
; RV64I-SR-NEXT:    lw t6, 48(a1)
; RV64I-SR-NEXT:    lw s0, 52(a1)
; RV64I-SR-NEXT:    lw s1, 68(a1)
; RV64I-SR-NEXT:    lw s2, 64(a1)
; RV64I-SR-NEXT:    lw s3, 60(a1)
; RV64I-SR-NEXT:    lw s4, 56(a1)
; RV64I-SR-NEXT:    sw s1, 68(a1)
; RV64I-SR-NEXT:    sw s2, 64(a1)
; RV64I-SR-NEXT:    sw s3, 60(a1)
; RV64I-SR-NEXT:    sw s4, 56(a1)
; RV64I-SR-NEXT:    sw s0, 52(a1)
; RV64I-SR-NEXT:    sw t6, 48(a1)
; RV64I-SR-NEXT:    sw t5, 44(a1)
; RV64I-SR-NEXT:    sw t4, 40(a1)
; RV64I-SR-NEXT:    sw t3, 36(a1)
; RV64I-SR-NEXT:    sw t2, 32(a1)
; RV64I-SR-NEXT:    sw t1, 28(a1)
; RV64I-SR-NEXT:    sw t0, 24(a1)
; RV64I-SR-NEXT:    sw a7, 20(a1)
; RV64I-SR-NEXT:    sw a6, 16(a1)
; RV64I-SR-NEXT:    sw a5, 12(a1)
; RV64I-SR-NEXT:    sw a4, 8(a1)
; RV64I-SR-NEXT:    sw a3, 4(a1)
; RV64I-SR-NEXT:    sw a2, 0(a1)
; RV64I-SR-NEXT:    ld s0, 40(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld s1, 32(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld s2, 24(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld s3, 16(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld s4, 8(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    addi sp, sp, 48
; RV64I-SR-NEXT:    tail tail_callee
;
; RV32I-FP-SR-LABEL: tail_call:
; RV32I-FP-SR:       # %bb.0: # %entry
; RV32I-FP-SR-NEXT:    addi sp, sp, -32
; RV32I-FP-SR-NEXT:    sw s0, 28(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw s1, 24(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw s2, 20(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw s3, 16(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw s4, 12(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    lui a1, %hi(var0)
; RV32I-FP-SR-NEXT:    addi a1, a1, %lo(var0)
; RV32I-FP-SR-NEXT:    lw a2, 0(a1)
; RV32I-FP-SR-NEXT:    lw a3, 4(a1)
; RV32I-FP-SR-NEXT:    lw a4, 8(a1)
; RV32I-FP-SR-NEXT:    lw a5, 12(a1)
; RV32I-FP-SR-NEXT:    lw a6, 16(a1)
; RV32I-FP-SR-NEXT:    lw a7, 20(a1)
; RV32I-FP-SR-NEXT:    lw t0, 24(a1)
; RV32I-FP-SR-NEXT:    lw t1, 28(a1)
; RV32I-FP-SR-NEXT:    lw t2, 32(a1)
; RV32I-FP-SR-NEXT:    lw t3, 36(a1)
; RV32I-FP-SR-NEXT:    lw t4, 40(a1)
; RV32I-FP-SR-NEXT:    lw t5, 44(a1)
; RV32I-FP-SR-NEXT:    lw t6, 48(a1)
; RV32I-FP-SR-NEXT:    lw s0, 52(a1)
; RV32I-FP-SR-NEXT:    lw s1, 68(a1)
; RV32I-FP-SR-NEXT:    lw s2, 64(a1)
; RV32I-FP-SR-NEXT:    lw s3, 60(a1)
; RV32I-FP-SR-NEXT:    lw s4, 56(a1)
; RV32I-FP-SR-NEXT:    sw s1, 68(a1)
; RV32I-FP-SR-NEXT:    sw s2, 64(a1)
; RV32I-FP-SR-NEXT:    sw s3, 60(a1)
; RV32I-FP-SR-NEXT:    sw s4, 56(a1)
; RV32I-FP-SR-NEXT:    sw s0, 52(a1)
; RV32I-FP-SR-NEXT:    sw t6, 48(a1)
; RV32I-FP-SR-NEXT:    sw t5, 44(a1)
; RV32I-FP-SR-NEXT:    sw t4, 40(a1)
; RV32I-FP-SR-NEXT:    sw t3, 36(a1)
; RV32I-FP-SR-NEXT:    sw t2, 32(a1)
; RV32I-FP-SR-NEXT:    sw t1, 28(a1)
; RV32I-FP-SR-NEXT:    sw t0, 24(a1)
; RV32I-FP-SR-NEXT:    sw a7, 20(a1)
; RV32I-FP-SR-NEXT:    sw a6, 16(a1)
; RV32I-FP-SR-NEXT:    sw a5, 12(a1)
; RV32I-FP-SR-NEXT:    sw a4, 8(a1)
; RV32I-FP-SR-NEXT:    sw a3, 4(a1)
; RV32I-FP-SR-NEXT:    sw a2, 0(a1)
; RV32I-FP-SR-NEXT:    lw s0, 28(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw s1, 24(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw s2, 20(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw s3, 16(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw s4, 12(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    addi sp, sp, 32
; RV32I-FP-SR-NEXT:    tail tail_callee
;
; RV64I-FP-SR-LABEL: tail_call:
; RV64I-FP-SR:       # %bb.0: # %entry
; RV64I-FP-SR-NEXT:    addi sp, sp, -48
; RV64I-FP-SR-NEXT:    sd s0, 40(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd s1, 32(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd s2, 24(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd s3, 16(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd s4, 8(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    lui a1, %hi(var0)
; RV64I-FP-SR-NEXT:    addi a1, a1, %lo(var0)
; RV64I-FP-SR-NEXT:    lw a2, 0(a1)
; RV64I-FP-SR-NEXT:    lw a3, 4(a1)
; RV64I-FP-SR-NEXT:    lw a4, 8(a1)
; RV64I-FP-SR-NEXT:    lw a5, 12(a1)
; RV64I-FP-SR-NEXT:    lw a6, 16(a1)
; RV64I-FP-SR-NEXT:    lw a7, 20(a1)
; RV64I-FP-SR-NEXT:    lw t0, 24(a1)
; RV64I-FP-SR-NEXT:    lw t1, 28(a1)
; RV64I-FP-SR-NEXT:    lw t2, 32(a1)
; RV64I-FP-SR-NEXT:    lw t3, 36(a1)
; RV64I-FP-SR-NEXT:    lw t4, 40(a1)
; RV64I-FP-SR-NEXT:    lw t5, 44(a1)
; RV64I-FP-SR-NEXT:    lw t6, 48(a1)
; RV64I-FP-SR-NEXT:    lw s0, 52(a1)
; RV64I-FP-SR-NEXT:    lw s1, 68(a1)
; RV64I-FP-SR-NEXT:    lw s2, 64(a1)
; RV64I-FP-SR-NEXT:    lw s3, 60(a1)
; RV64I-FP-SR-NEXT:    lw s4, 56(a1)
; RV64I-FP-SR-NEXT:    sw s1, 68(a1)
; RV64I-FP-SR-NEXT:    sw s2, 64(a1)
; RV64I-FP-SR-NEXT:    sw s3, 60(a1)
; RV64I-FP-SR-NEXT:    sw s4, 56(a1)
; RV64I-FP-SR-NEXT:    sw s0, 52(a1)
; RV64I-FP-SR-NEXT:    sw t6, 48(a1)
; RV64I-FP-SR-NEXT:    sw t5, 44(a1)
; RV64I-FP-SR-NEXT:    sw t4, 40(a1)
; RV64I-FP-SR-NEXT:    sw t3, 36(a1)
; RV64I-FP-SR-NEXT:    sw t2, 32(a1)
; RV64I-FP-SR-NEXT:    sw t1, 28(a1)
; RV64I-FP-SR-NEXT:    sw t0, 24(a1)
; RV64I-FP-SR-NEXT:    sw a7, 20(a1)
; RV64I-FP-SR-NEXT:    sw a6, 16(a1)
; RV64I-FP-SR-NEXT:    sw a5, 12(a1)
; RV64I-FP-SR-NEXT:    sw a4, 8(a1)
; RV64I-FP-SR-NEXT:    sw a3, 4(a1)
; RV64I-FP-SR-NEXT:    sw a2, 0(a1)
; RV64I-FP-SR-NEXT:    ld s0, 40(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld s1, 32(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld s2, 24(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld s3, 16(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld s4, 8(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    addi sp, sp, 48
; RV64I-FP-SR-NEXT:    tail tail_callee
entry:
  %val = load [18 x i32], ptr @var0
  store volatile [18 x i32] %val, ptr @var0
  %r = tail call i32 @tail_callee(i32 %i)
  ret i32 %r
}

; Check that functions with varargs do not use save/restore code

declare void @llvm.va_start(ptr)
declare void @llvm.va_end(ptr)

define i32 @varargs(ptr %fmt, ...) nounwind {
; RV32I-LABEL: varargs:
; RV32I:       # %bb.0:
; RV32I-NEXT:    addi sp, sp, -48
; RV32I-NEXT:    mv a0, a1
; RV32I-NEXT:    sw a7, 44(sp)
; RV32I-NEXT:    sw a6, 40(sp)
; RV32I-NEXT:    sw a5, 36(sp)
; RV32I-NEXT:    sw a4, 32(sp)
; RV32I-NEXT:    sw a3, 28(sp)
; RV32I-NEXT:    sw a2, 24(sp)
; RV32I-NEXT:    sw a1, 20(sp)
; RV32I-NEXT:    addi a1, sp, 24
; RV32I-NEXT:    sw a1, 12(sp)
; RV32I-NEXT:    addi sp, sp, 48
; RV32I-NEXT:    ret
;
; RV64I-LABEL: varargs:
; RV64I:       # %bb.0:
; RV64I-NEXT:    addi sp, sp, -80
; RV64I-NEXT:    sd a7, 72(sp)
; RV64I-NEXT:    sd a6, 64(sp)
; RV64I-NEXT:    sd a5, 56(sp)
; RV64I-NEXT:    sd a4, 48(sp)
; RV64I-NEXT:    sd a3, 40(sp)
; RV64I-NEXT:    addi a0, sp, 24
; RV64I-NEXT:    sd a0, 8(sp)
; RV64I-NEXT:    lwu a0, 12(sp)
; RV64I-NEXT:    lwu a3, 8(sp)
; RV64I-NEXT:    sd a2, 32(sp)
; RV64I-NEXT:    sd a1, 24(sp)
; RV64I-NEXT:    slli a0, a0, 32
; RV64I-NEXT:    or a0, a0, a3
; RV64I-NEXT:    addi a1, a0, 4
; RV64I-NEXT:    sw a1, 8(sp)
; RV64I-NEXT:    srli a1, a1, 32
; RV64I-NEXT:    sw a1, 12(sp)
; RV64I-NEXT:    lw a0, 0(a0)
; RV64I-NEXT:    addi sp, sp, 80
; RV64I-NEXT:    ret
;
; RV32I-SR-LABEL: varargs:
; RV32I-SR:       # %bb.0:
; RV32I-SR-NEXT:    addi sp, sp, -48
; RV32I-SR-NEXT:    mv a0, a1
; RV32I-SR-NEXT:    sw a7, 44(sp)
; RV32I-SR-NEXT:    sw a6, 40(sp)
; RV32I-SR-NEXT:    sw a5, 36(sp)
; RV32I-SR-NEXT:    sw a4, 32(sp)
; RV32I-SR-NEXT:    sw a3, 28(sp)
; RV32I-SR-NEXT:    sw a2, 24(sp)
; RV32I-SR-NEXT:    sw a1, 20(sp)
; RV32I-SR-NEXT:    addi a1, sp, 24
; RV32I-SR-NEXT:    sw a1, 12(sp)
; RV32I-SR-NEXT:    addi sp, sp, 48
; RV32I-SR-NEXT:    ret
;
; RV64I-SR-LABEL: varargs:
; RV64I-SR:       # %bb.0:
; RV64I-SR-NEXT:    addi sp, sp, -80
; RV64I-SR-NEXT:    sd a7, 72(sp)
; RV64I-SR-NEXT:    sd a6, 64(sp)
; RV64I-SR-NEXT:    sd a5, 56(sp)
; RV64I-SR-NEXT:    sd a4, 48(sp)
; RV64I-SR-NEXT:    sd a3, 40(sp)
; RV64I-SR-NEXT:    addi a0, sp, 24
; RV64I-SR-NEXT:    sd a0, 8(sp)
; RV64I-SR-NEXT:    lwu a0, 12(sp)
; RV64I-SR-NEXT:    lwu a3, 8(sp)
; RV64I-SR-NEXT:    sd a2, 32(sp)
; RV64I-SR-NEXT:    sd a1, 24(sp)
; RV64I-SR-NEXT:    slli a0, a0, 32
; RV64I-SR-NEXT:    or a0, a0, a3
; RV64I-SR-NEXT:    addi a1, a0, 4
; RV64I-SR-NEXT:    sw a1, 8(sp)
; RV64I-SR-NEXT:    srli a1, a1, 32
; RV64I-SR-NEXT:    sw a1, 12(sp)
; RV64I-SR-NEXT:    lw a0, 0(a0)
; RV64I-SR-NEXT:    addi sp, sp, 80
; RV64I-SR-NEXT:    ret
;
; RV32I-FP-SR-LABEL: varargs:
; RV32I-FP-SR:       # %bb.0:
; RV32I-FP-SR-NEXT:    addi sp, sp, -48
; RV32I-FP-SR-NEXT:    mv a0, a1
; RV32I-FP-SR-NEXT:    sw a7, 44(sp)
; RV32I-FP-SR-NEXT:    sw a6, 40(sp)
; RV32I-FP-SR-NEXT:    sw a5, 36(sp)
; RV32I-FP-SR-NEXT:    sw a4, 32(sp)
; RV32I-FP-SR-NEXT:    sw a3, 28(sp)
; RV32I-FP-SR-NEXT:    sw a2, 24(sp)
; RV32I-FP-SR-NEXT:    sw a1, 20(sp)
; RV32I-FP-SR-NEXT:    addi a1, sp, 24
; RV32I-FP-SR-NEXT:    sw a1, 12(sp)
; RV32I-FP-SR-NEXT:    addi sp, sp, 48
; RV32I-FP-SR-NEXT:    ret
;
; RV64I-FP-SR-LABEL: varargs:
; RV64I-FP-SR:       # %bb.0:
; RV64I-FP-SR-NEXT:    addi sp, sp, -80
; RV64I-FP-SR-NEXT:    sd a7, 72(sp)
; RV64I-FP-SR-NEXT:    sd a6, 64(sp)
; RV64I-FP-SR-NEXT:    sd a5, 56(sp)
; RV64I-FP-SR-NEXT:    sd a4, 48(sp)
; RV64I-FP-SR-NEXT:    sd a3, 40(sp)
; RV64I-FP-SR-NEXT:    addi a0, sp, 24
; RV64I-FP-SR-NEXT:    sd a0, 8(sp)
; RV64I-FP-SR-NEXT:    lwu a0, 12(sp)
; RV64I-FP-SR-NEXT:    lwu a3, 8(sp)
; RV64I-FP-SR-NEXT:    sd a2, 32(sp)
; RV64I-FP-SR-NEXT:    sd a1, 24(sp)
; RV64I-FP-SR-NEXT:    slli a0, a0, 32
; RV64I-FP-SR-NEXT:    or a0, a0, a3
; RV64I-FP-SR-NEXT:    addi a1, a0, 4
; RV64I-FP-SR-NEXT:    sw a1, 8(sp)
; RV64I-FP-SR-NEXT:    srli a1, a1, 32
; RV64I-FP-SR-NEXT:    sw a1, 12(sp)
; RV64I-FP-SR-NEXT:    lw a0, 0(a0)
; RV64I-FP-SR-NEXT:    addi sp, sp, 80
; RV64I-FP-SR-NEXT:    ret
  %va = alloca ptr, align 4
  call void @llvm.va_start(ptr %va)
  %argp.cur = load ptr, ptr %va, align 4
  %argp.next = getelementptr inbounds i8, ptr %argp.cur, i32 4
  store ptr %argp.next, ptr %va, align 4
  %1 = load i32, ptr %argp.cur, align 4
  call void @llvm.va_end(ptr %va)
  ret i32 %1
}

define void @many_args(i32, i32, i32, i32, i32, i32, i32, i32, i32) nounwind {
; RV32I-LABEL: many_args:
; RV32I:       # %bb.0: # %entry
; RV32I-NEXT:    addi sp, sp, -16
; RV32I-NEXT:    sw s0, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s1, 8(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s2, 4(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s3, 0(sp) # 4-byte Folded Spill
; RV32I-NEXT:    lui a0, %hi(var0)
; RV32I-NEXT:    addi a0, a0, %lo(var0)
; RV32I-NEXT:    lw a1, 0(a0)
; RV32I-NEXT:    lw a2, 4(a0)
; RV32I-NEXT:    lw a3, 8(a0)
; RV32I-NEXT:    lw a4, 12(a0)
; RV32I-NEXT:    lw a5, 16(a0)
; RV32I-NEXT:    lw a6, 20(a0)
; RV32I-NEXT:    lw a7, 24(a0)
; RV32I-NEXT:    lw t0, 28(a0)
; RV32I-NEXT:    lw t1, 32(a0)
; RV32I-NEXT:    lw t2, 36(a0)
; RV32I-NEXT:    lw t3, 40(a0)
; RV32I-NEXT:    lw t4, 44(a0)
; RV32I-NEXT:    lw t5, 48(a0)
; RV32I-NEXT:    lw t6, 52(a0)
; RV32I-NEXT:    lw s0, 68(a0)
; RV32I-NEXT:    lw s1, 64(a0)
; RV32I-NEXT:    lw s2, 60(a0)
; RV32I-NEXT:    lw s3, 56(a0)
; RV32I-NEXT:    sw s0, 68(a0)
; RV32I-NEXT:    sw s1, 64(a0)
; RV32I-NEXT:    sw s2, 60(a0)
; RV32I-NEXT:    sw s3, 56(a0)
; RV32I-NEXT:    sw t6, 52(a0)
; RV32I-NEXT:    sw t5, 48(a0)
; RV32I-NEXT:    sw t4, 44(a0)
; RV32I-NEXT:    sw t3, 40(a0)
; RV32I-NEXT:    sw t2, 36(a0)
; RV32I-NEXT:    sw t1, 32(a0)
; RV32I-NEXT:    sw t0, 28(a0)
; RV32I-NEXT:    sw a7, 24(a0)
; RV32I-NEXT:    sw a6, 20(a0)
; RV32I-NEXT:    sw a5, 16(a0)
; RV32I-NEXT:    sw a4, 12(a0)
; RV32I-NEXT:    sw a3, 8(a0)
; RV32I-NEXT:    sw a2, 4(a0)
; RV32I-NEXT:    sw a1, 0(a0)
; RV32I-NEXT:    lw s0, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s1, 8(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s2, 4(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s3, 0(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 16
; RV32I-NEXT:    ret
;
; RV64I-LABEL: many_args:
; RV64I:       # %bb.0: # %entry
; RV64I-NEXT:    addi sp, sp, -32
; RV64I-NEXT:    sd s0, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s1, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s2, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s3, 0(sp) # 8-byte Folded Spill
; RV64I-NEXT:    lui a0, %hi(var0)
; RV64I-NEXT:    addi a0, a0, %lo(var0)
; RV64I-NEXT:    lw a1, 0(a0)
; RV64I-NEXT:    lw a2, 4(a0)
; RV64I-NEXT:    lw a3, 8(a0)
; RV64I-NEXT:    lw a4, 12(a0)
; RV64I-NEXT:    lw a5, 16(a0)
; RV64I-NEXT:    lw a6, 20(a0)
; RV64I-NEXT:    lw a7, 24(a0)
; RV64I-NEXT:    lw t0, 28(a0)
; RV64I-NEXT:    lw t1, 32(a0)
; RV64I-NEXT:    lw t2, 36(a0)
; RV64I-NEXT:    lw t3, 40(a0)
; RV64I-NEXT:    lw t4, 44(a0)
; RV64I-NEXT:    lw t5, 48(a0)
; RV64I-NEXT:    lw t6, 52(a0)
; RV64I-NEXT:    lw s0, 68(a0)
; RV64I-NEXT:    lw s1, 64(a0)
; RV64I-NEXT:    lw s2, 60(a0)
; RV64I-NEXT:    lw s3, 56(a0)
; RV64I-NEXT:    sw s0, 68(a0)
; RV64I-NEXT:    sw s1, 64(a0)
; RV64I-NEXT:    sw s2, 60(a0)
; RV64I-NEXT:    sw s3, 56(a0)
; RV64I-NEXT:    sw t6, 52(a0)
; RV64I-NEXT:    sw t5, 48(a0)
; RV64I-NEXT:    sw t4, 44(a0)
; RV64I-NEXT:    sw t3, 40(a0)
; RV64I-NEXT:    sw t2, 36(a0)
; RV64I-NEXT:    sw t1, 32(a0)
; RV64I-NEXT:    sw t0, 28(a0)
; RV64I-NEXT:    sw a7, 24(a0)
; RV64I-NEXT:    sw a6, 20(a0)
; RV64I-NEXT:    sw a5, 16(a0)
; RV64I-NEXT:    sw a4, 12(a0)
; RV64I-NEXT:    sw a3, 8(a0)
; RV64I-NEXT:    sw a2, 4(a0)
; RV64I-NEXT:    sw a1, 0(a0)
; RV64I-NEXT:    ld s0, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s1, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s2, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s3, 0(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 32
; RV64I-NEXT:    ret
;
; RV32I-SR-LABEL: many_args:
; RV32I-SR:       # %bb.0: # %entry
; RV32I-SR-NEXT:    call t0, __riscv_save_4
; RV32I-SR-NEXT:    lui a0, %hi(var0)
; RV32I-SR-NEXT:    addi a0, a0, %lo(var0)
; RV32I-SR-NEXT:    lw a1, 0(a0)
; RV32I-SR-NEXT:    lw a2, 4(a0)
; RV32I-SR-NEXT:    lw a3, 8(a0)
; RV32I-SR-NEXT:    lw a4, 12(a0)
; RV32I-SR-NEXT:    lw a5, 16(a0)
; RV32I-SR-NEXT:    lw a6, 20(a0)
; RV32I-SR-NEXT:    lw a7, 24(a0)
; RV32I-SR-NEXT:    lw t0, 28(a0)
; RV32I-SR-NEXT:    lw t1, 32(a0)
; RV32I-SR-NEXT:    lw t2, 36(a0)
; RV32I-SR-NEXT:    lw t3, 40(a0)
; RV32I-SR-NEXT:    lw t4, 44(a0)
; RV32I-SR-NEXT:    lw t5, 48(a0)
; RV32I-SR-NEXT:    lw t6, 52(a0)
; RV32I-SR-NEXT:    lw s0, 68(a0)
; RV32I-SR-NEXT:    lw s1, 64(a0)
; RV32I-SR-NEXT:    lw s2, 60(a0)
; RV32I-SR-NEXT:    lw s3, 56(a0)
; RV32I-SR-NEXT:    sw s0, 68(a0)
; RV32I-SR-NEXT:    sw s1, 64(a0)
; RV32I-SR-NEXT:    sw s2, 60(a0)
; RV32I-SR-NEXT:    sw s3, 56(a0)
; RV32I-SR-NEXT:    sw t6, 52(a0)
; RV32I-SR-NEXT:    sw t5, 48(a0)
; RV32I-SR-NEXT:    sw t4, 44(a0)
; RV32I-SR-NEXT:    sw t3, 40(a0)
; RV32I-SR-NEXT:    sw t2, 36(a0)
; RV32I-SR-NEXT:    sw t1, 32(a0)
; RV32I-SR-NEXT:    sw t0, 28(a0)
; RV32I-SR-NEXT:    sw a7, 24(a0)
; RV32I-SR-NEXT:    sw a6, 20(a0)
; RV32I-SR-NEXT:    sw a5, 16(a0)
; RV32I-SR-NEXT:    sw a4, 12(a0)
; RV32I-SR-NEXT:    sw a3, 8(a0)
; RV32I-SR-NEXT:    sw a2, 4(a0)
; RV32I-SR-NEXT:    sw a1, 0(a0)
; RV32I-SR-NEXT:    tail __riscv_restore_4
;
; RV64I-SR-LABEL: many_args:
; RV64I-SR:       # %bb.0: # %entry
; RV64I-SR-NEXT:    call t0, __riscv_save_4
; RV64I-SR-NEXT:    lui a0, %hi(var0)
; RV64I-SR-NEXT:    addi a0, a0, %lo(var0)
; RV64I-SR-NEXT:    lw a1, 0(a0)
; RV64I-SR-NEXT:    lw a2, 4(a0)
; RV64I-SR-NEXT:    lw a3, 8(a0)
; RV64I-SR-NEXT:    lw a4, 12(a0)
; RV64I-SR-NEXT:    lw a5, 16(a0)
; RV64I-SR-NEXT:    lw a6, 20(a0)
; RV64I-SR-NEXT:    lw a7, 24(a0)
; RV64I-SR-NEXT:    lw t0, 28(a0)
; RV64I-SR-NEXT:    lw t1, 32(a0)
; RV64I-SR-NEXT:    lw t2, 36(a0)
; RV64I-SR-NEXT:    lw t3, 40(a0)
; RV64I-SR-NEXT:    lw t4, 44(a0)
; RV64I-SR-NEXT:    lw t5, 48(a0)
; RV64I-SR-NEXT:    lw t6, 52(a0)
; RV64I-SR-NEXT:    lw s0, 68(a0)
; RV64I-SR-NEXT:    lw s1, 64(a0)
; RV64I-SR-NEXT:    lw s2, 60(a0)
; RV64I-SR-NEXT:    lw s3, 56(a0)
; RV64I-SR-NEXT:    sw s0, 68(a0)
; RV64I-SR-NEXT:    sw s1, 64(a0)
; RV64I-SR-NEXT:    sw s2, 60(a0)
; RV64I-SR-NEXT:    sw s3, 56(a0)
; RV64I-SR-NEXT:    sw t6, 52(a0)
; RV64I-SR-NEXT:    sw t5, 48(a0)
; RV64I-SR-NEXT:    sw t4, 44(a0)
; RV64I-SR-NEXT:    sw t3, 40(a0)
; RV64I-SR-NEXT:    sw t2, 36(a0)
; RV64I-SR-NEXT:    sw t1, 32(a0)
; RV64I-SR-NEXT:    sw t0, 28(a0)
; RV64I-SR-NEXT:    sw a7, 24(a0)
; RV64I-SR-NEXT:    sw a6, 20(a0)
; RV64I-SR-NEXT:    sw a5, 16(a0)
; RV64I-SR-NEXT:    sw a4, 12(a0)
; RV64I-SR-NEXT:    sw a3, 8(a0)
; RV64I-SR-NEXT:    sw a2, 4(a0)
; RV64I-SR-NEXT:    sw a1, 0(a0)
; RV64I-SR-NEXT:    tail __riscv_restore_4
;
; RV32I-FP-SR-LABEL: many_args:
; RV32I-FP-SR:       # %bb.0: # %entry
; RV32I-FP-SR-NEXT:    call t0, __riscv_save_4
; RV32I-FP-SR-NEXT:    lui a0, %hi(var0)
; RV32I-FP-SR-NEXT:    addi a0, a0, %lo(var0)
; RV32I-FP-SR-NEXT:    lw a1, 0(a0)
; RV32I-FP-SR-NEXT:    lw a2, 4(a0)
; RV32I-FP-SR-NEXT:    lw a3, 8(a0)
; RV32I-FP-SR-NEXT:    lw a4, 12(a0)
; RV32I-FP-SR-NEXT:    lw a5, 16(a0)
; RV32I-FP-SR-NEXT:    lw a6, 20(a0)
; RV32I-FP-SR-NEXT:    lw a7, 24(a0)
; RV32I-FP-SR-NEXT:    lw t0, 28(a0)
; RV32I-FP-SR-NEXT:    lw t1, 32(a0)
; RV32I-FP-SR-NEXT:    lw t2, 36(a0)
; RV32I-FP-SR-NEXT:    lw t3, 40(a0)
; RV32I-FP-SR-NEXT:    lw t4, 44(a0)
; RV32I-FP-SR-NEXT:    lw t5, 48(a0)
; RV32I-FP-SR-NEXT:    lw t6, 52(a0)
; RV32I-FP-SR-NEXT:    lw s0, 68(a0)
; RV32I-FP-SR-NEXT:    lw s1, 64(a0)
; RV32I-FP-SR-NEXT:    lw s2, 60(a0)
; RV32I-FP-SR-NEXT:    lw s3, 56(a0)
; RV32I-FP-SR-NEXT:    sw s0, 68(a0)
; RV32I-FP-SR-NEXT:    sw s1, 64(a0)
; RV32I-FP-SR-NEXT:    sw s2, 60(a0)
; RV32I-FP-SR-NEXT:    sw s3, 56(a0)
; RV32I-FP-SR-NEXT:    sw t6, 52(a0)
; RV32I-FP-SR-NEXT:    sw t5, 48(a0)
; RV32I-FP-SR-NEXT:    sw t4, 44(a0)
; RV32I-FP-SR-NEXT:    sw t3, 40(a0)
; RV32I-FP-SR-NEXT:    sw t2, 36(a0)
; RV32I-FP-SR-NEXT:    sw t1, 32(a0)
; RV32I-FP-SR-NEXT:    sw t0, 28(a0)
; RV32I-FP-SR-NEXT:    sw a7, 24(a0)
; RV32I-FP-SR-NEXT:    sw a6, 20(a0)
; RV32I-FP-SR-NEXT:    sw a5, 16(a0)
; RV32I-FP-SR-NEXT:    sw a4, 12(a0)
; RV32I-FP-SR-NEXT:    sw a3, 8(a0)
; RV32I-FP-SR-NEXT:    sw a2, 4(a0)
; RV32I-FP-SR-NEXT:    sw a1, 0(a0)
; RV32I-FP-SR-NEXT:    tail __riscv_restore_4
;
; RV64I-FP-SR-LABEL: many_args:
; RV64I-FP-SR:       # %bb.0: # %entry
; RV64I-FP-SR-NEXT:    call t0, __riscv_save_4
; RV64I-FP-SR-NEXT:    lui a0, %hi(var0)
; RV64I-FP-SR-NEXT:    addi a0, a0, %lo(var0)
; RV64I-FP-SR-NEXT:    lw a1, 0(a0)
; RV64I-FP-SR-NEXT:    lw a2, 4(a0)
; RV64I-FP-SR-NEXT:    lw a3, 8(a0)
; RV64I-FP-SR-NEXT:    lw a4, 12(a0)
; RV64I-FP-SR-NEXT:    lw a5, 16(a0)
; RV64I-FP-SR-NEXT:    lw a6, 20(a0)
; RV64I-FP-SR-NEXT:    lw a7, 24(a0)
; RV64I-FP-SR-NEXT:    lw t0, 28(a0)
; RV64I-FP-SR-NEXT:    lw t1, 32(a0)
; RV64I-FP-SR-NEXT:    lw t2, 36(a0)
; RV64I-FP-SR-NEXT:    lw t3, 40(a0)
; RV64I-FP-SR-NEXT:    lw t4, 44(a0)
; RV64I-FP-SR-NEXT:    lw t5, 48(a0)
; RV64I-FP-SR-NEXT:    lw t6, 52(a0)
; RV64I-FP-SR-NEXT:    lw s0, 68(a0)
; RV64I-FP-SR-NEXT:    lw s1, 64(a0)
; RV64I-FP-SR-NEXT:    lw s2, 60(a0)
; RV64I-FP-SR-NEXT:    lw s3, 56(a0)
; RV64I-FP-SR-NEXT:    sw s0, 68(a0)
; RV64I-FP-SR-NEXT:    sw s1, 64(a0)
; RV64I-FP-SR-NEXT:    sw s2, 60(a0)
; RV64I-FP-SR-NEXT:    sw s3, 56(a0)
; RV64I-FP-SR-NEXT:    sw t6, 52(a0)
; RV64I-FP-SR-NEXT:    sw t5, 48(a0)
; RV64I-FP-SR-NEXT:    sw t4, 44(a0)
; RV64I-FP-SR-NEXT:    sw t3, 40(a0)
; RV64I-FP-SR-NEXT:    sw t2, 36(a0)
; RV64I-FP-SR-NEXT:    sw t1, 32(a0)
; RV64I-FP-SR-NEXT:    sw t0, 28(a0)
; RV64I-FP-SR-NEXT:    sw a7, 24(a0)
; RV64I-FP-SR-NEXT:    sw a6, 20(a0)
; RV64I-FP-SR-NEXT:    sw a5, 16(a0)
; RV64I-FP-SR-NEXT:    sw a4, 12(a0)
; RV64I-FP-SR-NEXT:    sw a3, 8(a0)
; RV64I-FP-SR-NEXT:    sw a2, 4(a0)
; RV64I-FP-SR-NEXT:    sw a1, 0(a0)
; RV64I-FP-SR-NEXT:    tail __riscv_restore_4
entry:
  %val = load [18 x i32], ptr @var0
  store volatile [18 x i32] %val, ptr @var0
  ret void
}

; Check that dynamic allocation calculations remain correct

declare ptr @llvm.stacksave()
declare void @llvm.stackrestore(ptr)
declare void @notdead(ptr)

define void @alloca(i32 %n) nounwind {
; RV32I-LABEL: alloca:
; RV32I:       # %bb.0:
; RV32I-NEXT:    addi sp, sp, -16
; RV32I-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s0, 8(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw s1, 4(sp) # 4-byte Folded Spill
; RV32I-NEXT:    addi s0, sp, 16
; RV32I-NEXT:    mv s1, sp
; RV32I-NEXT:    addi a0, a0, 15
; RV32I-NEXT:    andi a0, a0, -16
; RV32I-NEXT:    sub a0, sp, a0
; RV32I-NEXT:    mv sp, a0
; RV32I-NEXT:    call notdead
; RV32I-NEXT:    mv sp, s1
; RV32I-NEXT:    addi sp, s0, -16
; RV32I-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s0, 8(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw s1, 4(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 16
; RV32I-NEXT:    ret
;
; RV64I-LABEL: alloca:
; RV64I:       # %bb.0:
; RV64I-NEXT:    addi sp, sp, -32
; RV64I-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    addi s0, sp, 32
; RV64I-NEXT:    mv s1, sp
; RV64I-NEXT:    slli a0, a0, 32
; RV64I-NEXT:    srli a0, a0, 32
; RV64I-NEXT:    addi a0, a0, 15
; RV64I-NEXT:    andi a0, a0, -16
; RV64I-NEXT:    sub a0, sp, a0
; RV64I-NEXT:    mv sp, a0
; RV64I-NEXT:    call notdead
; RV64I-NEXT:    mv sp, s1
; RV64I-NEXT:    addi sp, s0, -32
; RV64I-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 32
; RV64I-NEXT:    ret
;
; RV32I-SR-LABEL: alloca:
; RV32I-SR:       # %bb.0:
; RV32I-SR-NEXT:    call t0, __riscv_save_2
; RV32I-SR-NEXT:    addi s0, sp, 16
; RV32I-SR-NEXT:    mv s1, sp
; RV32I-SR-NEXT:    addi a0, a0, 15
; RV32I-SR-NEXT:    andi a0, a0, -16
; RV32I-SR-NEXT:    sub a0, sp, a0
; RV32I-SR-NEXT:    mv sp, a0
; RV32I-SR-NEXT:    call notdead
; RV32I-SR-NEXT:    mv sp, s1
; RV32I-SR-NEXT:    addi sp, s0, -16
; RV32I-SR-NEXT:    tail __riscv_restore_2
;
; RV64I-SR-LABEL: alloca:
; RV64I-SR:       # %bb.0:
; RV64I-SR-NEXT:    call t0, __riscv_save_2
; RV64I-SR-NEXT:    addi s0, sp, 32
; RV64I-SR-NEXT:    mv s1, sp
; RV64I-SR-NEXT:    slli a0, a0, 32
; RV64I-SR-NEXT:    srli a0, a0, 32
; RV64I-SR-NEXT:    addi a0, a0, 15
; RV64I-SR-NEXT:    andi a0, a0, -16
; RV64I-SR-NEXT:    sub a0, sp, a0
; RV64I-SR-NEXT:    mv sp, a0
; RV64I-SR-NEXT:    call notdead
; RV64I-SR-NEXT:    mv sp, s1
; RV64I-SR-NEXT:    addi sp, s0, -32
; RV64I-SR-NEXT:    tail __riscv_restore_2
;
; RV32I-FP-SR-LABEL: alloca:
; RV32I-FP-SR:       # %bb.0:
; RV32I-FP-SR-NEXT:    call t0, __riscv_save_2
; RV32I-FP-SR-NEXT:    addi s0, sp, 16
; RV32I-FP-SR-NEXT:    mv s1, sp
; RV32I-FP-SR-NEXT:    addi a0, a0, 15
; RV32I-FP-SR-NEXT:    andi a0, a0, -16
; RV32I-FP-SR-NEXT:    sub a0, sp, a0
; RV32I-FP-SR-NEXT:    mv sp, a0
; RV32I-FP-SR-NEXT:    call notdead
; RV32I-FP-SR-NEXT:    mv sp, s1
; RV32I-FP-SR-NEXT:    addi sp, s0, -16
; RV32I-FP-SR-NEXT:    tail __riscv_restore_2
;
; RV64I-FP-SR-LABEL: alloca:
; RV64I-FP-SR:       # %bb.0:
; RV64I-FP-SR-NEXT:    call t0, __riscv_save_2
; RV64I-FP-SR-NEXT:    addi s0, sp, 32
; RV64I-FP-SR-NEXT:    mv s1, sp
; RV64I-FP-SR-NEXT:    slli a0, a0, 32
; RV64I-FP-SR-NEXT:    srli a0, a0, 32
; RV64I-FP-SR-NEXT:    addi a0, a0, 15
; RV64I-FP-SR-NEXT:    andi a0, a0, -16
; RV64I-FP-SR-NEXT:    sub a0, sp, a0
; RV64I-FP-SR-NEXT:    mv sp, a0
; RV64I-FP-SR-NEXT:    call notdead
; RV64I-FP-SR-NEXT:    mv sp, s1
; RV64I-FP-SR-NEXT:    addi sp, s0, -32
; RV64I-FP-SR-NEXT:    tail __riscv_restore_2
  %sp = call ptr @llvm.stacksave()
  %addr = alloca i8, i32 %n
  call void @notdead(ptr %addr)
  call void @llvm.stackrestore(ptr %sp)
  ret void
}

; Check that functions with interrupt attribute do not use save/restore code

declare i32 @foo(...)
define void @interrupt() nounwind "interrupt"="supervisor" {
; RV32I-LABEL: interrupt:
; RV32I:       # %bb.0:
; RV32I-NEXT:    addi sp, sp, -64
; RV32I-NEXT:    sw ra, 60(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw t0, 56(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw t1, 52(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw t2, 48(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a0, 44(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a1, 40(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a2, 36(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a3, 32(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a4, 28(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a5, 24(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a6, 20(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw a7, 16(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw t3, 12(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw t4, 8(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw t5, 4(sp) # 4-byte Folded Spill
; RV32I-NEXT:    sw t6, 0(sp) # 4-byte Folded Spill
; RV32I-NEXT:    call foo
; RV32I-NEXT:    lw ra, 60(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw t0, 56(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw t1, 52(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw t2, 48(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a0, 44(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a1, 40(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a2, 36(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a3, 32(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a4, 28(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a5, 24(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a6, 20(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw a7, 16(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw t3, 12(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw t4, 8(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw t5, 4(sp) # 4-byte Folded Reload
; RV32I-NEXT:    lw t6, 0(sp) # 4-byte Folded Reload
; RV32I-NEXT:    addi sp, sp, 64
; RV32I-NEXT:    sret
;
; RV64I-LABEL: interrupt:
; RV64I:       # %bb.0:
; RV64I-NEXT:    addi sp, sp, -128
; RV64I-NEXT:    sd ra, 120(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd t0, 112(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd t1, 104(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd t2, 96(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a0, 88(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a1, 80(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a2, 72(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a3, 64(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a4, 56(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a5, 48(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a6, 40(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd a7, 32(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd t3, 24(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd t4, 16(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd t5, 8(sp) # 8-byte Folded Spill
; RV64I-NEXT:    sd t6, 0(sp) # 8-byte Folded Spill
; RV64I-NEXT:    call foo
; RV64I-NEXT:    ld ra, 120(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld t0, 112(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld t1, 104(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld t2, 96(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a0, 88(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a1, 80(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a2, 72(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a3, 64(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a4, 56(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a5, 48(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a6, 40(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld a7, 32(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld t3, 24(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld t4, 16(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld t5, 8(sp) # 8-byte Folded Reload
; RV64I-NEXT:    ld t6, 0(sp) # 8-byte Folded Reload
; RV64I-NEXT:    addi sp, sp, 128
; RV64I-NEXT:    sret
;
; RV32I-SR-LABEL: interrupt:
; RV32I-SR:       # %bb.0:
; RV32I-SR-NEXT:    addi sp, sp, -64
; RV32I-SR-NEXT:    sw ra, 60(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw t0, 56(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw t1, 52(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw t2, 48(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a0, 44(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a1, 40(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a2, 36(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a3, 32(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a4, 28(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a5, 24(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a6, 20(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw a7, 16(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw t3, 12(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw t4, 8(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw t5, 4(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    sw t6, 0(sp) # 4-byte Folded Spill
; RV32I-SR-NEXT:    call foo
; RV32I-SR-NEXT:    lw ra, 60(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw t0, 56(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw t1, 52(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw t2, 48(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a0, 44(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a1, 40(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a2, 36(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a3, 32(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a4, 28(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a5, 24(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a6, 20(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw a7, 16(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw t3, 12(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw t4, 8(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw t5, 4(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    lw t6, 0(sp) # 4-byte Folded Reload
; RV32I-SR-NEXT:    addi sp, sp, 64
; RV32I-SR-NEXT:    sret
;
; RV64I-SR-LABEL: interrupt:
; RV64I-SR:       # %bb.0:
; RV64I-SR-NEXT:    addi sp, sp, -128
; RV64I-SR-NEXT:    sd ra, 120(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd t0, 112(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd t1, 104(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd t2, 96(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a0, 88(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a1, 80(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a2, 72(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a3, 64(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a4, 56(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a5, 48(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a6, 40(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd a7, 32(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd t3, 24(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd t4, 16(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd t5, 8(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    sd t6, 0(sp) # 8-byte Folded Spill
; RV64I-SR-NEXT:    call foo
; RV64I-SR-NEXT:    ld ra, 120(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld t0, 112(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld t1, 104(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld t2, 96(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a0, 88(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a1, 80(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a2, 72(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a3, 64(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a4, 56(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a5, 48(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a6, 40(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld a7, 32(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld t3, 24(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld t4, 16(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld t5, 8(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    ld t6, 0(sp) # 8-byte Folded Reload
; RV64I-SR-NEXT:    addi sp, sp, 128
; RV64I-SR-NEXT:    sret
;
; RV32I-FP-SR-LABEL: interrupt:
; RV32I-FP-SR:       # %bb.0:
; RV32I-FP-SR-NEXT:    addi sp, sp, -144
; RV32I-FP-SR-NEXT:    sw ra, 140(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw t0, 136(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw t1, 132(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw t2, 128(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a0, 124(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a1, 120(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a2, 116(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a3, 112(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a4, 108(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a5, 104(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a6, 100(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw a7, 96(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw t3, 92(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw t4, 88(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw t5, 84(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    sw t6, 80(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft0, 76(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft1, 72(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft2, 68(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft3, 64(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft4, 60(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft5, 56(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft6, 52(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft7, 48(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa0, 44(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa1, 40(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa2, 36(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa3, 32(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa4, 28(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa5, 24(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa6, 20(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw fa7, 16(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft8, 12(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft9, 8(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft10, 4(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    fsw ft11, 0(sp) # 4-byte Folded Spill
; RV32I-FP-SR-NEXT:    call foo
; RV32I-FP-SR-NEXT:    lw ra, 140(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw t0, 136(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw t1, 132(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw t2, 128(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a0, 124(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a1, 120(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a2, 116(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a3, 112(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a4, 108(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a5, 104(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a6, 100(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw a7, 96(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw t3, 92(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw t4, 88(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw t5, 84(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    lw t6, 80(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft0, 76(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft1, 72(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft2, 68(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft3, 64(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft4, 60(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft5, 56(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft6, 52(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft7, 48(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa0, 44(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa1, 40(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa2, 36(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa3, 32(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa4, 28(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa5, 24(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa6, 20(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw fa7, 16(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft8, 12(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft9, 8(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft10, 4(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    flw ft11, 0(sp) # 4-byte Folded Reload
; RV32I-FP-SR-NEXT:    addi sp, sp, 144
; RV32I-FP-SR-NEXT:    sret
;
; RV64I-FP-SR-LABEL: interrupt:
; RV64I-FP-SR:       # %bb.0:
; RV64I-FP-SR-NEXT:    addi sp, sp, -288
; RV64I-FP-SR-NEXT:    sd ra, 280(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd t0, 272(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd t1, 264(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd t2, 256(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a0, 248(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a1, 240(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a2, 232(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a3, 224(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a4, 216(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a5, 208(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a6, 200(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd a7, 192(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd t3, 184(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd t4, 176(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd t5, 168(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    sd t6, 160(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft0, 152(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft1, 144(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft2, 136(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft3, 128(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft4, 120(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft5, 112(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft6, 104(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft7, 96(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa0, 88(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa1, 80(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa2, 72(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa3, 64(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa4, 56(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa5, 48(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa6, 40(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd fa7, 32(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft8, 24(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft9, 16(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft10, 8(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    fsd ft11, 0(sp) # 8-byte Folded Spill
; RV64I-FP-SR-NEXT:    call foo
; RV64I-FP-SR-NEXT:    ld ra, 280(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld t0, 272(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld t1, 264(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld t2, 256(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a0, 248(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a1, 240(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a2, 232(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a3, 224(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a4, 216(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a5, 208(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a6, 200(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld a7, 192(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld t3, 184(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld t4, 176(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld t5, 168(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    ld t6, 160(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft0, 152(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft1, 144(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft2, 136(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft3, 128(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft4, 120(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft5, 112(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft6, 104(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft7, 96(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa0, 88(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa1, 80(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa2, 72(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa3, 64(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa4, 56(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa5, 48(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa6, 40(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld fa7, 32(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft8, 24(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft9, 16(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft10, 8(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    fld ft11, 0(sp) # 8-byte Folded Reload
; RV64I-FP-SR-NEXT:    addi sp, sp, 288
; RV64I-FP-SR-NEXT:    sret
  %call = call i32 @foo()
  ret void
}
