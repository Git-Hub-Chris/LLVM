; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -riscv-codegenprepare -S -mtriple=riscv32 -mattr=-f,-d          < %s | FileCheck %s --check-prefixes=RV32I
; RUN: opt -riscv-codegenprepare -S -mtriple=riscv32 -mattr=+f,-d          < %s | FileCheck %s --check-prefixes=RV32IF
; RUN: opt -riscv-codegenprepare -S -mtriple=riscv32 -mattr=+zfinx,-zdinx  < %s | FileCheck %s --check-prefixes=RV32IZFINX

; RUN: opt -riscv-codegenprepare -S -mtriple=riscv32 -mattr=+d             < %s | FileCheck %s --check-prefixes=RV32ID
; RUN: opt -riscv-codegenprepare -S -mtriple=riscv32 -mattr=+zdinx         < %s | FileCheck %s --check-prefixes=RV32IZDINX

define i1 @test_is_nan(double %arg) {
; RV32I-LABEL: define i1 @test_is_nan(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 3)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_is_nan(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 3)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_is_nan(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 3)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_is_nan(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp uno double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_is_nan(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp uno double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp uno double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_not_is_nan(double %arg) {
; RV32I-LABEL: define i1 @test_not_is_nan(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 1020)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_not_is_nan(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 1020)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_not_is_nan(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 1020)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_not_is_nan(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp ord double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_not_is_nan(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp ord double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp ord double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_is_zero(double %arg) {
; RV32I-LABEL: define i1 @test_is_zero(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 96)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_is_zero(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 96)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_is_zero(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 96)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_is_zero(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp oeq double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_is_zero(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp oeq double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp oeq double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_not_is_zero(double %arg) {
; RV32I-LABEL: define i1 @test_not_is_zero(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 927)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_not_is_zero(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 927)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_not_is_zero(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 927)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_not_is_zero(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp une double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_not_is_zero(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp une double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp une double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_is_zero_or_nan(double %arg) {
; RV32I-LABEL: define i1 @test_is_zero_or_nan(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 99)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_is_zero_or_nan(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 99)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_is_zero_or_nan(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 99)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_is_zero_or_nan(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp ueq double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_is_zero_or_nan(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp ueq double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp ueq double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_not_is_zero_or_nan(double %arg) {
; RV32I-LABEL: define i1 @test_not_is_zero_or_nan(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 924)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_not_is_zero_or_nan(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 924)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_not_is_zero_or_nan(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 924)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_not_is_zero_or_nan(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp one double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_not_is_zero_or_nan(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp one double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp one double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_is_possubnormal_or_posnormal_or_posinf(double %arg) {
; RV32I-LABEL: define i1 @test_is_possubnormal_or_posnormal_or_posinf(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 896)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_is_possubnormal_or_posnormal_or_posinf(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 896)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_is_possubnormal_or_posnormal_or_posinf(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 896)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_is_possubnormal_or_posnormal_or_posinf(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp ogt double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_is_possubnormal_or_posnormal_or_posinf(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp ogt double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp ogt double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_is_positive_or_negzero(double %arg) {
; RV32I-LABEL: define i1 @test_is_positive_or_negzero(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 992)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_is_positive_or_negzero(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 992)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_is_positive_or_negzero(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 992)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_is_positive_or_negzero(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp oge double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_is_positive_or_negzero(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp oge double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp oge double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_is_negsubnormal_or_negnormal_or_neginf(double %arg) {
; RV32I-LABEL: define i1 @test_is_negsubnormal_or_negnormal_or_neginf(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 28)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_is_negsubnormal_or_negnormal_or_neginf(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 28)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_is_negsubnormal_or_negnormal_or_neginf(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 28)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_is_negsubnormal_or_negnormal_or_neginf(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp olt double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_is_negsubnormal_or_negnormal_or_neginf(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp olt double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp olt double %arg, 0.000000e+00
  ret i1 %1
}

define i1 @test_is_negative_or_poszero(double %arg) {
; RV32I-LABEL: define i1 @test_is_negative_or_poszero(
; RV32I-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32I-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 124)
; RV32I-NEXT:    ret i1 [[TMP1]]
;
; RV32IF-LABEL: define i1 @test_is_negative_or_poszero(
; RV32IF-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IF-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 124)
; RV32IF-NEXT:    ret i1 [[TMP1]]
;
; RV32IZFINX-LABEL: define i1 @test_is_negative_or_poszero(
; RV32IZFINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZFINX-NEXT:    [[TMP1:%.*]] = call i1 @llvm.is.fpclass.f64(double [[ARG]], i32 124)
; RV32IZFINX-NEXT:    ret i1 [[TMP1]]
;
; RV32ID-LABEL: define i1 @test_is_negative_or_poszero(
; RV32ID-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32ID-NEXT:    [[TMP1:%.*]] = fcmp ole double [[ARG]], 0.000000e+00
; RV32ID-NEXT:    ret i1 [[TMP1]]
;
; RV32IZDINX-LABEL: define i1 @test_is_negative_or_poszero(
; RV32IZDINX-SAME: double [[ARG:%.*]]) #[[ATTR0]] {
; RV32IZDINX-NEXT:    [[TMP1:%.*]] = fcmp ole double [[ARG]], 0.000000e+00
; RV32IZDINX-NEXT:    ret i1 [[TMP1]]
;
  %1 = fcmp ole double %arg, 0.000000e+00
  ret i1 %1
}
