; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+zalrsc -verify-machineinstrs < %s | FileCheck %s
; RUN: llc -mtriple=riscv64 -mattr=+zalrsc -verify-machineinstrs < %s | FileCheck %s

define i32 @lr_w_none(ptr %src) {
; CHECK-LABEL: lr_w_none:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lr.w a0, (a0)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.lr.w(ptr %src, i32 0)
  ret i32 %ret
}

define i32 @lr_w_aq(ptr %src) {
; CHECK-LABEL: lr_w_aq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lr.w.aq a0, (a0)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.lr.w(ptr %src, i32 1)
  ret i32 %ret
}

define i32 @lr_w_rl(ptr %src) {
; CHECK-LABEL: lr_w_rl:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lr.w.rl a0, (a0)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.lr.w(ptr %src, i32 2)
  ret i32 %ret
}

define i32 @lr_w_aq_rl(ptr %src) {
; CHECK-LABEL: lr_w_aq_rl:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lr.w.aqrl a0, (a0)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.lr.w(ptr %src, i32 3)
  ret i32 %ret
}

define i32 @sc_w_none(i32 %v, ptr %src) {
; CHECK-LABEL: sc_w_none:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sc.w a0, a0, (a1)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.sc.w(i32 %v, ptr %src, i32 0)
  ret i32 %ret
}

define i32 @sc_w_aq(i32 %v, ptr %src) {
; CHECK-LABEL: sc_w_aq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sc.w.aq a0, a0, (a1)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.sc.w(i32 %v, ptr %src, i32 1)
  ret i32 %ret
}

define i32 @sc_w_rl(i32 %v, ptr %src) {
; CHECK-LABEL: sc_w_rl:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sc.w.rl a0, a0, (a1)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.sc.w(i32 %v, ptr %src, i32 2)
  ret i32 %ret
}

define i32 @sc_w_aq_rl(i32 %v, ptr %src) {
; CHECK-LABEL: sc_w_aq_rl:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sc.w.aqrl a0, a0, (a1)
; CHECK-NEXT:    ret
  %ret = call i32 @llvm.riscv.sc.w(i32 %v, ptr %src, i32 3)
  ret i32 %ret
}
