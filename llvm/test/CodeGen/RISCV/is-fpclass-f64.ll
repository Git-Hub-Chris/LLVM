; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=riscv32 -mattr=+d -verify-machineinstrs -target-abi=ilp32d < %s \
; RUN:   | FileCheck -check-prefixes=RV32IFD %s
; RUN: llc -mtriple=riscv64 -mattr=+d -verify-machineinstrs -target-abi=lp64d < %s \
; RUN:   | FileCheck -check-prefixes=RV64IFD %s
; RUN: llc -mtriple=riscv32 -mattr=+zdinx -verify-machineinstrs -target-abi=ilp32 < %s \
; RUN:   | FileCheck -check-prefix=RV32IZFINXZDINX %s
; RUN: llc -mtriple=riscv64 -mattr=+zdinx -verify-machineinstrs -target-abi=lp64 < %s\
; RUN:   | FileCheck -check-prefix=RV64IZFINXZDINX %s
; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s | FileCheck -check-prefix=RV32I %s
; RUN: llc -mtriple=riscv64 -verify-machineinstrs < %s | FileCheck -check-prefix=RV64I %s


declare i1 @llvm.is.fpclass.f64(double, i32)

define i1 @isnan_d_fpclass(double %x) {
; RV32IFD-LABEL: isnan_d_fpclass:
; RV32IFD:       # %bb.0:
; RV32IFD-NEXT:    fclass.d a0, fa0
; RV32IFD-NEXT:    andi a0, a0, 768
; RV32IFD-NEXT:    snez a0, a0
; RV32IFD-NEXT:    ret
;
; RV64IFD-LABEL: isnan_d_fpclass:
; RV64IFD:       # %bb.0:
; RV64IFD-NEXT:    fclass.d a0, fa0
; RV64IFD-NEXT:    andi a0, a0, 768
; RV64IFD-NEXT:    snez a0, a0
; RV64IFD-NEXT:    ret
;
; RV32IZFINXZDINX-LABEL: isnan_d_fpclass:
; RV32IZFINXZDINX:       # %bb.0:
; RV32IZFINXZDINX-NEXT:    fclass.d a0, a0
; RV32IZFINXZDINX-NEXT:    andi a0, a0, 768
; RV32IZFINXZDINX-NEXT:    snez a0, a0
; RV32IZFINXZDINX-NEXT:    ret
;
; RV64IZFINXZDINX-LABEL: isnan_d_fpclass:
; RV64IZFINXZDINX:       # %bb.0:
; RV64IZFINXZDINX-NEXT:    fclass.d a0, a0
; RV64IZFINXZDINX-NEXT:    andi a0, a0, 768
; RV64IZFINXZDINX-NEXT:    snez a0, a0
; RV64IZFINXZDINX-NEXT:    ret
;
; RV32I-LABEL: isnan_d_fpclass:
; RV32I:       # %bb.0:
; RV32I-NEXT:    slli a1, a1, 1
; RV32I-NEXT:    srli a1, a1, 1
; RV32I-NEXT:    lui a2, 524032
; RV32I-NEXT:    beq a1, a2, .LBB0_2
; RV32I-NEXT:  # %bb.1:
; RV32I-NEXT:    slt a0, a2, a1
; RV32I-NEXT:    ret
; RV32I-NEXT:  .LBB0_2:
; RV32I-NEXT:    snez a0, a0
; RV32I-NEXT:    ret
;
; RV64I-LABEL: isnan_d_fpclass:
; RV64I:       # %bb.0:
; RV64I-NEXT:    slli a0, a0, 1
; RV64I-NEXT:    li a1, 2047
; RV64I-NEXT:    srli a0, a0, 1
; RV64I-NEXT:    slli a1, a1, 52
; RV64I-NEXT:    slt a0, a1, a0
; RV64I-NEXT:    ret
  %1 = call i1 @llvm.is.fpclass.f64(double %x, i32 3)  ; nan
  ret i1 %1
}
