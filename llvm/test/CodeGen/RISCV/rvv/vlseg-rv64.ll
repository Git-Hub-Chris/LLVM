; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+zve64d,+f,+d,+zfh,+zvfh,+experimental-zvfbfmin \
; RUN:     -verify-machineinstrs < %s | FileCheck %s

declare riscv_mf8x2 @llvm.riscv.vlseg2.riscv_mf8x2(riscv_mf8x2, ptr, i64, i64)
declare riscv_mf8x2 @llvm.riscv.vlseg2.mask.riscv_mf8x2.nxv1i1(riscv_mf8x2, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlseg2_nxv1i8_riscv_mf8x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1i8_riscv_mf8x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x2 @llvm.riscv.vlseg2.riscv_mf8x2(riscv_mf8x2 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x2(riscv_mf8x2 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlseg2_mask_nxv1i8_riscv_mf8x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1i8_riscv_mf8x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x2 @llvm.riscv.vlseg2.mask.riscv_mf8x2.nxv1i1(riscv_mf8x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x2(riscv_mf8x2 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare riscv_mf4x2 @llvm.riscv.vlseg2.riscv_mf4x2(riscv_mf4x2, ptr, i64, i64)
declare riscv_mf4x2 @llvm.riscv.vlseg2.mask.riscv_mf4x2.nxv2i1(riscv_mf4x2, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlseg2_nxv2i8_riscv_mf4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2i8_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.riscv_mf4x2(riscv_mf4x2 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlseg2_mask_nxv2i8_riscv_mf4x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2i8_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.mask.riscv_mf4x2.nxv2i1(riscv_mf4x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare riscv_mf2x2 @llvm.riscv.vlseg2.riscv_mf2x2(riscv_mf2x2, ptr, i64, i64)
declare riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv4i1(riscv_mf2x2, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlseg2_nxv4i8_riscv_mf2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4i8_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.riscv_mf2x2(riscv_mf2x2 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlseg2_mask_nxv4i8_riscv_mf2x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4i8_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv4i1(riscv_mf2x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2, ptr, i64, i64)
declare riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv8i1(riscv_m1x2, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlseg2_nxv8i8_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv8i8_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlseg2_mask_nxv8i8_riscv_m1x2(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv8i8_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg2e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv8i1(riscv_m1x2 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2, ptr, i64, i64)
declare riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv16i1(riscv_m2x2, ptr, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i8> @test_vlseg2_nxv16i8_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv16i8_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vlseg2e8.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.vector.extract.nxv16i8.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 16 x i8> %1
}

define <vscale x 16 x i8> @test_vlseg2_mask_nxv16i8_riscv_m2x2(ptr %base, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv16i8_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vlseg2e8.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv16i1(riscv_m2x2 undef, ptr %base, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.vector.extract.nxv16i8.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 16 x i8> %1
}

declare riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2, ptr, i64, i64)
declare riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv32i1(riscv_m4x2, ptr, <vscale x 32 x i1>, i64, i64, i64)

define <vscale x 32 x i8> @test_vlseg2_nxv32i8_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv32i8_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m4, ta, ma
; CHECK-NEXT:    vlseg2e8.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 32 x i8> @llvm.vector.extract.nxv32i8.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 32 x i8> %1
}

define <vscale x 32 x i8> @test_vlseg2_mask_nxv32i8_riscv_m4x2(ptr %base, i64 %vl, <vscale x 32 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv32i8_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m4, ta, ma
; CHECK-NEXT:    vlseg2e8.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv32i1(riscv_m4x2 undef, ptr %base, <vscale x 32 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 32 x i8> @llvm.vector.extract.nxv32i8.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 32 x i8> %1
}

declare riscv_mf8x3 @llvm.riscv.vlseg3.riscv_mf8x3(riscv_mf8x3, ptr, i64, i64)
declare riscv_mf8x3 @llvm.riscv.vlseg3.mask.riscv_mf8x3.nxv1i1(riscv_mf8x3, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlseg3_nxv1i8_riscv_mf8x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1i8_riscv_mf8x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x3 @llvm.riscv.vlseg3.riscv_mf8x3(riscv_mf8x3 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x3(riscv_mf8x3 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlseg3_mask_nxv1i8_riscv_mf8x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1i8_riscv_mf8x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x3 @llvm.riscv.vlseg3.mask.riscv_mf8x3.nxv1i1(riscv_mf8x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x3(riscv_mf8x3 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare riscv_mf4x3 @llvm.riscv.vlseg3.riscv_mf4x3(riscv_mf4x3, ptr, i64, i64)
declare riscv_mf4x3 @llvm.riscv.vlseg3.mask.riscv_mf4x3.nxv2i1(riscv_mf4x3, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlseg3_nxv2i8_riscv_mf4x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2i8_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.riscv_mf4x3(riscv_mf4x3 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlseg3_mask_nxv2i8_riscv_mf4x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2i8_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.mask.riscv_mf4x3.nxv2i1(riscv_mf4x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare riscv_mf2x3 @llvm.riscv.vlseg3.riscv_mf2x3(riscv_mf2x3, ptr, i64, i64)
declare riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv4i1(riscv_mf2x3, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlseg3_nxv4i8_riscv_mf2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv4i8_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.riscv_mf2x3(riscv_mf2x3 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlseg3_mask_nxv4i8_riscv_mf2x3(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv4i8_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv4i1(riscv_mf2x3 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3, ptr, i64, i64)
declare riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv8i1(riscv_m1x3, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlseg3_nxv8i8_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv8i8_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlseg3_mask_nxv8i8_riscv_m1x3(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv8i8_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg3e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv8i1(riscv_m1x3 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3, ptr, i64, i64)
declare riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv16i1(riscv_m2x3, ptr, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i8> @test_vlseg3_nxv16i8_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv16i8_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vlseg3e8.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.vector.extract.nxv16i8.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 16 x i8> %1
}

define <vscale x 16 x i8> @test_vlseg3_mask_nxv16i8_riscv_m2x3(ptr %base, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv16i8_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vlseg3e8.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv16i1(riscv_m2x3 undef, ptr %base, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.vector.extract.nxv16i8.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 16 x i8> %1
}

declare riscv_mf8x4 @llvm.riscv.vlseg4.riscv_mf8x4(riscv_mf8x4, ptr, i64, i64)
declare riscv_mf8x4 @llvm.riscv.vlseg4.mask.riscv_mf8x4.nxv1i1(riscv_mf8x4, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlseg4_nxv1i8_riscv_mf8x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1i8_riscv_mf8x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x4 @llvm.riscv.vlseg4.riscv_mf8x4(riscv_mf8x4 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x4(riscv_mf8x4 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlseg4_mask_nxv1i8_riscv_mf8x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1i8_riscv_mf8x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x4 @llvm.riscv.vlseg4.mask.riscv_mf8x4.nxv1i1(riscv_mf8x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x4(riscv_mf8x4 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare riscv_mf4x4 @llvm.riscv.vlseg4.riscv_mf4x4(riscv_mf4x4, ptr, i64, i64)
declare riscv_mf4x4 @llvm.riscv.vlseg4.mask.riscv_mf4x4.nxv2i1(riscv_mf4x4, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlseg4_nxv2i8_riscv_mf4x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2i8_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.riscv_mf4x4(riscv_mf4x4 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlseg4_mask_nxv2i8_riscv_mf4x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2i8_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.mask.riscv_mf4x4.nxv2i1(riscv_mf4x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare riscv_mf2x4 @llvm.riscv.vlseg4.riscv_mf2x4(riscv_mf2x4, ptr, i64, i64)
declare riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv4i1(riscv_mf2x4, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlseg4_nxv4i8_riscv_mf2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv4i8_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.riscv_mf2x4(riscv_mf2x4 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlseg4_mask_nxv4i8_riscv_mf2x4(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv4i8_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv4i1(riscv_mf2x4 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4, ptr, i64, i64)
declare riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv8i1(riscv_m1x4, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlseg4_nxv8i8_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv8i8_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlseg4_mask_nxv8i8_riscv_m1x4(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv8i8_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg4e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv8i1(riscv_m1x4 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4, ptr, i64, i64)
declare riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv16i1(riscv_m2x4, ptr, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i8> @test_vlseg4_nxv16i8_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv16i8_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vlseg4e8.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.vector.extract.nxv16i8.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 16 x i8> %1
}

define <vscale x 16 x i8> @test_vlseg4_mask_nxv16i8_riscv_m2x4(ptr %base, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv16i8_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vlseg4e8.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv16i1(riscv_m2x4 undef, ptr %base, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.vector.extract.nxv16i8.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 16 x i8> %1
}

declare riscv_mf8x5 @llvm.riscv.vlseg5.riscv_mf8x5(riscv_mf8x5, ptr, i64, i64)
declare riscv_mf8x5 @llvm.riscv.vlseg5.mask.riscv_mf8x5.nxv1i1(riscv_mf8x5, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlseg5_nxv1i8_riscv_mf8x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1i8_riscv_mf8x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x5 @llvm.riscv.vlseg5.riscv_mf8x5(riscv_mf8x5 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x5(riscv_mf8x5 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlseg5_mask_nxv1i8_riscv_mf8x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1i8_riscv_mf8x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x5 @llvm.riscv.vlseg5.mask.riscv_mf8x5.nxv1i1(riscv_mf8x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x5(riscv_mf8x5 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare riscv_mf4x5 @llvm.riscv.vlseg5.riscv_mf4x5(riscv_mf4x5, ptr, i64, i64)
declare riscv_mf4x5 @llvm.riscv.vlseg5.mask.riscv_mf4x5.nxv2i1(riscv_mf4x5, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlseg5_nxv2i8_riscv_mf4x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv2i8_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.riscv_mf4x5(riscv_mf4x5 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlseg5_mask_nxv2i8_riscv_mf4x5(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv2i8_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.mask.riscv_mf4x5.nxv2i1(riscv_mf4x5 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare riscv_mf2x5 @llvm.riscv.vlseg5.riscv_mf2x5(riscv_mf2x5, ptr, i64, i64)
declare riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv4i1(riscv_mf2x5, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlseg5_nxv4i8_riscv_mf2x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv4i8_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.riscv_mf2x5(riscv_mf2x5 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlseg5_mask_nxv4i8_riscv_mf2x5(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv4i8_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv4i1(riscv_mf2x5 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5, ptr, i64, i64)
declare riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv8i1(riscv_m1x5, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlseg5_nxv8i8_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv8i8_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlseg5_mask_nxv8i8_riscv_m1x5(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv8i8_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg5e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv8i1(riscv_m1x5 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare riscv_mf8x6 @llvm.riscv.vlseg6.riscv_mf8x6(riscv_mf8x6, ptr, i64, i64)
declare riscv_mf8x6 @llvm.riscv.vlseg6.mask.riscv_mf8x6.nxv1i1(riscv_mf8x6, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlseg6_nxv1i8_riscv_mf8x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1i8_riscv_mf8x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x6 @llvm.riscv.vlseg6.riscv_mf8x6(riscv_mf8x6 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x6(riscv_mf8x6 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlseg6_mask_nxv1i8_riscv_mf8x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1i8_riscv_mf8x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x6 @llvm.riscv.vlseg6.mask.riscv_mf8x6.nxv1i1(riscv_mf8x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x6(riscv_mf8x6 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare riscv_mf4x6 @llvm.riscv.vlseg6.riscv_mf4x6(riscv_mf4x6, ptr, i64, i64)
declare riscv_mf4x6 @llvm.riscv.vlseg6.mask.riscv_mf4x6.nxv2i1(riscv_mf4x6, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlseg6_nxv2i8_riscv_mf4x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv2i8_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.riscv_mf4x6(riscv_mf4x6 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlseg6_mask_nxv2i8_riscv_mf4x6(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv2i8_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.mask.riscv_mf4x6.nxv2i1(riscv_mf4x6 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare riscv_mf2x6 @llvm.riscv.vlseg6.riscv_mf2x6(riscv_mf2x6, ptr, i64, i64)
declare riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv4i1(riscv_mf2x6, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlseg6_nxv4i8_riscv_mf2x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv4i8_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.riscv_mf2x6(riscv_mf2x6 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlseg6_mask_nxv4i8_riscv_mf2x6(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv4i8_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv4i1(riscv_mf2x6 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6, ptr, i64, i64)
declare riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv8i1(riscv_m1x6, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlseg6_nxv8i8_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv8i8_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlseg6_mask_nxv8i8_riscv_m1x6(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv8i8_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg6e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv8i1(riscv_m1x6 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare riscv_mf8x7 @llvm.riscv.vlseg7.riscv_mf8x7(riscv_mf8x7, ptr, i64, i64)
declare riscv_mf8x7 @llvm.riscv.vlseg7.mask.riscv_mf8x7.nxv1i1(riscv_mf8x7, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlseg7_nxv1i8_riscv_mf8x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1i8_riscv_mf8x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x7 @llvm.riscv.vlseg7.riscv_mf8x7(riscv_mf8x7 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x7(riscv_mf8x7 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlseg7_mask_nxv1i8_riscv_mf8x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1i8_riscv_mf8x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x7 @llvm.riscv.vlseg7.mask.riscv_mf8x7.nxv1i1(riscv_mf8x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x7(riscv_mf8x7 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare riscv_mf4x7 @llvm.riscv.vlseg7.riscv_mf4x7(riscv_mf4x7, ptr, i64, i64)
declare riscv_mf4x7 @llvm.riscv.vlseg7.mask.riscv_mf4x7.nxv2i1(riscv_mf4x7, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlseg7_nxv2i8_riscv_mf4x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv2i8_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.riscv_mf4x7(riscv_mf4x7 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlseg7_mask_nxv2i8_riscv_mf4x7(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv2i8_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.mask.riscv_mf4x7.nxv2i1(riscv_mf4x7 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare riscv_mf2x7 @llvm.riscv.vlseg7.riscv_mf2x7(riscv_mf2x7, ptr, i64, i64)
declare riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv4i1(riscv_mf2x7, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlseg7_nxv4i8_riscv_mf2x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv4i8_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.riscv_mf2x7(riscv_mf2x7 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlseg7_mask_nxv4i8_riscv_mf2x7(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv4i8_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv4i1(riscv_mf2x7 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7, ptr, i64, i64)
declare riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv8i1(riscv_m1x7, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlseg7_nxv8i8_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv8i8_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlseg7_mask_nxv8i8_riscv_m1x7(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv8i8_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg7e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv8i1(riscv_m1x7 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare riscv_mf8x8 @llvm.riscv.vlseg8.riscv_mf8x8(riscv_mf8x8, ptr, i64, i64)
declare riscv_mf8x8 @llvm.riscv.vlseg8.mask.riscv_mf8x8.nxv1i1(riscv_mf8x8, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlseg8_nxv1i8_riscv_mf8x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1i8_riscv_mf8x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x8 @llvm.riscv.vlseg8.riscv_mf8x8(riscv_mf8x8 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x8(riscv_mf8x8 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlseg8_mask_nxv1i8_riscv_mf8x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1i8_riscv_mf8x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf8x8 @llvm.riscv.vlseg8.mask.riscv_mf8x8.nxv1i1(riscv_mf8x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.vector.extract.nxv1i8.riscv_mf8x8(riscv_mf8x8 %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare riscv_mf4x8 @llvm.riscv.vlseg8.riscv_mf4x8(riscv_mf4x8, ptr, i64, i64)
declare riscv_mf4x8 @llvm.riscv.vlseg8.mask.riscv_mf4x8.nxv2i1(riscv_mf4x8, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlseg8_nxv2i8_riscv_mf4x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv2i8_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.riscv_mf4x8(riscv_mf4x8 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlseg8_mask_nxv2i8_riscv_mf4x8(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv2i8_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.mask.riscv_mf4x8.nxv2i1(riscv_mf4x8 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.vector.extract.nxv2i8.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare riscv_mf2x8 @llvm.riscv.vlseg8.riscv_mf2x8(riscv_mf2x8, ptr, i64, i64)
declare riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv4i1(riscv_mf2x8, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlseg8_nxv4i8_riscv_mf2x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv4i8_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.riscv_mf2x8(riscv_mf2x8 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlseg8_mask_nxv4i8_riscv_mf2x8(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv4i8_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv4i1(riscv_mf2x8 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.vector.extract.nxv4i8.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8, ptr, i64, i64)
declare riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv8i1(riscv_m1x8, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlseg8_nxv8i8_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv8i8_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlseg8_mask_nxv8i8_riscv_m1x8(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv8i8_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vlseg8e8.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv8i1(riscv_m1x8 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.vector.extract.nxv8i8.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare riscv_mf4x2 @llvm.riscv.vlseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlseg2_nxv1i16_riscv_mf4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1i16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.riscv_mf4x2(riscv_mf4x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlseg2_mask_nxv1i16_riscv_mf4x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1i16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlseg2_nxv2i16_riscv_mf2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2i16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.riscv_mf2x2(riscv_mf2x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlseg2_mask_nxv2i16_riscv_mf2x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2i16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlseg2_nxv4i16_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4i16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlseg2_mask_nxv4i16_riscv_m1x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4i16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i16> @test_vlseg2_nxv8i16_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv8i16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.vector.extract.nxv8i16.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 8 x i16> %1
}

define <vscale x 8 x i16> @test_vlseg2_mask_nxv8i16_riscv_m2x2(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv8i16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.vector.extract.nxv8i16.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 8 x i16> %1
}

declare riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2, ptr, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i16> @test_vlseg2_nxv16i16_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv16i16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 16 x i16> @llvm.vector.extract.nxv16i16.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 16 x i16> %1
}

define <vscale x 16 x i16> @test_vlseg2_mask_nxv16i16_riscv_m4x2(ptr %base, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv16i16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2 undef, ptr %base, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 16 x i16> @llvm.vector.extract.nxv16i16.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 16 x i16> %1
}

declare riscv_mf4x3 @llvm.riscv.vlseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlseg3_nxv1i16_riscv_mf4x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1i16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.riscv_mf4x3(riscv_mf4x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlseg3_mask_nxv1i16_riscv_mf4x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1i16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlseg3_nxv2i16_riscv_mf2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2i16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.riscv_mf2x3(riscv_mf2x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlseg3_mask_nxv2i16_riscv_mf2x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2i16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlseg3_nxv4i16_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv4i16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlseg3_mask_nxv4i16_riscv_m1x3(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv4i16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i16> @test_vlseg3_nxv8i16_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv8i16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.vector.extract.nxv8i16.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 8 x i16> %1
}

define <vscale x 8 x i16> @test_vlseg3_mask_nxv8i16_riscv_m2x3(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv8i16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.vector.extract.nxv8i16.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 8 x i16> %1
}

declare riscv_mf4x4 @llvm.riscv.vlseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlseg4_nxv1i16_riscv_mf4x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1i16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.riscv_mf4x4(riscv_mf4x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlseg4_mask_nxv1i16_riscv_mf4x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1i16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlseg4_nxv2i16_riscv_mf2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2i16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.riscv_mf2x4(riscv_mf2x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlseg4_mask_nxv2i16_riscv_mf2x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2i16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlseg4_nxv4i16_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv4i16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlseg4_mask_nxv4i16_riscv_m1x4(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv4i16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i16> @test_vlseg4_nxv8i16_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv8i16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.vector.extract.nxv8i16.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 8 x i16> %1
}

define <vscale x 8 x i16> @test_vlseg4_mask_nxv8i16_riscv_m2x4(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv8i16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.vector.extract.nxv8i16.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 8 x i16> %1
}

declare riscv_mf4x5 @llvm.riscv.vlseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlseg5_nxv1i16_riscv_mf4x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1i16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.riscv_mf4x5(riscv_mf4x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlseg5_mask_nxv1i16_riscv_mf4x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1i16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlseg5_nxv2i16_riscv_mf2x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv2i16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.riscv_mf2x5(riscv_mf2x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlseg5_mask_nxv2i16_riscv_mf2x5(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv2i16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlseg5_nxv4i16_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv4i16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlseg5_mask_nxv4i16_riscv_m1x5(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv4i16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare riscv_mf4x6 @llvm.riscv.vlseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlseg6_nxv1i16_riscv_mf4x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1i16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.riscv_mf4x6(riscv_mf4x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlseg6_mask_nxv1i16_riscv_mf4x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1i16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlseg6_nxv2i16_riscv_mf2x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv2i16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.riscv_mf2x6(riscv_mf2x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlseg6_mask_nxv2i16_riscv_mf2x6(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv2i16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlseg6_nxv4i16_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv4i16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlseg6_mask_nxv4i16_riscv_m1x6(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv4i16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare riscv_mf4x7 @llvm.riscv.vlseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlseg7_nxv1i16_riscv_mf4x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1i16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.riscv_mf4x7(riscv_mf4x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlseg7_mask_nxv1i16_riscv_mf4x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1i16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlseg7_nxv2i16_riscv_mf2x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv2i16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.riscv_mf2x7(riscv_mf2x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlseg7_mask_nxv2i16_riscv_mf2x7(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv2i16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlseg7_nxv4i16_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv4i16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlseg7_mask_nxv4i16_riscv_m1x7(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv4i16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare riscv_mf4x8 @llvm.riscv.vlseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlseg8_nxv1i16_riscv_mf4x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1i16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.riscv_mf4x8(riscv_mf4x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlseg8_mask_nxv1i16_riscv_mf4x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1i16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.vector.extract.nxv1i16.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlseg8_nxv2i16_riscv_mf2x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv2i16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.riscv_mf2x8(riscv_mf2x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlseg8_mask_nxv2i16_riscv_mf2x8(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv2i16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.vector.extract.nxv2i16.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlseg8_nxv4i16_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv4i16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlseg8_mask_nxv4i16_riscv_m1x8(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv4i16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.vector.extract.nxv4i16.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv1i1(riscv_mf2x2, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlseg2_nxv1i32_riscv_mf2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1i32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.riscv_mf2x2(riscv_mf2x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlseg2_mask_nxv1i32_riscv_mf2x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1i32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv1i1(riscv_mf2x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv2i1(riscv_m1x2, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlseg2_nxv2i32_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2i32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlseg2_mask_nxv2i32_riscv_m1x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2i32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv2i1(riscv_m1x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv4i1(riscv_m2x2, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i32> @test_vlseg2_nxv4i32_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4i32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.vector.extract.nxv4i32.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 4 x i32> %1
}

define <vscale x 4 x i32> @test_vlseg2_mask_nxv4i32_riscv_m2x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4i32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv4i1(riscv_m2x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.vector.extract.nxv4i32.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 4 x i32> %1
}

declare riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv8i1(riscv_m4x2, ptr, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i32> @test_vlseg2_nxv8i32_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv8i32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vlseg2e32.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 8 x i32> @llvm.vector.extract.nxv8i32.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 8 x i32> %1
}

define <vscale x 8 x i32> @test_vlseg2_mask_nxv8i32_riscv_m4x2(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv8i32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vlseg2e32.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv8i1(riscv_m4x2 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 8 x i32> @llvm.vector.extract.nxv8i32.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 8 x i32> %1
}

declare riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv1i1(riscv_mf2x3, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlseg3_nxv1i32_riscv_mf2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1i32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.riscv_mf2x3(riscv_mf2x3 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlseg3_mask_nxv1i32_riscv_mf2x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1i32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv1i1(riscv_mf2x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv2i1(riscv_m1x3, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlseg3_nxv2i32_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2i32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlseg3_mask_nxv2i32_riscv_m1x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2i32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv2i1(riscv_m1x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv4i1(riscv_m2x3, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i32> @test_vlseg3_nxv4i32_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv4i32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.vector.extract.nxv4i32.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 4 x i32> %1
}

define <vscale x 4 x i32> @test_vlseg3_mask_nxv4i32_riscv_m2x3(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv4i32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv4i1(riscv_m2x3 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.vector.extract.nxv4i32.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 4 x i32> %1
}

declare riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv1i1(riscv_mf2x4, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlseg4_nxv1i32_riscv_mf2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1i32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.riscv_mf2x4(riscv_mf2x4 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlseg4_mask_nxv1i32_riscv_mf2x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1i32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv1i1(riscv_mf2x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv2i1(riscv_m1x4, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlseg4_nxv2i32_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2i32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlseg4_mask_nxv2i32_riscv_m1x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2i32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv2i1(riscv_m1x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv4i1(riscv_m2x4, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i32> @test_vlseg4_nxv4i32_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv4i32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.vector.extract.nxv4i32.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 4 x i32> %1
}

define <vscale x 4 x i32> @test_vlseg4_mask_nxv4i32_riscv_m2x4(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv4i32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv4i1(riscv_m2x4 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.vector.extract.nxv4i32.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 4 x i32> %1
}

declare riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv1i1(riscv_mf2x5, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlseg5_nxv1i32_riscv_mf2x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1i32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.riscv_mf2x5(riscv_mf2x5 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlseg5_mask_nxv1i32_riscv_mf2x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1i32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv1i1(riscv_mf2x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv2i1(riscv_m1x5, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlseg5_nxv2i32_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv2i32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlseg5_mask_nxv2i32_riscv_m1x5(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv2i32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv2i1(riscv_m1x5 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv1i1(riscv_mf2x6, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlseg6_nxv1i32_riscv_mf2x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1i32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.riscv_mf2x6(riscv_mf2x6 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlseg6_mask_nxv1i32_riscv_mf2x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1i32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv1i1(riscv_mf2x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv2i1(riscv_m1x6, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlseg6_nxv2i32_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv2i32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlseg6_mask_nxv2i32_riscv_m1x6(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv2i32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv2i1(riscv_m1x6 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv1i1(riscv_mf2x7, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlseg7_nxv1i32_riscv_mf2x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1i32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.riscv_mf2x7(riscv_mf2x7 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlseg7_mask_nxv1i32_riscv_mf2x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1i32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv1i1(riscv_mf2x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv2i1(riscv_m1x7, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlseg7_nxv2i32_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv2i32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlseg7_mask_nxv2i32_riscv_m1x7(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv2i32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv2i1(riscv_m1x7 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv1i1(riscv_mf2x8, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlseg8_nxv1i32_riscv_mf2x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1i32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.riscv_mf2x8(riscv_mf2x8 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlseg8_mask_nxv1i32_riscv_mf2x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1i32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv1i1(riscv_mf2x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.vector.extract.nxv1i32.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv2i1(riscv_m1x8, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlseg8_nxv2i32_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv2i32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlseg8_mask_nxv2i32_riscv_m1x8(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv2i32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv2i1(riscv_m1x8 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.vector.extract.nxv2i32.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv1i1(riscv_m1x2, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlseg2_nxv1i64_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1i64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg2e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlseg2_mask_nxv1i64_riscv_m1x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1i64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg2e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv1i1(riscv_m1x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv2i1(riscv_m2x2, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i64> @test_vlseg2_nxv2i64_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2i64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg2e64.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.vector.extract.nxv2i64.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 2 x i64> %1
}

define <vscale x 2 x i64> @test_vlseg2_mask_nxv2i64_riscv_m2x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2i64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg2e64.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv2i1(riscv_m2x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.vector.extract.nxv2i64.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 2 x i64> %1
}

declare riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv4i1(riscv_m4x2, ptr, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i64> @test_vlseg2_nxv4i64_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4i64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vlseg2e64.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 4 x i64> @llvm.vector.extract.nxv4i64.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 4 x i64> %1
}

define <vscale x 4 x i64> @test_vlseg2_mask_nxv4i64_riscv_m4x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4i64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vlseg2e64.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv4i1(riscv_m4x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 4 x i64> @llvm.vector.extract.nxv4i64.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 4 x i64> %1
}

declare riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv1i1(riscv_m1x3, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlseg3_nxv1i64_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1i64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg3e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlseg3_mask_nxv1i64_riscv_m1x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1i64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg3e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv1i1(riscv_m1x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv2i1(riscv_m2x3, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i64> @test_vlseg3_nxv2i64_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2i64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg3e64.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.vector.extract.nxv2i64.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 2 x i64> %1
}

define <vscale x 2 x i64> @test_vlseg3_mask_nxv2i64_riscv_m2x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2i64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg3e64.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv2i1(riscv_m2x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.vector.extract.nxv2i64.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 2 x i64> %1
}

declare riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv1i1(riscv_m1x4, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlseg4_nxv1i64_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1i64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg4e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlseg4_mask_nxv1i64_riscv_m1x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1i64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg4e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv1i1(riscv_m1x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv2i1(riscv_m2x4, ptr, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i64> @test_vlseg4_nxv2i64_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2i64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg4e64.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.vector.extract.nxv2i64.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 2 x i64> %1
}

define <vscale x 2 x i64> @test_vlseg4_mask_nxv2i64_riscv_m2x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2i64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg4e64.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv2i1(riscv_m2x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.vector.extract.nxv2i64.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 2 x i64> %1
}

declare riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv1i1(riscv_m1x5, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlseg5_nxv1i64_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1i64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg5e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlseg5_mask_nxv1i64_riscv_m1x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1i64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg5e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv1i1(riscv_m1x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv1i1(riscv_m1x6, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlseg6_nxv1i64_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1i64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg6e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlseg6_mask_nxv1i64_riscv_m1x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1i64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg6e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv1i1(riscv_m1x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv1i1(riscv_m1x7, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlseg7_nxv1i64_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1i64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg7e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlseg7_mask_nxv1i64_riscv_m1x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1i64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg7e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv1i1(riscv_m1x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv1i1(riscv_m1x8, ptr, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlseg8_nxv1i64_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1i64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg8e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlseg8_mask_nxv1i64_riscv_m1x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1i64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg8e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv1i1(riscv_m1x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.vector.extract.nxv1i64.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 1 x i64> %1
}


define <vscale x 1 x half> @test_vlseg2_nxv1f16_riscv_mf4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1f16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.riscv_mf4x2(riscv_mf4x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlseg2_mask_nxv1f16_riscv_mf4x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1f16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlseg2_nxv2f16_riscv_mf2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2f16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.riscv_mf2x2(riscv_mf2x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlseg2_mask_nxv2f16_riscv_mf2x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2f16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlseg2_nxv4f16_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4f16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlseg2_mask_nxv4f16_riscv_m1x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4f16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 8 x half> @test_vlseg2_nxv8f16_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv8f16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x half> @llvm.vector.extract.nxv8f16.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 8 x half> %1
}

define <vscale x 8 x half> @test_vlseg2_mask_nxv8f16_riscv_m2x2(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv8f16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x half> @llvm.vector.extract.nxv8f16.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 8 x half> %1
}


define <vscale x 16 x half> @test_vlseg2_nxv16f16_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv16f16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 16 x half> @llvm.vector.extract.nxv16f16.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 16 x half> %1
}

define <vscale x 16 x half> @test_vlseg2_mask_nxv16f16_riscv_m4x2(ptr %base, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv16f16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2 undef, ptr %base, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 16 x half> @llvm.vector.extract.nxv16f16.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 16 x half> %1
}


define <vscale x 1 x half> @test_vlseg3_nxv1f16_riscv_mf4x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1f16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.riscv_mf4x3(riscv_mf4x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlseg3_mask_nxv1f16_riscv_mf4x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1f16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlseg3_nxv2f16_riscv_mf2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2f16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.riscv_mf2x3(riscv_mf2x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlseg3_mask_nxv2f16_riscv_mf2x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2f16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlseg3_nxv4f16_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv4f16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlseg3_mask_nxv4f16_riscv_m1x3(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv4f16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 8 x half> @test_vlseg3_nxv8f16_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv8f16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x half> @llvm.vector.extract.nxv8f16.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 8 x half> %1
}

define <vscale x 8 x half> @test_vlseg3_mask_nxv8f16_riscv_m2x3(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv8f16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x half> @llvm.vector.extract.nxv8f16.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 8 x half> %1
}


define <vscale x 1 x half> @test_vlseg4_nxv1f16_riscv_mf4x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1f16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.riscv_mf4x4(riscv_mf4x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlseg4_mask_nxv1f16_riscv_mf4x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1f16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlseg4_nxv2f16_riscv_mf2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2f16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.riscv_mf2x4(riscv_mf2x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlseg4_mask_nxv2f16_riscv_mf2x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2f16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlseg4_nxv4f16_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv4f16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlseg4_mask_nxv4f16_riscv_m1x4(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv4f16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 8 x half> @test_vlseg4_nxv8f16_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv8f16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x half> @llvm.vector.extract.nxv8f16.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 8 x half> %1
}

define <vscale x 8 x half> @test_vlseg4_mask_nxv8f16_riscv_m2x4(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv8f16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x half> @llvm.vector.extract.nxv8f16.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 8 x half> %1
}


define <vscale x 1 x half> @test_vlseg5_nxv1f16_riscv_mf4x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1f16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.riscv_mf4x5(riscv_mf4x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlseg5_mask_nxv1f16_riscv_mf4x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1f16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlseg5_nxv2f16_riscv_mf2x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv2f16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.riscv_mf2x5(riscv_mf2x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlseg5_mask_nxv2f16_riscv_mf2x5(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv2f16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlseg5_nxv4f16_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv4f16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlseg5_mask_nxv4f16_riscv_m1x5(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv4f16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x half> @test_vlseg6_nxv1f16_riscv_mf4x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1f16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.riscv_mf4x6(riscv_mf4x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlseg6_mask_nxv1f16_riscv_mf4x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1f16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlseg6_nxv2f16_riscv_mf2x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv2f16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.riscv_mf2x6(riscv_mf2x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlseg6_mask_nxv2f16_riscv_mf2x6(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv2f16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlseg6_nxv4f16_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv4f16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlseg6_mask_nxv4f16_riscv_m1x6(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv4f16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x half> @test_vlseg7_nxv1f16_riscv_mf4x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1f16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.riscv_mf4x7(riscv_mf4x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlseg7_mask_nxv1f16_riscv_mf4x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1f16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlseg7_nxv2f16_riscv_mf2x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv2f16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.riscv_mf2x7(riscv_mf2x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlseg7_mask_nxv2f16_riscv_mf2x7(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv2f16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlseg7_nxv4f16_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv4f16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlseg7_mask_nxv4f16_riscv_m1x7(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv4f16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x half> @test_vlseg8_nxv1f16_riscv_mf4x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1f16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.riscv_mf4x8(riscv_mf4x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlseg8_mask_nxv1f16_riscv_mf4x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1f16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.vector.extract.nxv1f16.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlseg8_nxv2f16_riscv_mf2x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv2f16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.riscv_mf2x8(riscv_mf2x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlseg8_mask_nxv2f16_riscv_mf2x8(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv2f16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.vector.extract.nxv2f16.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlseg8_nxv4f16_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv4f16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlseg8_mask_nxv4f16_riscv_m1x8(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv4f16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.vector.extract.nxv4f16.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x float> @test_vlseg2_nxv1f32_riscv_mf2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1f32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.riscv_mf2x2(riscv_mf2x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlseg2_mask_nxv1f32_riscv_mf2x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1f32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv1i1(riscv_mf2x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlseg2_nxv2f32_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2f32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlseg2_mask_nxv2f32_riscv_m1x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2f32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg2e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv2i1(riscv_m1x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 4 x float> @test_vlseg2_nxv4f32_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4f32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 4 x float> @llvm.vector.extract.nxv4f32.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 4 x float> %1
}

define <vscale x 4 x float> @test_vlseg2_mask_nxv4f32_riscv_m2x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4f32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg2e32.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv4i1(riscv_m2x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x float> @llvm.vector.extract.nxv4f32.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 4 x float> %1
}


define <vscale x 8 x float> @test_vlseg2_nxv8f32_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv8f32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vlseg2e32.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 8 x float> @llvm.vector.extract.nxv8f32.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 8 x float> %1
}

define <vscale x 8 x float> @test_vlseg2_mask_nxv8f32_riscv_m4x2(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv8f32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vlseg2e32.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv8i1(riscv_m4x2 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 8 x float> @llvm.vector.extract.nxv8f32.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 8 x float> %1
}


define <vscale x 1 x float> @test_vlseg3_nxv1f32_riscv_mf2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1f32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.riscv_mf2x3(riscv_mf2x3 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlseg3_mask_nxv1f32_riscv_mf2x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1f32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv1i1(riscv_mf2x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlseg3_nxv2f32_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2f32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlseg3_mask_nxv2f32_riscv_m1x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2f32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg3e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv2i1(riscv_m1x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 4 x float> @test_vlseg3_nxv4f32_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv4f32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 4 x float> @llvm.vector.extract.nxv4f32.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 4 x float> %1
}

define <vscale x 4 x float> @test_vlseg3_mask_nxv4f32_riscv_m2x3(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv4f32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg3e32.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv4i1(riscv_m2x3 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x float> @llvm.vector.extract.nxv4f32.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 4 x float> %1
}


define <vscale x 1 x float> @test_vlseg4_nxv1f32_riscv_mf2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1f32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.riscv_mf2x4(riscv_mf2x4 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlseg4_mask_nxv1f32_riscv_mf2x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1f32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv1i1(riscv_mf2x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlseg4_nxv2f32_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2f32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlseg4_mask_nxv2f32_riscv_m1x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2f32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg4e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv2i1(riscv_m1x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 4 x float> @test_vlseg4_nxv4f32_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv4f32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 4 x float> @llvm.vector.extract.nxv4f32.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 4 x float> %1
}

define <vscale x 4 x float> @test_vlseg4_mask_nxv4f32_riscv_m2x4(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv4f32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vlseg4e32.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv4i1(riscv_m2x4 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x float> @llvm.vector.extract.nxv4f32.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 4 x float> %1
}


define <vscale x 1 x float> @test_vlseg5_nxv1f32_riscv_mf2x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1f32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.riscv_mf2x5(riscv_mf2x5 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlseg5_mask_nxv1f32_riscv_mf2x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1f32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv1i1(riscv_mf2x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlseg5_nxv2f32_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv2f32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlseg5_mask_nxv2f32_riscv_m1x5(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv2f32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg5e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv2i1(riscv_m1x5 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x float> @test_vlseg6_nxv1f32_riscv_mf2x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1f32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.riscv_mf2x6(riscv_mf2x6 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlseg6_mask_nxv1f32_riscv_mf2x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1f32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv1i1(riscv_mf2x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlseg6_nxv2f32_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv2f32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlseg6_mask_nxv2f32_riscv_m1x6(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv2f32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg6e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv2i1(riscv_m1x6 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x float> @test_vlseg7_nxv1f32_riscv_mf2x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1f32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.riscv_mf2x7(riscv_mf2x7 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlseg7_mask_nxv1f32_riscv_mf2x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1f32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv1i1(riscv_mf2x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlseg7_nxv2f32_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv2f32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlseg7_mask_nxv2f32_riscv_m1x7(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv2f32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg7e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv2i1(riscv_m1x7 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x float> @test_vlseg8_nxv1f32_riscv_mf2x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1f32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.riscv_mf2x8(riscv_mf2x8 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlseg8_mask_nxv1f32_riscv_mf2x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1f32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv1i1(riscv_mf2x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.vector.extract.nxv1f32.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlseg8_nxv2f32_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv2f32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlseg8_mask_nxv2f32_riscv_m1x8(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv2f32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vlseg8e32.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv2i1(riscv_m1x8 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.vector.extract.nxv2f32.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x double> @test_vlseg2_nxv1f64_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1f64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg2e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlseg2_mask_nxv1f64_riscv_m1x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1f64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg2e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv1i1(riscv_m1x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 2 x double> @test_vlseg2_nxv2f64_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2f64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg2e64.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 2 x double> @llvm.vector.extract.nxv2f64.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 2 x double> %1
}

define <vscale x 2 x double> @test_vlseg2_mask_nxv2f64_riscv_m2x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2f64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg2e64.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv2i1(riscv_m2x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x double> @llvm.vector.extract.nxv2f64.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 2 x double> %1
}


define <vscale x 4 x double> @test_vlseg2_nxv4f64_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4f64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vlseg2e64.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 4 x double> @llvm.vector.extract.nxv4f64.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 4 x double> %1
}

define <vscale x 4 x double> @test_vlseg2_mask_nxv4f64_riscv_m4x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4f64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vlseg2e64.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv4i1(riscv_m4x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 4 x double> @llvm.vector.extract.nxv4f64.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 4 x double> %1
}


define <vscale x 1 x double> @test_vlseg3_nxv1f64_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1f64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg3e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlseg3_mask_nxv1f64_riscv_m1x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1f64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg3e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv1i1(riscv_m1x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 2 x double> @test_vlseg3_nxv2f64_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2f64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg3e64.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 2 x double> @llvm.vector.extract.nxv2f64.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 2 x double> %1
}

define <vscale x 2 x double> @test_vlseg3_mask_nxv2f64_riscv_m2x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2f64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg3e64.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv2i1(riscv_m2x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x double> @llvm.vector.extract.nxv2f64.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 2 x double> %1
}


define <vscale x 1 x double> @test_vlseg4_nxv1f64_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1f64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg4e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlseg4_mask_nxv1f64_riscv_m1x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1f64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg4e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv1i1(riscv_m1x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 2 x double> @test_vlseg4_nxv2f64_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2f64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg4e64.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 2 x double> @llvm.vector.extract.nxv2f64.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 2 x double> %1
}

define <vscale x 2 x double> @test_vlseg4_mask_nxv2f64_riscv_m2x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2f64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vlseg4e64.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv2i1(riscv_m2x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x double> @llvm.vector.extract.nxv2f64.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 2 x double> %1
}


define <vscale x 1 x double> @test_vlseg5_nxv1f64_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1f64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg5e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlseg5_mask_nxv1f64_riscv_m1x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1f64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg5e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv1i1(riscv_m1x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x double> @test_vlseg6_nxv1f64_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1f64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg6e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlseg6_mask_nxv1f64_riscv_m1x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1f64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg6e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv1i1(riscv_m1x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x double> @test_vlseg7_nxv1f64_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1f64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg7e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlseg7_mask_nxv1f64_riscv_m1x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1f64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg7e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv1i1(riscv_m1x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x double> @test_vlseg8_nxv1f64_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1f64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg8e64.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlseg8_mask_nxv1f64_riscv_m1x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1f64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vlseg8e64.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv1i1(riscv_m1x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.vector.extract.nxv1f64.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x bfloat> @test_vlseg2_nxv1bf16_riscv_mf4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv1bf16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.riscv_mf4x2(riscv_mf4x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlseg2_mask_nxv1bf16_riscv_mf4x2(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv1bf16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x2 @llvm.riscv.vlseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x2(riscv_mf4x2 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlseg2_nxv2bf16_riscv_mf2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv2bf16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.riscv_mf2x2(riscv_mf2x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlseg2_mask_nxv2bf16_riscv_mf2x2(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv2bf16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x2 @llvm.riscv.vlseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x2(riscv_mf2x2 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlseg2_nxv4bf16_riscv_m1x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv4bf16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.riscv_m1x2(riscv_m1x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlseg2_mask_nxv4bf16_riscv_m1x2(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv4bf16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg2e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x2 @llvm.riscv.vlseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x2(riscv_m1x2 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 8 x bfloat> @test_vlseg2_nxv8bf16_riscv_m2x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv8bf16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.riscv_m2x2(riscv_m2x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.vector.extract.nxv8bf16.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}

define <vscale x 8 x bfloat> @test_vlseg2_mask_nxv8bf16_riscv_m2x2(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv8bf16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg2e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x2 @llvm.riscv.vlseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.vector.extract.nxv8bf16.riscv_m2x2(riscv_m2x2 %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}


define <vscale x 16 x bfloat> @test_vlseg2_nxv16bf16_riscv_m4x2(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg2_nxv16bf16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.riscv_m4x2(riscv_m4x2 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 16 x bfloat> @llvm.vector.extract.nxv16bf16.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 16 x bfloat> %1
}

define <vscale x 16 x bfloat> @test_vlseg2_mask_nxv16bf16_riscv_m4x2(ptr %base, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlseg2_mask_nxv16bf16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vlseg2e16.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m4x2 @llvm.riscv.vlseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2 undef, ptr %base, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 16 x bfloat> @llvm.vector.extract.nxv16bf16.riscv_m4x2(riscv_m4x2 %0, i64 1)
  ret <vscale x 16 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlseg3_nxv1bf16_riscv_mf4x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv1bf16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.riscv_mf4x3(riscv_mf4x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlseg3_mask_nxv1bf16_riscv_mf4x3(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv1bf16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x3 @llvm.riscv.vlseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x3(riscv_mf4x3 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlseg3_nxv2bf16_riscv_mf2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv2bf16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.riscv_mf2x3(riscv_mf2x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlseg3_mask_nxv2bf16_riscv_mf2x3(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv2bf16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x3 @llvm.riscv.vlseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x3(riscv_mf2x3 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlseg3_nxv4bf16_riscv_m1x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv4bf16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.riscv_m1x3(riscv_m1x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlseg3_mask_nxv4bf16_riscv_m1x3(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv4bf16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg3e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x3 @llvm.riscv.vlseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x3(riscv_m1x3 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 8 x bfloat> @test_vlseg3_nxv8bf16_riscv_m2x3(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg3_nxv8bf16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.riscv_m2x3(riscv_m2x3 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.vector.extract.nxv8bf16.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}

define <vscale x 8 x bfloat> @test_vlseg3_mask_nxv8bf16_riscv_m2x3(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg3_mask_nxv8bf16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg3e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x3 @llvm.riscv.vlseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.vector.extract.nxv8bf16.riscv_m2x3(riscv_m2x3 %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlseg4_nxv1bf16_riscv_mf4x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv1bf16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.riscv_mf4x4(riscv_mf4x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlseg4_mask_nxv1bf16_riscv_mf4x4(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv1bf16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x4 @llvm.riscv.vlseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x4(riscv_mf4x4 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlseg4_nxv2bf16_riscv_mf2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv2bf16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.riscv_mf2x4(riscv_mf2x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlseg4_mask_nxv2bf16_riscv_mf2x4(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv2bf16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x4 @llvm.riscv.vlseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x4(riscv_mf2x4 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlseg4_nxv4bf16_riscv_m1x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv4bf16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.riscv_m1x4(riscv_m1x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlseg4_mask_nxv4bf16_riscv_m1x4(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv4bf16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg4e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x4 @llvm.riscv.vlseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x4(riscv_m1x4 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 8 x bfloat> @test_vlseg4_nxv8bf16_riscv_m2x4(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg4_nxv8bf16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.riscv_m2x4(riscv_m2x4 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.vector.extract.nxv8bf16.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}

define <vscale x 8 x bfloat> @test_vlseg4_mask_nxv8bf16_riscv_m2x4(ptr %base, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlseg4_mask_nxv8bf16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vlseg4e16.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m2x4 @llvm.riscv.vlseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4 undef, ptr %base, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.vector.extract.nxv8bf16.riscv_m2x4(riscv_m2x4 %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlseg5_nxv1bf16_riscv_mf4x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv1bf16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.riscv_mf4x5(riscv_mf4x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlseg5_mask_nxv1bf16_riscv_mf4x5(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv1bf16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x5 @llvm.riscv.vlseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x5(riscv_mf4x5 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlseg5_nxv2bf16_riscv_mf2x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv2bf16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.riscv_mf2x5(riscv_mf2x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlseg5_mask_nxv2bf16_riscv_mf2x5(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv2bf16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x5 @llvm.riscv.vlseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x5(riscv_mf2x5 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlseg5_nxv4bf16_riscv_m1x5(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg5_nxv4bf16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.riscv_m1x5(riscv_m1x5 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlseg5_mask_nxv4bf16_riscv_m1x5(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg5_mask_nxv4bf16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg5e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x5 @llvm.riscv.vlseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x5(riscv_m1x5 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlseg6_nxv1bf16_riscv_mf4x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv1bf16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.riscv_mf4x6(riscv_mf4x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlseg6_mask_nxv1bf16_riscv_mf4x6(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv1bf16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x6 @llvm.riscv.vlseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x6(riscv_mf4x6 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlseg6_nxv2bf16_riscv_mf2x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv2bf16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.riscv_mf2x6(riscv_mf2x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlseg6_mask_nxv2bf16_riscv_mf2x6(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv2bf16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x6 @llvm.riscv.vlseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x6(riscv_mf2x6 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlseg6_nxv4bf16_riscv_m1x6(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg6_nxv4bf16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.riscv_m1x6(riscv_m1x6 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlseg6_mask_nxv4bf16_riscv_m1x6(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg6_mask_nxv4bf16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg6e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x6 @llvm.riscv.vlseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x6(riscv_m1x6 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlseg7_nxv1bf16_riscv_mf4x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv1bf16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.riscv_mf4x7(riscv_mf4x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlseg7_mask_nxv1bf16_riscv_mf4x7(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv1bf16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x7 @llvm.riscv.vlseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x7(riscv_mf4x7 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlseg7_nxv2bf16_riscv_mf2x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv2bf16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.riscv_mf2x7(riscv_mf2x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlseg7_mask_nxv2bf16_riscv_mf2x7(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv2bf16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x7 @llvm.riscv.vlseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x7(riscv_mf2x7 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlseg7_nxv4bf16_riscv_m1x7(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg7_nxv4bf16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.riscv_m1x7(riscv_m1x7 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlseg7_mask_nxv4bf16_riscv_m1x7(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg7_mask_nxv4bf16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg7e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x7 @llvm.riscv.vlseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x7(riscv_m1x7 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlseg8_nxv1bf16_riscv_mf4x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv1bf16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.riscv_mf4x8(riscv_mf4x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlseg8_mask_nxv1bf16_riscv_mf4x8(ptr %base, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv1bf16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf4x8 @llvm.riscv.vlseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8 undef, ptr %base, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.vector.extract.nxv1bf16.riscv_mf4x8(riscv_mf4x8 %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlseg8_nxv2bf16_riscv_mf2x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv2bf16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.riscv_mf2x8(riscv_mf2x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlseg8_mask_nxv2bf16_riscv_mf2x8(ptr %base, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv2bf16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_mf2x8 @llvm.riscv.vlseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8 undef, ptr %base, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.vector.extract.nxv2bf16.riscv_mf2x8(riscv_mf2x8 %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlseg8_nxv4bf16_riscv_m1x8(ptr %base, i64 %vl) {
; CHECK-LABEL: test_vlseg8_nxv4bf16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.riscv_m1x8(riscv_m1x8 undef, ptr %base, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlseg8_mask_nxv4bf16_riscv_m1x8(ptr %base, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlseg8_mask_nxv4bf16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vlseg8e16.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call riscv_m1x8 @llvm.riscv.vlseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8 undef, ptr %base, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.vector.extract.nxv4bf16.riscv_m1x8(riscv_m1x8 %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

