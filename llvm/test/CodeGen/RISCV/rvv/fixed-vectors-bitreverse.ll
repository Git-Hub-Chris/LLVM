; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+v -riscv-v-fixed-length-vector-lmul-max=2 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=RV32,LMULMAX2-RV32
; RUN: llc -mtriple=riscv64 -mattr=+v -riscv-v-fixed-length-vector-lmul-max=2 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=RV64,LMULMAX2-RV64
; RUN: llc -mtriple=riscv32 -mattr=+v -riscv-v-fixed-length-vector-lmul-max=1 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=RV32,LMULMAX1-RV32
; RUN: llc -mtriple=riscv64 -mattr=+v -riscv-v-fixed-length-vector-lmul-max=1 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=RV64,LMULMAX1-RV64
; RUN: llc -mtriple=riscv32 -mattr=+v,+experimental-zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=ZVBB
; RUN: llc -mtriple=riscv64 -mattr=+v,+experimental-zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=ZVBB

define void @bitreverse_v8i16(ptr %x, ptr %y) {
; RV32-LABEL: bitreverse_v8i16:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; RV32-NEXT:    vle16.v v1, (a0)
; RV32-NEXT:    vsrl.vi v2, v1, 8
; RV32-NEXT:    vsll.vi v1, v1, 8
; RV32-NEXT:    vor.vv v1, v1, v2
; RV32-NEXT:    vsrl.vi v2, v1, 4
; RV32-NEXT:    lui a1, 1
; RV32-NEXT:    addi a1, a1, -241
; RV32-NEXT:    vand.vx v2, v2, a1
; RV32-NEXT:    vand.vx v1, v1, a1
; RV32-NEXT:    vsll.vi v1, v1, 4
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 2
; RV32-NEXT:    lui a1, 3
; RV32-NEXT:    addi a1, a1, 819
; RV32-NEXT:    vand.vx v2, v2, a1
; RV32-NEXT:    vand.vx v1, v1, a1
; RV32-NEXT:    vsll.vi v1, v1, 2
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 1
; RV32-NEXT:    lui a1, 5
; RV32-NEXT:    addi a1, a1, 1365
; RV32-NEXT:    vand.vx v2, v2, a1
; RV32-NEXT:    vand.vx v1, v1, a1
; RV32-NEXT:    vadd.vv v1, v1, v1
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vse16.v v1, (a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: bitreverse_v8i16:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; RV64-NEXT:    vle16.v v1, (a0)
; RV64-NEXT:    vsrl.vi v2, v1, 8
; RV64-NEXT:    vsll.vi v1, v1, 8
; RV64-NEXT:    vor.vv v1, v1, v2
; RV64-NEXT:    vsrl.vi v2, v1, 4
; RV64-NEXT:    lui a1, 1
; RV64-NEXT:    addi a1, a1, -241
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vsll.vi v1, v1, 4
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 2
; RV64-NEXT:    lui a1, 3
; RV64-NEXT:    addi a1, a1, 819
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vsll.vi v1, v1, 2
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 1
; RV64-NEXT:    lui a1, 5
; RV64-NEXT:    addi a1, a1, 1365
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vadd.vv v1, v1, v1
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vse16.v v1, (a0)
; RV64-NEXT:    ret
;
; ZVBB-LABEL: bitreverse_v8i16:
; ZVBB:       # %bb.0:
; ZVBB-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; ZVBB-NEXT:    vle16.v v1, (a0)
; ZVBB-NEXT:    vbrev.v v1, v1
; ZVBB-NEXT:    vse16.v v1, (a0)
; ZVBB-NEXT:    ret
  %a = load <8 x i16>, ptr %x
  %b = load <8 x i16>, ptr %y
  %c = call <8 x i16> @llvm.bitreverse.v8i16(<8 x i16> %a)
  store <8 x i16> %c, ptr %x
  ret void
}
declare <8 x i16> @llvm.bitreverse.v8i16(<8 x i16>)

define void @bitreverse_v4i32(ptr %x, ptr %y) {
; RV32-LABEL: bitreverse_v4i32:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; RV32-NEXT:    vle32.v v1, (a0)
; RV32-NEXT:    vsrl.vi v2, v1, 8
; RV32-NEXT:    lui a1, 16
; RV32-NEXT:    addi a1, a1, -256
; RV32-NEXT:    vand.vx v2, v2, a1
; RV32-NEXT:    vsrl.vi v3, v1, 24
; RV32-NEXT:    vor.vv v2, v2, v3
; RV32-NEXT:    vand.vx v3, v1, a1
; RV32-NEXT:    vsll.vi v3, v3, 8
; RV32-NEXT:    vsll.vi v1, v1, 24
; RV32-NEXT:    vor.vv v1, v1, v3
; RV32-NEXT:    vor.vv v1, v1, v2
; RV32-NEXT:    vsrl.vi v2, v1, 4
; RV32-NEXT:    lui a1, 61681
; RV32-NEXT:    addi a1, a1, -241
; RV32-NEXT:    vand.vx v2, v2, a1
; RV32-NEXT:    vand.vx v1, v1, a1
; RV32-NEXT:    vsll.vi v1, v1, 4
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 2
; RV32-NEXT:    lui a1, 209715
; RV32-NEXT:    addi a1, a1, 819
; RV32-NEXT:    vand.vx v2, v2, a1
; RV32-NEXT:    vand.vx v1, v1, a1
; RV32-NEXT:    vsll.vi v1, v1, 2
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 1
; RV32-NEXT:    lui a1, 349525
; RV32-NEXT:    addi a1, a1, 1365
; RV32-NEXT:    vand.vx v2, v2, a1
; RV32-NEXT:    vand.vx v1, v1, a1
; RV32-NEXT:    vadd.vv v1, v1, v1
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vse32.v v1, (a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: bitreverse_v4i32:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; RV64-NEXT:    vle32.v v1, (a0)
; RV64-NEXT:    vsrl.vi v2, v1, 8
; RV64-NEXT:    lui a1, 16
; RV64-NEXT:    addi a1, a1, -256
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vsrl.vi v3, v1, 24
; RV64-NEXT:    vor.vv v2, v2, v3
; RV64-NEXT:    vand.vx v3, v1, a1
; RV64-NEXT:    vsll.vi v3, v3, 8
; RV64-NEXT:    vsll.vi v1, v1, 24
; RV64-NEXT:    vor.vv v1, v1, v3
; RV64-NEXT:    vor.vv v1, v1, v2
; RV64-NEXT:    vsrl.vi v2, v1, 4
; RV64-NEXT:    lui a1, 61681
; RV64-NEXT:    addi a1, a1, -241
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vsll.vi v1, v1, 4
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 2
; RV64-NEXT:    lui a1, 209715
; RV64-NEXT:    addi a1, a1, 819
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vsll.vi v1, v1, 2
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 1
; RV64-NEXT:    lui a1, 349525
; RV64-NEXT:    addi a1, a1, 1365
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vadd.vv v1, v1, v1
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vse32.v v1, (a0)
; RV64-NEXT:    ret
;
; ZVBB-LABEL: bitreverse_v4i32:
; ZVBB:       # %bb.0:
; ZVBB-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZVBB-NEXT:    vle32.v v1, (a0)
; ZVBB-NEXT:    vbrev.v v1, v1
; ZVBB-NEXT:    vse32.v v1, (a0)
; ZVBB-NEXT:    ret
  %a = load <4 x i32>, ptr %x
  %b = load <4 x i32>, ptr %y
  %c = call <4 x i32> @llvm.bitreverse.v4i32(<4 x i32> %a)
  store <4 x i32> %c, ptr %x
  ret void
}
declare <4 x i32> @llvm.bitreverse.v4i32(<4 x i32>)

define void @bitreverse_v2i64(ptr %x, ptr %y) {
; RV32-LABEL: bitreverse_v2i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    .cfi_def_cfa_offset 16
; RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV32-NEXT:    vle64.v v1, (a0)
; RV32-NEXT:    sw zero, 12(sp)
; RV32-NEXT:    lui a1, 1044480
; RV32-NEXT:    sw a1, 8(sp)
; RV32-NEXT:    li a1, 56
; RV32-NEXT:    vsrl.vx v2, v1, a1
; RV32-NEXT:    li a2, 40
; RV32-NEXT:    vsrl.vx v3, v1, a2
; RV32-NEXT:    lui a3, 16
; RV32-NEXT:    addi a3, a3, -256
; RV32-NEXT:    vand.vx v3, v3, a3
; RV32-NEXT:    vor.vv v2, v3, v2
; RV32-NEXT:    vsrl.vi v3, v1, 24
; RV32-NEXT:    addi a4, sp, 8
; RV32-NEXT:    vlse64.v v4, (a4), zero
; RV32-NEXT:    lui a4, 4080
; RV32-NEXT:    vand.vx v3, v3, a4
; RV32-NEXT:    vsrl.vi v5, v1, 8
; RV32-NEXT:    vand.vv v5, v5, v4
; RV32-NEXT:    vor.vv v3, v5, v3
; RV32-NEXT:    vor.vv v2, v3, v2
; RV32-NEXT:    vsll.vx v3, v1, a1
; RV32-NEXT:    vand.vx v5, v1, a3
; RV32-NEXT:    vsll.vx v5, v5, a2
; RV32-NEXT:    vor.vv v3, v3, v5
; RV32-NEXT:    vand.vx v5, v1, a4
; RV32-NEXT:    vsll.vi v5, v5, 24
; RV32-NEXT:    vand.vv v1, v1, v4
; RV32-NEXT:    vsll.vi v1, v1, 8
; RV32-NEXT:    vor.vv v1, v5, v1
; RV32-NEXT:    vor.vv v1, v3, v1
; RV32-NEXT:    vor.vv v1, v1, v2
; RV32-NEXT:    vsrl.vi v2, v1, 4
; RV32-NEXT:    lui a1, 61681
; RV32-NEXT:    addi a1, a1, -241
; RV32-NEXT:    vsetvli a2, zero, e32, m1, ta, ma
; RV32-NEXT:    vmv.v.x v3, a1
; RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV32-NEXT:    vand.vv v2, v2, v3
; RV32-NEXT:    vand.vv v1, v1, v3
; RV32-NEXT:    vsll.vi v1, v1, 4
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 2
; RV32-NEXT:    lui a1, 209715
; RV32-NEXT:    addi a1, a1, 819
; RV32-NEXT:    vsetvli a2, zero, e32, m1, ta, ma
; RV32-NEXT:    vmv.v.x v3, a1
; RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV32-NEXT:    vand.vv v2, v2, v3
; RV32-NEXT:    vand.vv v1, v1, v3
; RV32-NEXT:    vsll.vi v1, v1, 2
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 1
; RV32-NEXT:    lui a1, 349525
; RV32-NEXT:    addi a1, a1, 1365
; RV32-NEXT:    vsetvli a2, zero, e32, m1, ta, ma
; RV32-NEXT:    vmv.v.x v3, a1
; RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV32-NEXT:    vand.vv v2, v2, v3
; RV32-NEXT:    vand.vv v1, v1, v3
; RV32-NEXT:    vadd.vv v1, v1, v1
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vse64.v v1, (a0)
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: bitreverse_v2i64:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV64-NEXT:    vle64.v v1, (a0)
; RV64-NEXT:    li a1, 56
; RV64-NEXT:    vsrl.vx v2, v1, a1
; RV64-NEXT:    li a2, 40
; RV64-NEXT:    vsrl.vx v3, v1, a2
; RV64-NEXT:    lui a3, 16
; RV64-NEXT:    addiw a3, a3, -256
; RV64-NEXT:    vand.vx v3, v3, a3
; RV64-NEXT:    vor.vv v2, v3, v2
; RV64-NEXT:    vsrl.vi v3, v1, 24
; RV64-NEXT:    lui a4, 4080
; RV64-NEXT:    vand.vx v3, v3, a4
; RV64-NEXT:    vsrl.vi v4, v1, 8
; RV64-NEXT:    li a5, 255
; RV64-NEXT:    slli a5, a5, 24
; RV64-NEXT:    vand.vx v4, v4, a5
; RV64-NEXT:    vor.vv v3, v4, v3
; RV64-NEXT:    vor.vv v2, v3, v2
; RV64-NEXT:    vand.vx v3, v1, a5
; RV64-NEXT:    vsll.vi v3, v3, 8
; RV64-NEXT:    vand.vx v4, v1, a4
; RV64-NEXT:    vsll.vi v4, v4, 24
; RV64-NEXT:    vor.vv v3, v4, v3
; RV64-NEXT:    vsll.vx v4, v1, a1
; RV64-NEXT:    vand.vx v1, v1, a3
; RV64-NEXT:    vsll.vx v1, v1, a2
; RV64-NEXT:    vor.vv v1, v4, v1
; RV64-NEXT:    vor.vv v1, v1, v3
; RV64-NEXT:    vor.vv v1, v1, v2
; RV64-NEXT:    vsrl.vi v2, v1, 4
; RV64-NEXT:    lui a1, 61681
; RV64-NEXT:    addiw a1, a1, -241
; RV64-NEXT:    slli a2, a1, 32
; RV64-NEXT:    add a1, a1, a2
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vsll.vi v1, v1, 4
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 2
; RV64-NEXT:    lui a1, 209715
; RV64-NEXT:    addiw a1, a1, 819
; RV64-NEXT:    slli a2, a1, 32
; RV64-NEXT:    add a1, a1, a2
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vsll.vi v1, v1, 2
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 1
; RV64-NEXT:    lui a1, 349525
; RV64-NEXT:    addiw a1, a1, 1365
; RV64-NEXT:    slli a2, a1, 32
; RV64-NEXT:    add a1, a1, a2
; RV64-NEXT:    vand.vx v2, v2, a1
; RV64-NEXT:    vand.vx v1, v1, a1
; RV64-NEXT:    vadd.vv v1, v1, v1
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vse64.v v1, (a0)
; RV64-NEXT:    ret
;
; ZVBB-LABEL: bitreverse_v2i64:
; ZVBB:       # %bb.0:
; ZVBB-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; ZVBB-NEXT:    vle64.v v1, (a0)
; ZVBB-NEXT:    vbrev.v v1, v1
; ZVBB-NEXT:    vse64.v v1, (a0)
; ZVBB-NEXT:    ret
  %a = load <2 x i64>, ptr %x
  %b = load <2 x i64>, ptr %y
  %c = call <2 x i64> @llvm.bitreverse.v2i64(<2 x i64> %a)
  store <2 x i64> %c, ptr %x
  ret void
}
declare <2 x i64> @llvm.bitreverse.v2i64(<2 x i64>)

define void @bitreverse_v16i16(ptr %x, ptr %y) {
; LMULMAX2-RV32-LABEL: bitreverse_v16i16:
; LMULMAX2-RV32:       # %bb.0:
; LMULMAX2-RV32-NEXT:    vsetivli zero, 16, e16, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vle16.v v2, (a0)
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 8
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 8
; LMULMAX2-RV32-NEXT:    vor.vv v2, v2, v4
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 4
; LMULMAX2-RV32-NEXT:    lui a1, 1
; LMULMAX2-RV32-NEXT:    addi a1, a1, -241
; LMULMAX2-RV32-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV32-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 4
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 2
; LMULMAX2-RV32-NEXT:    lui a1, 3
; LMULMAX2-RV32-NEXT:    addi a1, a1, 819
; LMULMAX2-RV32-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV32-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 1
; LMULMAX2-RV32-NEXT:    lui a1, 5
; LMULMAX2-RV32-NEXT:    addi a1, a1, 1365
; LMULMAX2-RV32-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV32-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV32-NEXT:    vadd.vv v2, v2, v2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vse16.v v2, (a0)
; LMULMAX2-RV32-NEXT:    ret
;
; LMULMAX2-RV64-LABEL: bitreverse_v16i16:
; LMULMAX2-RV64:       # %bb.0:
; LMULMAX2-RV64-NEXT:    vsetivli zero, 16, e16, m2, ta, ma
; LMULMAX2-RV64-NEXT:    vle16.v v2, (a0)
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 8
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 8
; LMULMAX2-RV64-NEXT:    vor.vv v2, v2, v4
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 4
; LMULMAX2-RV64-NEXT:    lui a1, 1
; LMULMAX2-RV64-NEXT:    addi a1, a1, -241
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 4
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 2
; LMULMAX2-RV64-NEXT:    lui a1, 3
; LMULMAX2-RV64-NEXT:    addi a1, a1, 819
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 1
; LMULMAX2-RV64-NEXT:    lui a1, 5
; LMULMAX2-RV64-NEXT:    addi a1, a1, 1365
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vadd.vv v2, v2, v2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vse16.v v2, (a0)
; LMULMAX2-RV64-NEXT:    ret
;
; LMULMAX1-RV32-LABEL: bitreverse_v16i16:
; LMULMAX1-RV32:       # %bb.0:
; LMULMAX1-RV32-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; LMULMAX1-RV32-NEXT:    addi a1, a0, 16
; LMULMAX1-RV32-NEXT:    vle16.v v1, (a1)
; LMULMAX1-RV32-NEXT:    vle16.v v2, (a0)
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 8
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 8
; LMULMAX1-RV32-NEXT:    vor.vv v1, v1, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 4
; LMULMAX1-RV32-NEXT:    lui a2, 1
; LMULMAX1-RV32-NEXT:    addi a2, a2, -241
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV32-NEXT:    vand.vx v1, v1, a2
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 4
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 2
; LMULMAX1-RV32-NEXT:    lui a3, 3
; LMULMAX1-RV32-NEXT:    addi a3, a3, 819
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV32-NEXT:    vand.vx v1, v1, a3
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 2
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 1
; LMULMAX1-RV32-NEXT:    lui a4, 5
; LMULMAX1-RV32-NEXT:    addi a4, a4, 1365
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV32-NEXT:    vand.vx v1, v1, a4
; LMULMAX1-RV32-NEXT:    vadd.vv v1, v1, v1
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 8
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 8
; LMULMAX1-RV32-NEXT:    vor.vv v2, v2, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 4
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV32-NEXT:    vand.vx v2, v2, a2
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 4
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 2
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV32-NEXT:    vand.vx v2, v2, a3
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 2
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 1
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV32-NEXT:    vand.vx v2, v2, a4
; LMULMAX1-RV32-NEXT:    vadd.vv v2, v2, v2
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vse16.v v2, (a0)
; LMULMAX1-RV32-NEXT:    vse16.v v1, (a1)
; LMULMAX1-RV32-NEXT:    ret
;
; LMULMAX1-RV64-LABEL: bitreverse_v16i16:
; LMULMAX1-RV64:       # %bb.0:
; LMULMAX1-RV64-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; LMULMAX1-RV64-NEXT:    addi a1, a0, 16
; LMULMAX1-RV64-NEXT:    vle16.v v1, (a1)
; LMULMAX1-RV64-NEXT:    vle16.v v2, (a0)
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 8
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 8
; LMULMAX1-RV64-NEXT:    vor.vv v1, v1, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 4
; LMULMAX1-RV64-NEXT:    lui a2, 1
; LMULMAX1-RV64-NEXT:    addi a2, a2, -241
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a2
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 4
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 2
; LMULMAX1-RV64-NEXT:    lui a3, 3
; LMULMAX1-RV64-NEXT:    addi a3, a3, 819
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a3
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 2
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 1
; LMULMAX1-RV64-NEXT:    lui a4, 5
; LMULMAX1-RV64-NEXT:    addi a4, a4, 1365
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a4
; LMULMAX1-RV64-NEXT:    vadd.vv v1, v1, v1
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 8
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 8
; LMULMAX1-RV64-NEXT:    vor.vv v2, v2, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 4
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a2
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 4
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 2
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a3
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 2
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 1
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a4
; LMULMAX1-RV64-NEXT:    vadd.vv v2, v2, v2
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vse16.v v2, (a0)
; LMULMAX1-RV64-NEXT:    vse16.v v1, (a1)
; LMULMAX1-RV64-NEXT:    ret
;
; ZVBB-LABEL: bitreverse_v16i16:
; ZVBB:       # %bb.0:
; ZVBB-NEXT:    vsetivli zero, 16, e16, m2, ta, ma
; ZVBB-NEXT:    vle16.v v2, (a0)
; ZVBB-NEXT:    vbrev.v v2, v2
; ZVBB-NEXT:    vse16.v v2, (a0)
; ZVBB-NEXT:    ret
  %a = load <16 x i16>, ptr %x
  %b = load <16 x i16>, ptr %y
  %c = call <16 x i16> @llvm.bitreverse.v16i16(<16 x i16> %a)
  store <16 x i16> %c, ptr %x
  ret void
}
declare <16 x i16> @llvm.bitreverse.v16i16(<16 x i16>)

define void @bitreverse_v8i32(ptr %x, ptr %y) {
; LMULMAX2-RV32-LABEL: bitreverse_v8i32:
; LMULMAX2-RV32:       # %bb.0:
; LMULMAX2-RV32-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vle32.v v2, (a0)
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 8
; LMULMAX2-RV32-NEXT:    lui a1, 16
; LMULMAX2-RV32-NEXT:    addi a1, a1, -256
; LMULMAX2-RV32-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV32-NEXT:    vsrl.vi v6, v2, 24
; LMULMAX2-RV32-NEXT:    vor.vv v4, v4, v6
; LMULMAX2-RV32-NEXT:    vand.vx v6, v2, a1
; LMULMAX2-RV32-NEXT:    vsll.vi v6, v6, 8
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 24
; LMULMAX2-RV32-NEXT:    vor.vv v2, v2, v6
; LMULMAX2-RV32-NEXT:    vor.vv v2, v2, v4
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 4
; LMULMAX2-RV32-NEXT:    lui a1, 61681
; LMULMAX2-RV32-NEXT:    addi a1, a1, -241
; LMULMAX2-RV32-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV32-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 4
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 2
; LMULMAX2-RV32-NEXT:    lui a1, 209715
; LMULMAX2-RV32-NEXT:    addi a1, a1, 819
; LMULMAX2-RV32-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV32-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 1
; LMULMAX2-RV32-NEXT:    lui a1, 349525
; LMULMAX2-RV32-NEXT:    addi a1, a1, 1365
; LMULMAX2-RV32-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV32-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV32-NEXT:    vadd.vv v2, v2, v2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vse32.v v2, (a0)
; LMULMAX2-RV32-NEXT:    ret
;
; LMULMAX2-RV64-LABEL: bitreverse_v8i32:
; LMULMAX2-RV64:       # %bb.0:
; LMULMAX2-RV64-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; LMULMAX2-RV64-NEXT:    vle32.v v2, (a0)
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 8
; LMULMAX2-RV64-NEXT:    lui a1, 16
; LMULMAX2-RV64-NEXT:    addi a1, a1, -256
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vsrl.vi v6, v2, 24
; LMULMAX2-RV64-NEXT:    vor.vv v4, v4, v6
; LMULMAX2-RV64-NEXT:    vand.vx v6, v2, a1
; LMULMAX2-RV64-NEXT:    vsll.vi v6, v6, 8
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 24
; LMULMAX2-RV64-NEXT:    vor.vv v2, v2, v6
; LMULMAX2-RV64-NEXT:    vor.vv v2, v2, v4
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 4
; LMULMAX2-RV64-NEXT:    lui a1, 61681
; LMULMAX2-RV64-NEXT:    addi a1, a1, -241
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 4
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 2
; LMULMAX2-RV64-NEXT:    lui a1, 209715
; LMULMAX2-RV64-NEXT:    addi a1, a1, 819
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 1
; LMULMAX2-RV64-NEXT:    lui a1, 349525
; LMULMAX2-RV64-NEXT:    addi a1, a1, 1365
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vadd.vv v2, v2, v2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vse32.v v2, (a0)
; LMULMAX2-RV64-NEXT:    ret
;
; LMULMAX1-RV32-LABEL: bitreverse_v8i32:
; LMULMAX1-RV32:       # %bb.0:
; LMULMAX1-RV32-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; LMULMAX1-RV32-NEXT:    addi a1, a0, 16
; LMULMAX1-RV32-NEXT:    vle32.v v1, (a1)
; LMULMAX1-RV32-NEXT:    vle32.v v2, (a0)
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 8
; LMULMAX1-RV32-NEXT:    lui a2, 16
; LMULMAX1-RV32-NEXT:    addi a2, a2, -256
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV32-NEXT:    vsrl.vi v4, v1, 24
; LMULMAX1-RV32-NEXT:    vor.vv v3, v3, v4
; LMULMAX1-RV32-NEXT:    vand.vx v4, v1, a2
; LMULMAX1-RV32-NEXT:    vsll.vi v4, v4, 8
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 24
; LMULMAX1-RV32-NEXT:    vor.vv v1, v1, v4
; LMULMAX1-RV32-NEXT:    vor.vv v1, v1, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 4
; LMULMAX1-RV32-NEXT:    lui a3, 61681
; LMULMAX1-RV32-NEXT:    addi a3, a3, -241
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV32-NEXT:    vand.vx v1, v1, a3
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 4
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 2
; LMULMAX1-RV32-NEXT:    lui a4, 209715
; LMULMAX1-RV32-NEXT:    addi a4, a4, 819
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV32-NEXT:    vand.vx v1, v1, a4
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 2
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 1
; LMULMAX1-RV32-NEXT:    lui a5, 349525
; LMULMAX1-RV32-NEXT:    addi a5, a5, 1365
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a5
; LMULMAX1-RV32-NEXT:    vand.vx v1, v1, a5
; LMULMAX1-RV32-NEXT:    vadd.vv v1, v1, v1
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 8
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV32-NEXT:    vsrl.vi v4, v2, 24
; LMULMAX1-RV32-NEXT:    vor.vv v3, v3, v4
; LMULMAX1-RV32-NEXT:    vand.vx v4, v2, a2
; LMULMAX1-RV32-NEXT:    vsll.vi v4, v4, 8
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 24
; LMULMAX1-RV32-NEXT:    vor.vv v2, v2, v4
; LMULMAX1-RV32-NEXT:    vor.vv v2, v2, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 4
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV32-NEXT:    vand.vx v2, v2, a3
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 4
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 2
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV32-NEXT:    vand.vx v2, v2, a4
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 2
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 1
; LMULMAX1-RV32-NEXT:    vand.vx v3, v3, a5
; LMULMAX1-RV32-NEXT:    vand.vx v2, v2, a5
; LMULMAX1-RV32-NEXT:    vadd.vv v2, v2, v2
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vse32.v v2, (a0)
; LMULMAX1-RV32-NEXT:    vse32.v v1, (a1)
; LMULMAX1-RV32-NEXT:    ret
;
; LMULMAX1-RV64-LABEL: bitreverse_v8i32:
; LMULMAX1-RV64:       # %bb.0:
; LMULMAX1-RV64-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; LMULMAX1-RV64-NEXT:    addi a1, a0, 16
; LMULMAX1-RV64-NEXT:    vle32.v v1, (a1)
; LMULMAX1-RV64-NEXT:    vle32.v v2, (a0)
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 8
; LMULMAX1-RV64-NEXT:    lui a2, 16
; LMULMAX1-RV64-NEXT:    addi a2, a2, -256
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV64-NEXT:    vsrl.vi v4, v1, 24
; LMULMAX1-RV64-NEXT:    vor.vv v3, v3, v4
; LMULMAX1-RV64-NEXT:    vand.vx v4, v1, a2
; LMULMAX1-RV64-NEXT:    vsll.vi v4, v4, 8
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 24
; LMULMAX1-RV64-NEXT:    vor.vv v1, v1, v4
; LMULMAX1-RV64-NEXT:    vor.vv v1, v1, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 4
; LMULMAX1-RV64-NEXT:    lui a3, 61681
; LMULMAX1-RV64-NEXT:    addi a3, a3, -241
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a3
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 4
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 2
; LMULMAX1-RV64-NEXT:    lui a4, 209715
; LMULMAX1-RV64-NEXT:    addi a4, a4, 819
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a4
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 2
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 1
; LMULMAX1-RV64-NEXT:    lui a5, 349525
; LMULMAX1-RV64-NEXT:    addi a5, a5, 1365
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a5
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a5
; LMULMAX1-RV64-NEXT:    vadd.vv v1, v1, v1
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 8
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a2
; LMULMAX1-RV64-NEXT:    vsrl.vi v4, v2, 24
; LMULMAX1-RV64-NEXT:    vor.vv v3, v3, v4
; LMULMAX1-RV64-NEXT:    vand.vx v4, v2, a2
; LMULMAX1-RV64-NEXT:    vsll.vi v4, v4, 8
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 24
; LMULMAX1-RV64-NEXT:    vor.vv v2, v2, v4
; LMULMAX1-RV64-NEXT:    vor.vv v2, v2, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 4
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a3
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a3
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 4
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 2
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a4
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a4
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 2
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 1
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a5
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a5
; LMULMAX1-RV64-NEXT:    vadd.vv v2, v2, v2
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vse32.v v2, (a0)
; LMULMAX1-RV64-NEXT:    vse32.v v1, (a1)
; LMULMAX1-RV64-NEXT:    ret
;
; ZVBB-LABEL: bitreverse_v8i32:
; ZVBB:       # %bb.0:
; ZVBB-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; ZVBB-NEXT:    vle32.v v2, (a0)
; ZVBB-NEXT:    vbrev.v v2, v2
; ZVBB-NEXT:    vse32.v v2, (a0)
; ZVBB-NEXT:    ret
  %a = load <8 x i32>, ptr %x
  %b = load <8 x i32>, ptr %y
  %c = call <8 x i32> @llvm.bitreverse.v8i32(<8 x i32> %a)
  store <8 x i32> %c, ptr %x
  ret void
}
declare <8 x i32> @llvm.bitreverse.v8i32(<8 x i32>)

define void @bitreverse_v4i64(ptr %x, ptr %y) {
; LMULMAX2-RV32-LABEL: bitreverse_v4i64:
; LMULMAX2-RV32:       # %bb.0:
; LMULMAX2-RV32-NEXT:    addi sp, sp, -16
; LMULMAX2-RV32-NEXT:    .cfi_def_cfa_offset 16
; LMULMAX2-RV32-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vle64.v v2, (a0)
; LMULMAX2-RV32-NEXT:    sw zero, 12(sp)
; LMULMAX2-RV32-NEXT:    lui a1, 1044480
; LMULMAX2-RV32-NEXT:    sw a1, 8(sp)
; LMULMAX2-RV32-NEXT:    li a1, 56
; LMULMAX2-RV32-NEXT:    vsrl.vx v4, v2, a1
; LMULMAX2-RV32-NEXT:    li a2, 40
; LMULMAX2-RV32-NEXT:    vsrl.vx v6, v2, a2
; LMULMAX2-RV32-NEXT:    lui a3, 16
; LMULMAX2-RV32-NEXT:    addi a3, a3, -256
; LMULMAX2-RV32-NEXT:    vand.vx v6, v6, a3
; LMULMAX2-RV32-NEXT:    vor.vv v4, v6, v4
; LMULMAX2-RV32-NEXT:    vsrl.vi v6, v2, 24
; LMULMAX2-RV32-NEXT:    addi a4, sp, 8
; LMULMAX2-RV32-NEXT:    vlse64.v v8, (a4), zero
; LMULMAX2-RV32-NEXT:    lui a4, 4080
; LMULMAX2-RV32-NEXT:    vand.vx v6, v6, a4
; LMULMAX2-RV32-NEXT:    vsrl.vi v10, v2, 8
; LMULMAX2-RV32-NEXT:    vand.vv v10, v10, v8
; LMULMAX2-RV32-NEXT:    vor.vv v6, v10, v6
; LMULMAX2-RV32-NEXT:    vor.vv v4, v6, v4
; LMULMAX2-RV32-NEXT:    vsll.vx v6, v2, a1
; LMULMAX2-RV32-NEXT:    vand.vx v10, v2, a3
; LMULMAX2-RV32-NEXT:    vsll.vx v10, v10, a2
; LMULMAX2-RV32-NEXT:    vor.vv v6, v6, v10
; LMULMAX2-RV32-NEXT:    vand.vx v10, v2, a4
; LMULMAX2-RV32-NEXT:    vsll.vi v10, v10, 24
; LMULMAX2-RV32-NEXT:    vand.vv v2, v2, v8
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 8
; LMULMAX2-RV32-NEXT:    vor.vv v2, v10, v2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v6, v2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v2, v4
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 4
; LMULMAX2-RV32-NEXT:    lui a1, 61681
; LMULMAX2-RV32-NEXT:    addi a1, a1, -241
; LMULMAX2-RV32-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vmv.v.x v6, a1
; LMULMAX2-RV32-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vand.vv v4, v4, v6
; LMULMAX2-RV32-NEXT:    vand.vv v2, v2, v6
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 4
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 2
; LMULMAX2-RV32-NEXT:    lui a1, 209715
; LMULMAX2-RV32-NEXT:    addi a1, a1, 819
; LMULMAX2-RV32-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vmv.v.x v6, a1
; LMULMAX2-RV32-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vand.vv v4, v4, v6
; LMULMAX2-RV32-NEXT:    vand.vv v2, v2, v6
; LMULMAX2-RV32-NEXT:    vsll.vi v2, v2, 2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vsrl.vi v4, v2, 1
; LMULMAX2-RV32-NEXT:    lui a1, 349525
; LMULMAX2-RV32-NEXT:    addi a1, a1, 1365
; LMULMAX2-RV32-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vmv.v.x v6, a1
; LMULMAX2-RV32-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; LMULMAX2-RV32-NEXT:    vand.vv v4, v4, v6
; LMULMAX2-RV32-NEXT:    vand.vv v2, v2, v6
; LMULMAX2-RV32-NEXT:    vadd.vv v2, v2, v2
; LMULMAX2-RV32-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV32-NEXT:    vse64.v v2, (a0)
; LMULMAX2-RV32-NEXT:    addi sp, sp, 16
; LMULMAX2-RV32-NEXT:    ret
;
; LMULMAX2-RV64-LABEL: bitreverse_v4i64:
; LMULMAX2-RV64:       # %bb.0:
; LMULMAX2-RV64-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; LMULMAX2-RV64-NEXT:    vle64.v v2, (a0)
; LMULMAX2-RV64-NEXT:    li a1, 56
; LMULMAX2-RV64-NEXT:    vsrl.vx v4, v2, a1
; LMULMAX2-RV64-NEXT:    li a2, 40
; LMULMAX2-RV64-NEXT:    vsrl.vx v6, v2, a2
; LMULMAX2-RV64-NEXT:    lui a3, 16
; LMULMAX2-RV64-NEXT:    addiw a3, a3, -256
; LMULMAX2-RV64-NEXT:    vand.vx v6, v6, a3
; LMULMAX2-RV64-NEXT:    vor.vv v4, v6, v4
; LMULMAX2-RV64-NEXT:    vsrl.vi v6, v2, 24
; LMULMAX2-RV64-NEXT:    lui a4, 4080
; LMULMAX2-RV64-NEXT:    vand.vx v6, v6, a4
; LMULMAX2-RV64-NEXT:    vsrl.vi v8, v2, 8
; LMULMAX2-RV64-NEXT:    li a5, 255
; LMULMAX2-RV64-NEXT:    slli a5, a5, 24
; LMULMAX2-RV64-NEXT:    vand.vx v8, v8, a5
; LMULMAX2-RV64-NEXT:    vor.vv v6, v8, v6
; LMULMAX2-RV64-NEXT:    vor.vv v4, v6, v4
; LMULMAX2-RV64-NEXT:    vand.vx v6, v2, a5
; LMULMAX2-RV64-NEXT:    vsll.vi v6, v6, 8
; LMULMAX2-RV64-NEXT:    vand.vx v8, v2, a4
; LMULMAX2-RV64-NEXT:    vsll.vi v8, v8, 24
; LMULMAX2-RV64-NEXT:    vor.vv v6, v8, v6
; LMULMAX2-RV64-NEXT:    vsll.vx v8, v2, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a3
; LMULMAX2-RV64-NEXT:    vsll.vx v2, v2, a2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v8, v2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v2, v6
; LMULMAX2-RV64-NEXT:    vor.vv v2, v2, v4
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 4
; LMULMAX2-RV64-NEXT:    lui a1, 61681
; LMULMAX2-RV64-NEXT:    addiw a1, a1, -241
; LMULMAX2-RV64-NEXT:    slli a2, a1, 32
; LMULMAX2-RV64-NEXT:    add a1, a1, a2
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 4
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 2
; LMULMAX2-RV64-NEXT:    lui a1, 209715
; LMULMAX2-RV64-NEXT:    addiw a1, a1, 819
; LMULMAX2-RV64-NEXT:    slli a2, a1, 32
; LMULMAX2-RV64-NEXT:    add a1, a1, a2
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vsll.vi v2, v2, 2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vsrl.vi v4, v2, 1
; LMULMAX2-RV64-NEXT:    lui a1, 349525
; LMULMAX2-RV64-NEXT:    addiw a1, a1, 1365
; LMULMAX2-RV64-NEXT:    slli a2, a1, 32
; LMULMAX2-RV64-NEXT:    add a1, a1, a2
; LMULMAX2-RV64-NEXT:    vand.vx v4, v4, a1
; LMULMAX2-RV64-NEXT:    vand.vx v2, v2, a1
; LMULMAX2-RV64-NEXT:    vadd.vv v2, v2, v2
; LMULMAX2-RV64-NEXT:    vor.vv v2, v4, v2
; LMULMAX2-RV64-NEXT:    vse64.v v2, (a0)
; LMULMAX2-RV64-NEXT:    ret
;
; LMULMAX1-RV32-LABEL: bitreverse_v4i64:
; LMULMAX1-RV32:       # %bb.0:
; LMULMAX1-RV32-NEXT:    addi sp, sp, -16
; LMULMAX1-RV32-NEXT:    .cfi_def_cfa_offset 16
; LMULMAX1-RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; LMULMAX1-RV32-NEXT:    vle64.v v1, (a0)
; LMULMAX1-RV32-NEXT:    addi a1, a0, 16
; LMULMAX1-RV32-NEXT:    vle64.v v2, (a1)
; LMULMAX1-RV32-NEXT:    sw zero, 12(sp)
; LMULMAX1-RV32-NEXT:    lui a2, 1044480
; LMULMAX1-RV32-NEXT:    sw a2, 8(sp)
; LMULMAX1-RV32-NEXT:    li a2, 56
; LMULMAX1-RV32-NEXT:    vsrl.vx v3, v2, a2
; LMULMAX1-RV32-NEXT:    li a3, 40
; LMULMAX1-RV32-NEXT:    vsrl.vx v4, v2, a3
; LMULMAX1-RV32-NEXT:    lui a4, 16
; LMULMAX1-RV32-NEXT:    addi a4, a4, -256
; LMULMAX1-RV32-NEXT:    vand.vx v4, v4, a4
; LMULMAX1-RV32-NEXT:    vor.vv v3, v4, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v4, v2, 24
; LMULMAX1-RV32-NEXT:    addi a5, sp, 8
; LMULMAX1-RV32-NEXT:    vlse64.v v5, (a5), zero
; LMULMAX1-RV32-NEXT:    lui a5, 4080
; LMULMAX1-RV32-NEXT:    vand.vx v4, v4, a5
; LMULMAX1-RV32-NEXT:    vsrl.vi v6, v2, 8
; LMULMAX1-RV32-NEXT:    vand.vv v6, v6, v5
; LMULMAX1-RV32-NEXT:    vor.vv v4, v6, v4
; LMULMAX1-RV32-NEXT:    vor.vv v3, v4, v3
; LMULMAX1-RV32-NEXT:    vand.vv v4, v2, v5
; LMULMAX1-RV32-NEXT:    vsll.vi v4, v4, 8
; LMULMAX1-RV32-NEXT:    vand.vx v6, v2, a5
; LMULMAX1-RV32-NEXT:    vsll.vi v6, v6, 24
; LMULMAX1-RV32-NEXT:    vor.vv v4, v6, v4
; LMULMAX1-RV32-NEXT:    vsll.vx v6, v2, a2
; LMULMAX1-RV32-NEXT:    vand.vx v2, v2, a4
; LMULMAX1-RV32-NEXT:    vsll.vx v2, v2, a3
; LMULMAX1-RV32-NEXT:    vor.vv v2, v6, v2
; LMULMAX1-RV32-NEXT:    vor.vv v2, v2, v4
; LMULMAX1-RV32-NEXT:    vor.vv v2, v2, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 4
; LMULMAX1-RV32-NEXT:    lui a6, 61681
; LMULMAX1-RV32-NEXT:    addi a6, a6, -241
; LMULMAX1-RV32-NEXT:    vsetvli a7, zero, e32, m1, ta, ma
; LMULMAX1-RV32-NEXT:    vmv.v.x v4, a6
; LMULMAX1-RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; LMULMAX1-RV32-NEXT:    vand.vv v3, v3, v4
; LMULMAX1-RV32-NEXT:    vand.vv v2, v2, v4
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 4
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 2
; LMULMAX1-RV32-NEXT:    lui a6, 209715
; LMULMAX1-RV32-NEXT:    addi a6, a6, 819
; LMULMAX1-RV32-NEXT:    vsetvli a7, zero, e32, m1, ta, ma
; LMULMAX1-RV32-NEXT:    vmv.v.x v6, a6
; LMULMAX1-RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; LMULMAX1-RV32-NEXT:    vand.vv v3, v3, v6
; LMULMAX1-RV32-NEXT:    vand.vv v2, v2, v6
; LMULMAX1-RV32-NEXT:    vsll.vi v2, v2, 2
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v2, 1
; LMULMAX1-RV32-NEXT:    lui a6, 349525
; LMULMAX1-RV32-NEXT:    addi a6, a6, 1365
; LMULMAX1-RV32-NEXT:    vsetvli a7, zero, e32, m1, ta, ma
; LMULMAX1-RV32-NEXT:    vmv.v.x v7, a6
; LMULMAX1-RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; LMULMAX1-RV32-NEXT:    vand.vv v3, v3, v7
; LMULMAX1-RV32-NEXT:    vand.vv v2, v2, v7
; LMULMAX1-RV32-NEXT:    vadd.vv v2, v2, v2
; LMULMAX1-RV32-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV32-NEXT:    vsrl.vx v3, v1, a2
; LMULMAX1-RV32-NEXT:    vsrl.vx v8, v1, a3
; LMULMAX1-RV32-NEXT:    vand.vx v8, v8, a4
; LMULMAX1-RV32-NEXT:    vor.vv v3, v8, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v8, v1, 24
; LMULMAX1-RV32-NEXT:    vand.vx v8, v8, a5
; LMULMAX1-RV32-NEXT:    vsrl.vi v9, v1, 8
; LMULMAX1-RV32-NEXT:    vand.vv v9, v9, v5
; LMULMAX1-RV32-NEXT:    vor.vv v8, v9, v8
; LMULMAX1-RV32-NEXT:    vor.vv v3, v8, v3
; LMULMAX1-RV32-NEXT:    vsll.vx v8, v1, a2
; LMULMAX1-RV32-NEXT:    vand.vx v9, v1, a4
; LMULMAX1-RV32-NEXT:    vsll.vx v9, v9, a3
; LMULMAX1-RV32-NEXT:    vor.vv v8, v8, v9
; LMULMAX1-RV32-NEXT:    vand.vx v9, v1, a5
; LMULMAX1-RV32-NEXT:    vsll.vi v9, v9, 24
; LMULMAX1-RV32-NEXT:    vand.vv v1, v1, v5
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 8
; LMULMAX1-RV32-NEXT:    vor.vv v1, v9, v1
; LMULMAX1-RV32-NEXT:    vor.vv v1, v8, v1
; LMULMAX1-RV32-NEXT:    vor.vv v1, v1, v3
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 4
; LMULMAX1-RV32-NEXT:    vand.vv v3, v3, v4
; LMULMAX1-RV32-NEXT:    vand.vv v1, v1, v4
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 4
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 2
; LMULMAX1-RV32-NEXT:    vand.vv v3, v3, v6
; LMULMAX1-RV32-NEXT:    vand.vv v1, v1, v6
; LMULMAX1-RV32-NEXT:    vsll.vi v1, v1, 2
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vsrl.vi v3, v1, 1
; LMULMAX1-RV32-NEXT:    vand.vv v3, v3, v7
; LMULMAX1-RV32-NEXT:    vand.vv v1, v1, v7
; LMULMAX1-RV32-NEXT:    vadd.vv v1, v1, v1
; LMULMAX1-RV32-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV32-NEXT:    vse64.v v1, (a0)
; LMULMAX1-RV32-NEXT:    vse64.v v2, (a1)
; LMULMAX1-RV32-NEXT:    addi sp, sp, 16
; LMULMAX1-RV32-NEXT:    ret
;
; LMULMAX1-RV64-LABEL: bitreverse_v4i64:
; LMULMAX1-RV64:       # %bb.0:
; LMULMAX1-RV64-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; LMULMAX1-RV64-NEXT:    addi a1, a0, 16
; LMULMAX1-RV64-NEXT:    vle64.v v2, (a1)
; LMULMAX1-RV64-NEXT:    vle64.v v1, (a0)
; LMULMAX1-RV64-NEXT:    li a2, 56
; LMULMAX1-RV64-NEXT:    vsrl.vx v3, v2, a2
; LMULMAX1-RV64-NEXT:    li a3, 40
; LMULMAX1-RV64-NEXT:    vsrl.vx v4, v2, a3
; LMULMAX1-RV64-NEXT:    lui a4, 16
; LMULMAX1-RV64-NEXT:    addiw a4, a4, -256
; LMULMAX1-RV64-NEXT:    vand.vx v4, v4, a4
; LMULMAX1-RV64-NEXT:    vor.vv v3, v4, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v4, v2, 24
; LMULMAX1-RV64-NEXT:    lui a5, 4080
; LMULMAX1-RV64-NEXT:    vand.vx v4, v4, a5
; LMULMAX1-RV64-NEXT:    vsrl.vi v5, v2, 8
; LMULMAX1-RV64-NEXT:    li a6, 255
; LMULMAX1-RV64-NEXT:    slli a6, a6, 24
; LMULMAX1-RV64-NEXT:    vand.vx v5, v5, a6
; LMULMAX1-RV64-NEXT:    vor.vv v4, v5, v4
; LMULMAX1-RV64-NEXT:    vor.vv v3, v4, v3
; LMULMAX1-RV64-NEXT:    vand.vx v4, v2, a6
; LMULMAX1-RV64-NEXT:    vsll.vi v4, v4, 8
; LMULMAX1-RV64-NEXT:    vand.vx v5, v2, a5
; LMULMAX1-RV64-NEXT:    vsll.vi v5, v5, 24
; LMULMAX1-RV64-NEXT:    vor.vv v4, v5, v4
; LMULMAX1-RV64-NEXT:    vsll.vx v5, v2, a2
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a4
; LMULMAX1-RV64-NEXT:    vsll.vx v2, v2, a3
; LMULMAX1-RV64-NEXT:    vor.vv v2, v5, v2
; LMULMAX1-RV64-NEXT:    vor.vv v2, v2, v4
; LMULMAX1-RV64-NEXT:    vor.vv v2, v2, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 4
; LMULMAX1-RV64-NEXT:    lui a7, 61681
; LMULMAX1-RV64-NEXT:    addiw a7, a7, -241
; LMULMAX1-RV64-NEXT:    slli t0, a7, 32
; LMULMAX1-RV64-NEXT:    add a7, a7, t0
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a7
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, a7
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 4
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 2
; LMULMAX1-RV64-NEXT:    lui t0, 209715
; LMULMAX1-RV64-NEXT:    addiw t0, t0, 819
; LMULMAX1-RV64-NEXT:    slli t1, t0, 32
; LMULMAX1-RV64-NEXT:    add t0, t0, t1
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, t0
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, t0
; LMULMAX1-RV64-NEXT:    vsll.vi v2, v2, 2
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v2, 1
; LMULMAX1-RV64-NEXT:    lui t1, 349525
; LMULMAX1-RV64-NEXT:    addiw t1, t1, 1365
; LMULMAX1-RV64-NEXT:    slli t2, t1, 32
; LMULMAX1-RV64-NEXT:    add t1, t1, t2
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, t1
; LMULMAX1-RV64-NEXT:    vand.vx v2, v2, t1
; LMULMAX1-RV64-NEXT:    vadd.vv v2, v2, v2
; LMULMAX1-RV64-NEXT:    vor.vv v2, v3, v2
; LMULMAX1-RV64-NEXT:    vsrl.vx v3, v1, a2
; LMULMAX1-RV64-NEXT:    vsrl.vx v4, v1, a3
; LMULMAX1-RV64-NEXT:    vand.vx v4, v4, a4
; LMULMAX1-RV64-NEXT:    vor.vv v3, v4, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v4, v1, 24
; LMULMAX1-RV64-NEXT:    vand.vx v4, v4, a5
; LMULMAX1-RV64-NEXT:    vsrl.vi v5, v1, 8
; LMULMAX1-RV64-NEXT:    vand.vx v5, v5, a6
; LMULMAX1-RV64-NEXT:    vor.vv v4, v5, v4
; LMULMAX1-RV64-NEXT:    vor.vv v3, v4, v3
; LMULMAX1-RV64-NEXT:    vand.vx v4, v1, a6
; LMULMAX1-RV64-NEXT:    vsll.vi v4, v4, 8
; LMULMAX1-RV64-NEXT:    vand.vx v5, v1, a5
; LMULMAX1-RV64-NEXT:    vsll.vi v5, v5, 24
; LMULMAX1-RV64-NEXT:    vor.vv v4, v5, v4
; LMULMAX1-RV64-NEXT:    vsll.vx v5, v1, a2
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a4
; LMULMAX1-RV64-NEXT:    vsll.vx v1, v1, a3
; LMULMAX1-RV64-NEXT:    vor.vv v1, v5, v1
; LMULMAX1-RV64-NEXT:    vor.vv v1, v1, v4
; LMULMAX1-RV64-NEXT:    vor.vv v1, v1, v3
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 4
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, a7
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, a7
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 4
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 2
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, t0
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, t0
; LMULMAX1-RV64-NEXT:    vsll.vi v1, v1, 2
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vsrl.vi v3, v1, 1
; LMULMAX1-RV64-NEXT:    vand.vx v3, v3, t1
; LMULMAX1-RV64-NEXT:    vand.vx v1, v1, t1
; LMULMAX1-RV64-NEXT:    vadd.vv v1, v1, v1
; LMULMAX1-RV64-NEXT:    vor.vv v1, v3, v1
; LMULMAX1-RV64-NEXT:    vse64.v v1, (a0)
; LMULMAX1-RV64-NEXT:    vse64.v v2, (a1)
; LMULMAX1-RV64-NEXT:    ret
;
; ZVBB-LABEL: bitreverse_v4i64:
; ZVBB:       # %bb.0:
; ZVBB-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; ZVBB-NEXT:    vle64.v v2, (a0)
; ZVBB-NEXT:    vbrev.v v2, v2
; ZVBB-NEXT:    vse64.v v2, (a0)
; ZVBB-NEXT:    ret
  %a = load <4 x i64>, ptr %x
  %b = load <4 x i64>, ptr %y
  %c = call <4 x i64> @llvm.bitreverse.v4i64(<4 x i64> %a)
  store <4 x i64> %c, ptr %x
  ret void
}
declare <4 x i64> @llvm.bitreverse.v4i64(<4 x i64>)
