; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+zve64d,+f,+d,+zfh,+zvfh,+experimental-zvfbfmin \
; RUN:     -verify-machineinstrs < %s | FileCheck %s

declare void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i8(riscv_mf8x2, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i8.nxv1i1(riscv_mf8x2, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i8(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i8(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i8(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i8.nxv1i1(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i16(riscv_mf8x2, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i16.nxv1i1(riscv_mf8x2, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i16(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i16(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i16(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i16.nxv1i1(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i32(riscv_mf8x2, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i32.nxv1i1(riscv_mf8x2, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i32(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i32(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i32(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i32.nxv1i1(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i64(riscv_mf8x2, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i64.nxv1i1(riscv_mf8x2, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i64(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i8_riscv_mf8x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf8x2.nxv1i64(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i64(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i8_riscv_mf8x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf8x2.nxv1i64.nxv1i1(riscv_mf8x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i8(riscv_mf4x2, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i8.nxv2i1(riscv_mf4x2, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i8(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i8(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i8(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i8.nxv2i1(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i16(riscv_mf4x2, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i16.nxv2i1(riscv_mf4x2, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i16(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i16(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i16(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i16.nxv2i1(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i32(riscv_mf4x2, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i32.nxv2i1(riscv_mf4x2, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i32(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i32(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i32(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i32.nxv2i1(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i64(riscv_mf4x2, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i64.nxv2i1(riscv_mf4x2, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i64(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i8_riscv_mf4x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv2i64(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i64(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i8_riscv_mf4x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv2i64.nxv2i1(riscv_mf4x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i8(riscv_mf2x2, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i8.nxv4i1(riscv_mf2x2, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i8(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i8(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i8(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i8.nxv4i1(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i16(riscv_mf2x2, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i16.nxv4i1(riscv_mf2x2, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i16(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i16(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i16(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i16.nxv4i1(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i32(riscv_mf2x2, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i32.nxv4i1(riscv_mf2x2, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i32(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i32(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i32(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i32.nxv4i1(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i64(riscv_mf2x2, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i64.nxv4i1(riscv_mf2x2, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i64(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i8_riscv_mf2x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv4i64(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i64(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i8_riscv_mf2x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv4i64.nxv4i1(riscv_mf2x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i8(riscv_m1x2, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i8.nxv8i1(riscv_m1x2, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i8(riscv_m1x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i8(riscv_m1x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i8(riscv_m1x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i8.nxv8i1(riscv_m1x2 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i16(riscv_m1x2, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i16.nxv8i1(riscv_m1x2, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i16(riscv_m1x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i16(riscv_m1x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i16(riscv_m1x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i16.nxv8i1(riscv_m1x2 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i32(riscv_m1x2, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i32.nxv8i1(riscv_m1x2, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i32(riscv_m1x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i32(riscv_m1x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i32(riscv_m1x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i32.nxv8i1(riscv_m1x2 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i64(riscv_m1x2, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i64.nxv8i1(riscv_m1x2, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i64(riscv_m1x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i8_riscv_m1x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv8i64(riscv_m1x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i64(riscv_m1x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i8_riscv_m1x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv8i64.nxv8i1(riscv_m1x2 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv16i8(riscv_m2x2, ptr, <vscale x 16 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv16i8.nxv16i1(riscv_m2x2, ptr, <vscale x 16 x i8>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg2_nxv16i8_riscv_m2x2_nxv16i8(riscv_m2x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16i8_riscv_m2x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv16i8(riscv_m2x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv16i8_riscv_m2x2_nxv16i8(riscv_m2x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16i8_riscv_m2x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv16i8.nxv16i1(riscv_m2x2 %val, ptr %base, <vscale x 16 x i8> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv16i16(riscv_m2x2, ptr, <vscale x 16 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv16i16.nxv16i1(riscv_m2x2, ptr, <vscale x 16 x i16>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg2_nxv16i8_riscv_m2x2_nxv16i16(riscv_m2x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16i8_riscv_m2x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv16i16(riscv_m2x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv16i8_riscv_m2x2_nxv16i16(riscv_m2x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16i8_riscv_m2x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv16i16.nxv16i1(riscv_m2x2 %val, ptr %base, <vscale x 16 x i16> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv16i32(riscv_m2x2, ptr, <vscale x 16 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv16i32.nxv16i1(riscv_m2x2, ptr, <vscale x 16 x i32>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg2_nxv16i8_riscv_m2x2_nxv16i32(riscv_m2x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16i8_riscv_m2x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv16i32(riscv_m2x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv16i8_riscv_m2x2_nxv16i32(riscv_m2x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16i8_riscv_m2x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv16i32.nxv16i1(riscv_m2x2 %val, ptr %base, <vscale x 16 x i32> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv32i8(riscv_m4x2, ptr, <vscale x 32 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv32i8.nxv32i1(riscv_m4x2, ptr, <vscale x 32 x i8>, <vscale x 32 x i1>, i64, i64)

define void @test_vsuxseg2_nxv32i8_riscv_m4x2_nxv32i8(riscv_m4x2 %val, ptr %base, <vscale x 32 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv32i8_riscv_m4x2_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv32i8(riscv_m4x2 %val, ptr %base, <vscale x 32 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv32i8_riscv_m4x2_nxv32i8(riscv_m4x2 %val, ptr %base, <vscale x 32 x i8> %index, i64 %vl, <vscale x 32 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv32i8_riscv_m4x2_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv32i8.nxv32i1(riscv_m4x2 %val, ptr %base, <vscale x 32 x i8> %index, <vscale x 32 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv32i16(riscv_m4x2, ptr, <vscale x 32 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv32i16.nxv32i1(riscv_m4x2, ptr, <vscale x 32 x i16>, <vscale x 32 x i1>, i64, i64)

define void @test_vsuxseg2_nxv32i8_riscv_m4x2_nxv32i16(riscv_m4x2 %val, ptr %base, <vscale x 32 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv32i8_riscv_m4x2_nxv32i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv32i16(riscv_m4x2 %val, ptr %base, <vscale x 32 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg2_mask_nxv32i8_riscv_m4x2_nxv32i16(riscv_m4x2 %val, ptr %base, <vscale x 32 x i16> %index, i64 %vl, <vscale x 32 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv32i8_riscv_m4x2_nxv32i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv32i16.nxv32i1(riscv_m4x2 %val, ptr %base, <vscale x 32 x i16> %index, <vscale x 32 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i8(riscv_mf8x3, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i8.nxv1i1(riscv_mf8x3, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i8(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i8(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i8(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i8.nxv1i1(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i16(riscv_mf8x3, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i16.nxv1i1(riscv_mf8x3, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i16(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i16(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i16(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i16.nxv1i1(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i32(riscv_mf8x3, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i32.nxv1i1(riscv_mf8x3, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i32(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i32(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i32(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i32.nxv1i1(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i64(riscv_mf8x3, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i64.nxv1i1(riscv_mf8x3, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i64(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i8_riscv_mf8x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf8x3.nxv1i64(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i64(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i8_riscv_mf8x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf8x3.nxv1i64.nxv1i1(riscv_mf8x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i8(riscv_mf4x3, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i8.nxv2i1(riscv_mf4x3, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i8(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i8(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i8(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i8.nxv2i1(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i16(riscv_mf4x3, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i16.nxv2i1(riscv_mf4x3, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i16(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i16(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i16(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i16.nxv2i1(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i32(riscv_mf4x3, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i32.nxv2i1(riscv_mf4x3, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i32(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i32(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i32(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i32.nxv2i1(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i64(riscv_mf4x3, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i64.nxv2i1(riscv_mf4x3, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i64(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i8_riscv_mf4x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv2i64(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i64(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i8_riscv_mf4x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv2i64.nxv2i1(riscv_mf4x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i8(riscv_mf2x3, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i8.nxv4i1(riscv_mf2x3, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i8(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i8(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i8(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i8.nxv4i1(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i16(riscv_mf2x3, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i16.nxv4i1(riscv_mf2x3, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i16(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i16(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i16(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i16.nxv4i1(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i32(riscv_mf2x3, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i32.nxv4i1(riscv_mf2x3, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i32(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i32(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i32(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i32.nxv4i1(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i64(riscv_mf2x3, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i64.nxv4i1(riscv_mf2x3, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i64(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i8_riscv_mf2x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv4i64(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i64(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i8_riscv_mf2x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv4i64.nxv4i1(riscv_mf2x3 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i8(riscv_m1x3, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i8.nxv8i1(riscv_m1x3, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i8(riscv_m1x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i8(riscv_m1x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i8(riscv_m1x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i8.nxv8i1(riscv_m1x3 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i16(riscv_m1x3, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i16.nxv8i1(riscv_m1x3, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i16(riscv_m1x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i16(riscv_m1x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i16(riscv_m1x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i16.nxv8i1(riscv_m1x3 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i32(riscv_m1x3, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i32.nxv8i1(riscv_m1x3, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i32(riscv_m1x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i32(riscv_m1x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i32(riscv_m1x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i32.nxv8i1(riscv_m1x3 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i64(riscv_m1x3, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i64.nxv8i1(riscv_m1x3, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i64(riscv_m1x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i8_riscv_m1x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv8i64(riscv_m1x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i64(riscv_m1x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i8_riscv_m1x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv8i64.nxv8i1(riscv_m1x3 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv16i8(riscv_m2x3, ptr, <vscale x 16 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv16i8.nxv16i1(riscv_m2x3, ptr, <vscale x 16 x i8>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg3_nxv16i8_riscv_m2x3_nxv16i8(riscv_m2x3 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv16i8_riscv_m2x3_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv16i8(riscv_m2x3 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv16i8_riscv_m2x3_nxv16i8(riscv_m2x3 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv16i8_riscv_m2x3_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv16i8.nxv16i1(riscv_m2x3 %val, ptr %base, <vscale x 16 x i8> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv16i16(riscv_m2x3, ptr, <vscale x 16 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv16i16.nxv16i1(riscv_m2x3, ptr, <vscale x 16 x i16>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg3_nxv16i8_riscv_m2x3_nxv16i16(riscv_m2x3 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv16i8_riscv_m2x3_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv16i16(riscv_m2x3 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv16i8_riscv_m2x3_nxv16i16(riscv_m2x3 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv16i8_riscv_m2x3_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv16i16.nxv16i1(riscv_m2x3 %val, ptr %base, <vscale x 16 x i16> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv16i32(riscv_m2x3, ptr, <vscale x 16 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv16i32.nxv16i1(riscv_m2x3, ptr, <vscale x 16 x i32>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg3_nxv16i8_riscv_m2x3_nxv16i32(riscv_m2x3 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv16i8_riscv_m2x3_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv16i32(riscv_m2x3 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg3_mask_nxv16i8_riscv_m2x3_nxv16i32(riscv_m2x3 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv16i8_riscv_m2x3_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv16i32.nxv16i1(riscv_m2x3 %val, ptr %base, <vscale x 16 x i32> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i8(riscv_mf8x4, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i8.nxv1i1(riscv_mf8x4, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i8(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i8(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i8(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i8.nxv1i1(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i16(riscv_mf8x4, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i16.nxv1i1(riscv_mf8x4, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i16(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i16(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i16(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i16.nxv1i1(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i32(riscv_mf8x4, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i32.nxv1i1(riscv_mf8x4, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i32(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i32(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i32(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i32.nxv1i1(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i64(riscv_mf8x4, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i64.nxv1i1(riscv_mf8x4, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i64(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i8_riscv_mf8x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf8x4.nxv1i64(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i64(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i8_riscv_mf8x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf8x4.nxv1i64.nxv1i1(riscv_mf8x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i8(riscv_mf4x4, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i8.nxv2i1(riscv_mf4x4, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i8(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i8(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i8(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i8.nxv2i1(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i16(riscv_mf4x4, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i16.nxv2i1(riscv_mf4x4, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i16(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i16(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i16(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i16.nxv2i1(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i32(riscv_mf4x4, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i32.nxv2i1(riscv_mf4x4, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i32(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i32(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i32(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i32.nxv2i1(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i64(riscv_mf4x4, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i64.nxv2i1(riscv_mf4x4, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i64(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i8_riscv_mf4x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv2i64(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i64(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i8_riscv_mf4x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv2i64.nxv2i1(riscv_mf4x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i8(riscv_mf2x4, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i8.nxv4i1(riscv_mf2x4, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i8(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i8(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i8(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i8.nxv4i1(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i16(riscv_mf2x4, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i16.nxv4i1(riscv_mf2x4, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i16(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i16(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i16(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i16.nxv4i1(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i32(riscv_mf2x4, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i32.nxv4i1(riscv_mf2x4, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i32(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i32(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i32(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i32.nxv4i1(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i64(riscv_mf2x4, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i64.nxv4i1(riscv_mf2x4, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i64(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i8_riscv_mf2x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv4i64(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i64(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i8_riscv_mf2x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv4i64.nxv4i1(riscv_mf2x4 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i8(riscv_m1x4, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i8.nxv8i1(riscv_m1x4, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i8(riscv_m1x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i8(riscv_m1x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i8(riscv_m1x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i8.nxv8i1(riscv_m1x4 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i16(riscv_m1x4, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i16.nxv8i1(riscv_m1x4, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i16(riscv_m1x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i16(riscv_m1x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i16(riscv_m1x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i16.nxv8i1(riscv_m1x4 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i32(riscv_m1x4, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i32.nxv8i1(riscv_m1x4, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i32(riscv_m1x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i32(riscv_m1x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i32(riscv_m1x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i32.nxv8i1(riscv_m1x4 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i64(riscv_m1x4, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i64.nxv8i1(riscv_m1x4, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i64(riscv_m1x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i8_riscv_m1x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv8i64(riscv_m1x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i64(riscv_m1x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i8_riscv_m1x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv8i64.nxv8i1(riscv_m1x4 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv16i8(riscv_m2x4, ptr, <vscale x 16 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv16i8.nxv16i1(riscv_m2x4, ptr, <vscale x 16 x i8>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg4_nxv16i8_riscv_m2x4_nxv16i8(riscv_m2x4 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv16i8_riscv_m2x4_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv16i8(riscv_m2x4 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv16i8_riscv_m2x4_nxv16i8(riscv_m2x4 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv16i8_riscv_m2x4_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv16i8.nxv16i1(riscv_m2x4 %val, ptr %base, <vscale x 16 x i8> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv16i16(riscv_m2x4, ptr, <vscale x 16 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv16i16.nxv16i1(riscv_m2x4, ptr, <vscale x 16 x i16>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg4_nxv16i8_riscv_m2x4_nxv16i16(riscv_m2x4 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv16i8_riscv_m2x4_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv16i16(riscv_m2x4 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv16i8_riscv_m2x4_nxv16i16(riscv_m2x4 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv16i8_riscv_m2x4_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv16i16.nxv16i1(riscv_m2x4 %val, ptr %base, <vscale x 16 x i16> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv16i32(riscv_m2x4, ptr, <vscale x 16 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv16i32.nxv16i1(riscv_m2x4, ptr, <vscale x 16 x i32>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg4_nxv16i8_riscv_m2x4_nxv16i32(riscv_m2x4 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv16i8_riscv_m2x4_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv16i32(riscv_m2x4 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg4_mask_nxv16i8_riscv_m2x4_nxv16i32(riscv_m2x4 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv16i8_riscv_m2x4_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv16i32.nxv16i1(riscv_m2x4 %val, ptr %base, <vscale x 16 x i32> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i8(riscv_mf8x5, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i8.nxv1i1(riscv_mf8x5, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i8(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i8(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i8(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i8.nxv1i1(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i16(riscv_mf8x5, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i16.nxv1i1(riscv_mf8x5, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i16(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i16(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i16(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i16.nxv1i1(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i32(riscv_mf8x5, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i32.nxv1i1(riscv_mf8x5, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i32(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i32(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i32(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i32.nxv1i1(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i64(riscv_mf8x5, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i64.nxv1i1(riscv_mf8x5, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i64(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i8_riscv_mf8x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf8x5.nxv1i64(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i64(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i8_riscv_mf8x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf8x5.nxv1i64.nxv1i1(riscv_mf8x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i8(riscv_mf4x5, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i8.nxv2i1(riscv_mf4x5, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i8(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i8(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i8(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i8.nxv2i1(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i16(riscv_mf4x5, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i16.nxv2i1(riscv_mf4x5, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i16(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i16(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i16(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i16.nxv2i1(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i32(riscv_mf4x5, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i32.nxv2i1(riscv_mf4x5, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i32(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i32(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i32(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i32.nxv2i1(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i64(riscv_mf4x5, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i64.nxv2i1(riscv_mf4x5, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i64(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i8_riscv_mf4x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv2i64(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i64(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i8_riscv_mf4x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv2i64.nxv2i1(riscv_mf4x5 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i8(riscv_mf2x5, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i8.nxv4i1(riscv_mf2x5, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i8(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i8(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i8(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i8.nxv4i1(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i16(riscv_mf2x5, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i16.nxv4i1(riscv_mf2x5, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i16(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i16(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i16(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i16.nxv4i1(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i32(riscv_mf2x5, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i32.nxv4i1(riscv_mf2x5, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i32(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i32(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i32(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i32.nxv4i1(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i64(riscv_mf2x5, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i64.nxv4i1(riscv_mf2x5, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i64(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i8_riscv_mf2x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv4i64(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i64(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i8_riscv_mf2x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv4i64.nxv4i1(riscv_mf2x5 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i8(riscv_m1x5, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i8.nxv8i1(riscv_m1x5, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i8(riscv_m1x5 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i8(riscv_m1x5 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i8(riscv_m1x5 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i8.nxv8i1(riscv_m1x5 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i16(riscv_m1x5, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i16.nxv8i1(riscv_m1x5, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i16(riscv_m1x5 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i16(riscv_m1x5 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i16(riscv_m1x5 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i16.nxv8i1(riscv_m1x5 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i32(riscv_m1x5, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i32.nxv8i1(riscv_m1x5, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i32(riscv_m1x5 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i32(riscv_m1x5 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i32(riscv_m1x5 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i32.nxv8i1(riscv_m1x5 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i64(riscv_m1x5, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i64.nxv8i1(riscv_m1x5, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i64(riscv_m1x5 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv8i8_riscv_m1x5_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv8i64(riscv_m1x5 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i64(riscv_m1x5 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv8i8_riscv_m1x5_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv8i64.nxv8i1(riscv_m1x5 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i8(riscv_mf8x6, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i8.nxv1i1(riscv_mf8x6, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i8(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i8(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i8(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i8.nxv1i1(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i16(riscv_mf8x6, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i16.nxv1i1(riscv_mf8x6, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i16(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i16(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i16(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i16.nxv1i1(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i32(riscv_mf8x6, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i32.nxv1i1(riscv_mf8x6, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i32(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i32(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i32(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i32.nxv1i1(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i64(riscv_mf8x6, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i64.nxv1i1(riscv_mf8x6, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i64(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i8_riscv_mf8x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf8x6.nxv1i64(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i64(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i8_riscv_mf8x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf8x6.nxv1i64.nxv1i1(riscv_mf8x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i8(riscv_mf4x6, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i8.nxv2i1(riscv_mf4x6, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i8(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i8(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i8(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i8.nxv2i1(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i16(riscv_mf4x6, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i16.nxv2i1(riscv_mf4x6, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i16(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i16(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i16(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i16.nxv2i1(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i32(riscv_mf4x6, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i32.nxv2i1(riscv_mf4x6, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i32(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i32(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i32(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i32.nxv2i1(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i64(riscv_mf4x6, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i64.nxv2i1(riscv_mf4x6, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i64(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i8_riscv_mf4x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv2i64(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i64(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i8_riscv_mf4x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv2i64.nxv2i1(riscv_mf4x6 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i8(riscv_mf2x6, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i8.nxv4i1(riscv_mf2x6, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i8(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i8(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i8(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i8.nxv4i1(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i16(riscv_mf2x6, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i16.nxv4i1(riscv_mf2x6, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i16(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i16(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i16(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i16.nxv4i1(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i32(riscv_mf2x6, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i32.nxv4i1(riscv_mf2x6, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i32(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i32(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i32(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i32.nxv4i1(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i64(riscv_mf2x6, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i64.nxv4i1(riscv_mf2x6, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i64(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i8_riscv_mf2x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv4i64(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i64(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i8_riscv_mf2x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv4i64.nxv4i1(riscv_mf2x6 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i8(riscv_m1x6, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i8.nxv8i1(riscv_m1x6, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i8(riscv_m1x6 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i8(riscv_m1x6 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i8(riscv_m1x6 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i8.nxv8i1(riscv_m1x6 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i16(riscv_m1x6, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i16.nxv8i1(riscv_m1x6, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i16(riscv_m1x6 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i16(riscv_m1x6 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i16(riscv_m1x6 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i16.nxv8i1(riscv_m1x6 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i32(riscv_m1x6, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i32.nxv8i1(riscv_m1x6, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i32(riscv_m1x6 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i32(riscv_m1x6 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i32(riscv_m1x6 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i32.nxv8i1(riscv_m1x6 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i64(riscv_m1x6, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i64.nxv8i1(riscv_m1x6, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i64(riscv_m1x6 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv8i8_riscv_m1x6_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv8i64(riscv_m1x6 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i64(riscv_m1x6 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv8i8_riscv_m1x6_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv8i64.nxv8i1(riscv_m1x6 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i8(riscv_mf8x7, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i8.nxv1i1(riscv_mf8x7, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i8(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i8(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i8(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i8.nxv1i1(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i16(riscv_mf8x7, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i16.nxv1i1(riscv_mf8x7, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i16(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i16(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i16(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i16.nxv1i1(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i32(riscv_mf8x7, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i32.nxv1i1(riscv_mf8x7, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i32(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i32(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i32(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i32.nxv1i1(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i64(riscv_mf8x7, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i64.nxv1i1(riscv_mf8x7, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i64(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i8_riscv_mf8x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf8x7.nxv1i64(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i64(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i8_riscv_mf8x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf8x7.nxv1i64.nxv1i1(riscv_mf8x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i8(riscv_mf4x7, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i8.nxv2i1(riscv_mf4x7, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i8(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i8(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i8(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i8.nxv2i1(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i16(riscv_mf4x7, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i16.nxv2i1(riscv_mf4x7, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i16(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i16(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i16(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i16.nxv2i1(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i32(riscv_mf4x7, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i32.nxv2i1(riscv_mf4x7, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i32(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i32(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i32(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i32.nxv2i1(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i64(riscv_mf4x7, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i64.nxv2i1(riscv_mf4x7, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i64(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i8_riscv_mf4x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv2i64(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i64(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i8_riscv_mf4x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv2i64.nxv2i1(riscv_mf4x7 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i8(riscv_mf2x7, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i8.nxv4i1(riscv_mf2x7, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i8(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i8(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i8(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i8.nxv4i1(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i16(riscv_mf2x7, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i16.nxv4i1(riscv_mf2x7, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i16(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i16(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i16(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i16.nxv4i1(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i32(riscv_mf2x7, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i32.nxv4i1(riscv_mf2x7, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i32(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i32(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i32(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i32.nxv4i1(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i64(riscv_mf2x7, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i64.nxv4i1(riscv_mf2x7, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i64(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i8_riscv_mf2x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv4i64(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i64(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i8_riscv_mf2x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv4i64.nxv4i1(riscv_mf2x7 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i8(riscv_m1x7, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i8.nxv8i1(riscv_m1x7, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i8(riscv_m1x7 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i8(riscv_m1x7 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i8(riscv_m1x7 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i8.nxv8i1(riscv_m1x7 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i16(riscv_m1x7, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i16.nxv8i1(riscv_m1x7, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i16(riscv_m1x7 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i16(riscv_m1x7 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i16(riscv_m1x7 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i16.nxv8i1(riscv_m1x7 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i32(riscv_m1x7, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i32.nxv8i1(riscv_m1x7, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i32(riscv_m1x7 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i32(riscv_m1x7 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i32(riscv_m1x7 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i32.nxv8i1(riscv_m1x7 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i64(riscv_m1x7, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i64.nxv8i1(riscv_m1x7, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i64(riscv_m1x7 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv8i8_riscv_m1x7_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv8i64(riscv_m1x7 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i64(riscv_m1x7 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv8i8_riscv_m1x7_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv8i64.nxv8i1(riscv_m1x7 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i8(riscv_mf8x8, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i8.nxv1i1(riscv_mf8x8, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i8(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i8(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i8(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i8.nxv1i1(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i16(riscv_mf8x8, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i16.nxv1i1(riscv_mf8x8, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i16(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i16(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i16(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i16.nxv1i1(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i32(riscv_mf8x8, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i32.nxv1i1(riscv_mf8x8, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i32(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i32(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i32(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i32.nxv1i1(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i64(riscv_mf8x8, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i64.nxv1i1(riscv_mf8x8, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i64(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i8_riscv_mf8x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf8x8.nxv1i64(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i64(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i8_riscv_mf8x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf8x8.nxv1i64.nxv1i1(riscv_mf8x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i8(riscv_mf4x8, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i8.nxv2i1(riscv_mf4x8, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i8(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i8(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i8(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i8.nxv2i1(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i16(riscv_mf4x8, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i16.nxv2i1(riscv_mf4x8, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i16(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i16(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i16(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i16.nxv2i1(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i32(riscv_mf4x8, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i32.nxv2i1(riscv_mf4x8, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i32(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i32(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i32(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i32.nxv2i1(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i64(riscv_mf4x8, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i64.nxv2i1(riscv_mf4x8, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i64(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i8_riscv_mf4x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv2i64(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i64(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i8_riscv_mf4x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv2i64.nxv2i1(riscv_mf4x8 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i8(riscv_mf2x8, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i8.nxv4i1(riscv_mf2x8, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i8(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i8(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i8(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i8.nxv4i1(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i16(riscv_mf2x8, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i16.nxv4i1(riscv_mf2x8, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i16(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i16(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i16(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i16.nxv4i1(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i32(riscv_mf2x8, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i32.nxv4i1(riscv_mf2x8, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i32(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i32(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i32(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i32.nxv4i1(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i64(riscv_mf2x8, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i64.nxv4i1(riscv_mf2x8, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i64(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i8_riscv_mf2x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv4i64(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i64(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i8_riscv_mf2x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv4i64.nxv4i1(riscv_mf2x8 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i8(riscv_m1x8, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i8.nxv8i1(riscv_m1x8, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i8(riscv_m1x8 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i8(riscv_m1x8 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i8(riscv_m1x8 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i8.nxv8i1(riscv_m1x8 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i16(riscv_m1x8, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i16.nxv8i1(riscv_m1x8, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i16(riscv_m1x8 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i16(riscv_m1x8 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i16(riscv_m1x8 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i16.nxv8i1(riscv_m1x8 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i32(riscv_m1x8, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i32.nxv8i1(riscv_m1x8, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i32(riscv_m1x8 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i32(riscv_m1x8 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i32(riscv_m1x8 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i32.nxv8i1(riscv_m1x8 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i64(riscv_m1x8, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i64.nxv8i1(riscv_m1x8, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i64(riscv_m1x8 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv8i8_riscv_m1x8_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv8i64(riscv_m1x8 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 3)
  ret void
}

define void @test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i64(riscv_m1x8 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv8i8_riscv_m1x8_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv8i64.nxv8i1(riscv_m1x8 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i8(riscv_mf4x2, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i8.nxv1i1(riscv_mf4x2, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i8.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i16(riscv_mf4x2, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i16.nxv1i1(riscv_mf4x2, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i16.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i32(riscv_mf4x2, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i32.nxv1i1(riscv_mf4x2, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i32.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i64(riscv_mf4x2, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i64.nxv1i1(riscv_mf4x2, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i16_riscv_mf4x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i16_riscv_mf4x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i64.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i8(riscv_mf2x2, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i8.nxv2i1(riscv_mf2x2, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i8.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i16(riscv_mf2x2, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i16.nxv2i1(riscv_mf2x2, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i16.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i32(riscv_mf2x2, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i32.nxv2i1(riscv_mf2x2, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i32.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i64(riscv_mf2x2, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i64.nxv2i1(riscv_mf2x2, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i16_riscv_mf2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i16_riscv_mf2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i64.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i8(riscv_m1x2, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i8.nxv4i1(riscv_m1x2, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i8.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i16(riscv_m1x2, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i16.nxv4i1(riscv_m1x2, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i16.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i32(riscv_m1x2, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i32.nxv4i1(riscv_m1x2, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i32.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i64(riscv_m1x2, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i64.nxv4i1(riscv_m1x2, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i16_riscv_m1x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i16_riscv_m1x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i64.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i8(riscv_m2x2, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i8.nxv8i1(riscv_m2x2, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i8.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i16(riscv_m2x2, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i16.nxv8i1(riscv_m2x2, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i16.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i32(riscv_m2x2, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i32.nxv8i1(riscv_m2x2, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i32.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i64(riscv_m2x2, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i64.nxv8i1(riscv_m2x2, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i16_riscv_m2x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i16_riscv_m2x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i64.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i8(riscv_m4x2, ptr, <vscale x 16 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i8.nxv16i1(riscv_m4x2, ptr, <vscale x 16 x i8>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg2_nxv16i16_riscv_m4x2_nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16i16_riscv_m4x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16i16_riscv_m4x2_nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16i16_riscv_m4x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i8.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i16(riscv_m4x2, ptr, <vscale x 16 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i16.nxv16i1(riscv_m4x2, ptr, <vscale x 16 x i16>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg2_nxv16i16_riscv_m4x2_nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16i16_riscv_m4x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16i16_riscv_m4x2_nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16i16_riscv_m4x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i16.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i32(riscv_m4x2, ptr, <vscale x 16 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i32.nxv16i1(riscv_m4x2, ptr, <vscale x 16 x i32>, <vscale x 16 x i1>, i64, i64)

define void @test_vsuxseg2_nxv16i16_riscv_m4x2_nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16i16_riscv_m4x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16i16_riscv_m4x2_nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16i16_riscv_m4x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i32.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i8(riscv_mf4x3, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i8.nxv1i1(riscv_mf4x3, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i8.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i16(riscv_mf4x3, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i16.nxv1i1(riscv_mf4x3, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i16.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i32(riscv_mf4x3, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i32.nxv1i1(riscv_mf4x3, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i32.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i64(riscv_mf4x3, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i64.nxv1i1(riscv_mf4x3, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i16_riscv_mf4x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i16_riscv_mf4x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i64.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i8(riscv_mf2x3, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i8.nxv2i1(riscv_mf2x3, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i8.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i16(riscv_mf2x3, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i16.nxv2i1(riscv_mf2x3, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i16.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i32(riscv_mf2x3, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i32.nxv2i1(riscv_mf2x3, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i32.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i64(riscv_mf2x3, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i64.nxv2i1(riscv_mf2x3, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i16_riscv_mf2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i16_riscv_mf2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i64.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i8(riscv_m1x3, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i8.nxv4i1(riscv_m1x3, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i8.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i16(riscv_m1x3, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i16.nxv4i1(riscv_m1x3, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i16.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i32(riscv_m1x3, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i32.nxv4i1(riscv_m1x3, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i32.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i64(riscv_m1x3, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i64.nxv4i1(riscv_m1x3, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i16_riscv_m1x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i16_riscv_m1x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i64.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i8(riscv_m2x3, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i8.nxv8i1(riscv_m2x3, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i8.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i16(riscv_m2x3, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i16.nxv8i1(riscv_m2x3, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i16.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i32(riscv_m2x3, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i32.nxv8i1(riscv_m2x3, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i32.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i64(riscv_m2x3, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i64.nxv8i1(riscv_m2x3, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8i16_riscv_m2x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8i16_riscv_m2x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i64.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i8(riscv_mf4x4, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i8.nxv1i1(riscv_mf4x4, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i8.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i16(riscv_mf4x4, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i16.nxv1i1(riscv_mf4x4, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i16.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i32(riscv_mf4x4, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i32.nxv1i1(riscv_mf4x4, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i32.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i64(riscv_mf4x4, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i64.nxv1i1(riscv_mf4x4, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i16_riscv_mf4x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i16_riscv_mf4x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i64.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i8(riscv_mf2x4, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i8.nxv2i1(riscv_mf2x4, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i8.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i16(riscv_mf2x4, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i16.nxv2i1(riscv_mf2x4, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i16.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i32(riscv_mf2x4, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i32.nxv2i1(riscv_mf2x4, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i32.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i64(riscv_mf2x4, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i64.nxv2i1(riscv_mf2x4, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i16_riscv_mf2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i16_riscv_mf2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i64.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i8(riscv_m1x4, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i8.nxv4i1(riscv_m1x4, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i8.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i16(riscv_m1x4, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i16.nxv4i1(riscv_m1x4, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i16.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i32(riscv_m1x4, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i32.nxv4i1(riscv_m1x4, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i32.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i64(riscv_m1x4, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i64.nxv4i1(riscv_m1x4, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i16_riscv_m1x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i16_riscv_m1x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i64.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i8(riscv_m2x4, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i8.nxv8i1(riscv_m2x4, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i8.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i16(riscv_m2x4, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i16.nxv8i1(riscv_m2x4, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i16.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i32(riscv_m2x4, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i32.nxv8i1(riscv_m2x4, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i32.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i64(riscv_m2x4, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i64.nxv8i1(riscv_m2x4, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8i16_riscv_m2x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8i16_riscv_m2x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i64.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i8(riscv_mf4x5, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i8.nxv1i1(riscv_mf4x5, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i8.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i16(riscv_mf4x5, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i16.nxv1i1(riscv_mf4x5, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i16.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i32(riscv_mf4x5, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i32.nxv1i1(riscv_mf4x5, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i32.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i64(riscv_mf4x5, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i64.nxv1i1(riscv_mf4x5, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i16_riscv_mf4x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i16_riscv_mf4x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i64.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i8(riscv_mf2x5, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i8.nxv2i1(riscv_mf2x5, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i8.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i16(riscv_mf2x5, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i16.nxv2i1(riscv_mf2x5, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i16.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i32(riscv_mf2x5, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i32.nxv2i1(riscv_mf2x5, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i32.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i64(riscv_mf2x5, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i64.nxv2i1(riscv_mf2x5, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i16_riscv_mf2x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i16_riscv_mf2x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i64.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i8(riscv_m1x5, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i8.nxv4i1(riscv_m1x5, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i8.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i16(riscv_m1x5, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i16.nxv4i1(riscv_m1x5, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i16.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i32(riscv_m1x5, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i32.nxv4i1(riscv_m1x5, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i32.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i64(riscv_m1x5, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i64.nxv4i1(riscv_m1x5, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4i16_riscv_m1x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4i16_riscv_m1x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i64.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i8(riscv_mf4x6, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i8.nxv1i1(riscv_mf4x6, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i8.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i16(riscv_mf4x6, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i16.nxv1i1(riscv_mf4x6, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i16.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i32(riscv_mf4x6, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i32.nxv1i1(riscv_mf4x6, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i32.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i64(riscv_mf4x6, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i64.nxv1i1(riscv_mf4x6, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i16_riscv_mf4x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i16_riscv_mf4x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i64.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i8(riscv_mf2x6, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i8.nxv2i1(riscv_mf2x6, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i8.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i16(riscv_mf2x6, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i16.nxv2i1(riscv_mf2x6, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i16.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i32(riscv_mf2x6, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i32.nxv2i1(riscv_mf2x6, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i32.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i64(riscv_mf2x6, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i64.nxv2i1(riscv_mf2x6, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i16_riscv_mf2x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i16_riscv_mf2x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i64.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i8(riscv_m1x6, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i8.nxv4i1(riscv_m1x6, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i8.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i16(riscv_m1x6, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i16.nxv4i1(riscv_m1x6, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i16.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i32(riscv_m1x6, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i32.nxv4i1(riscv_m1x6, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i32.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i64(riscv_m1x6, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i64.nxv4i1(riscv_m1x6, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4i16_riscv_m1x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4i16_riscv_m1x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i64.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i8(riscv_mf4x7, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i8.nxv1i1(riscv_mf4x7, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i8.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i16(riscv_mf4x7, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i16.nxv1i1(riscv_mf4x7, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i16.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i32(riscv_mf4x7, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i32.nxv1i1(riscv_mf4x7, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i32.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i64(riscv_mf4x7, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i64.nxv1i1(riscv_mf4x7, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i16_riscv_mf4x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i16_riscv_mf4x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i64.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i8(riscv_mf2x7, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i8.nxv2i1(riscv_mf2x7, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i8.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i16(riscv_mf2x7, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i16.nxv2i1(riscv_mf2x7, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i16.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i32(riscv_mf2x7, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i32.nxv2i1(riscv_mf2x7, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i32.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i64(riscv_mf2x7, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i64.nxv2i1(riscv_mf2x7, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i16_riscv_mf2x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i16_riscv_mf2x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i64.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i8(riscv_m1x7, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i8.nxv4i1(riscv_m1x7, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i8.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i16(riscv_m1x7, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i16.nxv4i1(riscv_m1x7, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i16.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i32(riscv_m1x7, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i32.nxv4i1(riscv_m1x7, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i32.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i64(riscv_m1x7, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i64.nxv4i1(riscv_m1x7, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4i16_riscv_m1x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4i16_riscv_m1x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i64.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i8(riscv_mf4x8, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i8.nxv1i1(riscv_mf4x8, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i8.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i16(riscv_mf4x8, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i16.nxv1i1(riscv_mf4x8, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i16.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i32(riscv_mf4x8, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i32.nxv1i1(riscv_mf4x8, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i32.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i64(riscv_mf4x8, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i64.nxv1i1(riscv_mf4x8, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i16_riscv_mf4x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i16_riscv_mf4x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i64.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i8(riscv_mf2x8, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i8.nxv2i1(riscv_mf2x8, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i8.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i16(riscv_mf2x8, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i16.nxv2i1(riscv_mf2x8, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i16.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i32(riscv_mf2x8, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i32.nxv2i1(riscv_mf2x8, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i32.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i64(riscv_mf2x8, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i64.nxv2i1(riscv_mf2x8, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i16_riscv_mf2x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i16_riscv_mf2x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i64.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i8(riscv_m1x8, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i8.nxv4i1(riscv_m1x8, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i8.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i16(riscv_m1x8, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i16.nxv4i1(riscv_m1x8, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i16.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i32(riscv_m1x8, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i32.nxv4i1(riscv_m1x8, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i32.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i64(riscv_m1x8, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i64.nxv4i1(riscv_m1x8, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4i16_riscv_m1x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4i16_riscv_m1x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i64.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i8(riscv_mf2x2, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i8.nxv1i1(riscv_mf2x2, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i8(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i8(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i8(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i8.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i16(riscv_mf2x2, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i16.nxv1i1(riscv_mf2x2, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i16(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i16(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i16(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i16.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i32(riscv_mf2x2, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i32.nxv1i1(riscv_mf2x2, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i32(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i32(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i32(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i32.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i64(riscv_mf2x2, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i64.nxv1i1(riscv_mf2x2, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i64(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i32_riscv_mf2x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i64(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i64(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i32_riscv_mf2x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i64.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i8(riscv_m1x2, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i8.nxv2i1(riscv_m1x2, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i8(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i8(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i8(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i8.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i16(riscv_m1x2, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i16.nxv2i1(riscv_m1x2, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i16(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i16(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i16(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i16.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i32(riscv_m1x2, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i32.nxv2i1(riscv_m1x2, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i32(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i32(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i32(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i32.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i64(riscv_m1x2, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i64.nxv2i1(riscv_m1x2, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i64(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i32_riscv_m1x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i64(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i64(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i32_riscv_m1x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i64.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i8(riscv_m2x2, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i8.nxv4i1(riscv_m2x2, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i8(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i8(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i8(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i8.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i16(riscv_m2x2, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i16.nxv4i1(riscv_m2x2, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i16(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i16(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i16(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i16.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i32(riscv_m2x2, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i32.nxv4i1(riscv_m2x2, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i32(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i32(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i32(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i32.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i64(riscv_m2x2, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i64.nxv4i1(riscv_m2x2, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i64(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i32_riscv_m2x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i64(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i64(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i32_riscv_m2x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i64.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i8(riscv_m4x2, ptr, <vscale x 8 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i8.nxv8i1(riscv_m4x2, ptr, <vscale x 8 x i8>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i8(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i8(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i8(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i8.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i16(riscv_m4x2, ptr, <vscale x 8 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i16.nxv8i1(riscv_m4x2, ptr, <vscale x 8 x i16>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i16(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i16(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i16(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i16.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i32(riscv_m4x2, ptr, <vscale x 8 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i32.nxv8i1(riscv_m4x2, ptr, <vscale x 8 x i32>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i32(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i32(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i32(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i32.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i64(riscv_m4x2, ptr, <vscale x 8 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i64.nxv8i1(riscv_m4x2, ptr, <vscale x 8 x i64>, <vscale x 8 x i1>, i64, i64)

define void @test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i64(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8i32_riscv_m4x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i64(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i64(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8i32_riscv_m4x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i64.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i8(riscv_mf2x3, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i8.nxv1i1(riscv_mf2x3, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i8(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i8(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i8(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i8.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i16(riscv_mf2x3, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i16.nxv1i1(riscv_mf2x3, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i16(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i16(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i16(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i16.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i32(riscv_mf2x3, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i32.nxv1i1(riscv_mf2x3, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i32(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i32(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i32(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i32.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i64(riscv_mf2x3, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i64.nxv1i1(riscv_mf2x3, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i64(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i32_riscv_mf2x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i64(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i64(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i32_riscv_mf2x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i64.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i8(riscv_m1x3, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i8.nxv2i1(riscv_m1x3, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i8(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i8(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i8(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i8.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i16(riscv_m1x3, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i16.nxv2i1(riscv_m1x3, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i16(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i16(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i16(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i16.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i32(riscv_m1x3, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i32.nxv2i1(riscv_m1x3, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i32(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i32(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i32(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i32.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i64(riscv_m1x3, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i64.nxv2i1(riscv_m1x3, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i64(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i32_riscv_m1x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i64(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i64(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i32_riscv_m1x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i64.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i8(riscv_m2x3, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i8.nxv4i1(riscv_m2x3, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i8(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i8(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i8(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i8.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i16(riscv_m2x3, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i16.nxv4i1(riscv_m2x3, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i16(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i16(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i16(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i16.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i32(riscv_m2x3, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i32.nxv4i1(riscv_m2x3, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i32(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i32(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i32(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i32.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i64(riscv_m2x3, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i64.nxv4i1(riscv_m2x3, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i64(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4i32_riscv_m2x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i64(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i64(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4i32_riscv_m2x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i64.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i8(riscv_mf2x4, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i8.nxv1i1(riscv_mf2x4, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i8(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i8(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i8(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i8.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i16(riscv_mf2x4, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i16.nxv1i1(riscv_mf2x4, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i16(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i16(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i16(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i16.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i32(riscv_mf2x4, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i32.nxv1i1(riscv_mf2x4, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i32(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i32(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i32(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i32.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i64(riscv_mf2x4, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i64.nxv1i1(riscv_mf2x4, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i64(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i32_riscv_mf2x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i64(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i64(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i32_riscv_mf2x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i64.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i8(riscv_m1x4, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i8.nxv2i1(riscv_m1x4, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i8(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i8(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i8(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i8.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i16(riscv_m1x4, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i16.nxv2i1(riscv_m1x4, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i16(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i16(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i16(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i16.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i32(riscv_m1x4, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i32.nxv2i1(riscv_m1x4, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i32(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i32(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i32(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i32.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i64(riscv_m1x4, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i64.nxv2i1(riscv_m1x4, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i64(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i32_riscv_m1x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i64(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i64(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i32_riscv_m1x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i64.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i8(riscv_m2x4, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i8.nxv4i1(riscv_m2x4, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i8(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i8(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i8(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i8.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i16(riscv_m2x4, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i16.nxv4i1(riscv_m2x4, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i16(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i16(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i16(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i16.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i32(riscv_m2x4, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i32.nxv4i1(riscv_m2x4, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i32(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i32(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i32(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i32.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i64(riscv_m2x4, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i64.nxv4i1(riscv_m2x4, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i64(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4i32_riscv_m2x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i64(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i64(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4i32_riscv_m2x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i64.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i8(riscv_mf2x5, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i8.nxv1i1(riscv_mf2x5, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i8(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i8(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i8(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i8.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i16(riscv_mf2x5, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i16.nxv1i1(riscv_mf2x5, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i16(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i16(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i16(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i16.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i32(riscv_mf2x5, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i32.nxv1i1(riscv_mf2x5, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i32(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i32(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i32(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i32.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i64(riscv_mf2x5, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i64.nxv1i1(riscv_mf2x5, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i64(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i32_riscv_mf2x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i64(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i64(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i32_riscv_mf2x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i64.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i8(riscv_m1x5, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i8.nxv2i1(riscv_m1x5, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i8(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i8(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i8(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i8.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i16(riscv_m1x5, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i16.nxv2i1(riscv_m1x5, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i16(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i16(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i16(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i16.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i32(riscv_m1x5, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i32.nxv2i1(riscv_m1x5, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i32(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i32(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i32(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i32.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i64(riscv_m1x5, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i64.nxv2i1(riscv_m1x5, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i64(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2i32_riscv_m1x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i64(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i64(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2i32_riscv_m1x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i64.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i8(riscv_mf2x6, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i8.nxv1i1(riscv_mf2x6, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i8(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i8(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i8(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i8.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i16(riscv_mf2x6, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i16.nxv1i1(riscv_mf2x6, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i16(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i16(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i16(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i16.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i32(riscv_mf2x6, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i32.nxv1i1(riscv_mf2x6, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i32(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i32(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i32(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i32.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i64(riscv_mf2x6, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i64.nxv1i1(riscv_mf2x6, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i64(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i32_riscv_mf2x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i64(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i64(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i32_riscv_mf2x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i64.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i8(riscv_m1x6, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i8.nxv2i1(riscv_m1x6, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i8(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i8(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i8(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i8.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i16(riscv_m1x6, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i16.nxv2i1(riscv_m1x6, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i16(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i16(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i16(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i16.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i32(riscv_m1x6, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i32.nxv2i1(riscv_m1x6, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i32(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i32(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i32(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i32.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i64(riscv_m1x6, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i64.nxv2i1(riscv_m1x6, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i64(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2i32_riscv_m1x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i64(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i64(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2i32_riscv_m1x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i64.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i8(riscv_mf2x7, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i8.nxv1i1(riscv_mf2x7, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i8(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i8(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i8(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i8.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i16(riscv_mf2x7, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i16.nxv1i1(riscv_mf2x7, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i16(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i16(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i16(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i16.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i32(riscv_mf2x7, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i32.nxv1i1(riscv_mf2x7, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i32(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i32(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i32(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i32.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i64(riscv_mf2x7, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i64.nxv1i1(riscv_mf2x7, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i64(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i32_riscv_mf2x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i64(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i64(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i32_riscv_mf2x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i64.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i8(riscv_m1x7, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i8.nxv2i1(riscv_m1x7, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i8(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i8(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i8(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i8.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i16(riscv_m1x7, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i16.nxv2i1(riscv_m1x7, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i16(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i16(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i16(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i16.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i32(riscv_m1x7, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i32.nxv2i1(riscv_m1x7, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i32(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i32(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i32(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i32.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i64(riscv_m1x7, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i64.nxv2i1(riscv_m1x7, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i64(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2i32_riscv_m1x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i64(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i64(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2i32_riscv_m1x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i64.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i8(riscv_mf2x8, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i8.nxv1i1(riscv_mf2x8, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i8(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i8(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i8(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i8.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i16(riscv_mf2x8, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i16.nxv1i1(riscv_mf2x8, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i16(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i16(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i16(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i16.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i32(riscv_mf2x8, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i32.nxv1i1(riscv_mf2x8, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i32(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i32(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i32(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i32.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i64(riscv_mf2x8, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i64.nxv1i1(riscv_mf2x8, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i64(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i32_riscv_mf2x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i64(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i64(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i32_riscv_mf2x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i64.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i8(riscv_m1x8, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i8.nxv2i1(riscv_m1x8, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i8(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i8(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i8(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i8.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i16(riscv_m1x8, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i16.nxv2i1(riscv_m1x8, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i16(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i16(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i16(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i16.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i32(riscv_m1x8, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i32.nxv2i1(riscv_m1x8, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i32(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i32(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i32(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i32.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i64(riscv_m1x8, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i64.nxv2i1(riscv_m1x8, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i64(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2i32_riscv_m1x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i64(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i64(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2i32_riscv_m1x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i64.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i8(riscv_m1x2, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i8.nxv1i1(riscv_m1x2, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i8(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i8(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i8(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i8.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i16(riscv_m1x2, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i16.nxv1i1(riscv_m1x2, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i16(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i16(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i16(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i16.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i32(riscv_m1x2, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i32.nxv1i1(riscv_m1x2, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i32(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i32(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i32(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i32.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i64(riscv_m1x2, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i64.nxv1i1(riscv_m1x2, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i64(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1i64_riscv_m1x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i64(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i64(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1i64_riscv_m1x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i64.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i8(riscv_m2x2, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i8.nxv2i1(riscv_m2x2, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i8(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i8(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i8(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i8.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i16(riscv_m2x2, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i16.nxv2i1(riscv_m2x2, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i16(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i16(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i16(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i16.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i32(riscv_m2x2, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i32.nxv2i1(riscv_m2x2, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i32(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i32(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i32(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i32.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i64(riscv_m2x2, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i64.nxv2i1(riscv_m2x2, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i64(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2i64_riscv_m2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i64(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i64(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2i64_riscv_m2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i64.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i8(riscv_m4x2, ptr, <vscale x 4 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i8.nxv4i1(riscv_m4x2, ptr, <vscale x 4 x i8>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i8(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i8(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i8(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i8.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i16(riscv_m4x2, ptr, <vscale x 4 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i16.nxv4i1(riscv_m4x2, ptr, <vscale x 4 x i16>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i16(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i16(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i16(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i16.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i32(riscv_m4x2, ptr, <vscale x 4 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i32.nxv4i1(riscv_m4x2, ptr, <vscale x 4 x i32>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i32(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i32(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i32(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i32.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i64(riscv_m4x2, ptr, <vscale x 4 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i64.nxv4i1(riscv_m4x2, ptr, <vscale x 4 x i64>, <vscale x 4 x i1>, i64, i64)

define void @test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i64(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4i64_riscv_m4x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i64(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i64(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4i64_riscv_m4x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i64.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i8(riscv_m1x3, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i8.nxv1i1(riscv_m1x3, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i8(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i8(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i8(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i8.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i16(riscv_m1x3, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i16.nxv1i1(riscv_m1x3, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i16(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i16(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i16(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i16.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i32(riscv_m1x3, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i32.nxv1i1(riscv_m1x3, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i32(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i32(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i32(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i32.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i64(riscv_m1x3, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i64.nxv1i1(riscv_m1x3, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i64(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1i64_riscv_m1x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i64(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i64(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1i64_riscv_m1x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i64.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i8(riscv_m2x3, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i8.nxv2i1(riscv_m2x3, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i8(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i8(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i8(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i8.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i16(riscv_m2x3, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i16.nxv2i1(riscv_m2x3, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i16(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i16(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i16(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i16.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i32(riscv_m2x3, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i32.nxv2i1(riscv_m2x3, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i32(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i32(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i32(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i32.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i64(riscv_m2x3, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i64.nxv2i1(riscv_m2x3, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i64(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2i64_riscv_m2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i64(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i64(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2i64_riscv_m2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i64.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i8(riscv_m1x4, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i8.nxv1i1(riscv_m1x4, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i8(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i8(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i8(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i8.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i16(riscv_m1x4, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i16.nxv1i1(riscv_m1x4, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i16(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i16(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i16(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i16.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i32(riscv_m1x4, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i32.nxv1i1(riscv_m1x4, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i32(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i32(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i32(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i32.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i64(riscv_m1x4, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i64.nxv1i1(riscv_m1x4, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i64(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1i64_riscv_m1x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i64(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i64(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1i64_riscv_m1x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i64.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i8(riscv_m2x4, ptr, <vscale x 2 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i8.nxv2i1(riscv_m2x4, ptr, <vscale x 2 x i8>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i8(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i8(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i8(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i8.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i16(riscv_m2x4, ptr, <vscale x 2 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i16.nxv2i1(riscv_m2x4, ptr, <vscale x 2 x i16>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i16(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i16(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i16(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i16.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i32(riscv_m2x4, ptr, <vscale x 2 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i32.nxv2i1(riscv_m2x4, ptr, <vscale x 2 x i32>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i32(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i32(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i32(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i32.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i64(riscv_m2x4, ptr, <vscale x 2 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i64.nxv2i1(riscv_m2x4, ptr, <vscale x 2 x i64>, <vscale x 2 x i1>, i64, i64)

define void @test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i64(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2i64_riscv_m2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i64(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i64(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2i64_riscv_m2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i64.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i8(riscv_m1x5, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i8.nxv1i1(riscv_m1x5, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i8(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i8(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i8(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i8.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i16(riscv_m1x5, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i16.nxv1i1(riscv_m1x5, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i16(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i16(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i16(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i16.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i32(riscv_m1x5, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i32.nxv1i1(riscv_m1x5, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i32(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i32(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i32(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i32.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i64(riscv_m1x5, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i64.nxv1i1(riscv_m1x5, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i64(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1i64_riscv_m1x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i64(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i64(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1i64_riscv_m1x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i64.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i8(riscv_m1x6, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i8.nxv1i1(riscv_m1x6, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i8(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i8(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i8(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i8.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i16(riscv_m1x6, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i16.nxv1i1(riscv_m1x6, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i16(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i16(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i16(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i16.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i32(riscv_m1x6, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i32.nxv1i1(riscv_m1x6, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i32(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i32(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i32(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i32.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i64(riscv_m1x6, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i64.nxv1i1(riscv_m1x6, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i64(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1i64_riscv_m1x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i64(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i64(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1i64_riscv_m1x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i64.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i8(riscv_m1x7, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i8.nxv1i1(riscv_m1x7, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i8(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i8(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i8(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i8.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i16(riscv_m1x7, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i16.nxv1i1(riscv_m1x7, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i16(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i16(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i16(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i16.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i32(riscv_m1x7, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i32.nxv1i1(riscv_m1x7, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i32(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i32(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i32(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i32.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i64(riscv_m1x7, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i64.nxv1i1(riscv_m1x7, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i64(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1i64_riscv_m1x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i64(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i64(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1i64_riscv_m1x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i64.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i8(riscv_m1x8, ptr, <vscale x 1 x i8>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i8.nxv1i1(riscv_m1x8, ptr, <vscale x 1 x i8>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i8(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i8(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i8(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i8.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i16(riscv_m1x8, ptr, <vscale x 1 x i16>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i16.nxv1i1(riscv_m1x8, ptr, <vscale x 1 x i16>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i16(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i16(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i16(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i16.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i32(riscv_m1x8, ptr, <vscale x 1 x i32>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i32.nxv1i1(riscv_m1x8, ptr, <vscale x 1 x i32>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i32(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i32(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i32(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i32.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i64(riscv_m1x8, ptr, <vscale x 1 x i64>, i64, i64)
declare void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i64.nxv1i1(riscv_m1x8, ptr, <vscale x 1 x i64>, <vscale x 1 x i1>, i64, i64)

define void @test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i64(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1i64_riscv_m1x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i64(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i64(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1i64_riscv_m1x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i64.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i8.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i16.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i32.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f16_riscv_mf4x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f16_riscv_mf4x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i64.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i8.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i16.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i32.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f16_riscv_mf2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f16_riscv_mf2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i64.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i8.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i16.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i32.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f16_riscv_m1x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f16_riscv_m1x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i64.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i8.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i16.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i32.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f16_riscv_m2x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f16_riscv_m2x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i64.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv16f16_riscv_m4x2_nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16f16_riscv_m4x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16f16_riscv_m4x2_nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16f16_riscv_m4x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i8.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv16f16_riscv_m4x2_nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16f16_riscv_m4x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16f16_riscv_m4x2_nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16f16_riscv_m4x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i16.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv16f16_riscv_m4x2_nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16f16_riscv_m4x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16f16_riscv_m4x2_nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16f16_riscv_m4x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i32.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i8.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i16.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i32.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f16_riscv_mf4x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f16_riscv_mf4x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i64.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i8.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i16.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i32.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f16_riscv_mf2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f16_riscv_mf2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i64.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i8.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i16.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i32.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f16_riscv_m1x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f16_riscv_m1x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i64.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i8.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i16.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i32.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8f16_riscv_m2x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8f16_riscv_m2x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i64.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i8.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i16.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i32.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f16_riscv_mf4x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f16_riscv_mf4x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i64.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i8.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i16.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i32.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f16_riscv_mf2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f16_riscv_mf2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i64.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i8.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i16.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i32.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f16_riscv_m1x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f16_riscv_m1x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i64.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i8.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i16.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i32.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8f16_riscv_m2x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8f16_riscv_m2x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i64.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i8.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i16.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i32.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f16_riscv_mf4x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f16_riscv_mf4x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i64.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i8.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i16.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i32.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f16_riscv_mf2x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f16_riscv_mf2x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i64.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i8.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i16.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i32.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4f16_riscv_m1x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4f16_riscv_m1x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i64.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i8.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i16.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i32.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f16_riscv_mf4x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f16_riscv_mf4x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i64.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i8.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i16.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i32.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f16_riscv_mf2x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f16_riscv_mf2x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i64.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i8.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i16.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i32.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4f16_riscv_m1x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4f16_riscv_m1x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i64.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i8.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i16.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i32.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f16_riscv_mf4x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f16_riscv_mf4x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i64.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i8.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i16.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i32.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f16_riscv_mf2x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f16_riscv_mf2x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i64.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i8.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i16.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i32.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4f16_riscv_m1x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4f16_riscv_m1x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i64.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i8.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i16.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i32.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f16_riscv_mf4x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f16_riscv_mf4x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i64.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i8.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i16.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i32.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f16_riscv_mf2x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f16_riscv_mf2x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i64.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i8.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i16.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i32.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4f16_riscv_m1x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4f16_riscv_m1x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i64.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i8(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i8(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i8(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i8.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i16(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i16(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i16(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i16.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i32(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i32(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i32(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i32.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i64(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f32_riscv_mf2x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv1i64(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i64(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f32_riscv_mf2x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv1i64.nxv1i1(riscv_mf2x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i8(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i8(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i8(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i8.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i16(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i16(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i16(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i16.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i32(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i32(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i32(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i32.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i64(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f32_riscv_m1x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv2i64(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i64(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f32_riscv_m1x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv2i64.nxv2i1(riscv_m1x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i8(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i8(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i8(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i8.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i16(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i16(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i16(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i16.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i32(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i32(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i32(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i32.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i64(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f32_riscv_m2x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv4i64(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i64(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f32_riscv_m2x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv4i64.nxv4i1(riscv_m2x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i8(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i8(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i8(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i8.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i16(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i16(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i16(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i16.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i32(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i32(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i32(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i32.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i64(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8f32_riscv_m4x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv8i64(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i64(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8f32_riscv_m4x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv8i64.nxv8i1(riscv_m4x2 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i8(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i8(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i8(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i8.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i16(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i16(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i16(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i16.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i32(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i32(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i32(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i32.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i64(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f32_riscv_mf2x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv1i64(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i64(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f32_riscv_mf2x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv1i64.nxv1i1(riscv_mf2x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i8(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i8(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i8(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i8.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i16(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i16(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i16(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i16.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i32(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i32(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i32(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i32.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i64(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f32_riscv_m1x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv2i64(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i64(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f32_riscv_m1x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv2i64.nxv2i1(riscv_m1x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i8(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i8(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i8(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i8.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i16(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i16(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i16(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i16.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i32(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i32(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i32(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i32.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i64(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4f32_riscv_m2x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv4i64(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i64(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4f32_riscv_m2x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv4i64.nxv4i1(riscv_m2x3 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i8(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i8(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i8(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i8.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i16(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i16(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i16(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i16.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i32(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i32(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i32(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i32.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i64(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f32_riscv_mf2x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv1i64(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i64(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f32_riscv_mf2x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv1i64.nxv1i1(riscv_mf2x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i8(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i8(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i8(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i8.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i16(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i16(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i16(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i16.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i32(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i32(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i32(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i32.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i64(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f32_riscv_m1x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv2i64(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i64(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f32_riscv_m1x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv2i64.nxv2i1(riscv_m1x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i8(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i8(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i8(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i8.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i16(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i16(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i16(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i16.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i32(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i32(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i32(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i32.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i64(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4f32_riscv_m2x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv4i64(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i64(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4f32_riscv_m2x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv4i64.nxv4i1(riscv_m2x4 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i8(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i8(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i8(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i8.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i16(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i16(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i16(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i16.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i32(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i32(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i32(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i32.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i64(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f32_riscv_mf2x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv1i64(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i64(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f32_riscv_mf2x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv1i64.nxv1i1(riscv_mf2x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i8(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i8(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i8(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i8.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i16(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i16(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i16(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i16.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i32(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i32(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i32(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i32.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i64(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2f32_riscv_m1x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv2i64(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i64(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2f32_riscv_m1x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv2i64.nxv2i1(riscv_m1x5 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i8(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i8(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i8(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i8.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i16(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i16(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i16(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i16.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i32(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i32(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i32(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i32.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i64(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f32_riscv_mf2x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv1i64(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i64(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f32_riscv_mf2x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv1i64.nxv1i1(riscv_mf2x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i8(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i8(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i8(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i8.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i16(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i16(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i16(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i16.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i32(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i32(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i32(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i32.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i64(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2f32_riscv_m1x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv2i64(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i64(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2f32_riscv_m1x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv2i64.nxv2i1(riscv_m1x6 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i8(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i8(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i8(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i8.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i16(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i16(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i16(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i16.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i32(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i32(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i32(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i32.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i64(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f32_riscv_mf2x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv1i64(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i64(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f32_riscv_mf2x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv1i64.nxv1i1(riscv_mf2x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i8(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i8(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i8(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i8.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i16(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i16(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i16(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i16.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i32(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i32(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i32(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i32.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i64(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2f32_riscv_m1x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv2i64(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i64(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2f32_riscv_m1x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv2i64.nxv2i1(riscv_m1x7 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i8(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i8(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i8(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i8.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i16(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i16(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i16(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i16.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i32(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i32(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i32(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i32.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i64(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f32_riscv_mf2x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv1i64(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i64(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f32_riscv_mf2x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv1i64.nxv1i1(riscv_mf2x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i8(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i8(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i8(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i8.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i16(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i16(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i16(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i16.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i32(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i32(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i32(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i32.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i64(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2f32_riscv_m1x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv2i64(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 5)
  ret void
}

define void @test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i64(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2f32_riscv_m1x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv2i64.nxv2i1(riscv_m1x8 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i8(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i8(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i8(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i8.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i16(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i16(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i16(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i16.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i32(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i32(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i32(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i32.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i64(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1f64_riscv_m1x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv1i64(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i64(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1f64_riscv_m1x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv1i64.nxv1i1(riscv_m1x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i8(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i8(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i8(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i8.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i16(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i16(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i16(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i16.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i32(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i32(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i32(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i32.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i64(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2f64_riscv_m2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv2i64(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i64(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2f64_riscv_m2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv2i64.nxv2i1(riscv_m2x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i8(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i8(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i8(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i8.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i16(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i16(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i16(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i16.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i32(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i32(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i32(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i32.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i64(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4f64_riscv_m4x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv4i64(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i64(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4f64_riscv_m4x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv4i64.nxv4i1(riscv_m4x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i8(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i8(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i8(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i8.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i16(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i16(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i16(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i16.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i32(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i32(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i32(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i32.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i64(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1f64_riscv_m1x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv1i64(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i64(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1f64_riscv_m1x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv1i64.nxv1i1(riscv_m1x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i8(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i8(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i8(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i8.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i16(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i16(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i16(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i16.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i32(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i32(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i32(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i32.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i64(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2f64_riscv_m2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv2i64(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i64(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2f64_riscv_m2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv2i64.nxv2i1(riscv_m2x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i8(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i8(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i8(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i8.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i16(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i16(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i16(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i16.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i32(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i32(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i32(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i32.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i64(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1f64_riscv_m1x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv1i64(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i64(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1f64_riscv_m1x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv1i64.nxv1i1(riscv_m1x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i8(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i8(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i8(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i8.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i16(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i16(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i16(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i16.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i32(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i32(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i32(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i32.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i64(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2f64_riscv_m2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv2i64(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i64(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2f64_riscv_m2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv2i64.nxv2i1(riscv_m2x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i8(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i8(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i8(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i8.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i16(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i16(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i16(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i16.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i32(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i32(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i32(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i32.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i64(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1f64_riscv_m1x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv1i64(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i64(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1f64_riscv_m1x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv1i64.nxv1i1(riscv_m1x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i8(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i8(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i8(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i8.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i16(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i16(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i16(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i16.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i32(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i32(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i32(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i32.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i64(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1f64_riscv_m1x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv1i64(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i64(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1f64_riscv_m1x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv1i64.nxv1i1(riscv_m1x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i8(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i8(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i8(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i8.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i16(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i16(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i16(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i16.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i32(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i32(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i32(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i32.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i64(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1f64_riscv_m1x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv1i64(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i64(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1f64_riscv_m1x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv1i64.nxv1i1(riscv_m1x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i8(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i8(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i8(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i8.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i16(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i16(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i16(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i16.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i32(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i32(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i32(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i32.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i64(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1f64_riscv_m1x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv1i64(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 6)
  ret void
}

define void @test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i64(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1f64_riscv_m1x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv1i64.nxv1i1(riscv_m1x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i8(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i8.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i16(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i16.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i32(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i32.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv1bf16_riscv_mf4x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf4x2.nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i64(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv1bf16_riscv_mf4x2_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf4x2.nxv1i64.nxv1i1(riscv_mf4x2 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i8(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i8.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i16(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i16.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i32(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i32.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv2bf16_riscv_mf2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_mf2x2.nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i64(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv2bf16_riscv_mf2x2_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_mf2x2.nxv2i64.nxv2i1(riscv_mf2x2 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i8(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i8.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i16(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i16.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i32(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i32.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv4bf16_riscv_m1x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m1x2.nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i64(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv4bf16_riscv_m1x2_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m1x2.nxv4i64.nxv4i1(riscv_m1x2 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i8(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i8.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i16(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i16.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i32(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i32.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv8bf16_riscv_m2x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m2x2.nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i64(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv8bf16_riscv_m2x2_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg2ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m2x2.nxv8i64.nxv8i1(riscv_m2x2 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv16bf16_riscv_m4x2_nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16bf16_riscv_m4x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16bf16_riscv_m4x2_nxv16i8(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16bf16_riscv_m4x2_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i8.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i8> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv16bf16_riscv_m4x2_nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16bf16_riscv_m4x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16bf16_riscv_m4x2_nxv16i16(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16bf16_riscv_m4x2_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i16.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i16> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg2_nxv16bf16_riscv_m4x2_nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg2_nxv16bf16_riscv_m4x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.riscv_m4x2.nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg2_mask_nxv16bf16_riscv_m4x2_nxv16i32(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg2_mask_nxv16bf16_riscv_m4x2_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m4, ta, ma
; CHECK-NEXT:    vsuxseg2ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg2.mask.riscv_m4x2.nxv16i32.nxv16i1(riscv_m4x2 %val, ptr %base, <vscale x 16 x i32> %index, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i8(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i8.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i16(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i16.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i32(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i32.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv1bf16_riscv_mf4x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf4x3.nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i64(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv1bf16_riscv_mf4x3_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf4x3.nxv1i64.nxv1i1(riscv_mf4x3 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i8(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i8.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i16(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i16.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i32(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i32.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv2bf16_riscv_mf2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_mf2x3.nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i64(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv2bf16_riscv_mf2x3_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_mf2x3.nxv2i64.nxv2i1(riscv_mf2x3 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i8(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i8.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i16(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v11, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i16.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i32(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i32.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv4bf16_riscv_m1x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m1x3.nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i64(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv4bf16_riscv_m1x3_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m1x3.nxv4i64.nxv4i1(riscv_m1x3 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i8(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i8.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i16(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i16.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i32(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i32.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg3_nxv8bf16_riscv_m2x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.riscv_m2x3.nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i64(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg3_mask_nxv8bf16_riscv_m2x3_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg3ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg3.mask.riscv_m2x3.nxv8i64.nxv8i1(riscv_m2x3 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i8(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i8.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i16(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i16.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i32(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i32.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv1bf16_riscv_mf4x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf4x4.nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i64(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv1bf16_riscv_mf4x4_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf4x4.nxv1i64.nxv1i1(riscv_mf4x4 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i8(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i8.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i16(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i16.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i32(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i32.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv2bf16_riscv_mf2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_mf2x4.nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i64(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv2bf16_riscv_mf2x4_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_mf2x4.nxv2i64.nxv2i1(riscv_mf2x4 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i8(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i8.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i16(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i16.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i32(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i32.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv4bf16_riscv_m1x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m1x4.nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i64(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv4bf16_riscv_m1x4_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m1x4.nxv4i64.nxv4i1(riscv_m1x4 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i8(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i8.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i8> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i16(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i16.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i16> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i32(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i32.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i32> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg4_nxv8bf16_riscv_m2x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.riscv_m2x4.nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i64(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg4_mask_nxv8bf16_riscv_m2x4_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m2, ta, ma
; CHECK-NEXT:    vsuxseg4ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg4.mask.riscv_m2x4.nxv8i64.nxv8i1(riscv_m2x4 %val, ptr %base, <vscale x 8 x i64> %index, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i8(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i8.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i16(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i16.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i32(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i32.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv1bf16_riscv_mf4x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf4x5.nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i64(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv1bf16_riscv_mf4x5_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf4x5.nxv1i64.nxv1i1(riscv_mf4x5 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i8(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i8.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i16(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i16.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i32(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i32.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv2bf16_riscv_mf2x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_mf2x5.nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i64(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv2bf16_riscv_mf2x5_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_mf2x5.nxv2i64.nxv2i1(riscv_mf2x5 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i8(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei8.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i8.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i16(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei16.v v8, (a0), v13, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i16.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i32(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i32.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg5_nxv4bf16_riscv_m1x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.riscv_m1x5.nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i64(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg5_mask_nxv4bf16_riscv_m1x5_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg5ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg5.mask.riscv_m1x5.nxv4i64.nxv4i1(riscv_m1x5 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i8(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i8.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i16(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i16.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i32(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i32.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv1bf16_riscv_mf4x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf4x6.nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i64(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv1bf16_riscv_mf4x6_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf4x6.nxv1i64.nxv1i1(riscv_mf4x6 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i8(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i8.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i16(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i16.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i32(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i32.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv2bf16_riscv_mf2x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_mf2x6.nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i64(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv2bf16_riscv_mf2x6_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_mf2x6.nxv2i64.nxv2i1(riscv_mf2x6 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i8(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei8.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i8.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i16(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei16.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i16.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i32(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei32.v v8, (a0), v14, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i32.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg6_nxv4bf16_riscv_m1x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.riscv_m1x6.nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i64(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg6_mask_nxv4bf16_riscv_m1x6_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg6ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg6.mask.riscv_m1x6.nxv4i64.nxv4i1(riscv_m1x6 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i8(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i8.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i16(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i16.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i32(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i32.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv1bf16_riscv_mf4x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf4x7.nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i64(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv1bf16_riscv_mf4x7_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf4x7.nxv1i64.nxv1i1(riscv_mf4x7 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i8(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i8.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i16(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i16.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i32(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i32.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv2bf16_riscv_mf2x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_mf2x7.nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i64(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv2bf16_riscv_mf2x7_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_mf2x7.nxv2i64.nxv2i1(riscv_mf2x7 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i8(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei8.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i8.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i16(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei16.v v8, (a0), v15, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i16.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i32(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i32.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg7_nxv4bf16_riscv_m1x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.riscv_m1x7.nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i64(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg7_mask_nxv4bf16_riscv_m1x7_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg7ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg7.mask.riscv_m1x7.nxv4i64.nxv4i1(riscv_m1x7 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i8(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i8.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i8> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i16(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i16.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i16> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i32(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i32.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i32> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv1bf16_riscv_mf4x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf4x8.nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i64(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv1bf16_riscv_mf4x8_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf4, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf4x8.nxv1i64.nxv1i1(riscv_mf4x8 %val, ptr %base, <vscale x 1 x i64> %index, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i8(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i8.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i8> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i16(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i16.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i16> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i32(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i32.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i32> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv2bf16_riscv_mf2x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_mf2x8.nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i64(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv2bf16_riscv_mf2x8_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, mf2, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_mf2x8.nxv2i64.nxv2i1(riscv_mf2x8 %val, ptr %base, <vscale x 2 x i64> %index, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i8(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei8.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i8.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i8> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i16(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei16.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i16.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i16> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i32(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei32.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i32.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i32> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl) {
; CHECK-LABEL: test_vsuxseg8_nxv4bf16_riscv_m1x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.riscv_m1x8.nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, i64 4)
  ret void
}

define void @test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i64(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vsuxseg8_mask_nxv4bf16_riscv_m1x8_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; CHECK-NEXT:    vsuxseg8ei64.v v8, (a0), v16, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vsuxseg8.mask.riscv_m1x8.nxv4i64.nxv4i1(riscv_m1x8 %val, ptr %base, <vscale x 4 x i64> %index, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

