; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=riscv32 -mattr=+d,+zfh,+zvfh,+v -target-abi=ilp32d \
; RUN:     -verify-machineinstrs < %s | FileCheck %s --check-prefix=RV32
; RUN: llc -mtriple=riscv64 -mattr=+d,+zfh,+zvfh,+v -target-abi=lp64d \
; RUN:     -verify-machineinstrs < %s | FileCheck %s --check-prefix=RV64

define float @vreduce_fminimum_nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl) {
; RV32-LABEL: vreduce_fminimum_nxv4f32:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV32-NEXT:    vfmv.s.f v10, fa0
; RV32-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV32-NEXT:    vfredmin.vs v10, v8, v10, v0.t
; RV32-NEXT:    vmfne.vv v11, v8, v8, v0.t
; RV32-NEXT:    vcpop.m a0, v11, v0.t
; RV32-NEXT:    beqz a0, .LBB0_2
; RV32-NEXT:  # %bb.1:
; RV32-NEXT:    fmv.w.x fa0, zero
; RV32-NEXT:    ret
; RV32-NEXT:  .LBB0_2:
; RV32-NEXT:    vfmv.f.s fa0, v10
; RV32-NEXT:    ret
;
; RV64-LABEL: vreduce_fminimum_nxv4f32:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV64-NEXT:    vfmv.s.f v10, fa0
; RV64-NEXT:    slli a0, a0, 32
; RV64-NEXT:    srli a0, a0, 32
; RV64-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV64-NEXT:    vfredmin.vs v10, v8, v10, v0.t
; RV64-NEXT:    vmfne.vv v11, v8, v8, v0.t
; RV64-NEXT:    vcpop.m a0, v11, v0.t
; RV64-NEXT:    beqz a0, .LBB0_2
; RV64-NEXT:  # %bb.1:
; RV64-NEXT:    fmv.w.x fa0, zero
; RV64-NEXT:    ret
; RV64-NEXT:  .LBB0_2:
; RV64-NEXT:    vfmv.f.s fa0, v10
; RV64-NEXT:    ret
  %s = call float @llvm.vp.reduce.fminimum.nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl)
  ret float %s
}

define float @vreduce_fmaximum_nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl) {
; RV32-LABEL: vreduce_fmaximum_nxv4f32:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV32-NEXT:    vfmv.s.f v10, fa0
; RV32-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV32-NEXT:    vfredmax.vs v10, v8, v10, v0.t
; RV32-NEXT:    vmfne.vv v11, v8, v8, v0.t
; RV32-NEXT:    vcpop.m a0, v11, v0.t
; RV32-NEXT:    beqz a0, .LBB1_2
; RV32-NEXT:  # %bb.1:
; RV32-NEXT:    fmv.w.x fa0, zero
; RV32-NEXT:    ret
; RV32-NEXT:  .LBB1_2:
; RV32-NEXT:    vfmv.f.s fa0, v10
; RV32-NEXT:    ret
;
; RV64-LABEL: vreduce_fmaximum_nxv4f32:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV64-NEXT:    vfmv.s.f v10, fa0
; RV64-NEXT:    slli a0, a0, 32
; RV64-NEXT:    srli a0, a0, 32
; RV64-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV64-NEXT:    vfredmax.vs v10, v8, v10, v0.t
; RV64-NEXT:    vmfne.vv v11, v8, v8, v0.t
; RV64-NEXT:    vcpop.m a0, v11, v0.t
; RV64-NEXT:    beqz a0, .LBB1_2
; RV64-NEXT:  # %bb.1:
; RV64-NEXT:    fmv.w.x fa0, zero
; RV64-NEXT:    ret
; RV64-NEXT:  .LBB1_2:
; RV64-NEXT:    vfmv.f.s fa0, v10
; RV64-NEXT:    ret
  %s = call float @llvm.vp.reduce.fmaximum.nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl)
  ret float %s
}

define float @vreduce_fminimum_nnan_nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl) {
; RV32-LABEL: vreduce_fminimum_nnan_nxv4f32:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV32-NEXT:    vfmv.s.f v10, fa0
; RV32-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV32-NEXT:    vfredmin.vs v10, v8, v10, v0.t
; RV32-NEXT:    vfmv.f.s fa0, v10
; RV32-NEXT:    ret
;
; RV64-LABEL: vreduce_fminimum_nnan_nxv4f32:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV64-NEXT:    vfmv.s.f v10, fa0
; RV64-NEXT:    slli a0, a0, 32
; RV64-NEXT:    srli a0, a0, 32
; RV64-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV64-NEXT:    vfredmin.vs v10, v8, v10, v0.t
; RV64-NEXT:    vfmv.f.s fa0, v10
; RV64-NEXT:    ret
  %s = call nnan float @llvm.vp.reduce.fminimum.nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl)
  ret float %s
}

define float @vreduce_fmaximum_nnan_nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl) {
; RV32-LABEL: vreduce_fmaximum_nnan_nxv4f32:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV32-NEXT:    vfmv.s.f v10, fa0
; RV32-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV32-NEXT:    vfredmax.vs v10, v8, v10, v0.t
; RV32-NEXT:    vfmv.f.s fa0, v10
; RV32-NEXT:    ret
;
; RV64-LABEL: vreduce_fmaximum_nnan_nxv4f32:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV64-NEXT:    vfmv.s.f v10, fa0
; RV64-NEXT:    slli a0, a0, 32
; RV64-NEXT:    srli a0, a0, 32
; RV64-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; RV64-NEXT:    vfredmax.vs v10, v8, v10, v0.t
; RV64-NEXT:    vfmv.f.s fa0, v10
; RV64-NEXT:    ret
  %s = call nnan float @llvm.vp.reduce.fmaximum.nxv4f32(float %start, <vscale x 4 x float> %val, <vscale x 4 x i1> %m, i32 %evl)
  ret float %s
}

define float @vreduce_fminimum_v4f32(float %start, <4 x float> %val, <4 x i1> %m, i32 %evl) {
; RV32-LABEL: vreduce_fminimum_v4f32:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV32-NEXT:    vfmv.s.f v9, fa0
; RV32-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; RV32-NEXT:    vfredmin.vs v9, v8, v9, v0.t
; RV32-NEXT:    vmfne.vv v8, v8, v8, v0.t
; RV32-NEXT:    vcpop.m a0, v8, v0.t
; RV32-NEXT:    beqz a0, .LBB4_2
; RV32-NEXT:  # %bb.1:
; RV32-NEXT:    fmv.w.x fa0, zero
; RV32-NEXT:    ret
; RV32-NEXT:  .LBB4_2:
; RV32-NEXT:    vfmv.f.s fa0, v9
; RV32-NEXT:    ret
;
; RV64-LABEL: vreduce_fminimum_v4f32:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV64-NEXT:    vfmv.s.f v9, fa0
; RV64-NEXT:    slli a0, a0, 32
; RV64-NEXT:    srli a0, a0, 32
; RV64-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; RV64-NEXT:    vfredmin.vs v9, v8, v9, v0.t
; RV64-NEXT:    vmfne.vv v8, v8, v8, v0.t
; RV64-NEXT:    vcpop.m a0, v8, v0.t
; RV64-NEXT:    beqz a0, .LBB4_2
; RV64-NEXT:  # %bb.1:
; RV64-NEXT:    fmv.w.x fa0, zero
; RV64-NEXT:    ret
; RV64-NEXT:  .LBB4_2:
; RV64-NEXT:    vfmv.f.s fa0, v9
; RV64-NEXT:    ret
  %s = call float @llvm.vp.reduce.fminimum.v4f32(float %start, <4 x float> %val, <4 x i1> %m, i32 %evl)
  ret float %s
}

define float @vreduce_fmaximum_v4f32(float %start, <4 x float> %val, <4 x i1> %m, i32 %evl) {
; RV32-LABEL: vreduce_fmaximum_v4f32:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV32-NEXT:    vfmv.s.f v9, fa0
; RV32-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; RV32-NEXT:    vfredmax.vs v9, v8, v9, v0.t
; RV32-NEXT:    vmfne.vv v8, v8, v8, v0.t
; RV32-NEXT:    vcpop.m a0, v8, v0.t
; RV32-NEXT:    beqz a0, .LBB5_2
; RV32-NEXT:  # %bb.1:
; RV32-NEXT:    fmv.w.x fa0, zero
; RV32-NEXT:    ret
; RV32-NEXT:  .LBB5_2:
; RV32-NEXT:    vfmv.f.s fa0, v9
; RV32-NEXT:    ret
;
; RV64-LABEL: vreduce_fmaximum_v4f32:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; RV64-NEXT:    vfmv.s.f v9, fa0
; RV64-NEXT:    slli a0, a0, 32
; RV64-NEXT:    srli a0, a0, 32
; RV64-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; RV64-NEXT:    vfredmax.vs v9, v8, v9, v0.t
; RV64-NEXT:    vmfne.vv v8, v8, v8, v0.t
; RV64-NEXT:    vcpop.m a0, v8, v0.t
; RV64-NEXT:    beqz a0, .LBB5_2
; RV64-NEXT:  # %bb.1:
; RV64-NEXT:    fmv.w.x fa0, zero
; RV64-NEXT:    ret
; RV64-NEXT:  .LBB5_2:
; RV64-NEXT:    vfmv.f.s fa0, v9
; RV64-NEXT:    ret
  %s = call float @llvm.vp.reduce.fmaximum.v4f32(float %start, <4 x float> %val, <4 x i1> %m, i32 %evl)
  ret float %s
}
