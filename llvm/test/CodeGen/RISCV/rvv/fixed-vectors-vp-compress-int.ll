; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+v -verify-machineinstrs < %s | FileCheck %s

define <2 x i64> @test_vp_compress_v2i64_masked(<2 x i64> %src, <2 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v2i64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <2 x i64> @llvm.experimental.vp.compress.v2i64(<2 x i64> %src, <2 x i1> %mask, i32 %evl)
  ret <2 x i64> %dst
}

define <2 x i32> @test_vp_compress_v2i32_masked(<2 x i32> %src, <2 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v2i32_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, mf2, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv1r.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <2 x i32> @llvm.experimental.vp.compress.v2i32(<2 x i32> %src, <2 x i1> %mask, i32 %evl)
  ret <2 x i32> %dst
}

define <4 x i32> @test_vp_compress_v4i32_masked(<4 x i32> %src, <4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v4i32_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <4 x i32> @llvm.experimental.vp.compress.v4i32(<4 x i32> %src, <4 x i1> %mask, i32 %evl)
  ret <4 x i32> %dst
}

define <2 x i16> @test_vp_compress_v2i16_masked(<2 x i16> %src, <2 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v2i16_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, mf4, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv1r.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <2 x i16> @llvm.experimental.vp.compress.v2i16(<2 x i16> %src, <2 x i1> %mask, i32 %evl)
  ret <2 x i16> %dst
}

define <4 x i16> @test_vp_compress_v4i16_masked(<4 x i16> %src, <4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v4i16_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, mf2, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv1r.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <4 x i16> @llvm.experimental.vp.compress.v4i16(<4 x i16> %src, <4 x i1> %mask, i32 %evl)
  ret <4 x i16> %dst
}

define <8 x i16> @test_vp_compress_v8i16_masked(<8 x i16> %src, <8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v8i16_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m1, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <8 x i16> @llvm.experimental.vp.compress.v8i16(<8 x i16> %src, <8 x i1> %mask, i32 %evl)
  ret <8 x i16> %dst
}

define <2 x i8> @test_vp_compress_v2i8_masked(<2 x i8> %src, <2 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v2i8_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, mf8, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv1r.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <2 x i8> @llvm.experimental.vp.compress.v2i8(<2 x i8> %src, <2 x i1> %mask, i32 %evl)
  ret <2 x i8> %dst
}

define <4 x i8> @test_vp_compress_v4i8_masked(<4 x i8> %src, <4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v4i8_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, mf4, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv1r.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <4 x i8> @llvm.experimental.vp.compress.v4i8(<4 x i8> %src, <4 x i1> %mask, i32 %evl)
  ret <4 x i8> %dst
}

define <8 x i8> @test_vp_compress_v8i8_masked(<8 x i8> %src, <8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v8i8_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, mf2, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv1r.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <8 x i8> @llvm.experimental.vp.compress.v8i8(<8 x i8> %src, <8 x i1> %mask, i32 %evl)
  ret <8 x i8> %dst
}

define <16 x i8> @test_vp_compress_v16i8_masked(<16 x i8> %src, <16 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v16i8_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m1, ta, ma
; CHECK-NEXT:    vcompress.vm v9, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %dst = call <16 x i8> @llvm.experimental.vp.compress.v16i8(<16 x i8> %src, <16 x i1> %mask, i32 %evl)
  ret <16 x i8> %dst
}

define <4 x i64> @test_vp_compress_v4i64_masked(<4 x i64> %src, <4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v4i64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, ma
; CHECK-NEXT:    vcompress.vm v10, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
  %dst = call <4 x i64> @llvm.experimental.vp.compress.v4i64(<4 x i64> %src, <4 x i1> %mask, i32 %evl)
  ret <4 x i64> %dst
}

define <8 x i32> @test_vp_compress_v8i32_masked(<8 x i32> %src, <8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v8i32_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; CHECK-NEXT:    vcompress.vm v10, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
  %dst = call <8 x i32> @llvm.experimental.vp.compress.v8i32(<8 x i32> %src, <8 x i1> %mask, i32 %evl)
  ret <8 x i32> %dst
}

define <16 x i16> @test_vp_compress_v16i16_masked(<16 x i16> %src, <16 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v16i16_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m2, ta, ma
; CHECK-NEXT:    vcompress.vm v10, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
  %dst = call <16 x i16> @llvm.experimental.vp.compress.v16i16(<16 x i16> %src, <16 x i1> %mask, i32 %evl)
  ret <16 x i16> %dst
}

define <32 x i8> @test_vp_compress_v32i8_masked(<32 x i8> %src, <32 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v32i8_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m2, ta, ma
; CHECK-NEXT:    vcompress.vm v10, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
  %dst = call <32 x i8> @llvm.experimental.vp.compress.v32i8(<32 x i8> %src, <32 x i1> %mask, i32 %evl)
  ret <32 x i8> %dst
}

define <8 x i64> @test_vp_compress_v8i64_masked(<8 x i64> %src, <8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v8i64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; CHECK-NEXT:    vcompress.vm v12, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v12
; CHECK-NEXT:    ret
  %dst = call <8 x i64> @llvm.experimental.vp.compress.v8i64(<8 x i64> %src, <8 x i1> %mask, i32 %evl)
  ret <8 x i64> %dst
}

define <16 x i32> @test_vp_compress_v16i32_masked(<16 x i32> %src, <16 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v16i32_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m4, ta, ma
; CHECK-NEXT:    vcompress.vm v12, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v12
; CHECK-NEXT:    ret
  %dst = call <16 x i32> @llvm.experimental.vp.compress.v16i32(<16 x i32> %src, <16 x i1> %mask, i32 %evl)
  ret <16 x i32> %dst
}

define <32 x i16> @test_vp_compress_v32i16_masked(<32 x i16> %src, <32 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v32i16_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m4, ta, ma
; CHECK-NEXT:    vcompress.vm v12, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v12
; CHECK-NEXT:    ret
  %dst = call <32 x i16> @llvm.experimental.vp.compress.v32i16(<32 x i16> %src, <32 x i1> %mask, i32 %evl)
  ret <32 x i16> %dst
}

define <64 x i8> @test_vp_compress_v64i8_masked(<64 x i8> %src, <64 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v64i8_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m4, ta, ma
; CHECK-NEXT:    vcompress.vm v12, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v12
; CHECK-NEXT:    ret
  %dst = call <64 x i8> @llvm.experimental.vp.compress.v64i8(<64 x i8> %src, <64 x i1> %mask, i32 %evl)
  ret <64 x i8> %dst
}

define <16 x i64> @test_vp_compress_v16i64_masked(<16 x i64> %src, <16 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v16i64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m8, ta, ma
; CHECK-NEXT:    vcompress.vm v16, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v16
; CHECK-NEXT:    ret
  %dst = call <16 x i64> @llvm.experimental.vp.compress.v16i64(<16 x i64> %src, <16 x i1> %mask, i32 %evl)
  ret <16 x i64> %dst
}

define <32 x i32> @test_vp_compress_v32i32_masked(<32 x i32> %src, <32 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v32i32_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m8, ta, ma
; CHECK-NEXT:    vcompress.vm v16, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v16
; CHECK-NEXT:    ret
  %dst = call <32 x i32> @llvm.experimental.vp.compress.v32i32(<32 x i32> %src, <32 x i1> %mask, i32 %evl)
  ret <32 x i32> %dst
}

define <64 x i16> @test_vp_compress_v64i16_masked(<64 x i16> %src, <64 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v64i16_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m8, ta, ma
; CHECK-NEXT:    vcompress.vm v16, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v16
; CHECK-NEXT:    ret
  %dst = call <64 x i16> @llvm.experimental.vp.compress.v64i16(<64 x i16> %src, <64 x i1> %mask, i32 %evl)
  ret <64 x i16> %dst
}

define <128 x i8> @test_vp_compress_v128i8_masked(<128 x i8> %src, <128 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_compress_v128i8_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m8, ta, ma
; CHECK-NEXT:    vcompress.vm v16, v8, v0
; CHECK-NEXT:    vmv.v.v v8, v16
; CHECK-NEXT:    ret
  %dst = call <128 x i8> @llvm.experimental.vp.compress.v128i8(<128 x i8> %src, <128 x i1> %mask, i32 %evl)
  ret <128 x i8> %dst
}

; LMUL = 1
declare <2 x i64> @llvm.experimental.vp.compress.v2i64(<2 x i64>,<2 x i1>,i32)
declare <2 x i32> @llvm.experimental.vp.compress.v2i32(<2 x i32>,<2 x i1>,i32)
declare <4 x i32> @llvm.experimental.vp.compress.v4i32(<4 x i32>,<4 x i1>,i32)
declare <2 x i16> @llvm.experimental.vp.compress.v2i16(<2 x i16>,<2 x i1>,i32)
declare <4 x i16> @llvm.experimental.vp.compress.v4i16(<4 x i16>,<4 x i1>,i32)
declare <8 x i16> @llvm.experimental.vp.compress.v8i16(<8 x i16>,<8 x i1>,i32)
declare <2 x i8> @llvm.experimental.vp.compress.v2i8(<2 x i8>,<2 x i1>,i32)
declare <4 x i8> @llvm.experimental.vp.compress.v4i8(<4 x i8>,<4 x i1>,i32)
declare <8 x i8> @llvm.experimental.vp.compress.v8i8(<8 x i8>,<8 x i1>,i32)
declare <16 x i8> @llvm.experimental.vp.compress.v16i8(<16 x i8>,<16 x i1>,i32)

; LMUL = 2
declare <4 x i64> @llvm.experimental.vp.compress.v4i64(<4 x i64>,<4 x i1>,i32)
declare <8 x i32> @llvm.experimental.vp.compress.v8i32(<8 x i32>,<8 x i1>,i32)
declare <16 x i16> @llvm.experimental.vp.compress.v16i16(<16 x i16>,<16 x i1>,i32)
declare <32 x i8> @llvm.experimental.vp.compress.v32i8(<32 x i8>,<32 x i1>,i32)

; LMUL = 4
declare <8 x i64> @llvm.experimental.vp.compress.v8i64(<8 x i64>,<8 x i1>,i32)
declare <16 x i32> @llvm.experimental.vp.compress.v16i32(<16 x i32>,<16 x i1>,i32)
declare <32 x i16> @llvm.experimental.vp.compress.v32i16(<32 x i16>,<32 x i1>,i32)
declare <64 x i8> @llvm.experimental.vp.compress.v64i8(<64 x i8>,<64 x i1>,i32)

; LMUL = 8
declare <16 x i64> @llvm.experimental.vp.compress.v16i64(<16 x i64>,<16 x i1>,i32)
declare <32 x i32> @llvm.experimental.vp.compress.v32i32(<32 x i32>,<32 x i1>,i32)
declare <64 x i16> @llvm.experimental.vp.compress.v64i16(<64 x i16>,<64 x i1>,i32)
declare <128 x i8> @llvm.experimental.vp.compress.v128i8(<128 x i8>,<128 x i1>,i32)
