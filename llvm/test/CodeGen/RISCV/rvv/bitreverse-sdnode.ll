; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+v -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,RV32
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,RV64
; RUN: llc -mtriple=riscv32 -mattr=+v,+experimental-zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-ZVBB
; RUN: llc -mtriple=riscv64 -mattr=+v,+experimental-zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-ZVBB

define <vscale x 1 x i8> @bitreverse_nxv1i8(<vscale x 1 x i8> %va) {
; CHECK-LABEL: bitreverse_nxv1i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, mf8, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 4
; CHECK-NEXT:    vand.vi v2, v8, 15
; CHECK-NEXT:    vsll.vi v2, v2, 4
; CHECK-NEXT:    vor.vv v1, v1, v2
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    li a0, 51
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    li a0, 85
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv1i8:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, mf8, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 1 x i8> @llvm.bitreverse.nxv1i8(<vscale x 1 x i8> %va)
  ret <vscale x 1 x i8> %a
}
declare <vscale x 1 x i8> @llvm.bitreverse.nxv1i8(<vscale x 1 x i8>)

define <vscale x 2 x i8> @bitreverse_nxv2i8(<vscale x 2 x i8> %va) {
; CHECK-LABEL: bitreverse_nxv2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, mf4, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 4
; CHECK-NEXT:    vand.vi v2, v8, 15
; CHECK-NEXT:    vsll.vi v2, v2, 4
; CHECK-NEXT:    vor.vv v1, v1, v2
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    li a0, 51
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    li a0, 85
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv2i8:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, mf4, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 2 x i8> @llvm.bitreverse.nxv2i8(<vscale x 2 x i8> %va)
  ret <vscale x 2 x i8> %a
}
declare <vscale x 2 x i8> @llvm.bitreverse.nxv2i8(<vscale x 2 x i8>)

define <vscale x 4 x i8> @bitreverse_nxv4i8(<vscale x 4 x i8> %va) {
; CHECK-LABEL: bitreverse_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, mf2, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 4
; CHECK-NEXT:    vand.vi v2, v8, 15
; CHECK-NEXT:    vsll.vi v2, v2, 4
; CHECK-NEXT:    vor.vv v1, v1, v2
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    li a0, 51
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    li a0, 85
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv4i8:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 4 x i8> @llvm.bitreverse.nxv4i8(<vscale x 4 x i8> %va)
  ret <vscale x 4 x i8> %a
}
declare <vscale x 4 x i8> @llvm.bitreverse.nxv4i8(<vscale x 4 x i8>)

define <vscale x 8 x i8> @bitreverse_nxv8i8(<vscale x 8 x i8> %va) {
; CHECK-LABEL: bitreverse_nxv8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m1, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 4
; CHECK-NEXT:    vand.vi v2, v8, 15
; CHECK-NEXT:    vsll.vi v2, v2, 4
; CHECK-NEXT:    vor.vv v1, v1, v2
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    li a0, 51
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    li a0, 85
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv8i8:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, m1, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 8 x i8> @llvm.bitreverse.nxv8i8(<vscale x 8 x i8> %va)
  ret <vscale x 8 x i8> %a
}
declare <vscale x 8 x i8> @llvm.bitreverse.nxv8i8(<vscale x 8 x i8>)

define <vscale x 16 x i8> @bitreverse_nxv16i8(<vscale x 16 x i8> %va) {
; CHECK-LABEL: bitreverse_nxv16i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vsrl.vi v2, v8, 4
; CHECK-NEXT:    vand.vi v4, v8, 15
; CHECK-NEXT:    vsll.vi v4, v4, 4
; CHECK-NEXT:    vor.vv v2, v2, v4
; CHECK-NEXT:    vsrl.vi v4, v2, 2
; CHECK-NEXT:    li a0, 51
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vsll.vi v2, v2, 2
; CHECK-NEXT:    vor.vv v2, v4, v2
; CHECK-NEXT:    vsrl.vi v4, v2, 1
; CHECK-NEXT:    li a0, 85
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vadd.vv v2, v2, v2
; CHECK-NEXT:    vor.vv v8, v4, v2
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv16i8:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 16 x i8> @llvm.bitreverse.nxv16i8(<vscale x 16 x i8> %va)
  ret <vscale x 16 x i8> %a
}
declare <vscale x 16 x i8> @llvm.bitreverse.nxv16i8(<vscale x 16 x i8>)

define <vscale x 32 x i8> @bitreverse_nxv32i8(<vscale x 32 x i8> %va) {
; CHECK-LABEL: bitreverse_nxv32i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m4, ta, ma
; CHECK-NEXT:    vsrl.vi v4, v8, 4
; CHECK-NEXT:    vand.vi v8, v8, 15
; CHECK-NEXT:    vsll.vi v8, v8, 4
; CHECK-NEXT:    vor.vv v4, v4, v8
; CHECK-NEXT:    vsrl.vi v8, v4, 2
; CHECK-NEXT:    li a0, 51
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vsll.vi v4, v4, 2
; CHECK-NEXT:    vor.vv v4, v8, v4
; CHECK-NEXT:    vsrl.vi v8, v4, 1
; CHECK-NEXT:    li a0, 85
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vadd.vv v4, v4, v4
; CHECK-NEXT:    vor.vv v8, v8, v4
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv32i8:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, m4, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 32 x i8> @llvm.bitreverse.nxv32i8(<vscale x 32 x i8> %va)
  ret <vscale x 32 x i8> %a
}
declare <vscale x 32 x i8> @llvm.bitreverse.nxv32i8(<vscale x 32 x i8>)

define <vscale x 64 x i8> @bitreverse_nxv64i8(<vscale x 64 x i8> %va) {
; CHECK-LABEL: bitreverse_nxv64i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m8, ta, ma
; CHECK-NEXT:    vsrl.vi v16, v8, 4
; CHECK-NEXT:    vand.vi v8, v8, 15
; CHECK-NEXT:    vsll.vi v8, v8, 4
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    vsrl.vi v16, v8, 2
; CHECK-NEXT:    li a0, 51
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vsll.vi v8, v8, 2
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    vsrl.vi v16, v8, 1
; CHECK-NEXT:    li a0, 85
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vadd.vv v8, v8, v8
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv64i8:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, m8, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 64 x i8> @llvm.bitreverse.nxv64i8(<vscale x 64 x i8> %va)
  ret <vscale x 64 x i8> %a
}
declare <vscale x 64 x i8> @llvm.bitreverse.nxv64i8(<vscale x 64 x i8>)

define <vscale x 1 x i16> @bitreverse_nxv1i16(<vscale x 1 x i16> %va) {
; CHECK-LABEL: bitreverse_nxv1i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, mf4, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 8
; CHECK-NEXT:    vsll.vi v2, v8, 8
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 4
; CHECK-NEXT:    lui a0, 1
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 4
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    lui a0, 3
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    lui a0, 5
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv1i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, mf4, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 1 x i16> @llvm.bitreverse.nxv1i16(<vscale x 1 x i16> %va)
  ret <vscale x 1 x i16> %a
}
declare <vscale x 1 x i16> @llvm.bitreverse.nxv1i16(<vscale x 1 x i16>)

define <vscale x 2 x i16> @bitreverse_nxv2i16(<vscale x 2 x i16> %va) {
; CHECK-LABEL: bitreverse_nxv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 8
; CHECK-NEXT:    vsll.vi v2, v8, 8
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 4
; CHECK-NEXT:    lui a0, 1
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 4
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    lui a0, 3
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    lui a0, 5
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv2i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 2 x i16> @llvm.bitreverse.nxv2i16(<vscale x 2 x i16> %va)
  ret <vscale x 2 x i16> %a
}
declare <vscale x 2 x i16> @llvm.bitreverse.nxv2i16(<vscale x 2 x i16>)

define <vscale x 4 x i16> @bitreverse_nxv4i16(<vscale x 4 x i16> %va) {
; CHECK-LABEL: bitreverse_nxv4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m1, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 8
; CHECK-NEXT:    vsll.vi v2, v8, 8
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 4
; CHECK-NEXT:    lui a0, 1
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 4
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    lui a0, 3
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    lui a0, 5
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv4i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, m1, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 4 x i16> @llvm.bitreverse.nxv4i16(<vscale x 4 x i16> %va)
  ret <vscale x 4 x i16> %a
}
declare <vscale x 4 x i16> @llvm.bitreverse.nxv4i16(<vscale x 4 x i16>)

define <vscale x 8 x i16> @bitreverse_nxv8i16(<vscale x 8 x i16> %va) {
; CHECK-LABEL: bitreverse_nxv8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m2, ta, ma
; CHECK-NEXT:    vsrl.vi v2, v8, 8
; CHECK-NEXT:    vsll.vi v4, v8, 8
; CHECK-NEXT:    vor.vv v2, v4, v2
; CHECK-NEXT:    vsrl.vi v4, v2, 4
; CHECK-NEXT:    lui a0, 1
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vsll.vi v2, v2, 4
; CHECK-NEXT:    vor.vv v2, v4, v2
; CHECK-NEXT:    vsrl.vi v4, v2, 2
; CHECK-NEXT:    lui a0, 3
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vsll.vi v2, v2, 2
; CHECK-NEXT:    vor.vv v2, v4, v2
; CHECK-NEXT:    vsrl.vi v4, v2, 1
; CHECK-NEXT:    lui a0, 5
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vadd.vv v2, v2, v2
; CHECK-NEXT:    vor.vv v8, v4, v2
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv8i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, m2, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 8 x i16> @llvm.bitreverse.nxv8i16(<vscale x 8 x i16> %va)
  ret <vscale x 8 x i16> %a
}
declare <vscale x 8 x i16> @llvm.bitreverse.nxv8i16(<vscale x 8 x i16>)

define <vscale x 16 x i16> @bitreverse_nxv16i16(<vscale x 16 x i16> %va) {
; CHECK-LABEL: bitreverse_nxv16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m4, ta, ma
; CHECK-NEXT:    vsrl.vi v4, v8, 8
; CHECK-NEXT:    vsll.vi v8, v8, 8
; CHECK-NEXT:    vor.vv v4, v8, v4
; CHECK-NEXT:    vsrl.vi v8, v4, 4
; CHECK-NEXT:    lui a0, 1
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vsll.vi v4, v4, 4
; CHECK-NEXT:    vor.vv v4, v8, v4
; CHECK-NEXT:    vsrl.vi v8, v4, 2
; CHECK-NEXT:    lui a0, 3
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vsll.vi v4, v4, 2
; CHECK-NEXT:    vor.vv v4, v8, v4
; CHECK-NEXT:    vsrl.vi v8, v4, 1
; CHECK-NEXT:    lui a0, 5
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vadd.vv v4, v4, v4
; CHECK-NEXT:    vor.vv v8, v8, v4
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv16i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, m4, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 16 x i16> @llvm.bitreverse.nxv16i16(<vscale x 16 x i16> %va)
  ret <vscale x 16 x i16> %a
}
declare <vscale x 16 x i16> @llvm.bitreverse.nxv16i16(<vscale x 16 x i16>)

define <vscale x 32 x i16> @bitreverse_nxv32i16(<vscale x 32 x i16> %va) {
; CHECK-LABEL: bitreverse_nxv32i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m8, ta, ma
; CHECK-NEXT:    vsrl.vi v16, v8, 8
; CHECK-NEXT:    vsll.vi v8, v8, 8
; CHECK-NEXT:    vor.vv v8, v8, v16
; CHECK-NEXT:    vsrl.vi v16, v8, 4
; CHECK-NEXT:    lui a0, 1
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vsll.vi v8, v8, 4
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    vsrl.vi v16, v8, 2
; CHECK-NEXT:    lui a0, 3
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vsll.vi v8, v8, 2
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    vsrl.vi v16, v8, 1
; CHECK-NEXT:    lui a0, 5
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vadd.vv v8, v8, v8
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv32i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, m8, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 32 x i16> @llvm.bitreverse.nxv32i16(<vscale x 32 x i16> %va)
  ret <vscale x 32 x i16> %a
}
declare <vscale x 32 x i16> @llvm.bitreverse.nxv32i16(<vscale x 32 x i16>)

define <vscale x 1 x i32> @bitreverse_nxv1i32(<vscale x 1 x i32> %va) {
; CHECK-LABEL: bitreverse_nxv1i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, mf2, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 8
; CHECK-NEXT:    lui a0, 16
; CHECK-NEXT:    addi a0, a0, -256
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsrl.vi v2, v8, 24
; CHECK-NEXT:    vor.vv v1, v1, v2
; CHECK-NEXT:    vand.vx v2, v8, a0
; CHECK-NEXT:    vsll.vi v2, v2, 8
; CHECK-NEXT:    vsll.vi v3, v8, 24
; CHECK-NEXT:    vor.vv v2, v3, v2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 4
; CHECK-NEXT:    lui a0, 61681
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 4
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    lui a0, 209715
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    lui a0, 349525
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv1i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 1 x i32> @llvm.bitreverse.nxv1i32(<vscale x 1 x i32> %va)
  ret <vscale x 1 x i32> %a
}
declare <vscale x 1 x i32> @llvm.bitreverse.nxv1i32(<vscale x 1 x i32>)

define <vscale x 2 x i32> @bitreverse_nxv2i32(<vscale x 2 x i32> %va) {
; CHECK-LABEL: bitreverse_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vsrl.vi v1, v8, 8
; CHECK-NEXT:    lui a0, 16
; CHECK-NEXT:    addi a0, a0, -256
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsrl.vi v2, v8, 24
; CHECK-NEXT:    vor.vv v1, v1, v2
; CHECK-NEXT:    vand.vx v2, v8, a0
; CHECK-NEXT:    vsll.vi v2, v2, 8
; CHECK-NEXT:    vsll.vi v3, v8, 24
; CHECK-NEXT:    vor.vv v2, v3, v2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 4
; CHECK-NEXT:    lui a0, 61681
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 4
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 2
; CHECK-NEXT:    lui a0, 209715
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vsll.vi v1, v1, 2
; CHECK-NEXT:    vor.vv v1, v2, v1
; CHECK-NEXT:    vsrl.vi v2, v1, 1
; CHECK-NEXT:    lui a0, 349525
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vand.vx v1, v1, a0
; CHECK-NEXT:    vadd.vv v1, v1, v1
; CHECK-NEXT:    vor.vv v8, v2, v1
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv2i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 2 x i32> @llvm.bitreverse.nxv2i32(<vscale x 2 x i32> %va)
  ret <vscale x 2 x i32> %a
}
declare <vscale x 2 x i32> @llvm.bitreverse.nxv2i32(<vscale x 2 x i32>)

define <vscale x 4 x i32> @bitreverse_nxv4i32(<vscale x 4 x i32> %va) {
; CHECK-LABEL: bitreverse_nxv4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m2, ta, ma
; CHECK-NEXT:    vsrl.vi v2, v8, 8
; CHECK-NEXT:    lui a0, 16
; CHECK-NEXT:    addi a0, a0, -256
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vsrl.vi v4, v8, 24
; CHECK-NEXT:    vor.vv v2, v2, v4
; CHECK-NEXT:    vand.vx v4, v8, a0
; CHECK-NEXT:    vsll.vi v4, v4, 8
; CHECK-NEXT:    vsll.vi v6, v8, 24
; CHECK-NEXT:    vor.vv v4, v6, v4
; CHECK-NEXT:    vor.vv v2, v4, v2
; CHECK-NEXT:    vsrl.vi v4, v2, 4
; CHECK-NEXT:    lui a0, 61681
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vsll.vi v2, v2, 4
; CHECK-NEXT:    vor.vv v2, v4, v2
; CHECK-NEXT:    vsrl.vi v4, v2, 2
; CHECK-NEXT:    lui a0, 209715
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vsll.vi v2, v2, 2
; CHECK-NEXT:    vor.vv v2, v4, v2
; CHECK-NEXT:    vsrl.vi v4, v2, 1
; CHECK-NEXT:    lui a0, 349525
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vand.vx v2, v2, a0
; CHECK-NEXT:    vadd.vv v2, v2, v2
; CHECK-NEXT:    vor.vv v8, v4, v2
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv4i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m2, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 4 x i32> @llvm.bitreverse.nxv4i32(<vscale x 4 x i32> %va)
  ret <vscale x 4 x i32> %a
}
declare <vscale x 4 x i32> @llvm.bitreverse.nxv4i32(<vscale x 4 x i32>)

define <vscale x 8 x i32> @bitreverse_nxv8i32(<vscale x 8 x i32> %va) {
; CHECK-LABEL: bitreverse_nxv8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m4, ta, ma
; CHECK-NEXT:    vsrl.vi v4, v8, 8
; CHECK-NEXT:    lui a0, 16
; CHECK-NEXT:    addi a0, a0, -256
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vsrl.vi v12, v8, 24
; CHECK-NEXT:    vor.vv v4, v4, v12
; CHECK-NEXT:    vand.vx v12, v8, a0
; CHECK-NEXT:    vsll.vi v12, v12, 8
; CHECK-NEXT:    vsll.vi v8, v8, 24
; CHECK-NEXT:    vor.vv v8, v8, v12
; CHECK-NEXT:    vor.vv v4, v8, v4
; CHECK-NEXT:    vsrl.vi v8, v4, 4
; CHECK-NEXT:    lui a0, 61681
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vsll.vi v4, v4, 4
; CHECK-NEXT:    vor.vv v4, v8, v4
; CHECK-NEXT:    vsrl.vi v8, v4, 2
; CHECK-NEXT:    lui a0, 209715
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vsll.vi v4, v4, 2
; CHECK-NEXT:    vor.vv v4, v8, v4
; CHECK-NEXT:    vsrl.vi v8, v4, 1
; CHECK-NEXT:    lui a0, 349525
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vand.vx v4, v4, a0
; CHECK-NEXT:    vadd.vv v4, v4, v4
; CHECK-NEXT:    vor.vv v8, v8, v4
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv8i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m4, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 8 x i32> @llvm.bitreverse.nxv8i32(<vscale x 8 x i32> %va)
  ret <vscale x 8 x i32> %a
}
declare <vscale x 8 x i32> @llvm.bitreverse.nxv8i32(<vscale x 8 x i32>)

define <vscale x 16 x i32> @bitreverse_nxv16i32(<vscale x 16 x i32> %va) {
; CHECK-LABEL: bitreverse_nxv16i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m8, ta, ma
; CHECK-NEXT:    vsrl.vi v16, v8, 8
; CHECK-NEXT:    lui a0, 16
; CHECK-NEXT:    addi a0, a0, -256
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vsrl.vi v24, v8, 24
; CHECK-NEXT:    vor.vv v16, v16, v24
; CHECK-NEXT:    vand.vx v24, v8, a0
; CHECK-NEXT:    vsll.vi v24, v24, 8
; CHECK-NEXT:    vsll.vi v8, v8, 24
; CHECK-NEXT:    vor.vv v8, v8, v24
; CHECK-NEXT:    vor.vv v8, v8, v16
; CHECK-NEXT:    vsrl.vi v16, v8, 4
; CHECK-NEXT:    lui a0, 61681
; CHECK-NEXT:    addi a0, a0, -241
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vsll.vi v8, v8, 4
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    vsrl.vi v16, v8, 2
; CHECK-NEXT:    lui a0, 209715
; CHECK-NEXT:    addi a0, a0, 819
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vsll.vi v8, v8, 2
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    vsrl.vi v16, v8, 1
; CHECK-NEXT:    lui a0, 349525
; CHECK-NEXT:    addi a0, a0, 1365
; CHECK-NEXT:    vand.vx v16, v16, a0
; CHECK-NEXT:    vand.vx v8, v8, a0
; CHECK-NEXT:    vadd.vv v8, v8, v8
; CHECK-NEXT:    vor.vv v8, v16, v8
; CHECK-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv16i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m8, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 16 x i32> @llvm.bitreverse.nxv16i32(<vscale x 16 x i32> %va)
  ret <vscale x 16 x i32> %a
}
declare <vscale x 16 x i32> @llvm.bitreverse.nxv16i32(<vscale x 16 x i32>)

define <vscale x 1 x i64> @bitreverse_nxv1i64(<vscale x 1 x i64> %va) {
; RV32-LABEL: bitreverse_nxv1i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    .cfi_def_cfa_offset 16
; RV32-NEXT:    sw zero, 12(sp)
; RV32-NEXT:    lui a0, 1044480
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    li a0, 56
; RV32-NEXT:    vsetvli a1, zero, e64, m1, ta, ma
; RV32-NEXT:    vsrl.vx v1, v8, a0
; RV32-NEXT:    li a1, 40
; RV32-NEXT:    vsrl.vx v2, v8, a1
; RV32-NEXT:    lui a2, 16
; RV32-NEXT:    addi a2, a2, -256
; RV32-NEXT:    vand.vx v2, v2, a2
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v8, 24
; RV32-NEXT:    addi a3, sp, 8
; RV32-NEXT:    vlse64.v v3, (a3), zero
; RV32-NEXT:    lui a3, 4080
; RV32-NEXT:    vand.vx v2, v2, a3
; RV32-NEXT:    vsrl.vi v4, v8, 8
; RV32-NEXT:    vand.vv v4, v4, v3
; RV32-NEXT:    vor.vv v2, v4, v2
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsll.vx v2, v8, a0
; RV32-NEXT:    vand.vx v4, v8, a2
; RV32-NEXT:    vsll.vx v4, v4, a1
; RV32-NEXT:    vor.vv v2, v2, v4
; RV32-NEXT:    vand.vx v4, v8, a3
; RV32-NEXT:    vsll.vi v4, v4, 24
; RV32-NEXT:    vand.vv v3, v8, v3
; RV32-NEXT:    vsll.vi v3, v3, 8
; RV32-NEXT:    vor.vv v3, v4, v3
; RV32-NEXT:    vor.vv v2, v2, v3
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 4
; RV32-NEXT:    lui a0, 61681
; RV32-NEXT:    addi a0, a0, -241
; RV32-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; RV32-NEXT:    vmv.v.x v3, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; RV32-NEXT:    vand.vv v2, v2, v3
; RV32-NEXT:    vand.vv v1, v1, v3
; RV32-NEXT:    vsll.vi v1, v1, 4
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 2
; RV32-NEXT:    lui a0, 209715
; RV32-NEXT:    addi a0, a0, 819
; RV32-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; RV32-NEXT:    vmv.v.x v3, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; RV32-NEXT:    vand.vv v2, v2, v3
; RV32-NEXT:    vand.vv v1, v1, v3
; RV32-NEXT:    vsll.vi v1, v1, 2
; RV32-NEXT:    vor.vv v1, v2, v1
; RV32-NEXT:    vsrl.vi v2, v1, 1
; RV32-NEXT:    lui a0, 349525
; RV32-NEXT:    addi a0, a0, 1365
; RV32-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; RV32-NEXT:    vmv.v.x v3, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; RV32-NEXT:    vand.vv v2, v2, v3
; RV32-NEXT:    vand.vv v1, v1, v3
; RV32-NEXT:    vadd.vv v1, v1, v1
; RV32-NEXT:    vor.vv v8, v2, v1
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: bitreverse_nxv1i64:
; RV64:       # %bb.0:
; RV64-NEXT:    li a0, 56
; RV64-NEXT:    vsetvli a1, zero, e64, m1, ta, ma
; RV64-NEXT:    vsrl.vx v1, v8, a0
; RV64-NEXT:    li a1, 40
; RV64-NEXT:    vsrl.vx v2, v8, a1
; RV64-NEXT:    lui a2, 16
; RV64-NEXT:    addiw a2, a2, -256
; RV64-NEXT:    vand.vx v2, v2, a2
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v8, 24
; RV64-NEXT:    lui a3, 4080
; RV64-NEXT:    vand.vx v2, v2, a3
; RV64-NEXT:    vsrl.vi v3, v8, 8
; RV64-NEXT:    li a4, 255
; RV64-NEXT:    slli a4, a4, 24
; RV64-NEXT:    vand.vx v3, v3, a4
; RV64-NEXT:    vor.vv v2, v3, v2
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vand.vx v2, v8, a3
; RV64-NEXT:    vsll.vi v2, v2, 24
; RV64-NEXT:    vand.vx v3, v8, a4
; RV64-NEXT:    vsll.vi v3, v3, 8
; RV64-NEXT:    vor.vv v2, v2, v3
; RV64-NEXT:    vsll.vx v3, v8, a0
; RV64-NEXT:    vand.vx v4, v8, a2
; RV64-NEXT:    vsll.vx v4, v4, a1
; RV64-NEXT:    vor.vv v3, v3, v4
; RV64-NEXT:    vor.vv v2, v3, v2
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 4
; RV64-NEXT:    lui a0, 61681
; RV64-NEXT:    addiw a0, a0, -241
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v2, v2, a0
; RV64-NEXT:    vand.vx v1, v1, a0
; RV64-NEXT:    vsll.vi v1, v1, 4
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 2
; RV64-NEXT:    lui a0, 209715
; RV64-NEXT:    addiw a0, a0, 819
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v2, v2, a0
; RV64-NEXT:    vand.vx v1, v1, a0
; RV64-NEXT:    vsll.vi v1, v1, 2
; RV64-NEXT:    vor.vv v1, v2, v1
; RV64-NEXT:    vsrl.vi v2, v1, 1
; RV64-NEXT:    lui a0, 349525
; RV64-NEXT:    addiw a0, a0, 1365
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v2, v2, a0
; RV64-NEXT:    vand.vx v1, v1, a0
; RV64-NEXT:    vadd.vv v1, v1, v1
; RV64-NEXT:    vor.vv v8, v2, v1
; RV64-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv1i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 1 x i64> @llvm.bitreverse.nxv1i64(<vscale x 1 x i64> %va)
  ret <vscale x 1 x i64> %a
}
declare <vscale x 1 x i64> @llvm.bitreverse.nxv1i64(<vscale x 1 x i64>)

define <vscale x 2 x i64> @bitreverse_nxv2i64(<vscale x 2 x i64> %va) {
; RV32-LABEL: bitreverse_nxv2i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    .cfi_def_cfa_offset 16
; RV32-NEXT:    sw zero, 12(sp)
; RV32-NEXT:    lui a0, 1044480
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    li a0, 56
; RV32-NEXT:    vsetvli a1, zero, e64, m2, ta, ma
; RV32-NEXT:    vsrl.vx v2, v8, a0
; RV32-NEXT:    li a1, 40
; RV32-NEXT:    vsrl.vx v4, v8, a1
; RV32-NEXT:    lui a2, 16
; RV32-NEXT:    addi a2, a2, -256
; RV32-NEXT:    vand.vx v4, v4, a2
; RV32-NEXT:    vor.vv v2, v4, v2
; RV32-NEXT:    vsrl.vi v4, v8, 24
; RV32-NEXT:    addi a3, sp, 8
; RV32-NEXT:    vlse64.v v6, (a3), zero
; RV32-NEXT:    lui a3, 4080
; RV32-NEXT:    vand.vx v4, v4, a3
; RV32-NEXT:    vsrl.vi v10, v8, 8
; RV32-NEXT:    vand.vv v10, v10, v6
; RV32-NEXT:    vor.vv v4, v10, v4
; RV32-NEXT:    vor.vv v2, v4, v2
; RV32-NEXT:    vsll.vx v4, v8, a0
; RV32-NEXT:    vand.vx v10, v8, a2
; RV32-NEXT:    vsll.vx v10, v10, a1
; RV32-NEXT:    vor.vv v4, v4, v10
; RV32-NEXT:    vand.vx v10, v8, a3
; RV32-NEXT:    vsll.vi v10, v10, 24
; RV32-NEXT:    vand.vv v6, v8, v6
; RV32-NEXT:    vsll.vi v6, v6, 8
; RV32-NEXT:    vor.vv v6, v10, v6
; RV32-NEXT:    vor.vv v4, v4, v6
; RV32-NEXT:    vor.vv v2, v4, v2
; RV32-NEXT:    vsrl.vi v4, v2, 4
; RV32-NEXT:    lui a0, 61681
; RV32-NEXT:    addi a0, a0, -241
; RV32-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; RV32-NEXT:    vmv.v.x v6, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; RV32-NEXT:    vand.vv v4, v4, v6
; RV32-NEXT:    vand.vv v2, v2, v6
; RV32-NEXT:    vsll.vi v2, v2, 4
; RV32-NEXT:    vor.vv v2, v4, v2
; RV32-NEXT:    vsrl.vi v4, v2, 2
; RV32-NEXT:    lui a0, 209715
; RV32-NEXT:    addi a0, a0, 819
; RV32-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; RV32-NEXT:    vmv.v.x v6, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; RV32-NEXT:    vand.vv v4, v4, v6
; RV32-NEXT:    vand.vv v2, v2, v6
; RV32-NEXT:    vsll.vi v2, v2, 2
; RV32-NEXT:    vor.vv v2, v4, v2
; RV32-NEXT:    vsrl.vi v4, v2, 1
; RV32-NEXT:    lui a0, 349525
; RV32-NEXT:    addi a0, a0, 1365
; RV32-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; RV32-NEXT:    vmv.v.x v6, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; RV32-NEXT:    vand.vv v4, v4, v6
; RV32-NEXT:    vand.vv v2, v2, v6
; RV32-NEXT:    vadd.vv v2, v2, v2
; RV32-NEXT:    vor.vv v8, v4, v2
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: bitreverse_nxv2i64:
; RV64:       # %bb.0:
; RV64-NEXT:    li a0, 56
; RV64-NEXT:    vsetvli a1, zero, e64, m2, ta, ma
; RV64-NEXT:    vsrl.vx v2, v8, a0
; RV64-NEXT:    li a1, 40
; RV64-NEXT:    vsrl.vx v4, v8, a1
; RV64-NEXT:    lui a2, 16
; RV64-NEXT:    addiw a2, a2, -256
; RV64-NEXT:    vand.vx v4, v4, a2
; RV64-NEXT:    vor.vv v2, v4, v2
; RV64-NEXT:    vsrl.vi v4, v8, 24
; RV64-NEXT:    lui a3, 4080
; RV64-NEXT:    vand.vx v4, v4, a3
; RV64-NEXT:    vsrl.vi v6, v8, 8
; RV64-NEXT:    li a4, 255
; RV64-NEXT:    slli a4, a4, 24
; RV64-NEXT:    vand.vx v6, v6, a4
; RV64-NEXT:    vor.vv v4, v6, v4
; RV64-NEXT:    vor.vv v2, v4, v2
; RV64-NEXT:    vand.vx v4, v8, a3
; RV64-NEXT:    vsll.vi v4, v4, 24
; RV64-NEXT:    vand.vx v6, v8, a4
; RV64-NEXT:    vsll.vi v6, v6, 8
; RV64-NEXT:    vor.vv v4, v4, v6
; RV64-NEXT:    vsll.vx v6, v8, a0
; RV64-NEXT:    vand.vx v8, v8, a2
; RV64-NEXT:    vsll.vx v8, v8, a1
; RV64-NEXT:    vor.vv v6, v6, v8
; RV64-NEXT:    vor.vv v4, v6, v4
; RV64-NEXT:    vor.vv v2, v4, v2
; RV64-NEXT:    vsrl.vi v4, v2, 4
; RV64-NEXT:    lui a0, 61681
; RV64-NEXT:    addiw a0, a0, -241
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v4, v4, a0
; RV64-NEXT:    vand.vx v2, v2, a0
; RV64-NEXT:    vsll.vi v2, v2, 4
; RV64-NEXT:    vor.vv v2, v4, v2
; RV64-NEXT:    vsrl.vi v4, v2, 2
; RV64-NEXT:    lui a0, 209715
; RV64-NEXT:    addiw a0, a0, 819
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v4, v4, a0
; RV64-NEXT:    vand.vx v2, v2, a0
; RV64-NEXT:    vsll.vi v2, v2, 2
; RV64-NEXT:    vor.vv v2, v4, v2
; RV64-NEXT:    vsrl.vi v4, v2, 1
; RV64-NEXT:    lui a0, 349525
; RV64-NEXT:    addiw a0, a0, 1365
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v4, v4, a0
; RV64-NEXT:    vand.vx v2, v2, a0
; RV64-NEXT:    vadd.vv v2, v2, v2
; RV64-NEXT:    vor.vv v8, v4, v2
; RV64-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv2i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 2 x i64> @llvm.bitreverse.nxv2i64(<vscale x 2 x i64> %va)
  ret <vscale x 2 x i64> %a
}
declare <vscale x 2 x i64> @llvm.bitreverse.nxv2i64(<vscale x 2 x i64>)

define <vscale x 4 x i64> @bitreverse_nxv4i64(<vscale x 4 x i64> %va) {
; RV32-LABEL: bitreverse_nxv4i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    .cfi_def_cfa_offset 16
; RV32-NEXT:    sw zero, 12(sp)
; RV32-NEXT:    lui a0, 1044480
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    li a0, 56
; RV32-NEXT:    vsetvli a1, zero, e64, m4, ta, ma
; RV32-NEXT:    vsrl.vx v4, v8, a0
; RV32-NEXT:    li a1, 40
; RV32-NEXT:    vsrl.vx v12, v8, a1
; RV32-NEXT:    lui a2, 16
; RV32-NEXT:    addi a2, a2, -256
; RV32-NEXT:    vand.vx v12, v12, a2
; RV32-NEXT:    vor.vv v4, v12, v4
; RV32-NEXT:    vsrl.vi v12, v8, 24
; RV32-NEXT:    addi a3, sp, 8
; RV32-NEXT:    vlse64.v v16, (a3), zero
; RV32-NEXT:    lui a3, 4080
; RV32-NEXT:    vand.vx v12, v12, a3
; RV32-NEXT:    vsrl.vi v20, v8, 8
; RV32-NEXT:    vand.vv v20, v20, v16
; RV32-NEXT:    vor.vv v12, v20, v12
; RV32-NEXT:    vor.vv v4, v12, v4
; RV32-NEXT:    vsll.vx v12, v8, a0
; RV32-NEXT:    vand.vx v20, v8, a2
; RV32-NEXT:    vsll.vx v20, v20, a1
; RV32-NEXT:    vor.vv v12, v12, v20
; RV32-NEXT:    vand.vx v20, v8, a3
; RV32-NEXT:    vsll.vi v20, v20, 24
; RV32-NEXT:    vand.vv v8, v8, v16
; RV32-NEXT:    vsll.vi v8, v8, 8
; RV32-NEXT:    vor.vv v8, v20, v8
; RV32-NEXT:    vor.vv v8, v12, v8
; RV32-NEXT:    vor.vv v4, v8, v4
; RV32-NEXT:    vsrl.vi v8, v4, 4
; RV32-NEXT:    lui a0, 61681
; RV32-NEXT:    addi a0, a0, -241
; RV32-NEXT:    vsetvli a1, zero, e32, m4, ta, ma
; RV32-NEXT:    vmv.v.x v12, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; RV32-NEXT:    vand.vv v8, v8, v12
; RV32-NEXT:    vand.vv v4, v4, v12
; RV32-NEXT:    vsll.vi v4, v4, 4
; RV32-NEXT:    vor.vv v4, v8, v4
; RV32-NEXT:    vsrl.vi v8, v4, 2
; RV32-NEXT:    lui a0, 209715
; RV32-NEXT:    addi a0, a0, 819
; RV32-NEXT:    vsetvli a1, zero, e32, m4, ta, ma
; RV32-NEXT:    vmv.v.x v12, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; RV32-NEXT:    vand.vv v8, v8, v12
; RV32-NEXT:    vand.vv v4, v4, v12
; RV32-NEXT:    vsll.vi v4, v4, 2
; RV32-NEXT:    vor.vv v4, v8, v4
; RV32-NEXT:    vsrl.vi v8, v4, 1
; RV32-NEXT:    lui a0, 349525
; RV32-NEXT:    addi a0, a0, 1365
; RV32-NEXT:    vsetvli a1, zero, e32, m4, ta, ma
; RV32-NEXT:    vmv.v.x v12, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; RV32-NEXT:    vand.vv v8, v8, v12
; RV32-NEXT:    vand.vv v4, v4, v12
; RV32-NEXT:    vadd.vv v4, v4, v4
; RV32-NEXT:    vor.vv v8, v8, v4
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: bitreverse_nxv4i64:
; RV64:       # %bb.0:
; RV64-NEXT:    li a0, 56
; RV64-NEXT:    vsetvli a1, zero, e64, m4, ta, ma
; RV64-NEXT:    vsrl.vx v4, v8, a0
; RV64-NEXT:    li a1, 40
; RV64-NEXT:    vsrl.vx v12, v8, a1
; RV64-NEXT:    lui a2, 16
; RV64-NEXT:    addiw a2, a2, -256
; RV64-NEXT:    vand.vx v12, v12, a2
; RV64-NEXT:    vor.vv v4, v12, v4
; RV64-NEXT:    vsrl.vi v12, v8, 24
; RV64-NEXT:    lui a3, 4080
; RV64-NEXT:    vand.vx v12, v12, a3
; RV64-NEXT:    vsrl.vi v16, v8, 8
; RV64-NEXT:    li a4, 255
; RV64-NEXT:    slli a4, a4, 24
; RV64-NEXT:    vand.vx v16, v16, a4
; RV64-NEXT:    vor.vv v12, v16, v12
; RV64-NEXT:    vor.vv v4, v12, v4
; RV64-NEXT:    vand.vx v12, v8, a3
; RV64-NEXT:    vsll.vi v12, v12, 24
; RV64-NEXT:    vand.vx v16, v8, a4
; RV64-NEXT:    vsll.vi v16, v16, 8
; RV64-NEXT:    vor.vv v12, v12, v16
; RV64-NEXT:    vsll.vx v16, v8, a0
; RV64-NEXT:    vand.vx v8, v8, a2
; RV64-NEXT:    vsll.vx v8, v8, a1
; RV64-NEXT:    vor.vv v8, v16, v8
; RV64-NEXT:    vor.vv v8, v8, v12
; RV64-NEXT:    vor.vv v4, v8, v4
; RV64-NEXT:    vsrl.vi v8, v4, 4
; RV64-NEXT:    lui a0, 61681
; RV64-NEXT:    addiw a0, a0, -241
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v8, v8, a0
; RV64-NEXT:    vand.vx v4, v4, a0
; RV64-NEXT:    vsll.vi v4, v4, 4
; RV64-NEXT:    vor.vv v4, v8, v4
; RV64-NEXT:    vsrl.vi v8, v4, 2
; RV64-NEXT:    lui a0, 209715
; RV64-NEXT:    addiw a0, a0, 819
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v8, v8, a0
; RV64-NEXT:    vand.vx v4, v4, a0
; RV64-NEXT:    vsll.vi v4, v4, 2
; RV64-NEXT:    vor.vv v4, v8, v4
; RV64-NEXT:    vsrl.vi v8, v4, 1
; RV64-NEXT:    lui a0, 349525
; RV64-NEXT:    addiw a0, a0, 1365
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v8, v8, a0
; RV64-NEXT:    vand.vx v4, v4, a0
; RV64-NEXT:    vadd.vv v4, v4, v4
; RV64-NEXT:    vor.vv v8, v8, v4
; RV64-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv4i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 4 x i64> @llvm.bitreverse.nxv4i64(<vscale x 4 x i64> %va)
  ret <vscale x 4 x i64> %a
}
declare <vscale x 4 x i64> @llvm.bitreverse.nxv4i64(<vscale x 4 x i64>)

define <vscale x 8 x i64> @bitreverse_nxv8i64(<vscale x 8 x i64> %va) {
; RV32-LABEL: bitreverse_nxv8i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    .cfi_def_cfa_offset 16
; RV32-NEXT:    csrr a0, vlenb
; RV32-NEXT:    slli a0, a0, 3
; RV32-NEXT:    sub sp, sp, a0
; RV32-NEXT:    .cfi_escape 0x0f, 0x0d, 0x72, 0x00, 0x11, 0x10, 0x22, 0x11, 0x08, 0x92, 0xa2, 0x38, 0x00, 0x1e, 0x22 # sp + 16 + 8 * vlenb
; RV32-NEXT:    sw zero, 12(sp)
; RV32-NEXT:    lui a0, 1044480
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    li a0, 56
; RV32-NEXT:    vsetvli a1, zero, e64, m8, ta, ma
; RV32-NEXT:    vsrl.vx v16, v8, a0
; RV32-NEXT:    li a1, 40
; RV32-NEXT:    vsrl.vx v24, v8, a1
; RV32-NEXT:    lui a2, 16
; RV32-NEXT:    addi a2, a2, -256
; RV32-NEXT:    vand.vx v24, v24, a2
; RV32-NEXT:    vor.vv v16, v24, v16
; RV32-NEXT:    addi a3, sp, 16
; RV32-NEXT:    vs8r.v v16, (a3) # Unknown-size Folded Spill
; RV32-NEXT:    vsrl.vi v0, v8, 24
; RV32-NEXT:    addi a3, sp, 8
; RV32-NEXT:    vlse64.v v16, (a3), zero
; RV32-NEXT:    lui a3, 4080
; RV32-NEXT:    vand.vx v0, v0, a3
; RV32-NEXT:    vsrl.vi v24, v8, 8
; RV32-NEXT:    vand.vv v24, v24, v16
; RV32-NEXT:    vor.vv v24, v24, v0
; RV32-NEXT:    addi a4, sp, 16
; RV32-NEXT:    vl8r.v v0, (a4) # Unknown-size Folded Reload
; RV32-NEXT:    vor.vv v24, v24, v0
; RV32-NEXT:    vs8r.v v24, (a4) # Unknown-size Folded Spill
; RV32-NEXT:    vand.vx v0, v8, a2
; RV32-NEXT:    vsll.vx v0, v0, a1
; RV32-NEXT:    vsll.vx v24, v8, a0
; RV32-NEXT:    vor.vv v24, v24, v0
; RV32-NEXT:    vand.vv v16, v8, v16
; RV32-NEXT:    vand.vx v8, v8, a3
; RV32-NEXT:    vsll.vi v8, v8, 24
; RV32-NEXT:    vsll.vi v16, v16, 8
; RV32-NEXT:    vor.vv v8, v8, v16
; RV32-NEXT:    vor.vv v8, v24, v8
; RV32-NEXT:    addi a0, sp, 16
; RV32-NEXT:    vl8r.v v16, (a0) # Unknown-size Folded Reload
; RV32-NEXT:    vor.vv v8, v8, v16
; RV32-NEXT:    vsrl.vi v16, v8, 4
; RV32-NEXT:    lui a0, 61681
; RV32-NEXT:    addi a0, a0, -241
; RV32-NEXT:    vsetvli a1, zero, e32, m8, ta, ma
; RV32-NEXT:    vmv.v.x v24, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; RV32-NEXT:    vand.vv v16, v16, v24
; RV32-NEXT:    vand.vv v8, v8, v24
; RV32-NEXT:    vsll.vi v8, v8, 4
; RV32-NEXT:    vor.vv v8, v16, v8
; RV32-NEXT:    vsrl.vi v16, v8, 2
; RV32-NEXT:    lui a0, 209715
; RV32-NEXT:    addi a0, a0, 819
; RV32-NEXT:    vsetvli a1, zero, e32, m8, ta, ma
; RV32-NEXT:    vmv.v.x v24, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; RV32-NEXT:    vand.vv v16, v16, v24
; RV32-NEXT:    vand.vv v8, v8, v24
; RV32-NEXT:    vsll.vi v8, v8, 2
; RV32-NEXT:    vor.vv v8, v16, v8
; RV32-NEXT:    vsrl.vi v16, v8, 1
; RV32-NEXT:    lui a0, 349525
; RV32-NEXT:    addi a0, a0, 1365
; RV32-NEXT:    vsetvli a1, zero, e32, m8, ta, ma
; RV32-NEXT:    vmv.v.x v24, a0
; RV32-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; RV32-NEXT:    vand.vv v16, v16, v24
; RV32-NEXT:    vand.vv v8, v8, v24
; RV32-NEXT:    vadd.vv v8, v8, v8
; RV32-NEXT:    vor.vv v8, v16, v8
; RV32-NEXT:    csrr a0, vlenb
; RV32-NEXT:    slli a0, a0, 3
; RV32-NEXT:    add sp, sp, a0
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: bitreverse_nxv8i64:
; RV64:       # %bb.0:
; RV64-NEXT:    li a0, 56
; RV64-NEXT:    vsetvli a1, zero, e64, m8, ta, ma
; RV64-NEXT:    vsrl.vx v16, v8, a0
; RV64-NEXT:    li a1, 40
; RV64-NEXT:    vsrl.vx v24, v8, a1
; RV64-NEXT:    lui a2, 16
; RV64-NEXT:    addiw a2, a2, -256
; RV64-NEXT:    vand.vx v24, v24, a2
; RV64-NEXT:    vor.vv v16, v24, v16
; RV64-NEXT:    vsrl.vi v24, v8, 24
; RV64-NEXT:    lui a3, 4080
; RV64-NEXT:    vand.vx v24, v24, a3
; RV64-NEXT:    vsrl.vi v0, v8, 8
; RV64-NEXT:    li a4, 255
; RV64-NEXT:    slli a4, a4, 24
; RV64-NEXT:    vand.vx v0, v0, a4
; RV64-NEXT:    vor.vv v24, v0, v24
; RV64-NEXT:    vor.vv v16, v24, v16
; RV64-NEXT:    vand.vx v24, v8, a3
; RV64-NEXT:    vsll.vi v24, v24, 24
; RV64-NEXT:    vand.vx v0, v8, a4
; RV64-NEXT:    vsll.vi v0, v0, 8
; RV64-NEXT:    vor.vv v24, v24, v0
; RV64-NEXT:    vsll.vx v0, v8, a0
; RV64-NEXT:    vand.vx v8, v8, a2
; RV64-NEXT:    vsll.vx v8, v8, a1
; RV64-NEXT:    vor.vv v8, v0, v8
; RV64-NEXT:    vor.vv v8, v8, v24
; RV64-NEXT:    vor.vv v8, v8, v16
; RV64-NEXT:    vsrl.vi v16, v8, 4
; RV64-NEXT:    lui a0, 61681
; RV64-NEXT:    addiw a0, a0, -241
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v16, v16, a0
; RV64-NEXT:    vand.vx v8, v8, a0
; RV64-NEXT:    vsll.vi v8, v8, 4
; RV64-NEXT:    vor.vv v8, v16, v8
; RV64-NEXT:    vsrl.vi v16, v8, 2
; RV64-NEXT:    lui a0, 209715
; RV64-NEXT:    addiw a0, a0, 819
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v16, v16, a0
; RV64-NEXT:    vand.vx v8, v8, a0
; RV64-NEXT:    vsll.vi v8, v8, 2
; RV64-NEXT:    vor.vv v8, v16, v8
; RV64-NEXT:    vsrl.vi v16, v8, 1
; RV64-NEXT:    lui a0, 349525
; RV64-NEXT:    addiw a0, a0, 1365
; RV64-NEXT:    slli a1, a0, 32
; RV64-NEXT:    add a0, a0, a1
; RV64-NEXT:    vand.vx v16, v16, a0
; RV64-NEXT:    vand.vx v8, v8, a0
; RV64-NEXT:    vadd.vv v8, v8, v8
; RV64-NEXT:    vor.vv v8, v16, v8
; RV64-NEXT:    ret
;
; CHECK-ZVBB-LABEL: bitreverse_nxv8i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; CHECK-ZVBB-NEXT:    vbrev.v v8, v8
; CHECK-ZVBB-NEXT:    ret
  %a = call <vscale x 8 x i64> @llvm.bitreverse.nxv8i64(<vscale x 8 x i64> %va)
  ret <vscale x 8 x i64> %a
}
declare <vscale x 8 x i64> @llvm.bitreverse.nxv8i64(<vscale x 8 x i64>)
