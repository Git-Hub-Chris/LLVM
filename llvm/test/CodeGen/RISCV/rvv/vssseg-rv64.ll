; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+zve64d,+f,+d,+zfh,+zvfh \
; RUN:     -verify-machineinstrs < %s | FileCheck %s

declare void @llvm.riscv.vssseg2.riscv_mf8x2(riscv_mf8x2, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg2.mask.riscv_mf8x2.nxv1i1(riscv_mf8x2, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg2_nxv1i8_riscv_mf8x2(riscv_mf8x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1i8_riscv_mf8x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf8x2(riscv_mf8x2 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg2_mask_nxv1i8_riscv_mf8x2(riscv_mf8x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1i8_riscv_mf8x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf8x2.nxv1i1(riscv_mf8x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg2.riscv_mf4x2(riscv_mf4x2, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg2.mask.riscv_mf4x2.nxv2i1(riscv_mf4x2, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg2_nxv2i8_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2i8_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg2_mask_nxv2i8_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2i8_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf4x2.nxv2i1(riscv_mf4x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg2.riscv_mf2x2(riscv_mf2x2, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv4i1(riscv_mf2x2, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg2_nxv4i8_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4i8_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg2_mask_nxv4i8_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4i8_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv4i1(riscv_mf2x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv8i1(riscv_m1x2, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg2_nxv8i8_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv8i8_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg2_mask_nxv8i8_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv8i8_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv8i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv16i1(riscv_m2x2, ptr, i64, <vscale x 16 x i1>, i64, i64)

define void @test_vssseg2_nxv16i8_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv16i8_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg2_mask_nxv16i8_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv16i8_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv16i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv32i1(riscv_m4x2, ptr, i64, <vscale x 32 x i1>, i64, i64)

define void @test_vssseg2_nxv32i8_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv32i8_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg2_mask_nxv32i8_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 32 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv32i8_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vssseg2e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv32i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 32 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg3.riscv_mf8x3(riscv_mf8x3, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg3.mask.riscv_mf8x3.nxv1i1(riscv_mf8x3, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg3_nxv1i8_riscv_mf8x3(riscv_mf8x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1i8_riscv_mf8x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf8x3(riscv_mf8x3 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg3_mask_nxv1i8_riscv_mf8x3(riscv_mf8x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1i8_riscv_mf8x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf8x3.nxv1i1(riscv_mf8x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg3.riscv_mf4x3(riscv_mf4x3, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg3.mask.riscv_mf4x3.nxv2i1(riscv_mf4x3, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg3_nxv2i8_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2i8_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg3_mask_nxv2i8_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2i8_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf4x3.nxv2i1(riscv_mf4x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg3.riscv_mf2x3(riscv_mf2x3, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv4i1(riscv_mf2x3, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg3_nxv4i8_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv4i8_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg3_mask_nxv4i8_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv4i8_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv4i1(riscv_mf2x3 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv8i1(riscv_m1x3, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg3_nxv8i8_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv8i8_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg3_mask_nxv8i8_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv8i8_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv8i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv16i1(riscv_m2x3, ptr, i64, <vscale x 16 x i1>, i64, i64)

define void @test_vssseg3_nxv16i8_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv16i8_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg3_mask_nxv16i8_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv16i8_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vssseg3e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv16i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg4.riscv_mf8x4(riscv_mf8x4, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg4.mask.riscv_mf8x4.nxv1i1(riscv_mf8x4, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg4_nxv1i8_riscv_mf8x4(riscv_mf8x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1i8_riscv_mf8x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf8x4(riscv_mf8x4 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg4_mask_nxv1i8_riscv_mf8x4(riscv_mf8x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1i8_riscv_mf8x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf8x4.nxv1i1(riscv_mf8x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg4.riscv_mf4x4(riscv_mf4x4, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg4.mask.riscv_mf4x4.nxv2i1(riscv_mf4x4, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg4_nxv2i8_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2i8_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg4_mask_nxv2i8_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2i8_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf4x4.nxv2i1(riscv_mf4x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg4.riscv_mf2x4(riscv_mf2x4, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv4i1(riscv_mf2x4, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg4_nxv4i8_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv4i8_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg4_mask_nxv4i8_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv4i8_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv4i1(riscv_mf2x4 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv8i1(riscv_m1x4, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg4_nxv8i8_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv8i8_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg4_mask_nxv8i8_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv8i8_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv8i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv16i1(riscv_m2x4, ptr, i64, <vscale x 16 x i1>, i64, i64)

define void @test_vssseg4_nxv16i8_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv16i8_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg4_mask_nxv16i8_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv16i8_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vssseg4e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv16i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg5.riscv_mf8x5(riscv_mf8x5, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg5.mask.riscv_mf8x5.nxv1i1(riscv_mf8x5, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg5_nxv1i8_riscv_mf8x5(riscv_mf8x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1i8_riscv_mf8x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf8x5(riscv_mf8x5 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg5_mask_nxv1i8_riscv_mf8x5(riscv_mf8x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1i8_riscv_mf8x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf8x5.nxv1i1(riscv_mf8x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg5.riscv_mf4x5(riscv_mf4x5, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg5.mask.riscv_mf4x5.nxv2i1(riscv_mf4x5, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg5_nxv2i8_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv2i8_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg5_mask_nxv2i8_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv2i8_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf4x5.nxv2i1(riscv_mf4x5 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg5.riscv_mf2x5(riscv_mf2x5, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv4i1(riscv_mf2x5, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg5_nxv4i8_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv4i8_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg5_mask_nxv4i8_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv4i8_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv4i1(riscv_mf2x5 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv8i1(riscv_m1x5, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg5_nxv8i8_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv8i8_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg5_mask_nxv8i8_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv8i8_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg5e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv8i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg6.riscv_mf8x6(riscv_mf8x6, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg6.mask.riscv_mf8x6.nxv1i1(riscv_mf8x6, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg6_nxv1i8_riscv_mf8x6(riscv_mf8x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1i8_riscv_mf8x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf8x6(riscv_mf8x6 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg6_mask_nxv1i8_riscv_mf8x6(riscv_mf8x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1i8_riscv_mf8x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf8x6.nxv1i1(riscv_mf8x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg6.riscv_mf4x6(riscv_mf4x6, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg6.mask.riscv_mf4x6.nxv2i1(riscv_mf4x6, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg6_nxv2i8_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv2i8_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg6_mask_nxv2i8_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv2i8_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf4x6.nxv2i1(riscv_mf4x6 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg6.riscv_mf2x6(riscv_mf2x6, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv4i1(riscv_mf2x6, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg6_nxv4i8_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv4i8_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg6_mask_nxv4i8_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv4i8_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv4i1(riscv_mf2x6 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv8i1(riscv_m1x6, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg6_nxv8i8_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv8i8_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg6_mask_nxv8i8_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv8i8_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg6e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv8i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg7.riscv_mf8x7(riscv_mf8x7, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg7.mask.riscv_mf8x7.nxv1i1(riscv_mf8x7, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg7_nxv1i8_riscv_mf8x7(riscv_mf8x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1i8_riscv_mf8x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf8x7(riscv_mf8x7 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg7_mask_nxv1i8_riscv_mf8x7(riscv_mf8x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1i8_riscv_mf8x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf8x7.nxv1i1(riscv_mf8x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg7.riscv_mf4x7(riscv_mf4x7, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg7.mask.riscv_mf4x7.nxv2i1(riscv_mf4x7, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg7_nxv2i8_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv2i8_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg7_mask_nxv2i8_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv2i8_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf4x7.nxv2i1(riscv_mf4x7 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg7.riscv_mf2x7(riscv_mf2x7, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv4i1(riscv_mf2x7, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg7_nxv4i8_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv4i8_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg7_mask_nxv4i8_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv4i8_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv4i1(riscv_mf2x7 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv8i1(riscv_m1x7, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg7_nxv8i8_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv8i8_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg7_mask_nxv8i8_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv8i8_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg7e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv8i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg8.riscv_mf8x8(riscv_mf8x8, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg8.mask.riscv_mf8x8.nxv1i1(riscv_mf8x8, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg8_nxv1i8_riscv_mf8x8(riscv_mf8x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1i8_riscv_mf8x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf8x8(riscv_mf8x8 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg8_mask_nxv1i8_riscv_mf8x8(riscv_mf8x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1i8_riscv_mf8x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf8x8.nxv1i1(riscv_mf8x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg8.riscv_mf4x8(riscv_mf4x8, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg8.mask.riscv_mf4x8.nxv2i1(riscv_mf4x8, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg8_nxv2i8_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv2i8_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg8_mask_nxv2i8_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv2i8_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf4x8.nxv2i1(riscv_mf4x8 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg8.riscv_mf2x8(riscv_mf2x8, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv4i1(riscv_mf2x8, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg8_nxv4i8_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv4i8_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg8_mask_nxv4i8_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv4i8_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv4i1(riscv_mf2x8 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8, ptr, i64, i64, i64)
declare void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv8i1(riscv_m1x8, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg8_nxv8i8_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv8i8_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 3)
  ret void
}

define void @test_vssseg8_mask_nxv8i8_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv8i8_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vssseg8e8.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv8i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 3)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg2_nxv1i16_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1i16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv1i16_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1i16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg2_nxv2i16_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2i16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv2i16_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2i16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg2_nxv4i16_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4i16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv4i16_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4i16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg2_nxv8i16_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv8i16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv8i16_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv8i16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2, ptr, i64, <vscale x 16 x i1>, i64, i64)

define void @test_vssseg2_nxv16i16_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv16i16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv16i16_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv16i16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg3_nxv1i16_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1i16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv1i16_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1i16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg3_nxv2i16_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2i16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv2i16_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2i16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg3_nxv4i16_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv4i16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv4i16_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv4i16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg3_nxv8i16_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv8i16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv8i16_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv8i16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg4_nxv1i16_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1i16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv1i16_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1i16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg4_nxv2i16_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2i16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv2i16_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2i16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg4_nxv4i16_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv4i16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv4i16_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv4i16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg4_nxv8i16_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv8i16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv8i16_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv8i16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg5_nxv1i16_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1i16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv1i16_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1i16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg5_nxv2i16_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv2i16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv2i16_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv2i16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg5_nxv4i16_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv4i16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv4i16_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv4i16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg6_nxv1i16_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1i16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv1i16_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1i16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg6_nxv2i16_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv2i16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv2i16_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv2i16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg6_nxv4i16_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv4i16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv4i16_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv4i16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg7_nxv1i16_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1i16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv1i16_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1i16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg7_nxv2i16_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv2i16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv2i16_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv2i16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg7_nxv4i16_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv4i16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv4i16_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv4i16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg8_nxv1i16_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1i16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv1i16_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1i16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg8_nxv2i16_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv2i16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv2i16_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv2i16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg8_nxv4i16_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv4i16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv4i16_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv4i16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv1i1(riscv_mf2x2, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg2_nxv1i32_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1i32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv1i32_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1i32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv1i1(riscv_mf2x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv2i1(riscv_m1x2, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg2_nxv2i32_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2i32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv2i32_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2i32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv2i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv4i1(riscv_m2x2, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg2_nxv4i32_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4i32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv4i32_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4i32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv4i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv8i1(riscv_m4x2, ptr, i64, <vscale x 8 x i1>, i64, i64)

define void @test_vssseg2_nxv8i32_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv8i32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv8i32_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv8i32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv8i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv1i1(riscv_mf2x3, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg3_nxv1i32_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1i32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg3_mask_nxv1i32_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1i32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv1i1(riscv_mf2x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv2i1(riscv_m1x3, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg3_nxv2i32_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2i32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg3_mask_nxv2i32_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2i32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv2i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv4i1(riscv_m2x3, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg3_nxv4i32_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv4i32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg3_mask_nxv4i32_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv4i32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv4i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv1i1(riscv_mf2x4, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg4_nxv1i32_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1i32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg4_mask_nxv1i32_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1i32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv1i1(riscv_mf2x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv2i1(riscv_m1x4, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg4_nxv2i32_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2i32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg4_mask_nxv2i32_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2i32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv2i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv4i1(riscv_m2x4, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg4_nxv4i32_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv4i32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg4_mask_nxv4i32_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv4i32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv4i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv1i1(riscv_mf2x5, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg5_nxv1i32_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1i32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg5_mask_nxv1i32_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1i32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv1i1(riscv_mf2x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv2i1(riscv_m1x5, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg5_nxv2i32_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv2i32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg5_mask_nxv2i32_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv2i32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv2i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv1i1(riscv_mf2x6, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg6_nxv1i32_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1i32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg6_mask_nxv1i32_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1i32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv1i1(riscv_mf2x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv2i1(riscv_m1x6, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg6_nxv2i32_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv2i32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg6_mask_nxv2i32_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv2i32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv2i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv1i1(riscv_mf2x7, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg7_nxv1i32_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1i32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg7_mask_nxv1i32_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1i32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv1i1(riscv_mf2x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv2i1(riscv_m1x7, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg7_nxv2i32_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv2i32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg7_mask_nxv2i32_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv2i32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv2i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv1i1(riscv_mf2x8, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg8_nxv1i32_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1i32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg8_mask_nxv1i32_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1i32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv1i1(riscv_mf2x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv2i1(riscv_m1x8, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg8_nxv2i32_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv2i32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg8_mask_nxv2i32_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv2i32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv2i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv1i1(riscv_m1x2, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg2_nxv1i64_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1i64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg2_mask_nxv1i64_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1i64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv1i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv2i1(riscv_m2x2, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg2_nxv2i64_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2i64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg2_mask_nxv2i64_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2i64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv2i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv4i1(riscv_m4x2, ptr, i64, <vscale x 4 x i1>, i64, i64)

define void @test_vssseg2_nxv4i64_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4i64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg2_mask_nxv4i64_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4i64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv4i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv1i1(riscv_m1x3, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg3_nxv1i64_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1i64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg3_mask_nxv1i64_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1i64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv1i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv2i1(riscv_m2x3, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg3_nxv2i64_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2i64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg3_mask_nxv2i64_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2i64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv2i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv1i1(riscv_m1x4, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg4_nxv1i64_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1i64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg4_mask_nxv1i64_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1i64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv1i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv2i1(riscv_m2x4, ptr, i64, <vscale x 2 x i1>, i64, i64)

define void @test_vssseg4_nxv2i64_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2i64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg4_mask_nxv2i64_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2i64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv2i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv1i1(riscv_m1x5, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg5_nxv1i64_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1i64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg5e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg5_mask_nxv1i64_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1i64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg5e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv1i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv1i1(riscv_m1x6, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg6_nxv1i64_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1i64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg6e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg6_mask_nxv1i64_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1i64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg6e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv1i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv1i1(riscv_m1x7, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg7_nxv1i64_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1i64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg7e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg7_mask_nxv1i64_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1i64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg7e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv1i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}

declare void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv1i1(riscv_m1x8, ptr, i64, <vscale x 1 x i1>, i64, i64)

define void @test_vssseg8_nxv1i64_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1i64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg8e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg8_mask_nxv1i64_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1i64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg8e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv1i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg2_nxv1f16_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1f16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv1f16_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1f16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv2f16_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2f16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv2f16_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2f16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv4f16_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4f16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv4f16_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4f16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv8f16_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv8f16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv8f16_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv8f16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv16f16_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv16f16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv16f16_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv16f16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv1f16_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1f16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv1f16_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1f16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv2f16_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2f16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv2f16_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2f16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv4f16_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv4f16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv4f16_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv4f16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv8f16_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv8f16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv8f16_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv8f16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv1f16_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1f16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv1f16_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1f16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv2f16_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2f16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv2f16_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2f16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv4f16_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv4f16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv4f16_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv4f16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv8f16_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv8f16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv8f16_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv8f16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg5_nxv1f16_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1f16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv1f16_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1f16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg5_nxv2f16_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv2f16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv2f16_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv2f16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg5_nxv4f16_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv4f16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv4f16_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv4f16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg6_nxv1f16_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1f16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv1f16_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1f16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg6_nxv2f16_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv2f16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv2f16_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv2f16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg6_nxv4f16_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv4f16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv4f16_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv4f16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg7_nxv1f16_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1f16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv1f16_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1f16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg7_nxv2f16_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv2f16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv2f16_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv2f16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg7_nxv4f16_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv4f16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv4f16_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv4f16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg8_nxv1f16_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1f16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv1f16_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1f16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg8_nxv2f16_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv2f16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv2f16_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv2f16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg8_nxv4f16_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv4f16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv4f16_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv4f16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv1f32_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1f32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv1f32_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1f32_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv1i1(riscv_mf2x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg2_nxv2f32_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2f32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv2f32_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2f32_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv2i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg2_nxv4f32_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4f32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv4f32_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4f32_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv4i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg2_nxv8f32_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv8f32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg2_mask_nxv8f32_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv8f32_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vssseg2e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv8i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg3_nxv1f32_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1f32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg3_mask_nxv1f32_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1f32_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv1i1(riscv_mf2x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg3_nxv2f32_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2f32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg3_mask_nxv2f32_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2f32_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv2i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg3_nxv4f32_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv4f32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg3_mask_nxv4f32_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv4f32_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg3e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv4i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg4_nxv1f32_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1f32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg4_mask_nxv1f32_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1f32_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv1i1(riscv_mf2x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg4_nxv2f32_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2f32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg4_mask_nxv2f32_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2f32_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv2i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg4_nxv4f32_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv4f32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg4_mask_nxv4f32_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv4f32_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vssseg4e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv4i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg5_nxv1f32_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1f32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg5_mask_nxv1f32_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1f32_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv1i1(riscv_mf2x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg5_nxv2f32_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv2f32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg5_mask_nxv2f32_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv2f32_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg5e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv2i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg6_nxv1f32_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1f32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg6_mask_nxv1f32_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1f32_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv1i1(riscv_mf2x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg6_nxv2f32_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv2f32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg6_mask_nxv2f32_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv2f32_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg6e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv2i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg7_nxv1f32_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1f32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg7_mask_nxv1f32_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1f32_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv1i1(riscv_mf2x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg7_nxv2f32_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv2f32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg7_mask_nxv2f32_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv2f32_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg7e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv2i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg8_nxv1f32_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1f32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg8_mask_nxv1f32_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1f32_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv1i1(riscv_mf2x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg8_nxv2f32_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv2f32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 5)
  ret void
}

define void @test_vssseg8_mask_nxv2f32_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv2f32_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vssseg8e32.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv2i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 5)
  ret void
}


define void @test_vssseg2_nxv1f64_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1f64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg2_mask_nxv1f64_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1f64_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv1i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg2_nxv2f64_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2f64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg2_mask_nxv2f64_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2f64_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv2i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg2_nxv4f64_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4f64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg2_mask_nxv4f64_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4f64_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vssseg2e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv4i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg3_nxv1f64_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1f64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg3_mask_nxv1f64_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1f64_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv1i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg3_nxv2f64_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2f64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg3_mask_nxv2f64_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2f64_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg3e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv2i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg4_nxv1f64_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1f64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg4_mask_nxv1f64_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1f64_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv1i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg4_nxv2f64_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2f64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg4_mask_nxv2f64_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2f64_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vssseg4e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv2i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg5_nxv1f64_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1f64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg5e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg5_mask_nxv1f64_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1f64_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg5e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv1i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg6_nxv1f64_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1f64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg6e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg6_mask_nxv1f64_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1f64_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg6e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv1i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg7_nxv1f64_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1f64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg7e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg7_mask_nxv1f64_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1f64_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg7e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv1i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg8_nxv1f64_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1f64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg8e64.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 6)
  ret void
}

define void @test_vssseg8_mask_nxv1f64_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1f64_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vssseg8e64.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv1i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 6)
  ret void
}


define void @test_vssseg2_nxv1bf16_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv1bf16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv1bf16_riscv_mf4x2(riscv_mf4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv1bf16_riscv_mf4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf4x2.nxv1i1(riscv_mf4x2 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv2bf16_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv2bf16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv2bf16_riscv_mf2x2(riscv_mf2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv2bf16_riscv_mf2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_mf2x2.nxv2i1(riscv_mf2x2 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv4bf16_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv4bf16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv4bf16_riscv_m1x2(riscv_m1x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv4bf16_riscv_m1x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m1x2.nxv4i1(riscv_m1x2 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv8bf16_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv8bf16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv8bf16_riscv_m2x2(riscv_m2x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv8bf16_riscv_m2x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m2x2.nxv8i1(riscv_m2x2 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg2_nxv16bf16_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg2_nxv16bf16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg2_mask_nxv16bf16_riscv_m4x2(riscv_m4x2 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vssseg2_mask_nxv16bf16_riscv_m4x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vssseg2e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg2.mask.riscv_m4x2.nxv16i1(riscv_m4x2 %val, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv1bf16_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv1bf16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv1bf16_riscv_mf4x3(riscv_mf4x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv1bf16_riscv_mf4x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf4x3.nxv1i1(riscv_mf4x3 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv2bf16_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv2bf16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv2bf16_riscv_mf2x3(riscv_mf2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv2bf16_riscv_mf2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_mf2x3.nxv2i1(riscv_mf2x3 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv4bf16_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv4bf16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv4bf16_riscv_m1x3(riscv_m1x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv4bf16_riscv_m1x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m1x3.nxv4i1(riscv_m1x3 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg3_nxv8bf16_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg3_nxv8bf16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg3_mask_nxv8bf16_riscv_m2x3(riscv_m2x3 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg3_mask_nxv8bf16_riscv_m2x3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg3e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg3.mask.riscv_m2x3.nxv8i1(riscv_m2x3 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv1bf16_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv1bf16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv1bf16_riscv_mf4x4(riscv_mf4x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv1bf16_riscv_mf4x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf4x4.nxv1i1(riscv_mf4x4 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv2bf16_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv2bf16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv2bf16_riscv_mf2x4(riscv_mf2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv2bf16_riscv_mf2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_mf2x4.nxv2i1(riscv_mf2x4 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv4bf16_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv4bf16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv4bf16_riscv_m1x4(riscv_m1x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv4bf16_riscv_m1x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m1x4.nxv4i1(riscv_m1x4 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg4_nxv8bf16_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg4_nxv8bf16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg4_mask_nxv8bf16_riscv_m2x4(riscv_m2x4 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vssseg4_mask_nxv8bf16_riscv_m2x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vssseg4e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg4.mask.riscv_m2x4.nxv8i1(riscv_m2x4 %val, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg5_nxv1bf16_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv1bf16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv1bf16_riscv_mf4x5(riscv_mf4x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv1bf16_riscv_mf4x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf4x5.nxv1i1(riscv_mf4x5 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg5_nxv2bf16_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv2bf16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv2bf16_riscv_mf2x5(riscv_mf2x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv2bf16_riscv_mf2x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_mf2x5.nxv2i1(riscv_mf2x5 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg5_nxv4bf16_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg5_nxv4bf16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg5_mask_nxv4bf16_riscv_m1x5(riscv_m1x5 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg5_mask_nxv4bf16_riscv_m1x5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg5e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg5.mask.riscv_m1x5.nxv4i1(riscv_m1x5 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg6_nxv1bf16_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv1bf16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv1bf16_riscv_mf4x6(riscv_mf4x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv1bf16_riscv_mf4x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf4x6.nxv1i1(riscv_mf4x6 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg6_nxv2bf16_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv2bf16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv2bf16_riscv_mf2x6(riscv_mf2x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv2bf16_riscv_mf2x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_mf2x6.nxv2i1(riscv_mf2x6 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg6_nxv4bf16_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg6_nxv4bf16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg6_mask_nxv4bf16_riscv_m1x6(riscv_m1x6 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg6_mask_nxv4bf16_riscv_m1x6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg6e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg6.mask.riscv_m1x6.nxv4i1(riscv_m1x6 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg7_nxv1bf16_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv1bf16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv1bf16_riscv_mf4x7(riscv_mf4x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv1bf16_riscv_mf4x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf4x7.nxv1i1(riscv_mf4x7 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg7_nxv2bf16_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv2bf16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv2bf16_riscv_mf2x7(riscv_mf2x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv2bf16_riscv_mf2x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_mf2x7.nxv2i1(riscv_mf2x7 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg7_nxv4bf16_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg7_nxv4bf16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg7_mask_nxv4bf16_riscv_m1x7(riscv_m1x7 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg7_mask_nxv4bf16_riscv_m1x7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg7e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg7.mask.riscv_m1x7.nxv4i1(riscv_m1x7 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg8_nxv1bf16_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv1bf16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv1bf16_riscv_mf4x8(riscv_mf4x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv1bf16_riscv_mf4x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf4x8.nxv1i1(riscv_mf4x8 %val, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg8_nxv2bf16_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv2bf16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv2bf16_riscv_mf2x8(riscv_mf2x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv2bf16_riscv_mf2x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_mf2x8.nxv2i1(riscv_mf2x8 %val, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 4)
  ret void
}


define void @test_vssseg8_nxv4bf16_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vssseg8_nxv4bf16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, i64 4)
  ret void
}

define void @test_vssseg8_mask_nxv4bf16_riscv_m1x8(riscv_m1x8 %val, ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vssseg8_mask_nxv4bf16_riscv_m1x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vssseg8e16.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.riscv.vssseg8.mask.riscv_m1x8.nxv4i1(riscv_m1x8 %val, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 4)
  ret void
}

