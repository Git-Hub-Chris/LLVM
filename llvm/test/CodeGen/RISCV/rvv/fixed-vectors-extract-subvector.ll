; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+v -riscv-v-vector-bits-min=128 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,UNKNOWNVLEN
; RUN: llc -mtriple=riscv64 -mattr=+m,+v -riscv-v-vector-bits-min=128 -riscv-v-vector-bits-max=128 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,KNOWNVLEN

define void @extract_v2i8_v4i8_0(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_v4i8_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 4, e8, mf4, ta, ma
; CHECK-NEXT:    vle8.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <4 x i8>, ptr %x
  %c = call <2 x i8> @llvm.vector.extract.v2i8.v4i8(<4 x i8> %a, i64 0)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v2i8_v4i8_2(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_v4i8_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 4, e8, mf4, ta, ma
; CHECK-NEXT:    vle8.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 2, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 2
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <4 x i8>, ptr %x
  %c = call <2 x i8> @llvm.vector.extract.v2i8.v4i8(<4 x i8> %a, i64 2)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v2i8_v8i8_0(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_v8i8_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vle8.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <8 x i8>, ptr %x
  %c = call <2 x i8> @llvm.vector.extract.v2i8.v8i8(<8 x i8> %a, i64 0)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v2i8_v8i8_6(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_v8i8_6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vle8.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 2, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 6
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <8 x i8>, ptr %x
  %c = call <2 x i8> @llvm.vector.extract.v2i8.v8i8(<8 x i8> %a, i64 6)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v1i32_v8i32_4(ptr %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v1i32_v8i32_4:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vle32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    vsetivli zero, 1, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 4
; UNKNOWNVLEN-NEXT:    vsetivli zero, 1, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a1)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v1i32_v8i32_4:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; KNOWNVLEN-NEXT:    vle32.v v8, (a0)
; KNOWNVLEN-NEXT:    vsetivli zero, 1, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v9, (a1)
; KNOWNVLEN-NEXT:    ret
  %a = load <8 x i32>, ptr %x
  %c = call <1 x i32> @llvm.vector.extract.v1i32.v8i32(<8 x i32> %a, i64 4)
  store <1 x i32> %c, ptr %y
  ret void
}

define void @extract_v1i32_v8i32_5(ptr %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v1i32_v8i32_5:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vle32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    vsetivli zero, 1, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 5
; UNKNOWNVLEN-NEXT:    vsetivli zero, 1, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a1)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v1i32_v8i32_5:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; KNOWNVLEN-NEXT:    vle32.v v8, (a0)
; KNOWNVLEN-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v9, 1
; KNOWNVLEN-NEXT:    vsetivli zero, 1, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v8, (a1)
; KNOWNVLEN-NEXT:    ret
  %a = load <8 x i32>, ptr %x
  %c = call <1 x i32> @llvm.vector.extract.v1i32.v8i32(<8 x i32> %a, i64 5)
  store <1 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_v8i32_0(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v2i32_v8i32_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; CHECK-NEXT:    vle32.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; CHECK-NEXT:    vse32.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <8 x i32>, ptr %x
  %c = call <2 x i32> @llvm.vector.extract.v2i32.v8i32(<8 x i32> %a, i64 0)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_v8i32_2(ptr %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i32_v8i32_2:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vle32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a1)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i32_v8i32_2:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; KNOWNVLEN-NEXT:    vle32.v v8, (a0)
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v8, (a1)
; KNOWNVLEN-NEXT:    ret
  %a = load <8 x i32>, ptr %x
  %c = call <2 x i32> @llvm.vector.extract.v2i32.v8i32(<8 x i32> %a, i64 2)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_v8i32_4(ptr %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i32_v8i32_4:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vle32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 4
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a1)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i32_v8i32_4:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; KNOWNVLEN-NEXT:    vle32.v v8, (a0)
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v9, (a1)
; KNOWNVLEN-NEXT:    ret
  %a = load <8 x i32>, ptr %x
  %c = call <2 x i32> @llvm.vector.extract.v2i32.v8i32(<8 x i32> %a, i64 4)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_v8i32_6(ptr %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i32_v8i32_6:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vle32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 6
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a1)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i32_v8i32_6:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; KNOWNVLEN-NEXT:    vle32.v v8, (a0)
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v9, 2
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v8, (a1)
; KNOWNVLEN-NEXT:    ret
  %a = load <8 x i32>, ptr %x
  %c = call <2 x i32> @llvm.vector.extract.v2i32.v8i32(<8 x i32> %a, i64 6)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_nxv16i32_0(<vscale x 16 x i32> %x, ptr %y) {
; CHECK-LABEL: extract_v2i32_nxv16i32_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i32> @llvm.vector.extract.v2i32.nxv16i32(<vscale x 16 x i32> %x, i64 0)
  store <2 x i32> %c, ptr %y
  ret void
}


define void @extract_v2i32_nxv16i32_2(<vscale x 16 x i32> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i32_nxv16i32_2:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i32_nxv16i32_2:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v8, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <2 x i32> @llvm.vector.extract.v2i32.nxv16i32(<vscale x 16 x i32> %x, i64 2)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_nxv16i32_4(<vscale x 16 x i32> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i32_nxv16i32_4:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 4
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i32_nxv16i32_4:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v9, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <2 x i32> @llvm.vector.extract.v2i32.nxv16i32(<vscale x 16 x i32> %x, i64 4)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_nxv16i32_6(<vscale x 16 x i32> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i32_nxv16i32_6:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 6
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i32_nxv16i32_6:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v9, 2
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v8, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <2 x i32> @llvm.vector.extract.v2i32.nxv16i32(<vscale x 16 x i32> %x, i64 6)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i32_nxv16i32_8(<vscale x 16 x i32> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i32_nxv16i32_8:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 8
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i32_nxv16i32_8:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v10, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <2 x i32> @llvm.vector.extract.v2i32.nxv16i32(<vscale x 16 x i32> %x, i64 8)
  store <2 x i32> %c, ptr %y
  ret void
}

define void @extract_v2i8_nxv2i8_0(<vscale x 2 x i8> %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_nxv2i8_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i8> @llvm.vector.extract.v2i8.nxv2i8(<vscale x 2 x i8> %x, i64 0)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v2i8_nxv2i8_2(<vscale x 2 x i8> %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_nxv2i8_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 2
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i8> @llvm.vector.extract.v2i8.nxv2i8(<vscale x 2 x i8> %x, i64 2)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v2i8_nxv2i8_4(<vscale x 2 x i8> %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_nxv2i8_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 4
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i8> @llvm.vector.extract.v2i8.nxv2i8(<vscale x 2 x i8> %x, i64 4)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v2i8_nxv2i8_6(<vscale x 2 x i8> %x, ptr %y) {
; CHECK-LABEL: extract_v2i8_nxv2i8_6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 6
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i8> @llvm.vector.extract.v2i8.nxv2i8(<vscale x 2 x i8> %x, i64 6)
  store <2 x i8> %c, ptr %y
  ret void
}

define void @extract_v8i32_nxv16i32_8(<vscale x 16 x i32> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v8i32_nxv16i32_8:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 8
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; UNKNOWNVLEN-NEXT:    vse32.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v8i32_nxv16i32_8:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; KNOWNVLEN-NEXT:    vse32.v v10, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <8 x i32> @llvm.vector.extract.v8i32.nxv16i32(<vscale x 16 x i32> %x, i64 8)
  store <8 x i32> %c, ptr %y
  ret void
}

define void @extract_v8i1_v64i1_0(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_v64i1_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 64
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vlm.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <64 x i1>, ptr %x
  %c = call <8 x i1> @llvm.vector.extract.v8i1.v64i1(<64 x i1> %a, i64 0)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_v64i1_8(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_v64i1_8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 64
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vlm.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 1
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <64 x i1>, ptr %x
  %c = call <8 x i1> @llvm.vector.extract.v8i1.v64i1(<64 x i1> %a, i64 8)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_v64i1_48(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_v64i1_48:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 64
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vlm.v v8, (a0)
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 6
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <64 x i1>, ptr %x
  %c = call <8 x i1> @llvm.vector.extract.v8i1.v64i1(<64 x i1> %a, i64 48)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_nxv2i1_0(<vscale x 2 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_nxv2i1_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  %c = call <8 x i1> @llvm.vector.extract.v8i1.nxv2i1(<vscale x 2 x i1> %x, i64 0)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_nxv64i1_0(<vscale x 64 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_nxv64i1_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  %c = call <8 x i1> @llvm.vector.extract.v8i1.nxv64i1(<vscale x 64 x i1> %x, i64 0)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_nxv64i1_8(<vscale x 64 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_nxv64i1_8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v0, 1
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <8 x i1> @llvm.vector.extract.v8i1.nxv64i1(<vscale x 64 x i1> %x, i64 8)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_nxv64i1_48(<vscale x 64 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_nxv64i1_48:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v0, 6
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <8 x i1> @llvm.vector.extract.v8i1.nxv64i1(<vscale x 64 x i1> %x, i64 48)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_nxv64i1_128(<vscale x 64 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_nxv64i1_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v0, 16
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <8 x i1> @llvm.vector.extract.v8i1.nxv64i1(<vscale x 64 x i1> %x, i64 128)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_nxv64i1_192(<vscale x 64 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_nxv64i1_192:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v0, 24
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <8 x i1> @llvm.vector.extract.v8i1.nxv64i1(<vscale x 64 x i1> %x, i64 192)
  store <8 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_v64i1_0(ptr %x, ptr %y) {
; CHECK-LABEL: extract_v2i1_v64i1_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 64
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vlm.v v0, (a0)
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, 1, v0
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmv.v.i v9, 0
; CHECK-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; CHECK-NEXT:    vmv.v.v v9, v8
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmsne.vi v8, v9, 0
; CHECK-NEXT:    vsm.v v8, (a1)
; CHECK-NEXT:    ret
  %a = load <64 x i1>, ptr %x
  %c = call <2 x i1> @llvm.vector.extract.v2i1.v64i1(<64 x i1> %a, i64 0)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_v64i1_2(ptr %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i1_v64i1_2:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    li a2, 64
; UNKNOWNVLEN-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; UNKNOWNVLEN-NEXT:    vlm.v v0, (a0)
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m4, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v9, 0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; UNKNOWNVLEN-NEXT:    vmv.v.v v9, v8
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; UNKNOWNVLEN-NEXT:    vsm.v v8, (a1)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i1_v64i1_2:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    li a2, 64
; KNOWNVLEN-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; KNOWNVLEN-NEXT:    vlm.v v0, (a0)
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v9, 0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; KNOWNVLEN-NEXT:    vmv.v.v v9, v8
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; KNOWNVLEN-NEXT:    vsm.v v8, (a1)
; KNOWNVLEN-NEXT:    ret
  %a = load <64 x i1>, ptr %x
  %c = call <2 x i1> @llvm.vector.extract.v2i1.v64i1(<64 x i1> %a, i64 2)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_v64i1_42(ptr %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i1_v64i1_42:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    li a2, 64
; UNKNOWNVLEN-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; UNKNOWNVLEN-NEXT:    vlm.v v0, (a0)
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    li a0, 42
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m4, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vx v8, v8, a0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v9, 0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; UNKNOWNVLEN-NEXT:    vmv.v.v v9, v8
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; UNKNOWNVLEN-NEXT:    vsm.v v8, (a1)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i1_v64i1_42:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    li a2, 64
; KNOWNVLEN-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; KNOWNVLEN-NEXT:    vlm.v v0, (a0)
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v10, 10
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v9, 0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; KNOWNVLEN-NEXT:    vmv.v.v v9, v8
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; KNOWNVLEN-NEXT:    vsm.v v8, (a1)
; KNOWNVLEN-NEXT:    ret
  %a = load <64 x i1>, ptr %x
  %c = call <2 x i1> @llvm.vector.extract.v2i1.v64i1(<64 x i1> %a, i64 42)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_nxv2i1_0(<vscale x 2 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v2i1_nxv2i1_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, 1, v0
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmv.v.i v9, 0
; CHECK-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; CHECK-NEXT:    vmv.v.v v9, v8
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmsne.vi v8, v9, 0
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i1> @llvm.vector.extract.v2i1.nxv2i1(<vscale x 2 x i1> %x, i64 0)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_nxv2i1_2(<vscale x 2 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v2i1_nxv2i1_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e8, mf4, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, 1, v0
; CHECK-NEXT:    vsetivli zero, 2, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 2
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vmsne.vi v0, v8, 0
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, 1, v0
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmv.v.i v9, 0
; CHECK-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; CHECK-NEXT:    vmv.v.v v9, v8
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmsne.vi v8, v9, 0
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i1> @llvm.vector.extract.v2i1.nxv2i1(<vscale x 2 x i1> %x, i64 2)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_nxv64i1_0(<vscale x 64 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v2i1_nxv64i1_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, 1, v0
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmv.v.i v9, 0
; CHECK-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; CHECK-NEXT:    vmv.v.v v9, v8
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmsne.vi v8, v9, 0
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <2 x i1> @llvm.vector.extract.v2i1.nxv64i1(<vscale x 64 x i1> %x, i64 0)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_nxv64i1_2(<vscale x 64 x i1> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i1_nxv64i1_2:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetvli a1, zero, e8, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v9, 0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; UNKNOWNVLEN-NEXT:    vmv.v.v v9, v8
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; UNKNOWNVLEN-NEXT:    vsm.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i1_nxv64i1_2:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetvli a1, zero, e8, m8, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 2
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v9, 0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; KNOWNVLEN-NEXT:    vmv.v.v v9, v8
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; KNOWNVLEN-NEXT:    vsm.v v8, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <2 x i1> @llvm.vector.extract.v2i1.nxv64i1(<vscale x 64 x i1> %x, i64 2)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_nxv64i1_42(<vscale x 64 x i1> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i1_nxv64i1_42:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetvli a1, zero, e8, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    li a1, 42
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m8, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vx v8, v8, a1
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v9, 0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; UNKNOWNVLEN-NEXT:    vmv.v.v v9, v8
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; UNKNOWNVLEN-NEXT:    vsm.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i1_nxv64i1_42:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetvli a1, zero, e8, m8, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v10, 10
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v9, 0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; KNOWNVLEN-NEXT:    vmv.v.v v9, v8
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; KNOWNVLEN-NEXT:    vsm.v v8, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <2 x i1> @llvm.vector.extract.v2i1.nxv64i1(<vscale x 64 x i1> %x, i64 42)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v2i1_nxv32i1_26(<vscale x 32 x i1> %x, ptr %y) {
; UNKNOWNVLEN-LABEL: extract_v2i1_nxv32i1_26:
; UNKNOWNVLEN:       # %bb.0:
; UNKNOWNVLEN-NEXT:    vsetvli a1, zero, e8, m4, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m4, ta, ma
; UNKNOWNVLEN-NEXT:    vslidedown.vi v8, v8, 26
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; UNKNOWNVLEN-NEXT:    vmv.v.i v8, 0
; UNKNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmv.v.i v9, 0
; UNKNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; UNKNOWNVLEN-NEXT:    vmv.v.v v9, v8
; UNKNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; UNKNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; UNKNOWNVLEN-NEXT:    vsm.v v8, (a0)
; UNKNOWNVLEN-NEXT:    ret
;
; KNOWNVLEN-LABEL: extract_v2i1_nxv32i1_26:
; KNOWNVLEN:       # %bb.0:
; KNOWNVLEN-NEXT:    vsetvli a1, zero, e8, m4, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, m1, ta, ma
; KNOWNVLEN-NEXT:    vslidedown.vi v8, v9, 10
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v0, v8, 0
; KNOWNVLEN-NEXT:    vmv.v.i v8, 0
; KNOWNVLEN-NEXT:    vmerge.vim v8, v8, 1, v0
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmv.v.i v9, 0
; KNOWNVLEN-NEXT:    vsetivli zero, 2, e8, mf2, tu, ma
; KNOWNVLEN-NEXT:    vmv.v.v v9, v8
; KNOWNVLEN-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; KNOWNVLEN-NEXT:    vmsne.vi v8, v9, 0
; KNOWNVLEN-NEXT:    vsm.v v8, (a0)
; KNOWNVLEN-NEXT:    ret
  %c = call <2 x i1> @llvm.vector.extract.v2i1.nxv32i1(<vscale x 32 x i1> %x, i64 26)
  store <2 x i1> %c, ptr %y
  ret void
}

define void @extract_v8i1_nxv32i1_16(<vscale x 32 x i1> %x, ptr %y) {
; CHECK-LABEL: extract_v8i1_nxv32i1_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v0, 2
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v8, (a0)
; CHECK-NEXT:    ret
  %c = call <8 x i1> @llvm.vector.extract.v8i1.nxv32i1(<vscale x 32 x i1> %x, i64 16)
  store <8 x i1> %c, ptr %y
  ret void
}

declare <2 x i1> @llvm.vector.extract.v2i1.v64i1(<64 x i1> %vec, i64 %idx)
declare <8 x i1> @llvm.vector.extract.v8i1.v64i1(<64 x i1> %vec, i64 %idx)

declare <2 x i1> @llvm.vector.extract.v2i1.nxv2i1(<vscale x 2 x i1> %vec, i64 %idx)
declare <8 x i1> @llvm.vector.extract.v8i1.nxv2i1(<vscale x 2 x i1> %vec, i64 %idx)

declare <2 x i1> @llvm.vector.extract.v2i1.nxv32i1(<vscale x 32 x i1> %vec, i64 %idx)
declare <8 x i1> @llvm.vector.extract.v8i1.nxv32i1(<vscale x 32 x i1> %vec, i64 %idx)

declare <2 x i1> @llvm.vector.extract.v2i1.nxv64i1(<vscale x 64 x i1> %vec, i64 %idx)
declare <8 x i1> @llvm.vector.extract.v8i1.nxv64i1(<vscale x 64 x i1> %vec, i64 %idx)

declare <2 x i8> @llvm.vector.extract.v2i8.v4i8(<4 x i8> %vec, i64 %idx)
declare <2 x i8> @llvm.vector.extract.v2i8.v8i8(<8 x i8> %vec, i64 %idx)

declare <1 x i32> @llvm.vector.extract.v1i32.v8i32(<8 x i32> %vec, i64 %idx)
declare <2 x i32> @llvm.vector.extract.v2i32.v8i32(<8 x i32> %vec, i64 %idx)

declare <2 x i8> @llvm.vector.extract.v2i8.nxv2i8(<vscale x 2 x i8> %vec, i64 %idx)

declare <2 x i32> @llvm.vector.extract.v2i32.nxv16i32(<vscale x 16 x i32> %vec, i64 %idx)
declare <8 x i32> @llvm.vector.extract.v8i32.nxv16i32(<vscale x 16 x i32> %vec, i64 %idx)
