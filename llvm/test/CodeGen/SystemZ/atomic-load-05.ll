; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; Test 128-bit atomic loads. Expect libcall without natural alignment.
;
; RUN: llc < %s -mtriple=s390x-linux-gnu | FileCheck %s
; RUN: llc < %s -mtriple=s390x-linux-gnu -mcpu=z13 | FileCheck %s --check-prefix=Z13

define i128 @f1(ptr %src) {
; CHECK-LABEL: f1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lpq %r0, 0(%r3)
; CHECK-NEXT:    stg %r1, 8(%r2)
; CHECK-NEXT:    stg %r0, 0(%r2)
; CHECK-NEXT:    br %r14
;
; Z13-LABEL: f1:
; Z13:       # %bb.0:
; Z13-NEXT:    lpq %r0, 0(%r3)
; Z13-NEXT:    stg %r1, 8(%r2)
; Z13-NEXT:    stg %r0, 0(%r2)
; Z13-NEXT:    br %r14
  %val = load atomic i128, ptr %src seq_cst, align 16
  ret i128 %val
}

define i128 @f2(ptr %src) {
; CHECK-LABEL: f2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stmg %r13, %r15, 104(%r15)
; CHECK-NEXT:    .cfi_offset %r13, -56
; CHECK-NEXT:    .cfi_offset %r14, -48
; CHECK-NEXT:    .cfi_offset %r15, -40
; CHECK-NEXT:    aghi %r15, -176
; CHECK-NEXT:    .cfi_def_cfa_offset 336
; CHECK-NEXT:    lgr %r13, %r2
; CHECK-NEXT:    la %r4, 160(%r15)
; CHECK-NEXT:    lghi %r2, 16
; CHECK-NEXT:    lhi %r5, 5
; CHECK-NEXT:    brasl %r14, __atomic_load@PLT
; CHECK-NEXT:    lg %r0, 168(%r15)
; CHECK-NEXT:    lg %r1, 160(%r15)
; CHECK-NEXT:    stg %r0, 8(%r13)
; CHECK-NEXT:    stg %r1, 0(%r13)
; CHECK-NEXT:    lmg %r13, %r15, 280(%r15)
; CHECK-NEXT:    br %r14
;
; Z13-LABEL: f2:
; Z13:       # %bb.0:
; Z13-NEXT:    stmg %r13, %r15, 104(%r15)
; Z13-NEXT:    .cfi_offset %r13, -56
; Z13-NEXT:    .cfi_offset %r14, -48
; Z13-NEXT:    .cfi_offset %r15, -40
; Z13-NEXT:    aghi %r15, -176
; Z13-NEXT:    .cfi_def_cfa_offset 336
; Z13-NEXT:    lgr %r13, %r2
; Z13-NEXT:    la %r4, 160(%r15)
; Z13-NEXT:    lghi %r2, 16
; Z13-NEXT:    lhi %r5, 5
; Z13-NEXT:    brasl %r14, __atomic_load@PLT
; Z13-NEXT:    vl %v0, 160(%r15), 3
; Z13-NEXT:    vst %v0, 0(%r13), 3
; Z13-NEXT:    lmg %r13, %r15, 280(%r15)
; Z13-NEXT:    br %r14
  %val = load atomic i128, ptr %src seq_cst, align 8
  ret i128 %val
}
