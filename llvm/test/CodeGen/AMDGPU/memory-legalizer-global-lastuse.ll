; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1200 < %s | FileCheck --check-prefixes=GFX12,GFX12-WGP %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1200 -mattr=+cumode < %s | FileCheck --check-prefixes=GFX12,GFX12-CU %s

define amdgpu_kernel void @global_last_use_load_0(ptr addrspace(1) %in, ptr addrspace(1) %out) {
  ; GFX12-LABEL: name: global_last_use_load_0
  ; GFX12: bb.0.entry:
  ; GFX12-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-NEXT: {{  $}}
  ; GFX12-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" "amdgpu-last-use" load (s32) from %ir.1, addrspace 1)
  ; GFX12-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx12 0, killed $sgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-NEXT:   S_ENDPGM 0
entry:
  %val = load i32, ptr addrspace(1) %in, align 4, !amdgpu.last.use !{}
  store i32 %val, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @global_last_use_load_1(ptr addrspace(1) %in, ptr addrspace(1) %out) {
  ; GFX12-LABEL: name: global_last_use_load_1
  ; GFX12: bb.0.entry:
  ; GFX12-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX12-NEXT: {{  $}}
  ; GFX12-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-NEXT:   renamable $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx12 0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 3, implicit $exec :: ("amdgpu-last-use" load (s32) from %ir.val.gep, addrspace 1)
  ; GFX12-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-NEXT:   S_ENDPGM 0
entry:
  %tid = call i32 @llvm.amdgcn.workitem.id.x()
  %val.gep = getelementptr inbounds i32, ptr addrspace(1) %in, i32 %tid
  %val = load i32, ptr addrspace(1) %val.gep, align 4, !amdgpu.last.use !{}
  store i32 %val, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @global_last_use_and_volatile_load(ptr addrspace(1) %in, ptr addrspace(1) %out) {
  ; GFX12-LABEL: name: global_last_use_and_volatile_load
  ; GFX12: bb.0.entry:
  ; GFX12-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-NEXT: {{  $}}
  ; GFX12-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX12-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 27, implicit $exec :: (volatile "amdgpu-noclobber" "amdgpu-last-use" load (s32) from %ir.1, addrspace 1)
  ; GFX12-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-NEXT:   S_ENDPGM 0
entry:
  %val = load volatile i32, ptr addrspace(1) %in, align 4, !amdgpu.last.use !{}
  store i32 %val, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @global_last_use_and_nontemporal_load(ptr addrspace(1) %in, ptr addrspace(1) %out) {
  ; GFX12-LABEL: name: global_last_use_and_nontemporal_load
  ; GFX12: bb.0.entry:
  ; GFX12-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX12-NEXT: {{  $}}
  ; GFX12-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-NEXT:   renamable $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx12 0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 3, implicit $exec :: (non-temporal "amdgpu-last-use" load (s32) from %ir.val.gep, addrspace 1)
  ; GFX12-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-NEXT:   S_ENDPGM 0
entry:
  %tid = call i32 @llvm.amdgcn.workitem.id.x()
  %val.gep = getelementptr inbounds i32, ptr addrspace(1) %in, i32 %tid
  %val = load i32, ptr addrspace(1) %val.gep, align 4, !amdgpu.last.use !{}, !nontemporal !0
  store i32 %val, ptr addrspace(1) %out
  ret void
}
!0 = !{i32 1}
declare i32 @llvm.amdgcn.workitem.id.x()
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GFX12-CU: {{.*}}
; GFX12-WGP: {{.*}}
