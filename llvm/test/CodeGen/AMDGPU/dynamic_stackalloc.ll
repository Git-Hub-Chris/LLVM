; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-- -mcpu=gfx900 -mattr=+promote-alloca -verify-machineinstrs < %s 2>&1 | FileCheck -check-prefix=DYN %s
; RUN: llc -mtriple=amdgcn-- -mcpu=gfx900 -mattr=-promote-alloca -verify-machineinstrs < %s 2>&1 | FileCheck -check-prefix=DYN %s
target datalayout = "A5"


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_uniform(i32 %n) {
; DYN-LABEL: test_dynamic_stackalloc_kernel_uniform:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_load_dword s0, s[4:5], 0x24
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    s_waitcnt lgkmcnt(0)
; DYN-NEXT:    s_lshl_b32 s0, s0, 2
; DYN-NEXT:    s_add_i32 s0, s0, 15
; DYN-NEXT:    s_movk_i32 s32, 0x400
; DYN-NEXT:    s_and_b32 s0, s0, -16
; DYN-NEXT:    s_mov_b32 s1, s32
; DYN-NEXT:    v_mov_b32_e32 v0, 0x7b
; DYN-NEXT:    s_lshl_b32 s0, s0, 6
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_add_i32 s32, s1, s0
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s1
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_endpgm
  %alloca = alloca i32, i32 %n, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_uniform_over_aligned(i32 %n) {
; DYN-LABEL: test_dynamic_stackalloc_kernel_uniform_over_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_load_dword s0, s[4:5], 0x24
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    s_movk_i32 s32, 0x2000
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    s_waitcnt lgkmcnt(0)
; DYN-NEXT:    s_lshl_b32 s0, s0, 2
; DYN-NEXT:    s_add_i32 s1, s32, 0x1fff
; DYN-NEXT:    s_add_i32 s0, s0, 15
; DYN-NEXT:    s_and_b32 s1, s1, 0xffffe000
; DYN-NEXT:    s_and_b32 s0, s0, -16
; DYN-NEXT:    v_mov_b32_e32 v0, 10
; DYN-NEXT:    s_lshl_b32 s0, s0, 6
; DYN-NEXT:    v_mov_b32_e32 v1, s1
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_add_i32 s32, s1, s0
; DYN-NEXT:    buffer_store_dword v0, v1, s[12:15], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_endpgm
  %alloca = alloca i32, i32 %n, align 128, addrspace(5)
  store volatile i32 10, ptr addrspace(5) %alloca
  ret void
}


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_uniform_under_aligned(i32 %n) {
; DYN-LABEL: test_dynamic_stackalloc_kernel_uniform_under_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_load_dword s0, s[4:5], 0x24
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    s_waitcnt lgkmcnt(0)
; DYN-NEXT:    s_lshl_b32 s0, s0, 2
; DYN-NEXT:    s_add_i32 s0, s0, 15
; DYN-NEXT:    s_movk_i32 s32, 0x400
; DYN-NEXT:    s_and_b32 s0, s0, -16
; DYN-NEXT:    s_mov_b32 s1, s32
; DYN-NEXT:    v_mov_b32_e32 v0, 22
; DYN-NEXT:    s_lshl_b32 s0, s0, 6
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_add_i32 s32, s1, s0
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s1
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_endpgm
  %alloca = alloca i32, i32 %n, align 2, addrspace(5)
  store volatile i32 22, ptr addrspace(5) %alloca
  ret void
}


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_divergent() {
; DYN-LABEL: test_dynamic_stackalloc_kernel_divergent:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[0:1], exec
; DYN-NEXT:    s_mov_b32 s2, 0
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_movk_i32 s32, 0x400
; DYN-NEXT:  .LBB3_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s3, s[0:1]
; DYN-NEXT:    v_readlane_b32 s4, v0, s3
; DYN-NEXT:    s_bitset0_b64 s[0:1], s3
; DYN-NEXT:    s_max_u32 s2, s2, s4
; DYN-NEXT:    s_cmp_lg_u64 s[0:1], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB3_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_mov_b32 s0, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s0
; DYN-NEXT:    v_lshl_add_u32 v0, s2, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 0x7b
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s0
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_endpgm
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca float, i32 %idx, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_divergent_over_aligned() {
; DYN-LABEL: test_dynamic_stackalloc_kernel_divergent_over_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[0:1], exec
; DYN-NEXT:    s_mov_b32 s2, 0
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_movk_i32 s32, 0x2000
; DYN-NEXT:  .LBB4_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s3, s[0:1]
; DYN-NEXT:    v_readlane_b32 s4, v0, s3
; DYN-NEXT:    s_bitset0_b64 s[0:1], s3
; DYN-NEXT:    s_max_u32 s2, s2, s4
; DYN-NEXT:    s_cmp_lg_u64 s[0:1], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB4_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_add_i32 s0, s32, 0x1fff
; DYN-NEXT:    s_and_b32 s0, s0, 0xffffe000
; DYN-NEXT:    v_mov_b32_e32 v0, s0
; DYN-NEXT:    v_lshl_add_u32 v1, s2, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v1
; DYN-NEXT:    v_mov_b32_e32 v1, 0x1bc
; DYN-NEXT:    buffer_store_dword v1, v0, s[12:15], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_endpgm
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca i32, i32 %idx, align 128, addrspace(5)
  store volatile i32 444, ptr addrspace(5) %alloca
  ret void
}


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_divergent_under_aligned() {
; DYN-LABEL: test_dynamic_stackalloc_kernel_divergent_under_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    v_lshlrev_b32_e32 v0, 4, v0
; DYN-NEXT:    s_mov_b64 s[0:1], exec
; DYN-NEXT:    s_mov_b32 s2, 0
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_movk_i32 s32, 0x400
; DYN-NEXT:  .LBB5_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s3, s[0:1]
; DYN-NEXT:    v_readlane_b32 s4, v0, s3
; DYN-NEXT:    s_bitset0_b64 s[0:1], s3
; DYN-NEXT:    s_max_u32 s2, s2, s4
; DYN-NEXT:    s_cmp_lg_u64 s[0:1], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB5_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_mov_b32 s0, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s0
; DYN-NEXT:    v_lshl_add_u32 v0, s2, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 0x29a
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s0
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_endpgm
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca i128, i32 %idx, align 2, addrspace(5)
  store volatile i32 666, ptr addrspace(5) %alloca
  ret void
}


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_multiple_allocas(i32 %n, i32 %m) {
; DYN-LABEL: test_dynamic_stackalloc_kernel_multiple_allocas:
; DYN:       ; %bb.0: ; %entry
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    s_waitcnt lgkmcnt(0)
; DYN-NEXT:    s_cmp_lg_u32 s0, 0
; DYN-NEXT:    s_mov_b32 s4, 0
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_movk_i32 s32, 0x2000
; DYN-NEXT:    s_cbranch_scc1 .LBB6_4
; DYN-NEXT:  ; %bb.1: ; %bb.0
; DYN-NEXT:    s_lshl_b32 s1, s1, 2
; DYN-NEXT:    s_add_i32 s1, s1, 15
; DYN-NEXT:    s_add_i32 s2, s32, 0xfff
; DYN-NEXT:    s_and_b32 s1, s1, -16
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_and_b32 s5, s2, 0xfffff000
; DYN-NEXT:    s_lshl_b32 s1, s1, 6
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[2:3], exec
; DYN-NEXT:    s_add_i32 s32, s5, s1
; DYN-NEXT:  .LBB6_2: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s1, s[2:3]
; DYN-NEXT:    v_readlane_b32 s6, v0, s1
; DYN-NEXT:    s_bitset0_b64 s[2:3], s1
; DYN-NEXT:    s_max_u32 s4, s4, s6
; DYN-NEXT:    s_cmp_lg_u64 s[2:3], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB6_2
; DYN-NEXT:  ; %bb.3:
; DYN-NEXT:    s_mov_b32 s1, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s1
; DYN-NEXT:    v_lshl_add_u32 v0, s4, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 3
; DYN-NEXT:    v_mov_b32_e32 v1, s5
; DYN-NEXT:    buffer_store_dword v0, v1, s[12:15], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    v_mov_b32_e32 v0, 4
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s1
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:  .LBB6_4: ; %bb.1
; DYN-NEXT:    s_lshl_b32 s0, s0, 2
; DYN-NEXT:    s_add_i32 s0, s0, 15
; DYN-NEXT:    s_and_b32 s0, s0, -16
; DYN-NEXT:    v_mov_b32_e32 v0, 1
; DYN-NEXT:    s_lshl_b32 s0, s0, 6
; DYN-NEXT:    s_mov_b32 s1, s32
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s33
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    v_mov_b32_e32 v0, 2
; DYN-NEXT:    s_add_i32 s32, s1, s0
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s1
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_endpgm
entry:
  %cond = icmp eq i32 %n, 0
  %alloca1 = alloca i32, i32 8, addrspace(5)
  %alloca2 = alloca i17, i32 %n, addrspace(5)
  br i1 %cond, label %bb.0, label %bb.1
bb.0:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca3 = alloca i32, i32 %m, align 64, addrspace(5)
  %alloca4 = alloca i32, i32 %idx, align 4, addrspace(5)
  store volatile i32 3, ptr addrspace(5) %alloca3
  store volatile i32 4, ptr addrspace(5) %alloca4
  br label %bb.1
bb.1:
  store volatile i32 1, ptr addrspace(5) %alloca1
  store volatile i32 2, ptr addrspace(5) %alloca2
  ret void
}


define amdgpu_kernel void @test_dynamic_stackalloc_kernel_control_flow(i32 %n, i32 %m) {
; DYN-LABEL: test_dynamic_stackalloc_kernel_control_flow:
; DYN:       ; %bb.0: ; %entry
; DYN-NEXT:    s_mov_b32 s12, SCRATCH_RSRC_DWORD0
; DYN-NEXT:    s_mov_b32 s13, SCRATCH_RSRC_DWORD1
; DYN-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24
; DYN-NEXT:    s_mov_b32 s14, -1
; DYN-NEXT:    s_mov_b32 s15, 0xe00000
; DYN-NEXT:    s_add_u32 s12, s12, s11
; DYN-NEXT:    s_addc_u32 s13, s13, 0
; DYN-NEXT:    s_waitcnt lgkmcnt(0)
; DYN-NEXT:    s_cmp_lg_u32 s0, 0
; DYN-NEXT:    s_mov_b32 s0, 0
; DYN-NEXT:    s_mov_b32 s33, 0
; DYN-NEXT:    s_movk_i32 s32, 0x1000
; DYN-NEXT:    s_cbranch_scc0 .LBB7_6
; DYN-NEXT:  ; %bb.1: ; %bb.1
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[2:3], exec
; DYN-NEXT:  .LBB7_2: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s4, s[2:3]
; DYN-NEXT:    v_readlane_b32 s5, v0, s4
; DYN-NEXT:    s_bitset0_b64 s[2:3], s4
; DYN-NEXT:    s_max_u32 s0, s0, s5
; DYN-NEXT:    s_cmp_lg_u64 s[2:3], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB7_2
; DYN-NEXT:  ; %bb.3:
; DYN-NEXT:    s_mov_b32 s2, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s2
; DYN-NEXT:    v_lshl_add_u32 v0, s0, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 1
; DYN-NEXT:    buffer_store_dword v0, off, s[12:15], s2
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_cbranch_execnz .LBB7_5
; DYN-NEXT:  .LBB7_4: ; %bb.0
; DYN-NEXT:    s_lshl_b32 s1, s1, 2
; DYN-NEXT:    s_add_i32 s0, s32, 0xfff
; DYN-NEXT:    s_add_i32 s1, s1, 15
; DYN-NEXT:    s_and_b32 s0, s0, 0xfffff000
; DYN-NEXT:    s_and_b32 s1, s1, -16
; DYN-NEXT:    s_lshl_b32 s1, s1, 6
; DYN-NEXT:    v_mov_b32_e32 v0, 2
; DYN-NEXT:    v_mov_b32_e32 v1, s0
; DYN-NEXT:    s_add_i32 s32, s0, s1
; DYN-NEXT:    buffer_store_dword v0, v1, s[12:15], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:  .LBB7_5: ; %bb.2
; DYN-NEXT:    s_endpgm
; DYN-NEXT:  .LBB7_6:
; DYN-NEXT:    s_branch .LBB7_4
entry:
  %cond = icmp eq i32 %n, 0
  br i1 %cond, label %bb.0, label %bb.1
bb.0:
  %alloca2 = alloca i32, i32 %m, align 64, addrspace(5)
  store volatile i32 2, ptr addrspace(5) %alloca2
  br label %bb.2
bb.1:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca1 = alloca i32, i32 %idx, align 4, addrspace(5)
  store volatile i32 1, ptr addrspace(5) %alloca1
  br label %bb.2
bb.2:
  ret void
}


define void @test_dynamic_stackalloc_device_uniform(i32 %n) {
; DYN-LABEL: test_dynamic_stackalloc_device_uniform:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_mov_b32 s9, s33
; DYN-NEXT:    v_and_b32_e32 v0, -16, v0
; DYN-NEXT:    s_mov_b64 s[4:5], exec
; DYN-NEXT:    s_mov_b32 s6, 0
; DYN-NEXT:    s_mov_b32 s33, s32
; DYN-NEXT:    s_addk_i32 s32, 0x400
; DYN-NEXT:  .LBB8_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; DYN-NEXT:    v_readlane_b32 s8, v0, s7
; DYN-NEXT:    s_bitset0_b64 s[4:5], s7
; DYN-NEXT:    s_max_u32 s6, s6, s8
; DYN-NEXT:    s_cmp_lg_u64 s[4:5], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB8_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_mov_b32 s4, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s4
; DYN-NEXT:    v_lshl_add_u32 v0, s6, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 0x7b
; DYN-NEXT:    buffer_store_dword v0, off, s[0:3], s4
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_addk_i32 s32, 0xfc00
; DYN-NEXT:    s_mov_b32 s33, s9
; DYN-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i32 %n, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}


define void @test_dynamic_stackalloc_device_uniform_over_aligned(i32 %n) {
; DYN-LABEL: test_dynamic_stackalloc_device_uniform_over_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_mov_b32 s9, s33
; DYN-NEXT:    s_add_i32 s33, s32, 0x1fc0
; DYN-NEXT:    v_and_b32_e32 v0, -16, v0
; DYN-NEXT:    s_mov_b64 s[4:5], exec
; DYN-NEXT:    s_mov_b32 s6, 0
; DYN-NEXT:    s_and_b32 s33, s33, 0xffffe000
; DYN-NEXT:    s_addk_i32 s32, 0x4000
; DYN-NEXT:  .LBB9_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; DYN-NEXT:    v_readlane_b32 s8, v0, s7
; DYN-NEXT:    s_bitset0_b64 s[4:5], s7
; DYN-NEXT:    s_max_u32 s6, s6, s8
; DYN-NEXT:    s_cmp_lg_u64 s[4:5], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB9_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_add_i32 s4, s32, 0x1fff
; DYN-NEXT:    s_and_b32 s4, s4, 0xffffe000
; DYN-NEXT:    v_mov_b32_e32 v0, s4
; DYN-NEXT:    v_lshl_add_u32 v1, s6, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v1
; DYN-NEXT:    v_mov_b32_e32 v1, 10
; DYN-NEXT:    buffer_store_dword v1, v0, s[0:3], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_addk_i32 s32, 0xc000
; DYN-NEXT:    s_mov_b32 s33, s9
; DYN-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i32 %n, align 128, addrspace(5)
  store volatile i32 10, ptr addrspace(5) %alloca
  ret void
}


define void @test_dynamic_stackalloc_device_uniform_under_aligned(i32 %n) {
; DYN-LABEL: test_dynamic_stackalloc_device_uniform_under_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_mov_b32 s9, s33
; DYN-NEXT:    v_and_b32_e32 v0, -16, v0
; DYN-NEXT:    s_mov_b64 s[4:5], exec
; DYN-NEXT:    s_mov_b32 s6, 0
; DYN-NEXT:    s_mov_b32 s33, s32
; DYN-NEXT:    s_addk_i32 s32, 0x400
; DYN-NEXT:  .LBB10_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; DYN-NEXT:    v_readlane_b32 s8, v0, s7
; DYN-NEXT:    s_bitset0_b64 s[4:5], s7
; DYN-NEXT:    s_max_u32 s6, s6, s8
; DYN-NEXT:    s_cmp_lg_u64 s[4:5], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB10_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_mov_b32 s4, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s4
; DYN-NEXT:    v_lshl_add_u32 v0, s6, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 22
; DYN-NEXT:    buffer_store_dword v0, off, s[0:3], s4
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_addk_i32 s32, 0xfc00
; DYN-NEXT:    s_mov_b32 s33, s9
; DYN-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i32 %n, align 2, addrspace(5)
  store volatile i32 22, ptr addrspace(5) %alloca
  ret void
}


define void @test_dynamic_stackalloc_device_divergent() {
; DYN-LABEL: test_dynamic_stackalloc_device_divergent:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_mov_b32 s9, s33
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[4:5], exec
; DYN-NEXT:    s_mov_b32 s6, 0
; DYN-NEXT:    s_mov_b32 s33, s32
; DYN-NEXT:    s_addk_i32 s32, 0x400
; DYN-NEXT:  .LBB11_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; DYN-NEXT:    v_readlane_b32 s8, v0, s7
; DYN-NEXT:    s_bitset0_b64 s[4:5], s7
; DYN-NEXT:    s_max_u32 s6, s6, s8
; DYN-NEXT:    s_cmp_lg_u64 s[4:5], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB11_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_mov_b32 s4, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s4
; DYN-NEXT:    v_lshl_add_u32 v0, s6, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 0x7b
; DYN-NEXT:    buffer_store_dword v0, off, s[0:3], s4
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_addk_i32 s32, 0xfc00
; DYN-NEXT:    s_mov_b32 s33, s9
; DYN-NEXT:    s_setpc_b64 s[30:31]
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca i32, i32 %idx, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}


define void @test_dynamic_stackalloc_device_divergent_over_aligned() {
; DYN-LABEL: test_dynamic_stackalloc_device_divergent_over_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    s_mov_b32 s10, s33
; DYN-NEXT:    s_add_i32 s33, s32, 0x1fc0
; DYN-NEXT:    s_addk_i32 s32, 0x4000
; DYN-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; DYN-NEXT:    s_add_i32 s4, s32, 0x1fff
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_and_b32 s6, s4, 0xffffe000
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[4:5], exec
; DYN-NEXT:    s_mov_b32 s7, 0
; DYN-NEXT:    s_and_b32 s33, s33, 0xffffe000
; DYN-NEXT:  .LBB12_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s8, s[4:5]
; DYN-NEXT:    v_readlane_b32 s9, v0, s8
; DYN-NEXT:    s_bitset0_b64 s[4:5], s8
; DYN-NEXT:    s_max_u32 s7, s7, s9
; DYN-NEXT:    s_cmp_lg_u64 s[4:5], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB12_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    v_mov_b32_e32 v0, s6
; DYN-NEXT:    v_lshl_add_u32 v1, s7, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v1
; DYN-NEXT:    v_mov_b32_e32 v1, 0x1bc
; DYN-NEXT:    buffer_store_dword v1, v0, s[0:3], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_addk_i32 s32, 0xc000
; DYN-NEXT:    s_mov_b32 s33, s10
; DYN-NEXT:    s_setpc_b64 s[30:31]
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca i32, i32 %idx, align 128, addrspace(5)
  store volatile i32 444, ptr addrspace(5) %alloca
  ret void
}


define void @test_dynamic_stackalloc_device_divergent_under_aligned() {
; DYN-LABEL: test_dynamic_stackalloc_device_divergent_under_aligned:
; DYN:       ; %bb.0:
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    s_mov_b32 s9, s33
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[4:5], exec
; DYN-NEXT:    s_mov_b32 s6, 0
; DYN-NEXT:    s_mov_b32 s33, s32
; DYN-NEXT:    s_addk_i32 s32, 0x400
; DYN-NEXT:  .LBB13_1: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; DYN-NEXT:    v_readlane_b32 s8, v0, s7
; DYN-NEXT:    s_bitset0_b64 s[4:5], s7
; DYN-NEXT:    s_max_u32 s6, s6, s8
; DYN-NEXT:    s_cmp_lg_u64 s[4:5], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB13_1
; DYN-NEXT:  ; %bb.2:
; DYN-NEXT:    s_mov_b32 s4, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s4
; DYN-NEXT:    v_lshl_add_u32 v0, s6, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 0x29a
; DYN-NEXT:    buffer_store_dword v0, off, s[0:3], s4
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_addk_i32 s32, 0xfc00
; DYN-NEXT:    s_mov_b32 s33, s9
; DYN-NEXT:    s_setpc_b64 s[30:31]
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca i32, i32 %idx, align 2, addrspace(5)
  store volatile i32 666, ptr addrspace(5) %alloca
  ret void
}


define void @test_dynamic_stackalloc_device_multiple_allocas(i32 %n, i32 %m) {
; DYN-LABEL: test_dynamic_stackalloc_device_multiple_allocas:
; DYN:       ; %bb.0: ; %entry
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    s_mov_b32 s13, s33
; DYN-NEXT:    s_add_i32 s33, s32, 0xfc0
; DYN-NEXT:    s_mov_b32 s8, 0
; DYN-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; DYN-NEXT:    s_and_b32 s33, s33, 0xfffff000
; DYN-NEXT:    s_addk_i32 s32, 0x3000
; DYN-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; DYN-NEXT:    s_cbranch_execz .LBB14_6
; DYN-NEXT:  ; %bb.1: ; %bb.0
; DYN-NEXT:    v_lshl_add_u32 v1, v1, 2, 15
; DYN-NEXT:    v_and_b32_e32 v1, -16, v1
; DYN-NEXT:    s_mov_b64 s[6:7], exec
; DYN-NEXT:    s_mov_b32 s10, 0
; DYN-NEXT:  .LBB14_2: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s9, s[6:7]
; DYN-NEXT:    v_readlane_b32 s11, v1, s9
; DYN-NEXT:    s_bitset0_b64 s[6:7], s9
; DYN-NEXT:    s_max_u32 s10, s10, s11
; DYN-NEXT:    s_cmp_lg_u64 s[6:7], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB14_2
; DYN-NEXT:  ; %bb.3:
; DYN-NEXT:    s_add_i32 s6, s32, 0xfff
; DYN-NEXT:    s_and_b32 s9, s6, 0xfffff000
; DYN-NEXT:    v_mov_b32_e32 v1, s9
; DYN-NEXT:    v_lshl_add_u32 v1, s10, 6, v1
; DYN-NEXT:    v_readfirstlane_b32 s32, v1
; DYN-NEXT:    v_and_b32_e32 v1, 0x3ff, v31
; DYN-NEXT:    v_lshl_add_u32 v1, v1, 2, 15
; DYN-NEXT:    v_and_b32_e32 v1, 0x1ff0, v1
; DYN-NEXT:    s_mov_b64 s[6:7], exec
; DYN-NEXT:    s_mov_b32 s10, 0
; DYN-NEXT:  .LBB14_4: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s11, s[6:7]
; DYN-NEXT:    v_readlane_b32 s12, v1, s11
; DYN-NEXT:    s_bitset0_b64 s[6:7], s11
; DYN-NEXT:    s_max_u32 s10, s10, s12
; DYN-NEXT:    s_cmp_lg_u64 s[6:7], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB14_4
; DYN-NEXT:  ; %bb.5:
; DYN-NEXT:    s_mov_b32 s6, s32
; DYN-NEXT:    v_mov_b32_e32 v1, s6
; DYN-NEXT:    v_lshl_add_u32 v1, s10, 6, v1
; DYN-NEXT:    v_readfirstlane_b32 s32, v1
; DYN-NEXT:    v_mov_b32_e32 v1, 3
; DYN-NEXT:    v_mov_b32_e32 v2, s9
; DYN-NEXT:    buffer_store_dword v1, v2, s[0:3], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    v_mov_b32_e32 v1, 4
; DYN-NEXT:    buffer_store_dword v1, off, s[0:3], s6
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:  .LBB14_6: ; %bb.1
; DYN-NEXT:    s_or_b64 exec, exec, s[4:5]
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    v_mov_b32_e32 v1, 2
; DYN-NEXT:    v_and_b32_e32 v0, -16, v0
; DYN-NEXT:    s_mov_b64 s[4:5], exec
; DYN-NEXT:  .LBB14_7: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s6, s[4:5]
; DYN-NEXT:    v_readlane_b32 s7, v0, s6
; DYN-NEXT:    s_bitset0_b64 s[4:5], s6
; DYN-NEXT:    s_max_u32 s8, s8, s7
; DYN-NEXT:    s_cmp_lg_u64 s[4:5], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB14_7
; DYN-NEXT:  ; %bb.8:
; DYN-NEXT:    s_mov_b32 s4, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s4
; DYN-NEXT:    v_lshl_add_u32 v0, s8, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 1
; DYN-NEXT:    buffer_store_dword v0, off, s[0:3], s33
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    buffer_store_dword v1, off, s[0:3], s4
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_addk_i32 s32, 0xd000
; DYN-NEXT:    s_mov_b32 s33, s13
; DYN-NEXT:    s_setpc_b64 s[30:31]
entry:
  %cond = icmp eq i32 %n, 0
  %alloca1 = alloca i32, i32 8, addrspace(5)
  %alloca2 = alloca i32, i32 %n, addrspace(5)
  br i1 %cond, label %bb.0, label %bb.1
bb.0:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca3 = alloca i32, i32 %m, align 64, addrspace(5)
  %alloca4 = alloca i32, i32 %idx, align 4, addrspace(5)
  store volatile i32 3, ptr addrspace(5) %alloca3
  store volatile i32 4, ptr addrspace(5) %alloca4
  br label %bb.1
bb.1:
  store volatile i32 1, ptr addrspace(5) %alloca1
  store volatile i32 2, ptr addrspace(5) %alloca2
  ret void
}


define void @test_dynamic_stackalloc_device_control_flow(i32 %n, i32 %m) {
; DYN-LABEL: test_dynamic_stackalloc_device_control_flow:
; DYN:       ; %bb.0: ; %entry
; DYN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; DYN-NEXT:    s_mov_b32 s11, s33
; DYN-NEXT:    s_add_i32 s33, s32, 0xfc0
; DYN-NEXT:    s_mov_b32 s8, 0
; DYN-NEXT:    v_cmp_ne_u32_e32 vcc, 0, v0
; DYN-NEXT:    s_and_b32 s33, s33, 0xfffff000
; DYN-NEXT:    s_addk_i32 s32, 0x2000
; DYN-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; DYN-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; DYN-NEXT:    s_cbranch_execz .LBB15_4
; DYN-NEXT:  ; %bb.1: ; %bb.1
; DYN-NEXT:    v_lshl_add_u32 v1, v1, 2, 15
; DYN-NEXT:    v_mov_b32_e32 v0, 2
; DYN-NEXT:    v_and_b32_e32 v1, -16, v1
; DYN-NEXT:    s_mov_b64 s[6:7], exec
; DYN-NEXT:  .LBB15_2: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s9, s[6:7]
; DYN-NEXT:    v_readlane_b32 s10, v1, s9
; DYN-NEXT:    s_bitset0_b64 s[6:7], s9
; DYN-NEXT:    s_max_u32 s8, s8, s10
; DYN-NEXT:    s_cmp_lg_u64 s[6:7], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB15_2
; DYN-NEXT:  ; %bb.3:
; DYN-NEXT:    s_add_i32 s6, s32, 0xfff
; DYN-NEXT:    s_and_b32 s6, s6, 0xfffff000
; DYN-NEXT:    v_mov_b32_e32 v1, s6
; DYN-NEXT:    v_lshl_add_u32 v2, s8, 6, v1
; DYN-NEXT:    v_readfirstlane_b32 s32, v2
; DYN-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    ; implicit-def: $vgpr31
; DYN-NEXT:  .LBB15_4: ; %Flow
; DYN-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; DYN-NEXT:    s_cbranch_execz .LBB15_8
; DYN-NEXT:  ; %bb.5: ; %bb.0
; DYN-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; DYN-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; DYN-NEXT:    v_and_b32_e32 v0, 0x1ff0, v0
; DYN-NEXT:    s_mov_b64 s[6:7], exec
; DYN-NEXT:    s_mov_b32 s8, 0
; DYN-NEXT:  .LBB15_6: ; =>This Inner Loop Header: Depth=1
; DYN-NEXT:    s_ff1_i32_b64 s9, s[6:7]
; DYN-NEXT:    v_readlane_b32 s10, v0, s9
; DYN-NEXT:    s_bitset0_b64 s[6:7], s9
; DYN-NEXT:    s_max_u32 s8, s8, s10
; DYN-NEXT:    s_cmp_lg_u64 s[6:7], 0
; DYN-NEXT:    s_cbranch_scc1 .LBB15_6
; DYN-NEXT:  ; %bb.7:
; DYN-NEXT:    s_mov_b32 s6, s32
; DYN-NEXT:    v_mov_b32_e32 v0, s6
; DYN-NEXT:    v_lshl_add_u32 v0, s8, 6, v0
; DYN-NEXT:    v_readfirstlane_b32 s32, v0
; DYN-NEXT:    v_mov_b32_e32 v0, 1
; DYN-NEXT:    buffer_store_dword v0, off, s[0:3], s6
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:  .LBB15_8: ; %bb.2
; DYN-NEXT:    s_or_b64 exec, exec, s[4:5]
; DYN-NEXT:    s_addk_i32 s32, 0xe000
; DYN-NEXT:    s_mov_b32 s33, s11
; DYN-NEXT:    s_waitcnt vmcnt(0)
; DYN-NEXT:    s_setpc_b64 s[30:31]
entry:
  %cond = icmp eq i32 %n, 0
  br i1 %cond, label %bb.0, label %bb.1
bb.0:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca1 = alloca i32, i32 %idx, align 4, addrspace(5)
  store volatile i32 1, ptr addrspace(5) %alloca1
  br label %bb.2
bb.1:
  %alloca2 = alloca i32, i32 %m, align 64, addrspace(5)
  store volatile i32 2, ptr addrspace(5) %alloca2
  br label %bb.2
bb.2:
  ret void
}
