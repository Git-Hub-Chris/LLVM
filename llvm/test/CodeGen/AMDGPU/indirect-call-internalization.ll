; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 5
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -passes=amdgpu-attributor %s | FileCheck --check-prefixes=EXT %s
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -passes="amdgpu-attributor<closed-world>" %s | FileCheck --check-prefixes=CW %s
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -passes="amdgpu-attributor<internalization>" %s | FileCheck --check-prefixes=INT %s

@G = global i32 0, align 4

define void @callee0() {
entry:
  store i32 0, ptr @G, align 4
  ret void
}

define void @callee1() {
entry:
  store i32 1, ptr @G, align 4
  ret void
}

define void @callee2() {
entry:
  store i32 2, ptr @G, align 4
  ret void
}

define void @helper(ptr %fn) {
entry:
  call void %fn()
  ret void
}

define ptr @take_calle2_address() {
entry:
  ret ptr @callee2
}

define amdgpu_kernel void @foo(i1 %val) {
entry:
  %fn = select i1 %val, ptr @callee0, ptr @callee1
  call void @helper(ptr %fn)
  ret void
}

; EXT-LABEL: define void @callee0(
; EXT-SAME: ) #[[ATTR0:[0-9]+]] {
; EXT-NEXT:  [[ENTRY:.*:]]
; EXT-NEXT:    store i32 0, ptr @G, align 4
; EXT-NEXT:    ret void
;
;
; EXT-LABEL: define void @callee1(
; EXT-SAME: ) #[[ATTR0]] {
; EXT-NEXT:  [[ENTRY:.*:]]
; EXT-NEXT:    store i32 1, ptr @G, align 4
; EXT-NEXT:    ret void
;
;
; EXT-LABEL: define void @callee2(
; EXT-SAME: ) #[[ATTR0]] {
; EXT-NEXT:  [[ENTRY:.*:]]
; EXT-NEXT:    store i32 2, ptr @G, align 4
; EXT-NEXT:    ret void
;
;
; EXT-LABEL: define void @helper(
; EXT-SAME: ptr [[FN:%.*]]) #[[ATTR1:[0-9]+]] {
; EXT-NEXT:  [[ENTRY:.*:]]
; EXT-NEXT:    call void [[FN]]()
; EXT-NEXT:    ret void
;
;
; EXT-LABEL: define ptr @take_calle2_address(
; EXT-SAME: ) #[[ATTR0]] {
; EXT-NEXT:  [[ENTRY:.*:]]
; EXT-NEXT:    ret ptr @callee2
;
;
; EXT-LABEL: define amdgpu_kernel void @foo(
; EXT-SAME: i1 [[VAL:%.*]]) #[[ATTR2:[0-9]+]] {
; EXT-NEXT:  [[ENTRY:.*:]]
; EXT-NEXT:    [[FN:%.*]] = select i1 [[VAL]], ptr @callee0, ptr @callee1
; EXT-NEXT:    call void @helper(ptr [[FN]])
; EXT-NEXT:    ret void
;
;
; CW-LABEL: define void @callee0(
; CW-SAME: ) #[[ATTR0:[0-9]+]] {
; CW-NEXT:  [[ENTRY:.*:]]
; CW-NEXT:    store i32 0, ptr @G, align 4
; CW-NEXT:    ret void
;
;
; CW-LABEL: define void @callee1(
; CW-SAME: ) #[[ATTR0]] {
; CW-NEXT:  [[ENTRY:.*:]]
; CW-NEXT:    store i32 1, ptr @G, align 4
; CW-NEXT:    ret void
;
;
; CW-LABEL: define void @callee2(
; CW-SAME: ) #[[ATTR0]] {
; CW-NEXT:  [[ENTRY:.*:]]
; CW-NEXT:    store i32 2, ptr @G, align 4
; CW-NEXT:    ret void
;
;
; CW-LABEL: define void @helper(
; CW-SAME: ptr [[FN:%.*]]) #[[ATTR1:[0-9]+]] {
; CW-NEXT:  [[ENTRY:.*:]]
; CW-NEXT:    [[TMP0:%.*]] = icmp eq ptr [[FN]], @callee0
; CW-NEXT:    br i1 [[TMP0]], label %[[BB1:.*]], label %[[BB2:.*]]
; CW:       [[BB1]]:
; CW-NEXT:    call void @callee0()
; CW-NEXT:    br label %[[BB8:.*]]
; CW:       [[BB2]]:
; CW-NEXT:    [[TMP3:%.*]] = icmp eq ptr [[FN]], @callee1
; CW-NEXT:    br i1 [[TMP3]], label %[[BB4:.*]], label %[[BB5:.*]]
; CW:       [[BB4]]:
; CW-NEXT:    call void @callee1()
; CW-NEXT:    br label %[[BB8]]
; CW:       [[BB5]]:
; CW-NEXT:    br i1 true, label %[[BB6:.*]], label %[[BB7:.*]]
; CW:       [[BB6]]:
; CW-NEXT:    call void @callee2()
; CW-NEXT:    br label %[[BB8]]
; CW:       [[BB7]]:
; CW-NEXT:    unreachable
; CW:       [[BB8]]:
; CW-NEXT:    ret void
;
;
; CW-LABEL: define ptr @take_calle2_address(
; CW-SAME: ) #[[ATTR0]] {
; CW-NEXT:  [[ENTRY:.*:]]
; CW-NEXT:    ret ptr @callee2
;
;
; CW-LABEL: define amdgpu_kernel void @foo(
; CW-SAME: i1 [[VAL:%.*]]) #[[ATTR2:[0-9]+]] {
; CW-NEXT:  [[ENTRY:.*:]]
; CW-NEXT:    [[FN:%.*]] = select i1 [[VAL]], ptr @callee0, ptr @callee1
; CW-NEXT:    call void @helper(ptr [[FN]])
; CW-NEXT:    ret void
;
;
; INT-LABEL: define void @callee0() {
; INT-NEXT:  [[ENTRY:.*:]]
; INT-NEXT:    store i32 0, ptr @G, align 4
; INT-NEXT:    ret void
;
;
; INT-LABEL: define void @callee1() {
; INT-NEXT:  [[ENTRY:.*:]]
; INT-NEXT:    store i32 1, ptr @G, align 4
; INT-NEXT:    ret void
;
;
; INT-LABEL: define void @callee2() {
; INT-NEXT:  [[ENTRY:.*:]]
; INT-NEXT:    store i32 2, ptr @G, align 4
; INT-NEXT:    ret void
;
;
; INT-LABEL: define private void @helper.internalized(
; INT-SAME: ptr [[FN:%.*]]) #[[ATTR0:[0-9]+]] {
; INT-NEXT:  [[ENTRY:.*:]]
; INT-NEXT:    [[TMP0:%.*]] = icmp eq ptr [[FN]], @callee1
; INT-NEXT:    br i1 [[TMP0]], label %[[BB1:.*]], label %[[BB2:.*]]
; INT:       [[BB1]]:
; INT-NEXT:    call void @callee1()
; INT-NEXT:    br label %[[BB5:.*]]
; INT:       [[BB2]]:
; INT-NEXT:    br i1 true, label %[[BB3:.*]], label %[[BB4:.*]]
; INT:       [[BB3]]:
; INT-NEXT:    call void @callee0()
; INT-NEXT:    br label %[[BB5]]
; INT:       [[BB4]]:
; INT-NEXT:    unreachable
; INT:       [[BB5]]:
; INT-NEXT:    ret void
;
;
; INT-LABEL: define void @helper(
; INT-SAME: ptr [[FN:%.*]]) {
; INT-NEXT:  [[ENTRY:.*:]]
; INT-NEXT:    call void [[FN]]()
; INT-NEXT:    ret void
;
;
; INT-LABEL: define ptr @take_calle2_address(
; INT-SAME: ) #[[ATTR1:[0-9]+]] {
; INT-NEXT:  [[ENTRY:.*:]]
; INT-NEXT:    ret ptr @callee2
;
;
; INT-LABEL: define amdgpu_kernel void @foo(
; INT-SAME: i1 [[VAL:%.*]]) #[[ATTR0]] {
; INT-NEXT:  [[ENTRY:.*:]]
; INT-NEXT:    [[FN:%.*]] = select i1 [[VAL]], ptr @callee0, ptr @callee1
; INT-NEXT:    call void @helper.internalized(ptr [[FN]])
; INT-NEXT:    ret void
;
