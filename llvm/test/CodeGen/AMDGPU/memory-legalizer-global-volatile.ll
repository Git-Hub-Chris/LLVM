; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=amdgcn-amd- -stop-after=si-memory-legalizer -mcpu=gfx600 < %s | FileCheck --check-prefixes=GFX6 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx700 < %s | FileCheck --check-prefixes=GFX7 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1010 < %s | FileCheck --check-prefixes=GFX10-WGP %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1010 -mattr=+cumode < %s | FileCheck --check-prefixes=GFX10-CU %s
; RUN: llc -mtriple=amdgcn-amd-amdpal -stop-after=si-memory-legalizer -mcpu=gfx700 -amdgcn-skip-cache-invalidations < %s | FileCheck --check-prefixes=SKIP-CACHE-INV %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1100 < %s | FileCheck --check-prefixes=GFX11-WGP %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1100 -mattr=+cumode < %s | FileCheck --check-prefixes=GFX11-CU %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1200 < %s | FileCheck --check-prefixes=GFX12-WGP %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=si-memory-legalizer -mcpu=gfx1200 -mattr=+cumode < %s | FileCheck --check-prefixes=GFX12-CU %s

define amdgpu_kernel void @global_volatile_load_0(
  ; GFX6-LABEL: name: global_volatile_load_0
  ; GFX6: bb.0.entry:
  ; GFX6-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX6-NEXT: {{  $}}
  ; GFX6-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 9, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset, align 4, addrspace 4)
  ; GFX6-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; GFX6-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; GFX6-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr0
  ; GFX6-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr1
  ; GFX6-NEXT:   renamable $vgpr0 = BUFFER_LOAD_DWORD_OFFSET renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 1, 0, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX6-NEXT:   S_WAITCNT_soft 3952
  ; GFX6-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; GFX6-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; GFX6-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX6-NEXT:   S_ENDPGM 0
  ;
  ; GFX7-LABEL: name: global_volatile_load_0
  ; GFX7: bb.0.entry:
  ; GFX7-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX7-NEXT: {{  $}}
  ; GFX7-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX7-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr1, implicit $exec, implicit $exec
  ; GFX7-NEXT:   renamable $vgpr2 = FLAT_LOAD_DWORD killed renamable $vgpr0_vgpr1, 0, 1, implicit $exec, implicit $flat_scr :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX7-NEXT:   S_WAITCNT_soft 3952
  ; GFX7-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr2, implicit $exec, implicit $exec
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr3, implicit $exec, implicit $exec
  ; GFX7-NEXT:   FLAT_STORE_DWORD killed renamable $vgpr0_vgpr1, killed renamable $vgpr2, 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into %ir.2, addrspace 1)
  ; GFX7-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-WGP-LABEL: name: global_volatile_load_0
  ; GFX10-WGP: bb.0.entry:
  ; GFX10-WGP-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-WGP-NEXT: {{  $}}
  ; GFX10-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-WGP-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 5, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX10-WGP-NEXT:   S_WAITCNT_soft 16240
  ; GFX10-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX10-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-CU-LABEL: name: global_volatile_load_0
  ; GFX10-CU: bb.0.entry:
  ; GFX10-CU-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-CU-NEXT: {{  $}}
  ; GFX10-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-CU-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 5, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX10-CU-NEXT:   S_WAITCNT_soft 16240
  ; GFX10-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX10-CU-NEXT:   S_ENDPGM 0
  ;
  ; SKIP-CACHE-INV-LABEL: name: global_volatile_load_0
  ; SKIP-CACHE-INV: bb.0.entry:
  ; SKIP-CACHE-INV-NEXT:   liveins: $sgpr0_sgpr1
  ; SKIP-CACHE-INV-NEXT: {{  $}}
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; SKIP-CACHE-INV-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr0
  ; SKIP-CACHE-INV-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr1
  ; SKIP-CACHE-INV-NEXT:   renamable $vgpr0 = BUFFER_LOAD_DWORD_OFFSET renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 1, 0, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_WAITCNT_soft 3952
  ; SKIP-CACHE-INV-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; SKIP-CACHE-INV-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; SKIP-CACHE-INV-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-WGP-LABEL: name: global_volatile_load_0
  ; GFX11-WGP: bb.0.entry:
  ; GFX11-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-WGP-NEXT: {{  $}}
  ; GFX11-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX11-WGP-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 5, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX11-WGP-NEXT:   S_WAITCNT_soft 1015
  ; GFX11-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX11-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-CU-LABEL: name: global_volatile_load_0
  ; GFX11-CU: bb.0.entry:
  ; GFX11-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-CU-NEXT: {{  $}}
  ; GFX11-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX11-CU-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 5, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX11-CU-NEXT:   S_WAITCNT_soft 1015
  ; GFX11-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX11-CU-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-WGP-LABEL: name: global_volatile_load_0
  ; GFX12-WGP: bb.0.entry:
  ; GFX12-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-WGP-NEXT: {{  $}}
  ; GFX12-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX12-WGP-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 24, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX12-WGP-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-CU-LABEL: name: global_volatile_load_0
  ; GFX12-CU: bb.0.entry:
  ; GFX12-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-CU-NEXT: {{  $}}
  ; GFX12-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX12-CU-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 24, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX12-CU-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-CU-NEXT:   S_ENDPGM 0
    ptr addrspace(1) %in, ptr addrspace(1) %out) {
entry:
  %val = load volatile i32, ptr addrspace(1) %in, align 4
  store i32 %val, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @global_volatile_load_1(
  ; GFX6-LABEL: name: global_volatile_load_1
  ; GFX6: bb.0.entry:
  ; GFX6-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX6-NEXT: {{  $}}
  ; GFX6-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 9, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset, align 4, addrspace 4)
  ; GFX6-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; GFX6-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX6-NEXT:   renamable $vgpr1 = V_MOV_B32_e32 0, implicit $exec
  ; GFX6-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; GFX6-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; GFX6-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; GFX6-NEXT:   renamable $sgpr2 = S_MOV_B32 0
  ; GFX6-NEXT:   $sgpr3 = S_MOV_B32 $sgpr7
  ; GFX6-NEXT:   renamable $vgpr0 = BUFFER_LOAD_DWORD_ADDR64 killed renamable $vgpr0_vgpr1, killed renamable $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 1, 0, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX6-NEXT:   S_WAITCNT_soft 3952
  ; GFX6-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX6-NEXT:   S_ENDPGM 0
  ;
  ; GFX7-LABEL: name: global_volatile_load_1
  ; GFX7: bb.0.entry:
  ; GFX7-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX7-NEXT: {{  $}}
  ; GFX7-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX7-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr1, implicit $exec, implicit $exec
  ; GFX7-NEXT:   renamable $vgpr0 = V_ADD_CO_U32_e32 killed $sgpr0, killed $vgpr0, implicit-def $vcc, implicit $exec
  ; GFX7-NEXT:   renamable $vgpr1 = V_ADDC_U32_e32 0, killed $vgpr1, implicit-def dead $vcc, implicit killed $vcc, implicit $exec
  ; GFX7-NEXT:   renamable $vgpr2 = FLAT_LOAD_DWORD killed renamable $vgpr0_vgpr1, 0, 1, implicit $exec, implicit $flat_scr :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX7-NEXT:   S_WAITCNT_soft 3952
  ; GFX7-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr2, implicit $exec, implicit $exec
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr3, implicit $exec, implicit $exec
  ; GFX7-NEXT:   FLAT_STORE_DWORD killed renamable $vgpr0_vgpr1, killed renamable $vgpr2, 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into %ir.2, addrspace 1)
  ; GFX7-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-WGP-LABEL: name: global_volatile_load_1
  ; GFX10-WGP: bb.0.entry:
  ; GFX10-WGP-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX10-WGP-NEXT: {{  $}}
  ; GFX10-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-WGP-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX10-WGP-NEXT:   renamable $vgpr1 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-WGP-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 5, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX10-WGP-NEXT:   S_WAITCNT_soft 16240
  ; GFX10-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX10-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-CU-LABEL: name: global_volatile_load_1
  ; GFX10-CU: bb.0.entry:
  ; GFX10-CU-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX10-CU-NEXT: {{  $}}
  ; GFX10-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-CU-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX10-CU-NEXT:   renamable $vgpr1 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-CU-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 5, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX10-CU-NEXT:   S_WAITCNT_soft 16240
  ; GFX10-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX10-CU-NEXT:   S_ENDPGM 0
  ;
  ; SKIP-CACHE-INV-LABEL: name: global_volatile_load_1
  ; SKIP-CACHE-INV: bb.0.entry:
  ; SKIP-CACHE-INV-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; SKIP-CACHE-INV-NEXT: {{  $}}
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; SKIP-CACHE-INV-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; SKIP-CACHE-INV-NEXT:   renamable $vgpr1 = V_MOV_B32_e32 0, implicit $exec
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; SKIP-CACHE-INV-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; SKIP-CACHE-INV-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr2 = S_MOV_B32 0
  ; SKIP-CACHE-INV-NEXT:   $sgpr3 = S_MOV_B32 $sgpr7
  ; SKIP-CACHE-INV-NEXT:   renamable $vgpr0 = BUFFER_LOAD_DWORD_ADDR64 killed renamable $vgpr0_vgpr1, killed renamable $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 1, 0, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_WAITCNT_soft 3952
  ; SKIP-CACHE-INV-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-WGP-LABEL: name: global_volatile_load_1
  ; GFX11-WGP: bb.0.entry:
  ; GFX11-WGP-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX11-WGP-NEXT: {{  $}}
  ; GFX11-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-WGP-NEXT:   renamable $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx11 0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-WGP-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 5, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX11-WGP-NEXT:   S_WAITCNT_soft 1015
  ; GFX11-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX11-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-CU-LABEL: name: global_volatile_load_1
  ; GFX11-CU: bb.0.entry:
  ; GFX11-CU-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX11-CU-NEXT: {{  $}}
  ; GFX11-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-CU-NEXT:   renamable $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx11 0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-CU-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 5, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX11-CU-NEXT:   S_WAITCNT_soft 1015
  ; GFX11-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX11-CU-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-WGP-LABEL: name: global_volatile_load_1
  ; GFX12-WGP: bb.0.entry:
  ; GFX12-WGP-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX12-WGP-NEXT: {{  $}}
  ; GFX12-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-WGP-NEXT:   renamable $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx12 0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-WGP-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 24, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX12-WGP-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-CU-LABEL: name: global_volatile_load_1
  ; GFX12-CU: bb.0.entry:
  ; GFX12-CU-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX12-CU-NEXT: {{  $}}
  ; GFX12-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-CU-NEXT:   renamable $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx12 0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-CU-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, killed renamable $vgpr0, 0, 24, implicit $exec :: (volatile load (s32) from %ir.val.gep, addrspace 1)
  ; GFX12-CU-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr1, killed renamable $vgpr0, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-CU-NEXT:   S_ENDPGM 0
    ptr addrspace(1) %in, ptr addrspace(1) %out) {
entry:
  %tid = call i32 @llvm.amdgcn.workitem.id.x()
  %val.gep = getelementptr inbounds i32, ptr addrspace(1) %in, i32 %tid
  %val = load volatile i32, ptr addrspace(1) %val.gep, align 4
  store i32 %val, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @global_volatile_store_0(
  ; GFX6-LABEL: name: global_volatile_store_0
  ; GFX6: bb.0.entry:
  ; GFX6-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX6-NEXT: {{  $}}
  ; GFX6-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 9, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset, align 4, addrspace 4)
  ; GFX6-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; GFX6-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; GFX6-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX6-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; GFX6-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; GFX6-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX6-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX6-NEXT:   S_WAITCNT_soft 3952
  ; GFX6-NEXT:   S_ENDPGM 0
  ;
  ; GFX7-LABEL: name: global_volatile_store_0
  ; GFX7: bb.0.entry:
  ; GFX7-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX7-NEXT: {{  $}}
  ; GFX7-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX7-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX7-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr2, implicit $exec, implicit $exec
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr3, implicit $exec, implicit $exec
  ; GFX7-NEXT:   $vgpr2 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX7-NEXT:   FLAT_STORE_DWORD killed renamable $vgpr0_vgpr1, killed renamable $vgpr2, 0, 0, implicit $exec, implicit $flat_scr :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX7-NEXT:   S_WAITCNT_soft 3952
  ; GFX7-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-WGP-LABEL: name: global_volatile_store_0
  ; GFX10-WGP: bb.0.entry:
  ; GFX10-WGP-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-WGP-NEXT: {{  $}}
  ; GFX10-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-WGP-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX10-WGP-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX10-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX10-WGP-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX10-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-CU-LABEL: name: global_volatile_store_0
  ; GFX10-CU: bb.0.entry:
  ; GFX10-CU-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-CU-NEXT: {{  $}}
  ; GFX10-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-CU-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX10-CU-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX10-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX10-CU-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX10-CU-NEXT:   S_ENDPGM 0
  ;
  ; SKIP-CACHE-INV-LABEL: name: global_volatile_store_0
  ; SKIP-CACHE-INV: bb.0.entry:
  ; SKIP-CACHE-INV-NEXT:   liveins: $sgpr0_sgpr1
  ; SKIP-CACHE-INV-NEXT: {{  $}}
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; SKIP-CACHE-INV-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; SKIP-CACHE-INV-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; SKIP-CACHE-INV-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_WAITCNT_soft 3952
  ; SKIP-CACHE-INV-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-WGP-LABEL: name: global_volatile_store_0
  ; GFX11-WGP: bb.0.entry:
  ; GFX11-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-WGP-NEXT: {{  $}}
  ; GFX11-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-WGP-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX11-WGP-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx11 0, killed $sgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 4, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX11-WGP-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX11-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-CU-LABEL: name: global_volatile_store_0
  ; GFX11-CU: bb.0.entry:
  ; GFX11-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-CU-NEXT: {{  $}}
  ; GFX11-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-CU-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX11-CU-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx11 0, killed $sgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 4, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX11-CU-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX11-CU-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-WGP-LABEL: name: global_volatile_store_0
  ; GFX12-WGP: bb.0.entry:
  ; GFX12-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-WGP-NEXT: {{  $}}
  ; GFX12-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-WGP-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX12-WGP-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx12 0, killed $sgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-WGP-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_KMCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 24, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX12-WGP-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-CU-LABEL: name: global_volatile_store_0
  ; GFX12-CU: bb.0.entry:
  ; GFX12-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-CU-NEXT: {{  $}}
  ; GFX12-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-CU-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX12-CU-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx12 0, killed $sgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-CU-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_KMCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 24, implicit $exec :: (volatile store (s32) into %ir.2, addrspace 1)
  ; GFX12-CU-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-CU-NEXT:   S_ENDPGM 0
    ptr addrspace(1) %in, ptr addrspace(1) %out) {
entry:
  %val = load i32, ptr addrspace(1) %in, align 4
  store volatile i32 %val, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @global_volatile_store_1(
  ; GFX6-LABEL: name: global_volatile_store_1
  ; GFX6: bb.0.entry:
  ; GFX6-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX6-NEXT: {{  $}}
  ; GFX6-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 9, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset, align 4, addrspace 4)
  ; GFX6-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; GFX6-NEXT:   renamable $sgpr6 = S_MOV_B32 0
  ; GFX6-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX6-NEXT:   renamable $vgpr1 = V_MOV_B32_e32 0, implicit $exec
  ; GFX6-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX6-NEXT:   $sgpr4_sgpr5 = S_MOV_B64 killed $sgpr2_sgpr3
  ; GFX6-NEXT:   $vgpr2 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX6-NEXT:   BUFFER_STORE_DWORD_ADDR64 killed renamable $vgpr2, killed renamable $vgpr0_vgpr1, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX6-NEXT:   S_WAITCNT_soft 3952
  ; GFX6-NEXT:   S_ENDPGM 0
  ;
  ; GFX7-LABEL: name: global_volatile_store_1
  ; GFX7: bb.0.entry:
  ; GFX7-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX7-NEXT: {{  $}}
  ; GFX7-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX7-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX7-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr3, implicit $exec, implicit $exec
  ; GFX7-NEXT:   renamable $vgpr0 = V_ADD_CO_U32_e32 killed $sgpr2, killed $vgpr0, implicit-def $vcc, implicit $exec
  ; GFX7-NEXT:   renamable $vgpr1 = V_ADDC_U32_e32 0, killed $vgpr1, implicit-def dead $vcc, implicit killed $vcc, implicit $exec
  ; GFX7-NEXT:   $vgpr2 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX7-NEXT:   FLAT_STORE_DWORD killed renamable $vgpr0_vgpr1, killed renamable $vgpr2, 0, 0, implicit $exec, implicit $flat_scr :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX7-NEXT:   S_WAITCNT_soft 3952
  ; GFX7-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-WGP-LABEL: name: global_volatile_store_1
  ; GFX10-WGP: bb.0.entry:
  ; GFX10-WGP-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX10-WGP-NEXT: {{  $}}
  ; GFX10-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-WGP-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX10-WGP-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX10-WGP-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX10-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX10-WGP-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX10-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-CU-LABEL: name: global_volatile_store_1
  ; GFX10-CU: bb.0.entry:
  ; GFX10-CU-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX10-CU-NEXT: {{  $}}
  ; GFX10-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-CU-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; GFX10-CU-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX10-CU-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX10-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX10-CU-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX10-CU-NEXT:   S_ENDPGM 0
  ;
  ; SKIP-CACHE-INV-LABEL: name: global_volatile_store_1
  ; SKIP-CACHE-INV: bb.0.entry:
  ; SKIP-CACHE-INV-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; SKIP-CACHE-INV-NEXT: {{  $}}
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr6 = S_MOV_B32 0
  ; SKIP-CACHE-INV-NEXT:   renamable $vgpr0 = nuw nsw V_LSHLREV_B32_e32 2, killed $vgpr0, implicit $exec
  ; SKIP-CACHE-INV-NEXT:   renamable $vgpr1 = V_MOV_B32_e32 0, implicit $exec
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   $sgpr4_sgpr5 = S_MOV_B64 killed $sgpr2_sgpr3
  ; SKIP-CACHE-INV-NEXT:   $vgpr2 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; SKIP-CACHE-INV-NEXT:   BUFFER_STORE_DWORD_ADDR64 killed renamable $vgpr2, killed renamable $vgpr0_vgpr1, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_WAITCNT_soft 3952
  ; SKIP-CACHE-INV-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-WGP-LABEL: name: global_volatile_store_1
  ; GFX11-WGP: bb.0.entry:
  ; GFX11-WGP-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX11-WGP-NEXT: {{  $}}
  ; GFX11-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-WGP-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX11-WGP-NEXT:   $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx11 killed $sgpr0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 4, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX11-WGP-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX11-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-CU-LABEL: name: global_volatile_store_1
  ; GFX11-CU: bb.0.entry:
  ; GFX11-CU-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX11-CU-NEXT: {{  $}}
  ; GFX11-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-CU-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX11-CU-NEXT:   $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx11 killed $sgpr0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 4, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX11-CU-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX11-CU-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-WGP-LABEL: name: global_volatile_store_1
  ; GFX12-WGP: bb.0.entry:
  ; GFX12-WGP-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX12-WGP-NEXT: {{  $}}
  ; GFX12-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-WGP-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX12-WGP-NEXT:   $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx12 killed $sgpr0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-WGP-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_KMCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 24, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX12-WGP-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-CU-LABEL: name: global_volatile_store_1
  ; GFX12-CU: bb.0.entry:
  ; GFX12-CU-NEXT:   liveins: $vgpr0, $sgpr0_sgpr1
  ; GFX12-CU-NEXT: {{  $}}
  ; GFX12-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-CU-NEXT:   renamable $sgpr0 = S_LOAD_DWORD_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: ("amdgpu-noclobber" load (s32) from %ir.1, addrspace 1)
  ; GFX12-CU-NEXT:   $vgpr1, renamable $vgpr0 = nuw nsw V_DUAL_MOV_B32_e32_X_LSHLREV_B32_e32_gfx12 killed $sgpr0, 2, killed $vgpr0, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-CU-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_KMCNT_soft 0
  ; GFX12-CU-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 24, implicit $exec :: (volatile store (s32) into %ir.out.gep, addrspace 1)
  ; GFX12-CU-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-CU-NEXT:   S_ENDPGM 0
    ptr addrspace(1) %in, ptr addrspace(1) %out) {
entry:
  %tid = call i32 @llvm.amdgcn.workitem.id.x()
  %val = load i32, ptr addrspace(1) %in, align 4
  %out.gep = getelementptr inbounds i32, ptr addrspace(1) %out, i32 %tid
  store volatile i32 %val, ptr addrspace(1) %out.gep
  ret void
}

define amdgpu_kernel void @global_volatile_workgroup_acquire_load(
  ; GFX6-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX6: bb.0.entry:
  ; GFX6-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX6-NEXT: {{  $}}
  ; GFX6-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 9, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset, align 4, addrspace 4)
  ; GFX6-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; GFX6-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; GFX6-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr0
  ; GFX6-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr1
  ; GFX6-NEXT:   renamable $vgpr0 = BUFFER_LOAD_DWORD_OFFSET renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX6-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; GFX6-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; GFX6-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX6-NEXT:   S_ENDPGM 0
  ;
  ; GFX7-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX7: bb.0.entry:
  ; GFX7-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX7-NEXT: {{  $}}
  ; GFX7-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX7-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr0, implicit $exec, implicit $exec
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr1, implicit $exec, implicit $exec
  ; GFX7-NEXT:   renamable $vgpr2 = FLAT_LOAD_DWORD killed renamable $vgpr0_vgpr1, 0, 0, implicit $exec, implicit $flat_scr :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX7-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr2, implicit $exec, implicit $exec
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr3, implicit $exec, implicit $exec
  ; GFX7-NEXT:   FLAT_STORE_DWORD killed renamable $vgpr0_vgpr1, killed renamable $vgpr2, 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into %ir.2, addrspace 1)
  ; GFX7-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-WGP-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX10-WGP: bb.0.entry:
  ; GFX10-WGP-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-WGP-NEXT: {{  $}}
  ; GFX10-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-WGP-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 1, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX10-WGP-NEXT:   S_WAITCNT_soft 16240
  ; GFX10-WGP-NEXT:   BUFFER_GL0_INV implicit $exec
  ; GFX10-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX10-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-CU-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX10-CU: bb.0.entry:
  ; GFX10-CU-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-CU-NEXT: {{  $}}
  ; GFX10-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX10-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-CU-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 0, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX10-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX10-CU-NEXT:   S_ENDPGM 0
  ;
  ; SKIP-CACHE-INV-LABEL: name: global_volatile_workgroup_acquire_load
  ; SKIP-CACHE-INV: bb.0.entry:
  ; SKIP-CACHE-INV-NEXT:   liveins: $sgpr0_sgpr1
  ; SKIP-CACHE-INV-NEXT: {{  $}}
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr7 = S_MOV_B32 61440
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr6 = S_MOV_B32 -1
  ; SKIP-CACHE-INV-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr0
  ; SKIP-CACHE-INV-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr1
  ; SKIP-CACHE-INV-NEXT:   renamable $vgpr0 = BUFFER_LOAD_DWORD_OFFSET renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   $sgpr4 = S_MOV_B32 killed $sgpr2
  ; SKIP-CACHE-INV-NEXT:   $sgpr5 = S_MOV_B32 killed $sgpr3
  ; SKIP-CACHE-INV-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr4_sgpr5_sgpr6_sgpr7, 0, 0, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-WGP-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX11-WGP: bb.0.entry:
  ; GFX11-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-WGP-NEXT: {{  $}}
  ; GFX11-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX11-WGP-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 1, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX11-WGP-NEXT:   S_WAITCNT_soft 1015
  ; GFX11-WGP-NEXT:   BUFFER_GL0_INV implicit $exec
  ; GFX11-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX11-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-CU-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX11-CU: bb.0.entry:
  ; GFX11-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-CU-NEXT: {{  $}}
  ; GFX11-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX11-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX11-CU-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 0, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX11-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX11-CU-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-WGP-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX12-WGP: bb.0.entry:
  ; GFX12-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-WGP-NEXT: {{  $}}
  ; GFX12-WGP-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX12-WGP-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 1, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX12-WGP-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-WGP-NEXT:   GLOBAL_INV 8, implicit $exec
  ; GFX12-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-CU-LABEL: name: global_volatile_workgroup_acquire_load
  ; GFX12-CU: bb.0.entry:
  ; GFX12-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-CU-NEXT: {{  $}}
  ; GFX12-CU-NEXT:   renamable $sgpr0_sgpr1_sgpr2_sgpr3 = S_LOAD_DWORDX4_IMM killed renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s128) from %ir.in.kernarg.offset1, addrspace 4)
  ; GFX12-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX12-CU-NEXT:   renamable $vgpr1 = GLOBAL_LOAD_DWORD_SADDR killed renamable $sgpr0_sgpr1, renamable $vgpr0, 0, 0, implicit $exec :: (volatile "amdgpu-noclobber" load syncscope("workgroup") acquire (s32) from %ir.1, addrspace 1)
  ; GFX12-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr2_sgpr3, 0, 0, implicit $exec :: (store (s32) into %ir.2, addrspace 1)
  ; GFX12-CU-NEXT:   S_ENDPGM 0
    ptr addrspace(1) %in, ptr addrspace(1) %out) {
entry:
  %val = load atomic volatile i32, ptr addrspace(1) %in syncscope("workgroup") acquire, align 4
  store i32 %val, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @global_volatile_workgroup_release_store(
  ; GFX6-LABEL: name: global_volatile_workgroup_release_store
  ; GFX6: bb.0.entry:
  ; GFX6-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX6-NEXT: {{  $}}
  ; GFX6-NEXT:   renamable $sgpr4 = S_LOAD_DWORD_IMM renamable $sgpr0_sgpr1, 9, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset, addrspace 4)
  ; GFX6-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr0_sgpr1, 11, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, align 4, addrspace 4)
  ; GFX6-NEXT:   renamable $sgpr3 = S_MOV_B32 61440
  ; GFX6-NEXT:   renamable $sgpr2 = S_MOV_B32 -1
  ; GFX6-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr4, implicit $exec, implicit $exec
  ; GFX6-NEXT:   S_WAITCNT_soft 127
  ; GFX6-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX6-NEXT:   S_ENDPGM 0
  ;
  ; GFX7-LABEL: name: global_volatile_workgroup_release_store
  ; GFX7: bb.0.entry:
  ; GFX7-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX7-NEXT: {{  $}}
  ; GFX7-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM renamable $sgpr4_sgpr5, 2, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; GFX7-NEXT:   renamable $sgpr2 = S_LOAD_DWORD_IMM killed renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; GFX7-NEXT:   $vgpr0 = V_MOV_B32_e32 $sgpr0, implicit $exec, implicit-def $vgpr0_vgpr1, implicit $sgpr0_sgpr1
  ; GFX7-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr1, implicit $exec, implicit $sgpr0_sgpr1, implicit $exec
  ; GFX7-NEXT:   $vgpr2 = V_MOV_B32_e32 killed $sgpr2, implicit $exec, implicit $exec
  ; GFX7-NEXT:   S_WAITCNT_soft 127
  ; GFX7-NEXT:   FLAT_STORE_DWORD killed renamable $vgpr0_vgpr1, killed renamable $vgpr2, 0, 0, implicit $exec, implicit $flat_scr :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX7-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-WGP-LABEL: name: global_volatile_workgroup_release_store
  ; GFX10-WGP: bb.0.entry:
  ; GFX10-WGP-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-WGP-NEXT: {{  $}}
  ; GFX10-WGP-NEXT:   renamable $sgpr2 = S_LOAD_DWORD_IMM renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; GFX10-WGP-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr4_sgpr5, 8, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; GFX10-WGP-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-WGP-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr2, implicit $exec, implicit $exec
  ; GFX10-WGP-NEXT:   S_WAITCNT_soft 112
  ; GFX10-WGP-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX10-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr0_sgpr1, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX10-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX10-CU-LABEL: name: global_volatile_workgroup_release_store
  ; GFX10-CU: bb.0.entry:
  ; GFX10-CU-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX10-CU-NEXT: {{  $}}
  ; GFX10-CU-NEXT:   renamable $sgpr2 = S_LOAD_DWORD_IMM renamable $sgpr4_sgpr5, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; GFX10-CU-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr4_sgpr5, 8, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; GFX10-CU-NEXT:   renamable $vgpr0 = V_MOV_B32_e32 0, implicit $exec
  ; GFX10-CU-NEXT:   $vgpr1 = V_MOV_B32_e32 killed $sgpr2, implicit $exec, implicit $exec
  ; GFX10-CU-NEXT:   S_WAITCNT_soft 49279
  ; GFX10-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr0_sgpr1, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX10-CU-NEXT:   S_ENDPGM 0
  ;
  ; SKIP-CACHE-INV-LABEL: name: global_volatile_workgroup_release_store
  ; SKIP-CACHE-INV: bb.0.entry:
  ; SKIP-CACHE-INV-NEXT:   liveins: $sgpr0_sgpr1
  ; SKIP-CACHE-INV-NEXT: {{  $}}
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr4 = S_LOAD_DWORD_IMM renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr0_sgpr1, 2, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr3 = S_MOV_B32 61440
  ; SKIP-CACHE-INV-NEXT:   renamable $sgpr2 = S_MOV_B32 -1
  ; SKIP-CACHE-INV-NEXT:   $vgpr0 = V_MOV_B32_e32 killed $sgpr4, implicit $exec, implicit $exec
  ; SKIP-CACHE-INV-NEXT:   S_WAITCNT_soft 127
  ; SKIP-CACHE-INV-NEXT:   BUFFER_STORE_DWORD_OFFSET killed renamable $vgpr0, killed renamable $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; SKIP-CACHE-INV-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-WGP-LABEL: name: global_volatile_workgroup_release_store
  ; GFX11-WGP: bb.0.entry:
  ; GFX11-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-WGP-NEXT: {{  $}}
  ; GFX11-WGP-NEXT:   renamable $sgpr2 = S_LOAD_DWORD_IMM renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; GFX11-WGP-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr0_sgpr1, 8, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; GFX11-WGP-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx11 0, killed $sgpr2, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-WGP-NEXT:   S_WAITCNT_soft 7
  ; GFX11-WGP-NEXT:   S_WAITCNT_VSCNT_soft undef $sgpr_null, 0
  ; GFX11-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr0_sgpr1, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX11-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX11-CU-LABEL: name: global_volatile_workgroup_release_store
  ; GFX11-CU: bb.0.entry:
  ; GFX11-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX11-CU-NEXT: {{  $}}
  ; GFX11-CU-NEXT:   renamable $sgpr2 = S_LOAD_DWORD_IMM renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; GFX11-CU-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr0_sgpr1, 8, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; GFX11-CU-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx11 0, killed $sgpr2, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX11-CU-NEXT:   S_WAITCNT_soft 64519
  ; GFX11-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr0_sgpr1, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX11-CU-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-WGP-LABEL: name: global_volatile_workgroup_release_store
  ; GFX12-WGP: bb.0.entry:
  ; GFX12-WGP-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-WGP-NEXT: {{  $}}
  ; GFX12-WGP-NEXT:   renamable $sgpr2 = S_LOAD_DWORD_IMM renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; GFX12-WGP-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr0_sgpr1, 8, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; GFX12-WGP-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx12 0, killed $sgpr2, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-WGP-NEXT:   S_WAIT_BVHCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_SAMPLECNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_LOADCNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_STORECNT_soft 0
  ; GFX12-WGP-NEXT:   S_WAIT_DSCNT_soft 0
  ; GFX12-WGP-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr0_sgpr1, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX12-WGP-NEXT:   S_ENDPGM 0
  ;
  ; GFX12-CU-LABEL: name: global_volatile_workgroup_release_store
  ; GFX12-CU: bb.0.entry:
  ; GFX12-CU-NEXT:   liveins: $sgpr0_sgpr1
  ; GFX12-CU-NEXT: {{  $}}
  ; GFX12-CU-NEXT:   renamable $sgpr2 = S_LOAD_DWORD_IMM renamable $sgpr0_sgpr1, 0, 0 :: (dereferenceable invariant load (s32) from %ir.in.kernarg.offset1, align 16, addrspace 4)
  ; GFX12-CU-NEXT:   renamable $sgpr0_sgpr1 = S_LOAD_DWORDX2_IMM killed renamable $sgpr0_sgpr1, 8, 0 :: (dereferenceable invariant load (s64) from %ir.out.kernarg.offset, addrspace 4)
  ; GFX12-CU-NEXT:   renamable $vgpr0, $vgpr1 = V_DUAL_MOV_B32_e32_X_MOV_B32_e32_gfx12 0, killed $sgpr2, implicit $exec, implicit $exec, implicit $exec, implicit $exec
  ; GFX12-CU-NEXT:   S_WAIT_DSCNT_soft 0
  ; GFX12-CU-NEXT:   GLOBAL_STORE_DWORD_SADDR killed renamable $vgpr0, killed renamable $vgpr1, killed renamable $sgpr0_sgpr1, 0, 0, implicit $exec :: (volatile store syncscope("workgroup") release (s32) into %ir.out.load, addrspace 1)
  ; GFX12-CU-NEXT:   S_ENDPGM 0
   i32 %in, ptr addrspace(1) %out) {
entry:
  store atomic volatile i32 %in, ptr addrspace(1) %out syncscope("workgroup") release, align 4
  ret void
}

declare i32 @llvm.amdgcn.workitem.id.x()
