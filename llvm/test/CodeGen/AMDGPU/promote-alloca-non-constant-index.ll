; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=amdgcn-unknown-amdhsa -passes=amdgpu-promote-alloca < %s | FileCheck %s

; Check that promoting an alloca to a vector form works correctly when a variable
; vector index is used.

define amdgpu_kernel void @non_constant_index(i32 %0) {
; CHECK-LABEL: define amdgpu_kernel void @non_constant_index(
; CHECK-SAME: i32 [[TMP0:%.*]]) {
; CHECK-NEXT:    br label [[TMP2:%.*]]
; CHECK:       2:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       3:
; CHECK-NEXT:    br label [[TMP4:%.*]]
; CHECK:       4:
; CHECK-NEXT:    [[PROMOTEALLOCA:%.*]] = phi <2 x float> [ [[TMP7:%.*]], [[TMP4]] ], [ undef, [[TMP3:%.*]] ]
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x float> [[PROMOTEALLOCA]], float 0.000000e+00, i32 [[TMP0]]
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP7]] = insertelement <2 x float> [[TMP5]], float 0.000000e+00, i32 [[TMP6]]
; CHECK-NEXT:    br label [[TMP4]]
;
  %2 = alloca [2 x float], align 4, addrspace(5)
  br label %3

3:
  br label %3

4:
  br label %5

5:
  %6 = getelementptr float, ptr addrspace(5) %2, i32 %0
  store <2 x float> zeroinitializer, ptr addrspace(5) %6, align 8
  br label %5
}
