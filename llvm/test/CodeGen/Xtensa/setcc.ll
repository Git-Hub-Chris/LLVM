; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=xtensa-unkonwn-elf -O0 | FileCheck %s

define i32 @f1(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f1:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    beq a2, a3, .LBB0_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp eq i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f2(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f2:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    blt a2, a3, .LBB1_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp slt i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f3(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f3:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    bge a3, a2, .LBB2_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp sle i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f4(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f4:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    blt a3, a2, .LBB3_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB3_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp sgt i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f5(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f5:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    bge a2, a3, .LBB4_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB4_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp sge i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f6(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f6:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    bne a2, a3, .LBB5_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB5_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp ne i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f7(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f7:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    bltu a2, a3, .LBB6_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB6_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp ult i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f8(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f8:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    bgeu a3, a2, .LBB7_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB7_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp ule i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f9(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f9:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    bltu a3, a2, .LBB8_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB8_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp ugt i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}

define i32 @f10(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: f10:
; CHECK:         addi a8, a1, -16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    movi a8, 0
; CHECK-NEXT:    s32i a8, a1, 0 # 4-byte Folded Spill
; CHECK-NEXT:    movi a8, 1
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:    bgeu a2, a3, .LBB9_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    l32i a8, a1, 0 # 4-byte Folded Reload
; CHECK-NEXT:    s32i a8, a1, 4 # 4-byte Folded Spill
; CHECK-NEXT:  .LBB9_2:
; CHECK-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; CHECK-NEXT:    addi a8, a1, 16
; CHECK-NEXT:    or a1, a8, a8
; CHECK-NEXT:    ret

  %cond = icmp uge i32 %a, %b
  %res = zext i1 %cond to i32
  ret i32 %res
}
