; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc  -verify-machineinstrs -mcpu=pwr7 -ppc-asm-full-reg-names \
; RUN:      -mtriple powerpc64-ibm-aix-xcoff < %s \
; RUN:      | FileCheck %s --check-prefix=SMALL-LOCAL-DYNAMIC-SMALLCM64
; RUN: llc  -verify-machineinstrs -mcpu=pwr7 -ppc-asm-full-reg-names \
; RUN:      -mtriple powerpc64-ibm-aix-xcoff --code-model=large \
; RUN:      < %s | FileCheck %s \
; RUN:      --check-prefix=SMALL-LOCAL-DYNAMIC-LARGECM64

declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull) #1
@TLVIntInit = local_unnamed_addr global i32 87, align 4

@TLVChar = thread_local(localdynamic) global i8 1, align 1
@TLVShort = thread_local(localdynamic) global i8 1, align 2
@TLVInt = thread_local(localdynamic) global i32 1, align 4
@InternalTLVInt = internal thread_local(localdynamic) global i32 1, align 4
@TLVLong = thread_local(localdynamic) global i64 1, align 8
@InternalTLVLong = internal thread_local(localdynamic) global i64 1, align 8
@TLVFloat = thread_local(localdynamic) global float 1.000000e+00, align 4
@InternalTLVDouble = internal thread_local(localdynamic) global double 1.000000e+00, align 8

%struct.anon = type { i32 }
@ThreadLocalStruct = thread_local(localdynamic) global %struct.anon zeroinitializer, align 1
@a = thread_local(localdynamic) global [87 x i32] zeroinitializer, align 4

define nonnull ptr @AddrTest1() local_unnamed_addr #0 {
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @a)
  %arrayidx = getelementptr inbounds [87 x i32], ptr %0, i64 0, i64 3
  ret ptr %arrayidx
}

define signext i32 @testUnaligned() {
entry:
  %0 = call align 1 ptr @llvm.threadlocal.address.p0(ptr align 1 @ThreadLocalStruct)
  %x = getelementptr inbounds %struct.anon, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %x, align 1
  ret i32 %1
}

define void @testChar(i8 noundef signext %x) {
entry:
  %0 = tail call align 1 ptr @llvm.threadlocal.address.p0(ptr align 1 @TLVChar)
  store i8 %x, ptr %0, align 1
  ret void
}

define void @testShort(i16 noundef signext %x) {
entry:
  %0 = tail call align 2 ptr @llvm.threadlocal.address.p0(ptr align 2 @TLVShort)
  store i16 %x, ptr %0, align 2
  ret void
}

define signext i32 @testInt1() {
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @TLVInt)
  %1 = load i32, ptr %0, align 4
  ret i32 %1
}

define signext i32 @testInt2() {
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @InternalTLVInt)
  %1 = load i32, ptr %0, align 4
  %2 = load i32, ptr @TLVIntInit, align 4
  %add = add nsw i32 %2, %1
  ret i32 %add
}

define signext i64 @testLong1() {
entry:
  %0 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @TLVLong)
  %1 = load i64, ptr %0, align 4
  ret i64 %1
}

define void @testLong2(i64 noundef signext %x) {
entry:
  %0 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @InternalTLVLong)
  %1 = load i64, ptr %0, align 8
  %add = add nsw i64 %1, 9
  store i64 %add, ptr %0, align 8
  ret void
}

define i32 @testLong3() {
entry:
  %0 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @TLVLong)
  %1 = load i64, ptr %0, align 8
  %conv = trunc i64 %1 to i32
  ret i32 %conv
}

define void @testFloat1(float noundef %x) {
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @TLVFloat)
  %1 = load float, ptr %0, align 4
  %inc = fadd float %1, 1.000000e+00
  %add = fadd float %inc, 8.000000e+00
  store float %add, ptr %0, align 4
  ret void
}

define i32 @testFloat2() {
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @TLVFloat)
  %1 = load float, ptr %0, align 4
  %conv = fptosi float %1 to i32
  ret i32 %conv
}

define void @testDouble1(double noundef %x) {
entry:
  %0 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @InternalTLVDouble)
  store double %x, ptr %0, align 8
  ret void
}

define i32 @testDouble2() {
entry:
  %0 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @InternalTLVDouble)
  %1 = load double, ptr %0, align 8
  %conv = fptosi double %1 to i32
  ret i32 %conv
}
