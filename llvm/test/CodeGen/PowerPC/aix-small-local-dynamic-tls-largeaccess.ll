; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc  -verify-machineinstrs -mcpu=pwr7 -ppc-asm-full-reg-names \
; RUN:      -mtriple powerpc64-ibm-aix-xcoff < %s \
; RUN:      | FileCheck %s --check-prefix=SMALL-LOCAL-DYNAMIC-SMALLCM64
; RUN: llc  -verify-machineinstrs -mcpu=pwr7 -ppc-asm-full-reg-names \
; RUN:      -mtriple powerpc64-ibm-aix-xcoff --code-model=large \
; RUN:      < %s | FileCheck %s \
; RUN:      --check-prefix=SMALL-LOCAL-DYNAMIC-LARGECM64

; Test disassembly of object.
; RUN: llc -verify-machineinstrs -mcpu=pwr7 \
; RUN:      -mtriple powerpc64-ibm-aix-xcoff -xcoff-traceback-table=false \
; RUN:      --code-model=large -filetype=obj -o %t.o < %s
; RUN: llvm-objdump -D -r --symbol-description %t.o | FileCheck -D#NFA=2 --check-prefix=DIS %s

@ElementIntTLSv1 = thread_local(localdynamic) global [8187 x i32] zeroinitializer, align 4  ; Within 32K
@ElementIntTLS2 = thread_local(localdynamic) global [4000 x i32] zeroinitializer, align 4
@ElementIntTLS3 = thread_local(localdynamic) global [4000 x i32] zeroinitializer, align 4
@ElementIntTLS4 = thread_local(localdynamic) global [4000 x i32] zeroinitializer, align 4
@ElementIntTLS5 = thread_local(localdynamic) global [4000 x i32] zeroinitializer, align 4
@ElementIntTLSv2 = thread_local(localdynamic) global [9000 x i32] zeroinitializer, align 4  ; Beyond 32K

@ElementLongTLS6 = external thread_local(localdynamic) global [60 x i64], align 8
@ElementLongTLS2 = thread_local(localdynamic) global [3000 x i64] zeroinitializer, align 8  ; Within 32K
@MyTLSGDVar = thread_local global [800 x i64] zeroinitializer, align 8
@ElementLongTLS3 = thread_local(localdynamic) global [3000 x i64] zeroinitializer, align 8
@ElementLongTLS4 = thread_local(localdynamic) global [3000 x i64] zeroinitializer, align 8
@ElementLongTLS5 = thread_local(localdynamic) global [3000 x i64] zeroinitializer, align 8
@ElementLongTLS = thread_local(localdynamic) local_unnamed_addr global [7800 x i64] zeroinitializer, align 8  ; Beyond 32K

declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull) #1

; All accesses use a "faster" local-dynamic sequence directly off the thread pointer.
define signext i32 @test1() {
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLSv1)
  store i32 1, ptr %0, align 4
  %arrayidx1 = getelementptr inbounds [8187 x i32], ptr %0, i64 0, i64 6
  store i32 4, ptr %arrayidx1, align 4
  %1 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS2)
  %arrayidx2 = getelementptr inbounds [4000 x i32], ptr %1, i64 0, i64 80
  store i32 2, ptr %arrayidx2, align 4
  %2 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS3)
  %arrayidx3 = getelementptr inbounds [4000 x i32], ptr %2, i64 0, i64 81
  store i32 3, ptr %arrayidx3, align 4
  %3 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS4)
  %arrayidx4 = getelementptr inbounds [4000 x i32], ptr %3, i64 0, i64 82
  store i32 4, ptr %arrayidx4, align 4
  %4 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS5)
  %arrayidx5 = getelementptr inbounds [4000 x i32], ptr %4, i64 0, i64 83
  store i32 88, ptr %arrayidx5, align 4
  %5 = load i32, ptr %0, align 4
  %6 = load i32, ptr %arrayidx1, align 4
  %7 = load i32, ptr %arrayidx2, align 4
  %8 = load i32, ptr %arrayidx3, align 4
  %9 = load i32, ptr %arrayidx4, align 4
  %add = add i32 %5, 88
  %add9 = add i32 %add, %6
  %add11 = add i32 %add9, %7
  %add13 = add i32 %add11, %8
  %add15 = add i32 %add13, %9
  ret i32 %add15
}

; Example of one access using the regular local-dynamic access from the TOC.
define signext i32 @test2() {
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLSv2)
  store i32 1, ptr %0, align 4
  %arrayidx1 = getelementptr inbounds [9000 x i32], ptr %0, i64 0, i64 6
  store i32 4, ptr %arrayidx1, align 4
  %1 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS2)
  %arrayidx2 = getelementptr inbounds [4000 x i32], ptr %1, i64 0, i64 80
  store i32 2, ptr %arrayidx2, align 4
  %2 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS3)
  %arrayidx3 = getelementptr inbounds [4000 x i32], ptr %2, i64 0, i64 81
  store i32 3, ptr %arrayidx3, align 4
  %3 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS4)
  %arrayidx4 = getelementptr inbounds [4000 x i32], ptr %3, i64 0, i64 82
  store i32 4, ptr %arrayidx4, align 4
  %4 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @ElementIntTLS5)
  %arrayidx5 = getelementptr inbounds [4000 x i32], ptr %4, i64 0, i64 83
  store i32 88, ptr %arrayidx5, align 4
  %5 = load i32, ptr %0, align 4
  %6 = load i32, ptr %arrayidx1, align 4
  %7 = load i32, ptr %arrayidx2, align 4
  %8 = load i32, ptr %arrayidx3, align 4
  %9 = load i32, ptr %arrayidx4, align 4
  %add = add i32 %5, 88
  %add9 = add i32 %add, %6
  %add11 = add i32 %add9, %7
  %add13 = add i32 %add11, %8
  %add15 = add i32 %add13, %9
  ret i32 %add15
}

; All accesses use a "faster" local-dynamic sequence directly off the thread pointer.
define i64 @test3() {
entry:
  %0 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @ElementLongTLS6)
  %arrayidx = getelementptr inbounds [60 x i64], ptr %0, i64 0, i64 53
  store i64 212, ptr %arrayidx, align 8
  %1 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @ElementLongTLS2)
  %arrayidx1 = getelementptr inbounds [3000 x i64], ptr %1, i64 0, i64 150
  store i64 203, ptr %arrayidx1, align 8
  %2 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @MyTLSGDVar)
  %arrayidx2 = getelementptr inbounds [800 x i64], ptr %2, i64 0, i64 55
  store i64 44, ptr %arrayidx2, align 8
  %3 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @ElementLongTLS3)
  %arrayidx3 = getelementptr inbounds [3000 x i64], ptr %3, i64 0, i64 250
  store i64 6, ptr %arrayidx3, align 8
  %4 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @ElementLongTLS4)
  %arrayidx4 = getelementptr inbounds [3000 x i64], ptr %4, i64 0, i64 850
  store i64 100, ptr %arrayidx4, align 8
  %5 = tail call align 8 ptr @llvm.threadlocal.address.p0(ptr align 8 @ElementLongTLS5)
  %arrayidx5 = getelementptr inbounds [3000 x i64], ptr %5, i64 0, i64 1050
  store i64 882, ptr %arrayidx5, align 8
  %6 = load i64, ptr %arrayidx1, align 8
  %7 = load i64, ptr %arrayidx3, align 8
  %8 = load i64, ptr %arrayidx4, align 8
  %add = add i64 %6, 882
  %add9 = add i64 %add, %7
  %add11 = add i64 %add9, %8
  ret i64 %add11
}

; DIS:      file format aix5coff64-rs6000
; DIS:      Disassembly of section .text:
; DIS:      0000000000000000 (idx: [[#NFA+5]]) .StoreArrays1:
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                mflr 0
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stdu 1, -48(1)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 3, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+15]]) _$TLSML[TC]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 6, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+17]]) ElementIntTLSv1[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                std 0, 64(1)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 7, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+19]]) ElementIntTLS3[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 3, 0(3)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+15]]) _$TLSML[TC]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 8, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+21]]) ElementIntTLS4[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 9, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+23]]) ElementIntTLS5[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 7, 16(7)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+19]]) ElementIntTLS3[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 8, 24(8)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+21]]) ElementIntTLS4[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 9, 32(9)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+23]]) ElementIntTLS5[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                bla 0x0
; DIS-NEXT: {{0*}}[[#ADDR]]: R_RBA              (idx: [[#NFA+1]]) .__tls_get_mod[PR]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 5, 8(6)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+17]]) ElementIntTLSv1[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 6, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+25]]) ElementIntTLS2[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 4, 1
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 6, 40(6)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+25]]) ElementIntTLS2[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 7, 3, 7
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 8, 3, 8
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 9, 3, 9
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 6, 3, 6
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stwux 4, 3, 5
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 4, 4
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 4, 24(3)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 2
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 3, 320(6)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 3
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 3, 324(7)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 88
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 4, 328(8)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 3, 332(9)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 102
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addi 1, 1, 48
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 0, 16(1)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                mtlr 0
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                blr

; DIS:      0000000000000090 (idx: [[#NFA+7]]) .StoreArrays2:
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                mflr 0
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stdu 1, -48(1)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 3, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+15]]) _$TLSML[TC]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 6, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+27]]) ElementIntTLSv2[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                std 0, 64(1)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 7, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+19]]) ElementIntTLS3[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 3, 0(3)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+15]]) _$TLSML[TC]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 8, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+21]]) ElementIntTLS4[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 9, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU         (idx: [[#NFA+23]]) ElementIntTLS5[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 7, 16(7)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+19]]) ElementIntTLS3[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 8, 24(8)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+21]]) ElementIntTLS4[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 9, 32(9)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+23]]) ElementIntTLS5[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                bla 0x0
; DIS-NEXT: {{0*}}[[#ADDR]]: R_RBA              (idx: [[#NFA+1]]) .__tls_get_mod[PR]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 5, 48(6)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+27]]) ElementIntTLSv2[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addis 6, 2, 0
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCU	        (idx: [[#NFA+25]]) ElementIntTLS2[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 4, 1
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 6, 40(6)
; DIS-NEXT: {{0*}}[[#ADDR + 2]]: R_TOCL	        (idx: [[#NFA+25]]) ElementIntTLS2[TE]
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 7, 3, 7
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 8, 3, 8
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 9, 3, 9
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                add 6, 3, 6
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stwux 4, 3, 5
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 4, 4
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 4, 24(3)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 2
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 3, 320(6)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 3
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 3, 324(7)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 88
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 4, 328(8)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                stw 3, 332(9)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                li 3, 102
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                addi 1, 1, 48
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                ld 0, 16(1)
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                mtlr 0
; DIS-NEXT: [[#%x, ADDR:]]: {{.*}}                blr


; DIS:      Disassembly of section .data:
; DIS:      0000000000000120 (idx: [[#NFA+9]]) StoreArrays1[DS]:
; DIS-NEXT:      120: 00 00 00 00
; DIS-NEXT: 0000000000000120:  R_POS	(idx: [[#NFA+5]]) .StoreArrays1
; DIS-NEXT:      124: 00 00 00 00
; DIS-NEXT:      128: 00 00 00 00
; DIS-NEXT: 0000000000000128:  R_POS        (idx: [[#NFA+13]]) TOC[TC0]
; DIS-NEXT:      12c: 00 00 01 50

; DIS:      0000000000000138 (idx: [[#NFA+11]]) StoreArrays2[DS]:
; DIS-NEXT:      138: 00 00 00 00
; DIS-NEXT: 0000000000000138:  R_POS	(idx: [[#NFA+7]]) .StoreArrays2
; DIS-NEXT:      13c: 00 00 00 90
; DIS-NEXT:      140: 00 00 00 00
; DIS-NEXT: 0000000000000140:  R_POS        (idx: [[#NFA+13]]) TOC[TC0]
; DIS-NEXT:      144: 00 00 01 50

; DIS:      0000000000000180 (idx: [[#NFA+27]]) ElementIntTLSv2[TE]:
; DIS-NEXT:      180: 00 00 00 00
; DIS-NEXT: 0000000000000180:  R_TLS_LD     (idx: [[#NFA+39]]) ElementIntTLSv2[TL]
; DIS-NEXT:      184: 00 01 79 ec

; DIS:      Disassembly of section .tdata:
; DIS:      0000000000000000 (idx: [[#NFA+29]]) ElementIntTLSv1[TL]:
; DIS:      0000000000007fec (idx: [[#NFA+31]]) ElementIntTLS2[TL]:
; DIS:      000000000000be6c (idx: [[#NFA+33]]) ElementIntTLS3[TL]:
; DIS:      000000000000fcec (idx: [[#NFA+35]]) ElementIntTLS4[TL]:
; DIS:      0000000000013b6c (idx: [[#NFA+37]]) ElementIntTLS5[TL]:
; DIS:      00000000000179ec (idx: [[#NFA+39]]) ElementIntTLSv2[TL]:
