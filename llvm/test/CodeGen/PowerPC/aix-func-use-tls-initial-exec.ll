; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc64-ibm-aix-xcoff \
; RUN:     --code-model=small -mattr=+aix-func-use-tls-initial-exec < %s | FileCheck %s --check-prefixes=SMALL64
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc64-ibm-aix-xcoff \
; RUN:     --code-model=large -mattr=+aix-func-use-tls-initial-exec < %s | FileCheck %s --check-prefixes=LARGE64
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc-ibm-aix-xcoff \
; RUN:     --code-model=small -mattr=+aix-func-use-tls-initial-exec < %s | FileCheck %s --check-prefixes=SMALL32
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc-ibm-aix-xcoff \
; RUN:     --code-model=large -mattr=+aix-func-use-tls-initial-exec < %s | FileCheck %s --check-prefixes=LARGE32

@TIInit = internal thread_local(localdynamic) global i32 42, align 4
@TIUninit = internal thread_local(localdynamic) global i32 0, align 4

define i32 @loadTIInit() {
; SMALL64-LABEL: loadTIInit:
; SMALL64:       # %bb.0: # %entry
; SMALL64-NEXT:    ld 3, L..C0(2) # target-flags(ppc-tprel) @TIInit
; SMALL64-NEXT:    lwzx 3, 13, 3
; SMALL64-NEXT:    blr
;
; LARGE64-LABEL: loadTIInit:
; LARGE64:       # %bb.0: # %entry
; LARGE64-NEXT:    addis 3, L..C0@u(2)
; LARGE64-NEXT:    ld 3, L..C0@l(3)
; LARGE64-NEXT:    lwzx 3, 13, 3
; LARGE64-NEXT:    blr
;
; SMALL32-LABEL: loadTIInit:
; SMALL32:       # %bb.0: # %entry
; SMALL32-NEXT:    mflr 0
; SMALL32-NEXT:    stwu 1, -32(1)
; SMALL32-NEXT:    lwz 4, L..C0(2) # target-flags(ppc-tprel) @TIInit
; SMALL32-NEXT:    stw 0, 40(1)
; SMALL32-NEXT:    bla .__get_tpointer[PR]
; SMALL32-NEXT:    lwzx 3, 3, 4
; SMALL32-NEXT:    addi 1, 1, 32
; SMALL32-NEXT:    lwz 0, 8(1)
; SMALL32-NEXT:    mtlr 0
; SMALL32-NEXT:    blr
;
; LARGE32-LABEL: loadTIInit:
; LARGE32:       # %bb.0: # %entry
; LARGE32-NEXT:    mflr 0
; LARGE32-NEXT:    stwu 1, -32(1)
; LARGE32-NEXT:    stw 0, 40(1)
; LARGE32-NEXT:    addis 3, L..C0@u(2)
; LARGE32-NEXT:    lwz 4, L..C0@l(3)
; LARGE32-NEXT:    bla .__get_tpointer[PR]
; LARGE32-NEXT:    lwzx 3, 3, 4
; LARGE32-NEXT:    addi 1, 1, 32
; LARGE32-NEXT:    lwz 0, 8(1)
; LARGE32-NEXT:    mtlr 0
; LARGE32-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @TIInit)
  %1 = load i32, ptr %0, align 4
  ret i32 %1
}

define void @storeTIInit(i32 noundef signext %i) {
; SMALL64-LABEL: storeTIInit:
; SMALL64:       # %bb.0: # %entry
; SMALL64-NEXT:    ld 4, L..C0(2) # target-flags(ppc-tprel) @TIInit
; SMALL64-NEXT:    stwx 3, 13, 4
; SMALL64-NEXT:    blr
;
; LARGE64-LABEL: storeTIInit:
; LARGE64:       # %bb.0: # %entry
; LARGE64-NEXT:    addis 4, L..C0@u(2)
; LARGE64-NEXT:    ld 4, L..C0@l(4)
; LARGE64-NEXT:    stwx 3, 13, 4
; LARGE64-NEXT:    blr
;
; SMALL32-LABEL: storeTIInit:
; SMALL32:       # %bb.0: # %entry
; SMALL32-NEXT:    mflr 0
; SMALL32-NEXT:    stwu 1, -32(1)
; SMALL32-NEXT:    lwz 5, L..C0(2) # target-flags(ppc-tprel) @TIInit
; SMALL32-NEXT:    mr 4, 3
; SMALL32-NEXT:    bla .__get_tpointer[PR]
; SMALL32-NEXT:    stw 0, 40(1)
; SMALL32-NEXT:    stwx 4, 3, 5
; SMALL32-NEXT:    addi 1, 1, 32
; SMALL32-NEXT:    lwz 0, 8(1)
; SMALL32-NEXT:    mtlr 0
; SMALL32-NEXT:    blr
;
; LARGE32-LABEL: storeTIInit:
; LARGE32:       # %bb.0: # %entry
; LARGE32-NEXT:    mflr 0
; LARGE32-NEXT:    stwu 1, -32(1)
; LARGE32-NEXT:    stw 0, 40(1)
; LARGE32-NEXT:    mr 4, 3
; LARGE32-NEXT:    addis 3, L..C0@u(2)
; LARGE32-NEXT:    lwz 5, L..C0@l(3)
; LARGE32-NEXT:    bla .__get_tpointer[PR]
; LARGE32-NEXT:    stwx 4, 3, 5
; LARGE32-NEXT:    addi 1, 1, 32
; LARGE32-NEXT:    lwz 0, 8(1)
; LARGE32-NEXT:    mtlr 0
; LARGE32-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @TIInit)
  store i32 %i, ptr %0, align 4
  ret void
}

define i32 @loadTIUninit() {
; SMALL64-LABEL: loadTIUninit:
; SMALL64:       # %bb.0: # %entry
; SMALL64-NEXT:    ld 3, L..C1(2) # target-flags(ppc-tprel) @TIUninit
; SMALL64-NEXT:    lwzx 3, 13, 3
; SMALL64-NEXT:    blr
;
; LARGE64-LABEL: loadTIUninit:
; LARGE64:       # %bb.0: # %entry
; LARGE64-NEXT:    addis 3, L..C1@u(2)
; LARGE64-NEXT:    ld 3, L..C1@l(3)
; LARGE64-NEXT:    lwzx 3, 13, 3
; LARGE64-NEXT:    blr
;
; SMALL32-LABEL: loadTIUninit:
; SMALL32:       # %bb.0: # %entry
; SMALL32-NEXT:    mflr 0
; SMALL32-NEXT:    stwu 1, -32(1)
; SMALL32-NEXT:    lwz 4, L..C1(2) # target-flags(ppc-tprel) @TIUninit
; SMALL32-NEXT:    stw 0, 40(1)
; SMALL32-NEXT:    bla .__get_tpointer[PR]
; SMALL32-NEXT:    lwzx 3, 3, 4
; SMALL32-NEXT:    addi 1, 1, 32
; SMALL32-NEXT:    lwz 0, 8(1)
; SMALL32-NEXT:    mtlr 0
; SMALL32-NEXT:    blr
;
; LARGE32-LABEL: loadTIUninit:
; LARGE32:       # %bb.0: # %entry
; LARGE32-NEXT:    mflr 0
; LARGE32-NEXT:    stwu 1, -32(1)
; LARGE32-NEXT:    stw 0, 40(1)
; LARGE32-NEXT:    addis 3, L..C1@u(2)
; LARGE32-NEXT:    lwz 4, L..C1@l(3)
; LARGE32-NEXT:    bla .__get_tpointer[PR]
; LARGE32-NEXT:    lwzx 3, 3, 4
; LARGE32-NEXT:    addi 1, 1, 32
; LARGE32-NEXT:    lwz 0, 8(1)
; LARGE32-NEXT:    mtlr 0
; LARGE32-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @TIUninit)
  %1 = load i32, ptr %0, align 4
  ret i32 %1
}

define void @storeTIUninit(i32 noundef signext %i) {
; SMALL64-LABEL: storeTIUninit:
; SMALL64:       # %bb.0: # %entry
; SMALL64-NEXT:    ld 4, L..C1(2) # target-flags(ppc-tprel) @TIUninit
; SMALL64-NEXT:    stwx 3, 13, 4
; SMALL64-NEXT:    blr
;
; LARGE64-LABEL: storeTIUninit:
; LARGE64:       # %bb.0: # %entry
; LARGE64-NEXT:    addis 4, L..C1@u(2)
; LARGE64-NEXT:    ld 4, L..C1@l(4)
; LARGE64-NEXT:    stwx 3, 13, 4
; LARGE64-NEXT:    blr
;
; SMALL32-LABEL: storeTIUninit:
; SMALL32:       # %bb.0: # %entry
; SMALL32-NEXT:    mflr 0
; SMALL32-NEXT:    stwu 1, -32(1)
; SMALL32-NEXT:    lwz 5, L..C1(2) # target-flags(ppc-tprel) @TIUninit
; SMALL32-NEXT:    mr 4, 3
; SMALL32-NEXT:    bla .__get_tpointer[PR]
; SMALL32-NEXT:    stw 0, 40(1)
; SMALL32-NEXT:    stwx 4, 3, 5
; SMALL32-NEXT:    addi 1, 1, 32
; SMALL32-NEXT:    lwz 0, 8(1)
; SMALL32-NEXT:    mtlr 0
; SMALL32-NEXT:    blr
;
; LARGE32-LABEL: storeTIUninit:
; LARGE32:       # %bb.0: # %entry
; LARGE32-NEXT:    mflr 0
; LARGE32-NEXT:    stwu 1, -32(1)
; LARGE32-NEXT:    stw 0, 40(1)
; LARGE32-NEXT:    mr 4, 3
; LARGE32-NEXT:    addis 3, L..C1@u(2)
; LARGE32-NEXT:    lwz 5, L..C1@l(3)
; LARGE32-NEXT:    bla .__get_tpointer[PR]
; LARGE32-NEXT:    stwx 4, 3, 5
; LARGE32-NEXT:    addi 1, 1, 32
; LARGE32-NEXT:    lwz 0, 8(1)
; LARGE32-NEXT:    mtlr 0
; LARGE32-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @TIUninit)
  store i32 %i, ptr %0, align 4
  ret void
}

declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull)

; Lines below check if the symbols have correct suffix for TLS model, not
; generated by test update script, but kept well after updates.

; SMALL64: L..C0:
; SMALL64-NEXT: .tc TIInit[TC],TIInit[TL]@ie
; SMALL64-NEXT: L..C1:
; SMALL64-NEXT: .tc TIUninit[TC],TIUninit[UL]@ie

; LARGE64: L..C0:
; LARGE64-NEXT: .tc TIInit[TE],TIInit[TL]@ie
; LARGE64-NEXT: L..C1:
; LARGE64-NEXT: .tc TIUninit[TE],TIUninit[UL]@ie

; SMALL32: L..C0:
; SMALL32-NEXT: .tc TIInit[TC],TIInit[TL]@ie
; SMALL32-NEXT: L..C1:
; SMALL32-NEXT: .tc TIUninit[TC],TIUninit[UL]@ie

; LARGE32: L..C0:
; LARGE32-NEXT: .tc TIInit[TE],TIInit[TL]@ie
; LARGE32-NEXT: L..C1:
; LARGE32-NEXT: .tc TIUninit[TE],TIUninit[UL]@ie
