; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 --mattr=+d,-frecipe < %s | FileCheck %s --check-prefix=FAULT
; RUN: llc --mtriple=loongarch64 --mattr=+d,+frecipe < %s | FileCheck %s

declare float @llvm.sqrt.f32(float)
declare double @llvm.sqrt.f64(double)

define float @frsqrt_f32(float %a) nounwind {
; FAULT-LABEL: frsqrt_f32:
; FAULT:       # %bb.0:
; FAULT-NEXT:    frsqrt.s $fa0, $fa0
; FAULT-NEXT:    ret
;
; CHECK-LABEL: frsqrt_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    frsqrte.s	$fa1, $fa0
; CHECK-NEXT:    pcalau12i	$a0, %pc_hi20(.LCPI0_0)
; CHECK-NEXT:    fld.s	$fa2, $a0, %pc_lo12(.LCPI0_0)
; CHECK-NEXT:    pcalau12i	$a0, %pc_hi20(.LCPI0_1)
; CHECK-NEXT:    fld.s	$fa3, $a0, %pc_lo12(.LCPI0_1)
; CHECK-NEXT:    fmul.s	$fa1, $fa0, $fa1
; CHECK-NEXT:    fmul.s	$fa0, $fa0, $fa1
; CHECK-NEXT:    fmadd.s	$fa0, $fa0, $fa1, $fa2
; CHECK-NEXT:    fmul.s	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.s	$fa0, $fa1, $fa0
; CHECK-NEXT:    ret

  %1 = call fast float @llvm.sqrt.f32(float %a)
  %2 = fdiv fast float 1.0, %1
  ret float %2
}

define double @frsqrt_f64(double %a) nounwind {
; FAULT-LABEL: frsqrt_f64:
; FAULT:       # %bb.0:
; FAULT-NEXT:    frsqrt.d $fa0, $fa0
; FAULT-NEXT:    ret
;
; CHECK-LABEL: frsqrt_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    frsqrte.d	$fa1, $fa0
; CHECK-NEXT:    pcalau12i	$a0, %pc_hi20(.LCPI1_0)
; CHECK-NEXT:    fld.d	$fa2, $a0, %pc_lo12(.LCPI1_0)
; CHECK-NEXT:    pcalau12i	$a0, %pc_hi20(.LCPI1_1)
; CHECK-NEXT:    fld.d	$fa3, $a0, %pc_lo12(.LCPI1_1)
; CHECK-NEXT:    fmul.d	$fa1, $fa0, $fa1
; CHECK-NEXT:    fmul.d	$fa4, $fa0, $fa1
; CHECK-NEXT:    fmadd.d	$fa4, $fa4, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa4
; CHECK-NEXT:    fmul.d	$fa0, $fa0, $fa1
; CHECK-NEXT:    fmadd.d	$fa0, $fa0, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa0, $fa1, $fa0
; CHECK-NEXT:    ret
  %1 = call fast double @llvm.sqrt.f64(double %a)
  %2 = fdiv fast double 1.0, %1
  ret double %2
}

define double @sqrt_simplify_before_recip_3_uses(double %x, ptr %p1, ptr %p2) nounwind {
; FAULT-LABEL: sqrt_simplify_before_recip_3_uses:
; FAULT:       # %bb.0:
; FAULT-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI2_0)
; FAULT-NEXT:    fld.d	$fa2, $a2, %pc_lo12(.LCPI2_0)
; FAULT-NEXT:    fsqrt.d	$fa1, $fa0
; FAULT-NEXT:    frsqrt.d	$fa0, $fa0
; FAULT-NEXT:    fdiv.d	$fa2, $fa2, $fa1
; FAULT-NEXT:    fst.d	$fa0, $a0, 0
; FAULT-NEXT:    fst.d	$fa2, $a1, 0
; FAULT-NEXT:    fmov.d	$fa0, $fa1
; FAULT-NEXT:    ret
;
; CHECK-LABEL: sqrt_simplify_before_recip_3_uses:
; CHECK:       # %bb.0:
; CHECK-NEXT:    frsqrte.d	$fa1, $fa0
; CHECK-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI2_0)
; CHECK-NEXT:    fld.d	$fa2, $a2, %pc_lo12(.LCPI2_0)
; CHECK-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI2_1)
; CHECK-NEXT:    fld.d	$fa3, $a2, %pc_lo12(.LCPI2_1)
; CHECK-NEXT:    fmul.d	$fa1, $fa0, $fa1
; CHECK-NEXT:    fmul.d	$fa4, $fa0, $fa1
; CHECK-NEXT:    fmadd.d	$fa4, $fa4, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa4
; CHECK-NEXT:    fmul.d	$fa4, $fa0, $fa1
; CHECK-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI2_2)
; CHECK-NEXT:    fld.d	$fa5, $a2, %pc_lo12(.LCPI2_2)
; CHECK-NEXT:    fmadd.d	$fa2, $fa4, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa2, $fa1, $fa5
; CHECK-NEXT:    fmul.d	$fa0, $fa0, $fa1
; CHECK-NEXT:    fst.d	$fa1, $a0, 0
; CHECK-NEXT:    fst.d	$fa2, $a1, 0
; CHECK-NEXT:    ret
  %sqrt = tail call fast double @llvm.sqrt.f64(double %x)
  %rsqrt = fdiv fast double 1.0, %sqrt
  %r = fdiv fast double 42.0, %sqrt
  %sqrt_fast = fdiv fast double %x, %sqrt
  store double %rsqrt, ptr %p1, align 8
  store double %r, ptr %p2, align 8
  ret double %sqrt_fast
}

define double @sqrt_simplify_before_recip_3_uses_order(double %x, ptr %p1, ptr %p2) nounwind {
; FAULT-LABEL: sqrt_simplify_before_recip_3_uses_order:
; FAULT:       # %bb.0:
; FAULT-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI3_0)
; FAULT-NEXT:    fld.d	$fa1, $a2, %pc_lo12(.LCPI3_0)
; FAULT-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI3_1)
; FAULT-NEXT:    fld.d	$fa2, $a2, %pc_lo12(.LCPI3_1)
; FAULT-NEXT:    fsqrt.d	$fa0, $fa0
; FAULT-NEXT:    fdiv.d	$fa1, $fa1, $fa0
; FAULT-NEXT:    fdiv.d	$fa2, $fa2, $fa0
; FAULT-NEXT:    fst.d	$fa1, $a0, 0
; FAULT-NEXT:    fst.d	$fa2, $a1, 0
; FAULT-NEXT:    ret
;
; CHECK-LABEL: sqrt_simplify_before_recip_3_uses_order:
; CHECK:       # %bb.0:
; CHECK-NEXT:    frsqrte.d	$fa1, $fa0
; CHECK-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI3_0)
; CHECK-NEXT:    fld.d	$fa2, $a2, %pc_lo12(.LCPI3_0)
; CHECK-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI3_1)
; CHECK-NEXT:    fld.d	$fa3, $a2, %pc_lo12(.LCPI3_1)
; CHECK-NEXT:    fmul.d	$fa1, $fa0, $fa1
; CHECK-NEXT:    fmul.d	$fa4, $fa0, $fa1
; CHECK-NEXT:    fmadd.d	$fa4, $fa4, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa4
; CHECK-NEXT:    fmul.d	$fa4, $fa0, $fa1
; CHECK-NEXT:    fmadd.d	$fa2, $fa4, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI3_2)
; CHECK-NEXT:    fld.d	$fa3, $a2, %pc_lo12(.LCPI3_2)
; CHECK-NEXT:    pcalau12i	$a2, %pc_hi20(.LCPI3_3)
; CHECK-NEXT:    fld.d	$fa4, $a2, %pc_lo12(.LCPI3_3)
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa0, $fa0, $fa1
; CHECK-NEXT:    fmul.d	$fa2, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa4
; CHECK-NEXT:    fst.d	$fa2, $a0, 0
; CHECK-NEXT:    fst.d	$fa1, $a1, 0
; CHECK-NEXT:    ret
  %sqrt = tail call fast double @llvm.sqrt.f64(double %x)
  %sqrt_fast = fdiv fast double %x, %sqrt
  %r1 = fdiv fast double 42.0, %sqrt
  %r2 = fdiv fast double 43.0, %sqrt
  store double %r1, ptr %p1, align 8
  store double %r2, ptr %p2, align 8
  ret double %sqrt_fast
}


define double @sqrt_simplify_before_recip_4_uses(double %x, ptr %p1, ptr %p2, ptr %p3) nounwind {
; FAULT-LABEL: sqrt_simplify_before_recip_4_uses:
; FAULT:       # %bb.0:
; FAULT-NEXT:    pcalau12i	$a3, %pc_hi20(.LCPI4_0)
; FAULT-NEXT:    fld.d	$fa2, $a3, %pc_lo12(.LCPI4_0)
; FAULT-NEXT:    pcalau12i	$a3, %pc_hi20(.LCPI4_1)
; FAULT-NEXT:    fld.d	$fa3, $a3, %pc_lo12(.LCPI4_1)
; FAULT-NEXT:    fsqrt.d	$fa1, $fa0
; FAULT-NEXT:    frsqrt.d	$fa0, $fa0
; FAULT-NEXT:    fdiv.d	$fa2, $fa2, $fa1
; FAULT-NEXT:    fdiv.d	$fa3, $fa3, $fa1
; FAULT-NEXT:    fst.d	$fa0, $a0, 0
; FAULT-NEXT:    fst.d	$fa2, $a1, 0
; FAULT-NEXT:    fst.d	$fa3, $a2, 0
; FAULT-NEXT:    fmov.d	$fa0, $fa1
; FAULT-NEXT:    ret
;
; CHECK-LABEL: sqrt_simplify_before_recip_4_uses:
; CHECK:       # %bb.0:
; CHECK-NEXT:    frsqrte.d	$fa1, $fa0
; CHECK-NEXT:    pcalau12i	$a3, %pc_hi20(.LCPI4_0)
; CHECK-NEXT:    fld.d	$fa2, $a3, %pc_lo12(.LCPI4_0)
; CHECK-NEXT:    pcalau12i	$a3, %pc_hi20(.LCPI4_1)
; CHECK-NEXT:    fld.d	$fa3, $a3, %pc_lo12(.LCPI4_1)
; CHECK-NEXT:    fmul.d	$fa1, $fa0, $fa1
; CHECK-NEXT:    fmul.d	$fa4, $fa0, $fa1
; CHECK-NEXT:    fmadd.d	$fa4, $fa4, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa4
; CHECK-NEXT:    fmul.d	$fa4, $fa0, $fa1
; CHECK-NEXT:    fmadd.d	$fa2, $fa4, $fa1, $fa2
; CHECK-NEXT:    pcalau12i	$a3, %pc_hi20(.LCPI4_2)
; CHECK-NEXT:    fld.d	$fa4, $a3, %pc_lo12(.LCPI4_2)
; CHECK-NEXT:    pcalau12i	$a3, %pc_hi20(.LCPI4_3)
; CHECK-NEXT:    fld.d	$fa5, $a3, %pc_lo12(.LCPI4_3)
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa3
; CHECK-NEXT:    fmul.d	$fa1, $fa1, $fa2
; CHECK-NEXT:    fmul.d	$fa2, $fa1, $fa4
; CHECK-NEXT:    fmul.d	$fa3, $fa1, $fa5
; CHECK-NEXT:    fmul.d	$fa0, $fa0, $fa1
; CHECK-NEXT:    fst.d	$fa1, $a0, 0
; CHECK-NEXT:    fst.d	$fa2, $a1, 0
; CHECK-NEXT:    fst.d	$fa3, $a2, 0
; CHECK-NEXT:    ret
  %sqrt = tail call fast double @llvm.sqrt.f64(double %x)
  %rsqrt = fdiv fast double 1.0, %sqrt
  %r1 = fdiv fast double 42.0, %sqrt
  %r2 = fdiv fast double 43.0, %sqrt
  %sqrt_fast = fdiv fast double %x, %sqrt
  store double %rsqrt, ptr %p1, align 8
  store double %r1, ptr %p2, align 8
  store double %r2, ptr %p3, align 8
  ret double %sqrt_fast
}
