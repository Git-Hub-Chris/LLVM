; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch32 --mattr=+d,-lam-bh < %s | FileCheck %s --check-prefix=LA32
; RUN: llc --mtriple=loongarch32 --mattr=+d,+lam-bh < %s | FileCheck %s --check-prefix=LA32-LAM-BH
; RUN: llc --mtriple=loongarch64 --mattr=+d,-lam-bh < %s | FileCheck %s --check-prefix=LA64
; RUN: llc --mtriple=loongarch64 --mattr=+d,+lam-bh < %s | FileCheck %s --check-prefix=LA64-LAM-BH


define i8 @atomicrmw_xchg_i8_acquire(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i8_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB0_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i8_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB0_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i8_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB0_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i8_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i8 %b acquire
  ret i8 %1
}

define i8 @atomicrmw_xchg_0_i8_acquire(ptr %a) nounwind {
; LA32-LABEL: atomicrmw_xchg_0_i8_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a1, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a2, $zero, 255
; LA32-NEXT:    sll.w	$a2, $a2, $a1
; LA32-NEXT:    nor	$a2, $a2, $zero
; LA32-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a3, $a0, 0
; LA32-NEXT:    and	$a4, $a3, $a2
; LA32-NEXT:    sc.w	$a4, $a0, 0
; LA32-NEXT:    beqz	$a4, .LBB1_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a3, $a1
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_0_i8_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a1, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a2, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a2, $a2, $a1
; LA32-LAM-BH-NEXT:    nor	$a2, $a2, $zero
; LA32-LAM-BH-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a3, $a0, 0
; LA32-LAM-BH-NEXT:    and	$a4, $a3, $a2
; LA32-LAM-BH-NEXT:    sc.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a4, .LBB1_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a3, $a1
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_0_i8_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a1, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a2, $zero, 255
; LA64-NEXT:    sll.w	$a2, $a2, $a1
; LA64-NEXT:    nor	$a2, $a2, $zero
; LA64-NEXT:    amand_db.w	$a3, $a2, $a0
; LA64-NEXT:    srl.w	$a0, $a3, $a1
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_0_i8_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.b	$a1, $zero, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a1
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i8 0 acquire
  ret i8 %1
}

define i8 @atomicrmw_xchg_minus_1_i8_acquire(ptr %a) nounwind {
; LA32-LABEL: atomicrmw_xchg_minus_1_i8_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a1, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a2, $zero, 255
; LA32-NEXT:    sll.w	$a2, $a2, $a1
; LA32-NEXT:  .LBB2_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a3, $a0, 0
; LA32-NEXT:    or	$a4, $a3, $a2
; LA32-NEXT:    sc.w	$a4, $a0, 0
; LA32-NEXT:    beqz	$a4, .LBB2_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a3, $a1
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_minus_1_i8_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a1, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a2, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a2, $a2, $a1
; LA32-LAM-BH-NEXT:  .LBB2_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a3, $a0, 0
; LA32-LAM-BH-NEXT:    or	$a4, $a3, $a2
; LA32-LAM-BH-NEXT:    sc.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a4, .LBB2_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a3, $a1
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_minus_1_i8_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a1, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a2, $zero, 255
; LA64-NEXT:    sll.w	$a2, $a2, $a1
; LA64-NEXT:    amor_db.w	$a3, $a2, $a0
; LA64-NEXT:    srl.w	$a0, $a3, $a1
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_minus_1_i8_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    addi.w	$a2, $zero, -1
; LA64-LAM-BH-NEXT:    amswap_db.b	$a1, $a2, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a1
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i8 -1 acquire
  ret i8 %1
}

define i16 @atomicrmw_xchg_i16_acquire(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i16_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB3_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB3_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i16_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB3_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB3_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i16_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB3_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB3_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i16_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i16 %b acquire
  ret i16 %1
}

define i16 @atomicrmw_xchg_0_i16_acquire(ptr %a) nounwind {
; LA32-LABEL: atomicrmw_xchg_0_i16_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a1, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a2, 15
; LA32-NEXT:    ori	$a2, $a2, 4095
; LA32-NEXT:    sll.w	$a2, $a2, $a1
; LA32-NEXT:    nor	$a2, $a2, $zero
; LA32-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a3, $a0, 0
; LA32-NEXT:    and	$a4, $a3, $a2
; LA32-NEXT:    sc.w	$a4, $a0, 0
; LA32-NEXT:    beqz	$a4, .LBB4_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a3, $a1
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_0_i16_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a1, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a2, 15
; LA32-LAM-BH-NEXT:    ori	$a2, $a2, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a2, $a2, $a1
; LA32-LAM-BH-NEXT:    nor	$a2, $a2, $zero
; LA32-LAM-BH-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a3, $a0, 0
; LA32-LAM-BH-NEXT:    and	$a4, $a3, $a2
; LA32-LAM-BH-NEXT:    sc.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a4, .LBB4_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a3, $a1
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_0_i16_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a1, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a2, 15
; LA64-NEXT:    ori	$a2, $a2, 4095
; LA64-NEXT:    sll.w	$a2, $a2, $a1
; LA64-NEXT:    nor	$a2, $a2, $zero
; LA64-NEXT:    amand_db.w	$a3, $a2, $a0
; LA64-NEXT:    srl.w	$a0, $a3, $a1
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_0_i16_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.h	$a1, $zero, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a1
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i16 0 acquire
  ret i16 %1
}

define i16 @atomicrmw_xchg_minus_1_i16_acquire(ptr %a) nounwind {
; LA32-LABEL: atomicrmw_xchg_minus_1_i16_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a1, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a2, 15
; LA32-NEXT:    ori	$a2, $a2, 4095
; LA32-NEXT:    sll.w	$a2, $a2, $a1
; LA32-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a3, $a0, 0
; LA32-NEXT:    or	$a4, $a3, $a2
; LA32-NEXT:    sc.w	$a4, $a0, 0
; LA32-NEXT:    beqz	$a4, .LBB5_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a3, $a1
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_minus_1_i16_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a1, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a2, 15
; LA32-LAM-BH-NEXT:    ori	$a2, $a2, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a2, $a2, $a1
; LA32-LAM-BH-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a3, $a0, 0
; LA32-LAM-BH-NEXT:    or	$a4, $a3, $a2
; LA32-LAM-BH-NEXT:    sc.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a4, .LBB5_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a3, $a1
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_minus_1_i16_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a1, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a2, 15
; LA64-NEXT:    ori	$a2, $a2, 4095
; LA64-NEXT:    sll.w	$a2, $a2, $a1
; LA64-NEXT:    amor_db.w	$a3, $a2, $a0
; LA64-NEXT:    srl.w	$a0, $a3, $a1
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_minus_1_i16_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    addi.w	$a2, $zero, -1
; LA64-LAM-BH-NEXT:    amswap_db.h	$a1, $a2, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a1
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i16 -1 acquire
  ret i16 %1
}

define i8 @atomicrmw_xchg_i8_release(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i8_release:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB6_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i8_release:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB6_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i8_release:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB6_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i8_release:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i8 %b release
  ret i8 %1
}

define i16 @atomicrmw_xchg_i16_release(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i16_release:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB7_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i16_release:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB7_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i16_release:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB7_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i16_release:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i16 %b release
  ret i16 %1
}

define i8 @atomicrmw_xchg_i8_acq_rel(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i8_acq_rel:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB8_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i8_acq_rel:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB8_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i8_acq_rel:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB8_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i8_acq_rel:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i8 %b acq_rel
  ret i8 %1
}

define i16 @atomicrmw_xchg_i16_acq_rel(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i16_acq_rel:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB9_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB9_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i16_acq_rel:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB9_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB9_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i16_acq_rel:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB9_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB9_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i16_acq_rel:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i16 %b acq_rel
  ret i16 %1
}

define i8 @atomicrmw_xchg_i8_seq_cst(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i8_seq_cst:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB10_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB10_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i8_seq_cst:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB10_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB10_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i8_seq_cst:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB10_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB10_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i8_seq_cst:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i8 %b seq_cst
  ret i8 %1
}

define i16 @atomicrmw_xchg_i16_seq_cst(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i16_seq_cst:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB11_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB11_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i16_seq_cst:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB11_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB11_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i16_seq_cst:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB11_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB11_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i16_seq_cst:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i16 %b seq_cst
  ret i16 %1
}

define i8 @atomicrmw_xchg_i8_monotonic(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i8_monotonic:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB12_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB12_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i8_monotonic:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB12_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB12_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i8_monotonic:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB12_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB12_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i8_monotonic:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i8 %b monotonic
  ret i8 %1
}

define i16 @atomicrmw_xchg_i16_monotonic(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_xchg_i16_monotonic:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB13_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    addi.w	$a5, $a1, 0
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB13_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_xchg_i16_monotonic:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB13_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    addi.w	$a5, $a1, 0
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB13_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_xchg_i16_monotonic:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB13_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    addi.w	$a5, $a1, 0
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB13_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_xchg_i16_monotonic:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amswap.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw xchg ptr %a, i16 %b monotonic
  ret i16 %1
}

define i8 @atomicrmw_add_i8_acquire(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i8_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB14_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB14_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i8_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB14_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB14_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i8_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB14_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB14_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i8_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i8 %b acquire
  ret i8 %1
}

define i16 @atomicrmw_add_i16_acquire(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i16_acquire:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB15_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB15_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i16_acquire:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB15_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB15_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i16_acquire:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB15_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB15_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i16_acquire:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i16 %b acquire
  ret i16 %1
}

define i8 @atomicrmw_add_i8_release(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i8_release:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB16_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB16_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i8_release:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB16_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB16_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i8_release:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB16_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB16_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i8_release:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i8 %b release
  ret i8 %1
}

define i16 @atomicrmw_add_i16_release(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i16_release:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB17_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB17_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i16_release:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB17_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB17_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i16_release:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB17_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB17_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i16_release:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i16 %b release
  ret i16 %1
}

define i8 @atomicrmw_add_i8_acq_rel(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i8_acq_rel:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB18_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB18_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i8_acq_rel:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB18_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB18_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i8_acq_rel:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB18_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB18_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i8_acq_rel:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i8 %b acq_rel
  ret i8 %1
}

define i16 @atomicrmw_add_i16_acq_rel(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i16_acq_rel:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB19_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB19_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i16_acq_rel:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB19_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB19_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i16_acq_rel:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB19_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB19_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i16_acq_rel:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i16 %b acq_rel
  ret i16 %1
}

define i8 @atomicrmw_add_i8_seq_cst(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i8_seq_cst:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB20_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB20_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i8_seq_cst:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB20_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB20_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i8_seq_cst:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB20_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB20_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i8_seq_cst:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i8 %b seq_cst
  ret i8 %1
}

define i16 @atomicrmw_add_i16_seq_cst(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i16_seq_cst:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB21_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB21_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i16_seq_cst:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB21_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB21_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i16_seq_cst:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB21_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB21_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i16_seq_cst:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd_db.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i16 %b seq_cst
  ret i16 %1
}

define i8 @atomicrmw_add_i8_monotonic(ptr %a, i8 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i8_monotonic:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    ori	$a3, $zero, 255
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    andi	$a1, $a1, 255
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB22_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB22_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i8_monotonic:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    ori	$a3, $zero, 255
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    andi	$a1, $a1, 255
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB22_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB22_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i8_monotonic:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    ori	$a3, $zero, 255
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    andi	$a1, $a1, 255
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB22_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB22_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i8_monotonic:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd.b	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i8 %b monotonic
  ret i8 %1
}

define i16 @atomicrmw_add_i16_monotonic(ptr %a, i16 %b) nounwind {
; LA32-LABEL: atomicrmw_add_i16_monotonic:
; LA32:       # %bb.0:
; LA32-NEXT:    slli.w	$a2, $a0, 3
; LA32-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-NEXT:    lu12i.w	$a3, 15
; LA32-NEXT:    ori	$a3, $a3, 4095
; LA32-NEXT:    sll.w	$a3, $a3, $a2
; LA32-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-NEXT:    sll.w	$a1, $a1, $a2
; LA32-NEXT:  .LBB23_1: # =>This Inner Loop Header: Depth=1
; LA32-NEXT:    ll.w	$a4, $a0, 0
; LA32-NEXT:    add.w	$a5, $a4, $a1
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    and	$a5, $a5, $a3
; LA32-NEXT:    xor	$a5, $a4, $a5
; LA32-NEXT:    sc.w	$a5, $a0, 0
; LA32-NEXT:    beqz	$a5, .LBB23_1
; LA32-NEXT:  # %bb.2:
; LA32-NEXT:    srl.w	$a0, $a4, $a2
; LA32-NEXT:    ret
;
; LA32-LAM-BH-LABEL: atomicrmw_add_i16_monotonic:
; LA32-LAM-BH:       # %bb.0:
; LA32-LAM-BH-NEXT:    slli.w	$a2, $a0, 3
; LA32-LAM-BH-NEXT:    bstrins.w	$a0, $zero, 1, 0
; LA32-LAM-BH-NEXT:    lu12i.w	$a3, 15
; LA32-LAM-BH-NEXT:    ori	$a3, $a3, 4095
; LA32-LAM-BH-NEXT:    sll.w	$a3, $a3, $a2
; LA32-LAM-BH-NEXT:    bstrpick.w	$a1, $a1, 15, 0
; LA32-LAM-BH-NEXT:    sll.w	$a1, $a1, $a2
; LA32-LAM-BH-NEXT:  .LBB23_1: # =>This Inner Loop Header: Depth=1
; LA32-LAM-BH-NEXT:    ll.w	$a4, $a0, 0
; LA32-LAM-BH-NEXT:    add.w	$a5, $a4, $a1
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    and	$a5, $a5, $a3
; LA32-LAM-BH-NEXT:    xor	$a5, $a4, $a5
; LA32-LAM-BH-NEXT:    sc.w	$a5, $a0, 0
; LA32-LAM-BH-NEXT:    beqz	$a5, .LBB23_1
; LA32-LAM-BH-NEXT:  # %bb.2:
; LA32-LAM-BH-NEXT:    srl.w	$a0, $a4, $a2
; LA32-LAM-BH-NEXT:    ret
;
; LA64-LABEL: atomicrmw_add_i16_monotonic:
; LA64:       # %bb.0:
; LA64-NEXT:    slli.d	$a2, $a0, 3
; LA64-NEXT:    bstrins.d	$a0, $zero, 1, 0
; LA64-NEXT:    lu12i.w	$a3, 15
; LA64-NEXT:    ori	$a3, $a3, 4095
; LA64-NEXT:    sll.w	$a3, $a3, $a2
; LA64-NEXT:    bstrpick.d	$a1, $a1, 15, 0
; LA64-NEXT:    sll.w	$a1, $a1, $a2
; LA64-NEXT:  .LBB23_1: # =>This Inner Loop Header: Depth=1
; LA64-NEXT:    ll.w	$a4, $a0, 0
; LA64-NEXT:    add.w	$a5, $a4, $a1
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    and	$a5, $a5, $a3
; LA64-NEXT:    xor	$a5, $a4, $a5
; LA64-NEXT:    sc.w	$a5, $a0, 0
; LA64-NEXT:    beqz	$a5, .LBB23_1
; LA64-NEXT:  # %bb.2:
; LA64-NEXT:    srl.w	$a0, $a4, $a2
; LA64-NEXT:    ret
;
; LA64-LAM-BH-LABEL: atomicrmw_add_i16_monotonic:
; LA64-LAM-BH:       # %bb.0:
; LA64-LAM-BH-NEXT:    amadd.h	$a2, $a1, $a0
; LA64-LAM-BH-NEXT:    move	$a0, $a2
; LA64-LAM-BH-NEXT:    ret
;
  %1 = atomicrmw add ptr %a, i16 %b monotonic
  ret i16 %1
}
