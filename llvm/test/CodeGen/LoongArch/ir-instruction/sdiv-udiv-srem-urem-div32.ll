; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 -mattr=+d,-div32 < %s | FileCheck %s --check-prefix=LA64
; RUN: llc --mtriple=loongarch64 -mattr=+d,+div32 < %s | FileCheck %s --check-prefix=LA64-DIV32

define dso_local noundef signext i32 @divw(i64 noundef %0, i64 noundef %1) local_unnamed_addr #0 {
; LA64-LABEL: divw:
; LA64:       # %bb.0:
; LA64-NEXT:    addi.w $a1, $a1, 0
; LA64-NEXT:    addi.w $a0, $a0, 0
; LA64-NEXT:    div.w $a0, $a0, $a1
; LA64-NEXT:    ret
;
; LA64-DIV32-LABEL: divw:
; LA64-DIV32:       # %bb.0:
; LA64-DIV32-NEXT:    div.w $a0, $a0, $a1
; LA64-DIV32-NEXT:    ret
  %3 = trunc i64 %0 to i32
  %4 = trunc i64 %1 to i32
  %5 = sdiv i32 %3, %4
  ret i32 %5
}

define dso_local noundef signext i32 @divwu(i64 noundef %0, i64 noundef %1) local_unnamed_addr #0 {
; LA64-LABEL: divwu:
; LA64:       # %bb.0:
; LA64-NEXT:    addi.w $a1, $a1, 0
; LA64-NEXT:    addi.w $a0, $a0, 0
; LA64-NEXT:    div.wu $a0, $a0, $a1
; LA64-NEXT:    ret
;
; LA64-DIV32-LABEL: divwu:
; LA64-DIV32:       # %bb.0:
; LA64-DIV32-NEXT:    div.wu $a0, $a0, $a1
; LA64-DIV32-NEXT:    ret
  %3 = trunc i64 %0 to i32
  %4 = trunc i64 %1 to i32
  %5 = udiv i32 %3, %4
  ret i32 %5
}

define dso_local signext range(i32 -2147483647, -2147483648) i32 @modw(i64 noundef %0, i64 noundef %1) local_unnamed_addr #0 {
; LA64-LABEL: modw:
; LA64:       # %bb.0:
; LA64-NEXT:    addi.w $a1, $a1, 0
; LA64-NEXT:    addi.w $a0, $a0, 0
; LA64-NEXT:    mod.w $a0, $a0, $a1
; LA64-NEXT:    ret
;
; LA64-DIV32-LABEL: modw:
; LA64-DIV32:       # %bb.0:
; LA64-DIV32-NEXT:    mod.w $a0, $a0, $a1
; LA64-DIV32-NEXT:    ret
  %3 = trunc i64 %0 to i32
  %4 = trunc i64 %1 to i32
  %5 = srem i32 %3, %4
  ret i32 %5
}

define dso_local signext range(i32 0, -1) i32 @modwu(i64 noundef %0, i64 noundef %1) local_unnamed_addr #0 {
; LA64-LABEL: modwu:
; LA64:       # %bb.0:
; LA64-NEXT:    addi.w $a1, $a1, 0
; LA64-NEXT:    addi.w $a0, $a0, 0
; LA64-NEXT:    mod.wu $a0, $a0, $a1
; LA64-NEXT:    ret
;
; LA64-DIV32-LABEL: modwu:
; LA64-DIV32:       # %bb.0:
; LA64-DIV32-NEXT:    mod.wu $a0, $a0, $a1
; LA64-DIV32-NEXT:    ret
  %3 = trunc i64 %0 to i32
  %4 = trunc i64 %1 to i32
  %5 = urem i32 %3, %4
  ret i32 %5
}
