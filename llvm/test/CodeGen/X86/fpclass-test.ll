; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2 | FileCheck %s

define i1 @test_is_inf_or_nan(double %arg) {
; CHECK-LABEL: test_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vandpd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vucomisd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp ueq double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_not_inf_or_nan(double %arg) {
; CHECK-LABEL: test_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vandpd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vucomisd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp one double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_inf(double %arg) {
; CHECK-LABEL: test_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vandpd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vucomisd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp oeq double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_not_inf(double %arg) {
; CHECK-LABEL: test_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vandpd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vucomisd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp une double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define <4 x i1> @test_vec_is_inf_or_nan(<4 x double> %arg) {
; CHECK-LABEL: test_vec_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [NaN,NaN,NaN,NaN]
; CHECK-NEXT:    vandpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [+Inf,+Inf,+Inf,+Inf]
; CHECK-NEXT:    vcmpeq_uqpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vextractf128 $1, %ymm0, %xmm1
; CHECK-NEXT:    vpackssdw %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %abs = tail call <4 x double> @llvm.fabs.v4f64(<4 x double> %arg)
  %ret = fcmp ueq <4 x double> %abs, splat (double 0x7FF0000000000000)
  ret <4 x i1> %ret
}

define <4 x i1> @test_vec_is_not_inf_or_nan(<4 x double> %arg) {
; CHECK-LABEL: test_vec_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [NaN,NaN,NaN,NaN]
; CHECK-NEXT:    vandpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [+Inf,+Inf,+Inf,+Inf]
; CHECK-NEXT:    vcmpneq_oqpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vextractf128 $1, %ymm0, %xmm1
; CHECK-NEXT:    vpackssdw %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %abs = tail call <4 x double> @llvm.fabs.v4f64(<4 x double> %arg)
  %ret = fcmp one <4 x double> %abs, splat (double 0x7FF0000000000000)
  ret <4 x i1> %ret
}

define <4 x i1> @test_vec_is_inf(<4 x double> %arg) {
; CHECK-LABEL: test_vec_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [NaN,NaN,NaN,NaN]
; CHECK-NEXT:    vandpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [+Inf,+Inf,+Inf,+Inf]
; CHECK-NEXT:    vcmpeqpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vextractf128 $1, %ymm0, %xmm1
; CHECK-NEXT:    vpackssdw %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %abs = tail call <4 x double> @llvm.fabs.v4f64(<4 x double> %arg)
  %ret = fcmp oeq <4 x double> %abs, splat (double 0x7FF0000000000000)
  ret <4 x i1> %ret
}

define <4 x i1> @test_vec_is_not_inf(<4 x double> %arg) {
; CHECK-LABEL: test_vec_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [NaN,NaN,NaN,NaN]
; CHECK-NEXT:    vandpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [+Inf,+Inf,+Inf,+Inf]
; CHECK-NEXT:    vcmpneqpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vextractf128 $1, %ymm0, %xmm1
; CHECK-NEXT:    vpackssdw %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %abs = tail call <4 x double> @llvm.fabs.v4f64(<4 x double> %arg)
  %ret = fcmp une <4 x double> %abs, splat (double 0x7FF0000000000000)
  ret <4 x i1> %ret
}

define i1 @test_fp128_is_inf_or_nan(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rbx
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    subq $16, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    .cfi_offset %rbx, -16
; CHECK-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vmovaps %xmm0, (%rsp) # 16-byte Spill
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __eqtf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    sete %bl
; CHECK-NEXT:    vmovaps (%rsp), %xmm0 # 16-byte Reload
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __unordtf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    orb %bl, %al
; CHECK-NEXT:    addq $16, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    popq %rbx
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp ueq fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_not_inf_or_nan(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rbx
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    subq $16, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    .cfi_offset %rbx, -16
; CHECK-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vmovaps %xmm0, (%rsp) # 16-byte Spill
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __eqtf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    setne %bl
; CHECK-NEXT:    vmovaps (%rsp), %xmm0 # 16-byte Reload
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __unordtf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    andb %bl, %al
; CHECK-NEXT:    addq $16, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    popq %rbx
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp one fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_inf(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __eqtf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    popq %rcx
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp oeq fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_not_inf(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __netf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    popq %rcx
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp une fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_inf_or_nan(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fabs
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp ueq x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_not_inf_or_nan(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fabs
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp one x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_inf(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fabs
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp oeq x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_not_inf(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fabs
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp une x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}
