; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc < %s -mtriple=i686-- | FileCheck %s --check-prefix=X86
; RUN: llc < %s -mtriple=x86_64-- | FileCheck %s --check-prefix=X64

define i16 @test(i8 %_in) {
; X86-LABEL: test:
; X86:       # %bb.0:
; X86-NEXT:    movzbl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    notb %al
; X86-NEXT:    andb $127, %al
; X86-NEXT:    movzbl %al, %ecx
; X86-NEXT:    orb $-128, %al
; X86-NEXT:    movzbl %al, %eax
; X86-NEXT:    shll $8, %eax
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    # kill: def $ax killed $ax killed $eax
; X86-NEXT:    retl
;
; X64-LABEL: test:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    notb %dil
; X64-NEXT:    andb $127, %dil
; X64-NEXT:    leal -128(%rdi), %eax
; X64-NEXT:    movzbl %al, %eax
; X64-NEXT:    shll $8, %eax
; X64-NEXT:    movzbl %dil, %ecx
; X64-NEXT:    leal (%rax,%rcx,2), %eax
; X64-NEXT:    # kill: def $ax killed $ax killed $eax
; X64-NEXT:    retq
  %_1 = and i8 %_in, 127
  %_2 = xor i8 %_1, 127
  %_3 = or i8 %_2, -128
  %_4 = zext i8 %_3 to i16
  %_6 = shl nuw i16 %_4, 8
  %_7 = shl nuw i8 %_2, 1
  %_8 = zext i8 %_7 to i16
  %_9 = or i16 %_6, %_8
  ret i16 %_9
}
