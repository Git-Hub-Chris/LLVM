; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=x86_64 -- | FileCheck %s

define i32 @h(i1 %0, i32 %1) {
; CHECK-LABEL: h:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movl $1, %eax
; CHECK-NEXT:    movabsq $9166129423, %rcx # imm = 0x22258090F
; CHECK-NEXT:    xorl %edx, %edx
; CHECK-NEXT:    jmp .LBB0_1
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB0_9: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    testb $1, %dil
; CHECK-NEXT:    jne .LBB0_10
; CHECK-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    testq %rdx, %rdx
; CHECK-NEXT:    jne .LBB0_2
; CHECK-NEXT:  # %bb.7: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    testb $1, %dil
; CHECK-NEXT:    jne .LBB0_9
; CHECK-NEXT:  # %bb.8: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    movq %rcx, %rdx
; CHECK-NEXT:    jmp .LBB0_9
; CHECK-NEXT:  .LBB0_2: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    testb $1, %dil
; CHECK-NEXT:    testb $1, %dil
; CHECK-NEXT:    je .LBB0_4
; CHECK-NEXT:  # %bb.3: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:  .LBB0_4: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    cmpl $1, %esi
; CHECK-NEXT:    je .LBB0_1
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    movl %eax, %r8d
; CHECK-NEXT:    testl %esi, %esi
; CHECK-NEXT:    movl %esi, %eax
; CHECK-NEXT:    jne .LBB0_6
; CHECK-NEXT:  .LBB0_10:
; CHECK-NEXT:    retq
; CHECK-NEXT:  .LBB0_6: # %.loopexit1
; CHECK-NEXT:    movl %r8d, %eax
; CHECK-NEXT:    retq
  br label %3

3:                                                ; preds = %16, %2
  %4 = phi i64 [ %7, %16 ], [ 0, %2 ]
  %5 = phi i32 [ %17, %16 ], [ 1, %2 ]
  br label %6

6:                                                ; preds = %20, %3
  %7 = phi i64 [ %21, %20 ], [ %4, %3 ]
  %8 = phi i64 [ %22, %20 ], [ %4, %3 ]
  %9 = phi i32 [ 0, %20 ], [ %5, %3 ]
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  br i1 %0, label %14, label %12

12:                                               ; preds = %11
  %13 = sdiv i64 0, 0
  br label %14

14:                                               ; preds = %12, %11
  br i1 %0, label %15, label %16

15:                                               ; preds = %14
  br label %16

16:                                               ; preds = %15, %14
  %17 = phi i32 [ 0, %15 ], [ %9, %14 ]
  switch i32 %1, label %24 [
    i32 0, label %23
    i32 1, label %3
  ]

18:                                               ; preds = %6
  br i1 %0, label %20, label %19

19:                                               ; preds = %18
  br label %20

20:                                               ; preds = %19, %18
  %21 = phi i64 [ 9166129423, %19 ], [ %7, %18 ]
  %22 = phi i64 [ 9166129423, %19 ], [ %8, %18 ]
  br i1 %0, label %24, label %6

23:                                               ; preds = %16
  br label %24

24:                                               ; preds = %23, %20, %16
  %25 = phi i32 [ %1, %23 ], [ %17, %16 ], [ 0, %20 ]
  ret i32 %25
}
