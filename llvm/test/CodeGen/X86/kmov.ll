; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mcpu=skylake-avx512 | FileCheck %s

define <16 x i1> @pr120593_16_ne(i32 %mask) {
; CHECK-LABEL: pr120593_16_ne:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovw %edi, %k0
; CHECK-NEXT:    vpmovm2b %k0, %xmm0
; CHECK-NEXT:    retq
entry:
  %0 = and i32 %mask, 65535
  %.splatinsert = insertelement <16 x i32> poison, i32 %0, i64 0
  %.splat = shufflevector <16 x i32> %.splatinsert, <16 x i32> poison, <16 x i32> zeroinitializer
  %1 = and <16 x i32> %.splat, <i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768>
  %cmp.45 = icmp ne <16 x i32> %1, zeroinitializer
  ret <16 x i1> %cmp.45
}

define <16 x i1> @pr120593_16_eq(i32 %mask) {
; CHECK-LABEL: pr120593_16_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovw %edi, %k0
; CHECK-NEXT:    knotw %k0, %k0
; CHECK-NEXT:    vpmovm2b %k0, %xmm0
; CHECK-NEXT:    retq
entry:
  %0 = and i32 %mask, 65535
  %.splatinsert = insertelement <16 x i32> poison, i32 %0, i64 0
  %.splat = shufflevector <16 x i32> %.splatinsert, <16 x i32> poison, <16 x i32> zeroinitializer
  %1 = and <16 x i32> %.splat, <i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768>
  %cmp.45 = icmp eq <16 x i32> %1, zeroinitializer
  ret <16 x i1> %cmp.45
}

define <8 x i1> @pr120593_8_ne(i32 %mask) {
; CHECK-LABEL: pr120593_8_ne:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovb %edi, %k0
; CHECK-NEXT:    vpmovm2w %k0, %xmm0
; CHECK-NEXT:    retq
entry:
  %0 = and i32 %mask, 65535
  %.splatinsert = insertelement <8 x i32> poison, i32 %0, i64 0
  %.splat = shufflevector <8 x i32> %.splatinsert, <8 x i32> poison, <8 x i32> zeroinitializer
  %1 = and <8 x i32> %.splat, <i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128>
  %cmp.45 = icmp ne <8 x i32> %1, zeroinitializer
  ret <8 x i1> %cmp.45
}

define <8 x i1> @pr120593_8_eq(i32 %mask) {
; CHECK-LABEL: pr120593_8_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovb %edi, %k0
; CHECK-NEXT:    knotb %k0, %k0
; CHECK-NEXT:    vpmovm2w %k0, %xmm0
; CHECK-NEXT:    retq
entry:
  %0 = and i32 %mask, 65535
  %.splatinsert = insertelement <8 x i32> poison, i32 %0, i64 0
  %.splat = shufflevector <8 x i32> %.splatinsert, <8 x i32> poison, <8 x i32> zeroinitializer
  %1 = and <8 x i32> %.splat, <i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128>
  %cmp.45 = icmp eq <8 x i32> %1, zeroinitializer
  ret <8 x i1> %cmp.45
}

define void @pr120593_4_ne(ptr %c, ptr %b, i32 %mask) {
; CHECK-LABEL: pr120593_4_ne:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovb %edx, %k1
; CHECK-NEXT:    vmovups (%rsi), %xmm0 {%k1} {z}
; CHECK-NEXT:    vmovups %xmm0, (%rdi) {%k1}
; CHECK-NEXT:    retq
entry:
  %0 = and i32 %mask, 65535
  %.splatinsert = insertelement <4 x i32> poison, i32 %0, i64 0
  %.splat = shufflevector <4 x i32> %.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %1 = and <4 x i32> %.splat, <i32 1, i32 2, i32 4, i32 8>
  %cmp.45 = icmp ne <4 x i32> %1, zeroinitializer
  %2 = tail call <4 x float> @llvm.masked.load.v4f32.p0(ptr %b, i32 4, <4 x i1> %cmp.45, <4 x float> poison)
  tail call void @llvm.masked.store.v4f32.p0(<4 x float> %2, ptr %c, i32 4, <4 x i1> %cmp.45)
  ret void
}

define void @pr120593_4_eq(ptr %c, ptr %b, i32 %mask) {
; CHECK-LABEL: pr120593_4_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovb %edx, %k0
; CHECK-NEXT:    knotb %k0, %k1
; CHECK-NEXT:    vmovups (%rsi), %xmm0 {%k1} {z}
; CHECK-NEXT:    vmovups %xmm0, (%rdi) {%k1}
; CHECK-NEXT:    retq
entry:
  %0 = and i32 %mask, 65535
  %.splatinsert = insertelement <4 x i32> poison, i32 %0, i64 0
  %.splat = shufflevector <4 x i32> %.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %1 = and <4 x i32> %.splat, <i32 1, i32 2, i32 4, i32 8>
  %cmp.45 = icmp eq <4 x i32> %1, zeroinitializer
  %2 = tail call <4 x float> @llvm.masked.load.v4f32.p0(ptr %b, i32 4, <4 x i1> %cmp.45, <4 x float> poison)
  tail call void @llvm.masked.store.v4f32.p0(<4 x float> %2, ptr %c, i32 4, <4 x i1> %cmp.45)
  ret void
}

define <2 x i1> @pr120593_2_ne(i32 %mask) {
; CHECK-LABEL: pr120593_2_ne:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovb %edi, %k0
; CHECK-NEXT:    vpmovm2q %k0, %xmm0
; CHECK-NEXT:    retq
entry:
  %.splatinsert = insertelement <2 x i32> poison, i32 %mask, i64 0
  %.splat = shufflevector <2 x i32> %.splatinsert, <2 x i32> poison, <2 x i32> zeroinitializer
  %0 = and <2 x i32> %.splat, <i32 1, i32 2>
  %cmp.44 = icmp ne <2 x i32> %0, zeroinitializer
  ret <2 x i1> %cmp.44
}

define <2 x i1> @pr120593_2_eq(i32 %mask) {
; CHECK-LABEL: pr120593_2_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmovb %edi, %k0
; CHECK-NEXT:    knotb %k0, %k0
; CHECK-NEXT:    vpmovm2q %k0, %xmm0
; CHECK-NEXT:    retq
entry:
  %.splatinsert = insertelement <2 x i32> poison, i32 %mask, i64 0
  %.splat = shufflevector <2 x i32> %.splatinsert, <2 x i32> poison, <2 x i32> zeroinitializer
  %0 = and <2 x i32> %.splat, <i32 1, i32 2>
  %cmp.44 = icmp eq <2 x i32> %0, zeroinitializer
  ret <2 x i1> %cmp.44
}
