; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --default-march x86_64-unknown-linux-gnu --version 5
; RUN: llc -mattr=sse -mtriple=x86_64 < %s | FileCheck %s -check-prefix=SSE
; RUN: llc -mattr=sse2 -mtriple=x86_64 < %s | FileCheck %s -check-prefix=SSE2
; RUN: llc -mattr=+avx -mtriple=x86_64 < %s | FileCheck %s -check-prefix=AVX
; RUN: llc -mattr=+avx2 -mtriple=x86_64 < %s | FileCheck %s -check-prefix=AVX2
; RUN: llc -mattr=+avx512f -mtriple=x86_64 < %s | FileCheck %s -check-prefix=AVX512F
; RUN: llc -mattr=+avx512bw -mtriple=x86_64 < %s | FileCheck %s -check-prefix=AVX512BW

define float @canon_fp32() {
; SSE-LABEL: canon_fp32:
; SSE:       # %bb.0:
; SSE-NEXT:    movss {{.*#+}} xmm0 = [3.0E+0,0.0E+0,0.0E+0,0.0E+0]
; SSE-NEXT:    retq
;
; SSE2-LABEL: canon_fp32:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movss {{.*#+}} xmm0 = [3.0E+0,0.0E+0,0.0E+0,0.0E+0]
; SSE2-NEXT:    retq
;
; AVX-LABEL: canon_fp32:
; AVX:       # %bb.0:
; AVX-NEXT:    vmovss {{.*#+}} xmm0 = [3.0E+0,0.0E+0,0.0E+0,0.0E+0]
; AVX-NEXT:    retq
;
; AVX2-LABEL: canon_fp32:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vmovss {{.*#+}} xmm0 = [3.0E+0,0.0E+0,0.0E+0,0.0E+0]
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: canon_fp32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovss {{.*#+}} xmm0 = [3.0E+0,0.0E+0,0.0E+0,0.0E+0]
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: canon_fp32:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    vmovss {{.*#+}} xmm0 = [3.0E+0,0.0E+0,0.0E+0,0.0E+0]
; AVX512BW-NEXT:    retq
  %canonicalized = call float @llvm.canonicalize.f32(float 3.0)
  ret float %canonicalized
}

define half @canon_fp16() {
; SSE-LABEL: canon_fp16:
; SSE:       # %bb.0:
; SSE-NEXT:    pinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SSE-NEXT:    retq
;
; SSE2-LABEL: canon_fp16:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: canon_fp16:
; AVX:       # %bb.0:
; AVX-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX-NEXT:    retq
;
; AVX2-LABEL: canon_fp16:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: canon_fp16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: canon_fp16:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512BW-NEXT:    retq
  %canonicalized = call half @llvm.canonicalize.f16(half 0xH4200) ; half 3.0
  ret half %canonicalized
}

define double @canon_fp64() {
; SSE-LABEL: canon_fp64:
; SSE:       # %bb.0:
; SSE-NEXT:    movsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; SSE-NEXT:    retq
;
; SSE2-LABEL: canon_fp64:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; SSE2-NEXT:    retq
;
; AVX-LABEL: canon_fp64:
; AVX:       # %bb.0:
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX-NEXT:    retq
;
; AVX2-LABEL: canon_fp64:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: canon_fp64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: canon_fp64:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX512BW-NEXT:    retq
  %canonicalized = call double @llvm.canonicalize.f64(double 3.0)
  ret double %canonicalized
}

define x86_fp80 @canon_fp80() {
; SSE-LABEL: canon_fp80:
; SSE:       # %bb.0:
; SSE-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE-NEXT:    retq
;
; SSE2-LABEL: canon_fp80:
; SSE2:       # %bb.0:
; SSE2-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE2-NEXT:    retq
;
; AVX-LABEL: canon_fp80:
; AVX:       # %bb.0:
; AVX-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX-NEXT:    retq
;
; AVX2-LABEL: canon_fp80:
; AVX2:       # %bb.0:
; AVX2-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: canon_fp80:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: canon_fp80:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512BW-NEXT:    retq
  %canonicalized = call x86_fp80 @llvm.canonicalize.f80(x86_fp80 0xK4005B400000000000000) ; 90.0
  ret x86_fp80 %canonicalized
}


define x86_fp80 @complex_canonicalize_x86_fp80(x86_fp80 %a, x86_fp80 %b) {
; SSE-LABEL: complex_canonicalize_x86_fp80:
; SSE:       # %bb.0: # %entry
; SSE-NEXT:    fldt {{[0-9]+}}(%rsp)
; SSE-NEXT:    fsubrs {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE-NEXT:    retq
;
; SSE2-LABEL: complex_canonicalize_x86_fp80:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    fldt {{[0-9]+}}(%rsp)
; SSE2-NEXT:    fsubrs {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE2-NEXT:    retq
;
; AVX-LABEL: complex_canonicalize_x86_fp80:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    fldt {{[0-9]+}}(%rsp)
; AVX-NEXT:    fsubrs {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX-NEXT:    retq
;
; AVX2-LABEL: complex_canonicalize_x86_fp80:
; AVX2:       # %bb.0: # %entry
; AVX2-NEXT:    fldt {{[0-9]+}}(%rsp)
; AVX2-NEXT:    fsubrs {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: complex_canonicalize_x86_fp80:
; AVX512F:       # %bb.0: # %entry
; AVX512F-NEXT:    fldt {{[0-9]+}}(%rsp)
; AVX512F-NEXT:    fsubrs {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: complex_canonicalize_x86_fp80:
; AVX512BW:       # %bb.0: # %entry
; AVX512BW-NEXT:    fldt {{[0-9]+}}(%rsp)
; AVX512BW-NEXT:    fsubrs {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512BW-NEXT:    retq
entry:
  %mul1 = fsub x86_fp80 %a, %b
  %add = fadd x86_fp80 %mul1, %b
  %mul2 = fsub x86_fp80 %add, %mul1
  %canonicalized = call x86_fp80 @llvm.canonicalize.f80(x86_fp80 0xK4005B400000000000000)
  %result = fsub x86_fp80 %canonicalized, %b
  ret x86_fp80 %result
}

define double @complex_canonicalize_fp64(double %a, double %b) unnamed_addr #0 {
; SSE-LABEL: complex_canonicalize_fp64:
; SSE:       # %bb.0: # %start
; SSE-NEXT:    movsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; SSE-NEXT:    retq
;
; SSE2-LABEL: complex_canonicalize_fp64:
; SSE2:       # %bb.0: # %start
; SSE2-NEXT:    movsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; SSE2-NEXT:    retq
;
; AVX-LABEL: complex_canonicalize_fp64:
; AVX:       # %bb.0: # %start
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX-NEXT:    retq
;
; AVX2-LABEL: complex_canonicalize_fp64:
; AVX2:       # %bb.0: # %start
; AVX2-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: complex_canonicalize_fp64:
; AVX512F:       # %bb.0: # %start
; AVX512F-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: complex_canonicalize_fp64:
; AVX512BW:       # %bb.0: # %start
; AVX512BW-NEXT:    vmovsd {{.*#+}} xmm0 = [3.0E+0,0.0E+0]
; AVX512BW-NEXT:    retq
start:
  %c = fcmp olt double %a, %b
  %d = fcmp uno double %a, 0.000000e+00
  %or.cond.i.i = or i1 %d, %c
  %e = select i1 %or.cond.i.i, double %b, double %a
  %f = tail call double @llvm.canonicalize.f64(double 3.0) #2
  ret double %f
}

define void @test_fold_canonicalize_p0_f32(float addrspace(1)* %out) #1 {
; SSE-LABEL: test_fold_canonicalize_p0_f32:
; SSE:       # %bb.0:
; SSE-NEXT:    movl $0, (%rdi)
; SSE-NEXT:    retq
;
; SSE2-LABEL: test_fold_canonicalize_p0_f32:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movl $0, (%rdi)
; SSE2-NEXT:    retq
;
; AVX-LABEL: test_fold_canonicalize_p0_f32:
; AVX:       # %bb.0:
; AVX-NEXT:    movl $0, (%rdi)
; AVX-NEXT:    retq
;
; AVX2-LABEL: test_fold_canonicalize_p0_f32:
; AVX2:       # %bb.0:
; AVX2-NEXT:    movl $0, (%rdi)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: test_fold_canonicalize_p0_f32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movl $0, (%rdi)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: test_fold_canonicalize_p0_f32:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    movl $0, (%rdi)
; AVX512BW-NEXT:    retq
  %canonicalized = call float @llvm.canonicalize.f32(float 0.0)
  store float %canonicalized, float addrspace(1)* %out
  ret void
}

define void @test_fold_canonicalize_n0_f32(float addrspace(1)* %out) #1 {
; SSE-LABEL: test_fold_canonicalize_n0_f32:
; SSE:       # %bb.0:
; SSE-NEXT:    movl $-2147483648, (%rdi) # imm = 0x80000000
; SSE-NEXT:    retq
;
; SSE2-LABEL: test_fold_canonicalize_n0_f32:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movl $-2147483648, (%rdi) # imm = 0x80000000
; SSE2-NEXT:    retq
;
; AVX-LABEL: test_fold_canonicalize_n0_f32:
; AVX:       # %bb.0:
; AVX-NEXT:    movl $-2147483648, (%rdi) # imm = 0x80000000
; AVX-NEXT:    retq
;
; AVX2-LABEL: test_fold_canonicalize_n0_f32:
; AVX2:       # %bb.0:
; AVX2-NEXT:    movl $-2147483648, (%rdi) # imm = 0x80000000
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: test_fold_canonicalize_n0_f32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movl $-2147483648, (%rdi) # imm = 0x80000000
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: test_fold_canonicalize_n0_f32:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    movl $-2147483648, (%rdi) # imm = 0x80000000
; AVX512BW-NEXT:    retq
  %canonicalized = call float @llvm.canonicalize.f32(float -0.0)
  store float %canonicalized, float addrspace(1)* %out
  ret void
}


define void @v_test_canonicalize_p90_x86_fp80(x86_fp80 addrspace(1)* %out) #1 {
; SSE-LABEL: v_test_canonicalize_p90_x86_fp80:
; SSE:       # %bb.0:
; SSE-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE-NEXT:    fstpt (%rdi)
; SSE-NEXT:    retq
;
; SSE2-LABEL: v_test_canonicalize_p90_x86_fp80:
; SSE2:       # %bb.0:
; SSE2-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE2-NEXT:    fstpt (%rdi)
; SSE2-NEXT:    retq
;
; AVX-LABEL: v_test_canonicalize_p90_x86_fp80:
; AVX:       # %bb.0:
; AVX-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX-NEXT:    fstpt (%rdi)
; AVX-NEXT:    retq
;
; AVX2-LABEL: v_test_canonicalize_p90_x86_fp80:
; AVX2:       # %bb.0:
; AVX2-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX2-NEXT:    fstpt (%rdi)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: v_test_canonicalize_p90_x86_fp80:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512F-NEXT:    fstpt (%rdi)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: v_test_canonicalize_p90_x86_fp80:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512BW-NEXT:    fstpt (%rdi)
; AVX512BW-NEXT:    retq
  %canonicalized = call x86_fp80 @llvm.canonicalize.f80(x86_fp80 0xK4005B400000000000000)
  store x86_fp80 %canonicalized, x86_fp80 addrspace(1)* %out
  ret void
}

define void @v_test_canonicalize_p3__half(half addrspace(1)* %out) {
; SSE-LABEL: v_test_canonicalize_p3__half:
; SSE:       # %bb.0: # %entry
; SSE-NEXT:    pinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SSE-NEXT:    pextrw $0, %xmm0, %eax
; SSE-NEXT:    movw %ax, (%rdi)
; SSE-NEXT:    retq
;
; SSE2-LABEL: v_test_canonicalize_p3__half:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    pinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SSE2-NEXT:    pextrw $0, %xmm0, %eax
; SSE2-NEXT:    movw %ax, (%rdi)
; SSE2-NEXT:    retq
;
; AVX-LABEL: v_test_canonicalize_p3__half:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX-NEXT:    retq
;
; AVX2-LABEL: v_test_canonicalize_p3__half:
; AVX2:       # %bb.0: # %entry
; AVX2-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX2-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: v_test_canonicalize_p3__half:
; AVX512F:       # %bb.0: # %entry
; AVX512F-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512F-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: v_test_canonicalize_p3__half:
; AVX512BW:       # %bb.0: # %entry
; AVX512BW-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512BW-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX512BW-NEXT:    retq
entry:
  %canonicalized = call half @llvm.canonicalize.f16(half 0xH4200)
  store half %canonicalized, half addrspace(1)* %out
  ret void
}

define void @v_test_canonicalize_p3_f64(double addrspace(1)* %out) #1 {
; SSE-LABEL: v_test_canonicalize_p3_f64:
; SSE:       # %bb.0: # %entry
; SSE-NEXT:    movabsq $4613937818241073152, %rax # imm = 0x4008000000000000
; SSE-NEXT:    movq %rax, (%rdi)
; SSE-NEXT:    retq
;
; SSE2-LABEL: v_test_canonicalize_p3_f64:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movabsq $4613937818241073152, %rax # imm = 0x4008000000000000
; SSE2-NEXT:    movq %rax, (%rdi)
; SSE2-NEXT:    retq
;
; AVX-LABEL: v_test_canonicalize_p3_f64:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    movabsq $4613937818241073152, %rax # imm = 0x4008000000000000
; AVX-NEXT:    movq %rax, (%rdi)
; AVX-NEXT:    retq
;
; AVX2-LABEL: v_test_canonicalize_p3_f64:
; AVX2:       # %bb.0: # %entry
; AVX2-NEXT:    movabsq $4613937818241073152, %rax # imm = 0x4008000000000000
; AVX2-NEXT:    movq %rax, (%rdi)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: v_test_canonicalize_p3_f64:
; AVX512F:       # %bb.0: # %entry
; AVX512F-NEXT:    movabsq $4613937818241073152, %rax # imm = 0x4008000000000000
; AVX512F-NEXT:    movq %rax, (%rdi)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: v_test_canonicalize_p3_f64:
; AVX512BW:       # %bb.0: # %entry
; AVX512BW-NEXT:    movabsq $4613937818241073152, %rax # imm = 0x4008000000000000
; AVX512BW-NEXT:    movq %rax, (%rdi)
; AVX512BW-NEXT:    retq
entry:
  %canonicalized = call double @llvm.canonicalize.f64(double 3.0)
  store double %canonicalized, double addrspace(1)* %out
  ret void
}

define void @v_test_canonicalize_p3__bfloat(bfloat addrspace(1)* %out) {
; SSE-LABEL: v_test_canonicalize_p3__bfloat:
; SSE:       # %bb.0: # %entry
; SSE-NEXT:    movw $16448, (%rdi) # imm = 0x4040
; SSE-NEXT:    retq
;
; SSE2-LABEL: v_test_canonicalize_p3__bfloat:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movw $16448, (%rdi) # imm = 0x4040
; SSE2-NEXT:    retq
;
; AVX-LABEL: v_test_canonicalize_p3__bfloat:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    movw $16448, (%rdi) # imm = 0x4040
; AVX-NEXT:    retq
;
; AVX2-LABEL: v_test_canonicalize_p3__bfloat:
; AVX2:       # %bb.0: # %entry
; AVX2-NEXT:    movw $16448, (%rdi) # imm = 0x4040
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: v_test_canonicalize_p3__bfloat:
; AVX512F:       # %bb.0: # %entry
; AVX512F-NEXT:    movw $16448, (%rdi) # imm = 0x4040
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: v_test_canonicalize_p3__bfloat:
; AVX512BW:       # %bb.0: # %entry
; AVX512BW-NEXT:    movw $16448, (%rdi) # imm = 0x4040
; AVX512BW-NEXT:    retq
entry:
  %canonicalized = call bfloat @llvm.canonicalize.bf16(bfloat 3.0)
  store bfloat %canonicalized, bfloat addrspace(1)* %out
  ret void
}

define void @v_test_canonicalize_n3__bfloat(bfloat addrspace(1)* %out) {
; SSE-LABEL: v_test_canonicalize_n3__bfloat:
; SSE:       # %bb.0: # %entry
; SSE-NEXT:    movw $-16320, (%rdi) # imm = 0xC040
; SSE-NEXT:    retq
;
; SSE2-LABEL: v_test_canonicalize_n3__bfloat:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movw $-16320, (%rdi) # imm = 0xC040
; SSE2-NEXT:    retq
;
; AVX-LABEL: v_test_canonicalize_n3__bfloat:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    movw $-16320, (%rdi) # imm = 0xC040
; AVX-NEXT:    retq
;
; AVX2-LABEL: v_test_canonicalize_n3__bfloat:
; AVX2:       # %bb.0: # %entry
; AVX2-NEXT:    movw $-16320, (%rdi) # imm = 0xC040
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: v_test_canonicalize_n3__bfloat:
; AVX512F:       # %bb.0: # %entry
; AVX512F-NEXT:    movw $-16320, (%rdi) # imm = 0xC040
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: v_test_canonicalize_n3__bfloat:
; AVX512BW:       # %bb.0: # %entry
; AVX512BW-NEXT:    movw $-16320, (%rdi) # imm = 0xC040
; AVX512BW-NEXT:    retq
entry:
  %canonicalized = call bfloat @llvm.canonicalize.bf16(bfloat -3.0)
  store bfloat %canonicalized, bfloat addrspace(1)* %out
  ret void
}

define void @v_test_canonicalize_n90_x86_fp80(x86_fp80 addrspace(1)* %out) #1 {
; SSE-LABEL: v_test_canonicalize_n90_x86_fp80:
; SSE:       # %bb.0:
; SSE-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE-NEXT:    fstpt (%rdi)
; SSE-NEXT:    retq
;
; SSE2-LABEL: v_test_canonicalize_n90_x86_fp80:
; SSE2:       # %bb.0:
; SSE2-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SSE2-NEXT:    fstpt (%rdi)
; SSE2-NEXT:    retq
;
; AVX-LABEL: v_test_canonicalize_n90_x86_fp80:
; AVX:       # %bb.0:
; AVX-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX-NEXT:    fstpt (%rdi)
; AVX-NEXT:    retq
;
; AVX2-LABEL: v_test_canonicalize_n90_x86_fp80:
; AVX2:       # %bb.0:
; AVX2-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX2-NEXT:    fstpt (%rdi)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: v_test_canonicalize_n90_x86_fp80:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512F-NEXT:    fstpt (%rdi)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: v_test_canonicalize_n90_x86_fp80:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; AVX512BW-NEXT:    fstpt (%rdi)
; AVX512BW-NEXT:    retq
  %canonicalized = call x86_fp80 @llvm.canonicalize.f80(x86_fp80 0xKC005B400000000000000)
  store x86_fp80 %canonicalized, x86_fp80 addrspace(1)* %out
  ret void
}

define void @v_test_canonicalize_n3__half(half addrspace(1)* %out) {
; SSE-LABEL: v_test_canonicalize_n3__half:
; SSE:       # %bb.0: # %entry
; SSE-NEXT:    pinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SSE-NEXT:    pextrw $0, %xmm0, %eax
; SSE-NEXT:    movw %ax, (%rdi)
; SSE-NEXT:    retq
;
; SSE2-LABEL: v_test_canonicalize_n3__half:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    pinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SSE2-NEXT:    pextrw $0, %xmm0, %eax
; SSE2-NEXT:    movw %ax, (%rdi)
; SSE2-NEXT:    retq
;
; AVX-LABEL: v_test_canonicalize_n3__half:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX-NEXT:    retq
;
; AVX2-LABEL: v_test_canonicalize_n3__half:
; AVX2:       # %bb.0: # %entry
; AVX2-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX2-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: v_test_canonicalize_n3__half:
; AVX512F:       # %bb.0: # %entry
; AVX512F-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512F-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: v_test_canonicalize_n3__half:
; AVX512BW:       # %bb.0: # %entry
; AVX512BW-NEXT:    vpinsrw $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512BW-NEXT:    vpextrw $0, %xmm0, (%rdi)
; AVX512BW-NEXT:    retq
entry:
  %canonicalized = call half @llvm.canonicalize.f16(half 0xHC200)
  store half %canonicalized, half addrspace(1)* %out
  ret void
}
