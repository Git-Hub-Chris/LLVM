; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature
; RUN: opt -S --passes=expand-variadics --expand-variadics-override=lowering < %s | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Check the variables are lowered to the locations this target expects

; The types show the call frames
; CHECK: %single_i32.vararg = type <{ i32 }>
; CHECK: %single_double.vararg = type <{ double }>
; CHECK: %i32_double.vararg = type <{ i32, [4 x i8], double }>
; CHECK: %double_i32.vararg = type <{ double, i32 }>
; CHECK: %fptr_single_i32.vararg = type <{ i32 }>

%struct.__va_list_tag = type { i32, i32, ptr, ptr }

@vararg_ptr = global ptr @vararg, align 8

define void @copy(ptr noundef %va) {
; CHECK-LABEL: define {{[^@]+}}@copy(ptr noundef %va) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %cp = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %cp)
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %cp, ptr %va, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %cp)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %cp)
; CHECK-NEXT:    ret void
;
entry:
  %cp = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %cp)
  call void @llvm.va_copy.p0(ptr nonnull %cp, ptr %va)
  call void @valist(ptr noundef nonnull %cp)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %cp)
  ret void
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)

declare void @llvm.va_copy.p0(ptr, ptr)

declare void @valist(ptr noundef)

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture)

define void @start_once(...) {
; CHECK-LABEL: define {{[^@]+}}@start_once(ptr %varargs) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %s = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s)
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %s, ptr %varargs, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %s)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s)
; CHECK-NEXT:    ret void
;
entry:
  %s = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s)
  call void @llvm.va_start.p0(ptr nonnull %s)
  call void @valist(ptr noundef nonnull %s)
  call void @llvm.va_end.p0(ptr %s)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s)
  ret void
}

declare void @llvm.va_start.p0(ptr)

declare void @llvm.va_end.p0(ptr)

define void @start_twice(...) {
; CHECK-LABEL: define {{[^@]+}}@start_twice(ptr %varargs) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %s0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    %s1 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s0)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s1)
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %s0, ptr %varargs, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %s0)
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %s1, ptr %varargs, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %s1)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s1)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s0)
; CHECK-NEXT:    ret void
;
entry:
  %s0 = alloca [1 x %struct.__va_list_tag], align 16
  %s1 = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s0)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s1)
  call void @llvm.va_start.p0(ptr nonnull %s0)
  call void @valist(ptr noundef nonnull %s0)
  call void @llvm.va_end.p0(ptr %s0)
  call void @llvm.va_start.p0(ptr nonnull %s1)
  call void @valist(ptr noundef nonnull %s1)
  call void @llvm.va_end.p0(ptr %s1)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s1)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s0)
  ret void
}

define void @single_i32(i32 noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_i32(i32 noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %single_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x)
  ret void
}

declare void @vararg(...)

define void @single_double(double noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_double(double noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_double.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %single_double.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store double %x, ptr %0, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x)
  ret void
}

define void @i32_double(i32 noundef %x, double noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_double(i32 noundef %x, double noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_double.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_double.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_double.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    store double %y, ptr %1, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, double noundef %y)
  ret void
}

define void @double_i32(double noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@double_i32(double noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %double_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 12, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %double_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store double %x, ptr %0, align 8
; CHECK-NEXT:    %1 = getelementptr inbounds %double_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 12, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x, i32 noundef %y)
  ret void
}

define void @fptr_single_i32(i32 noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@fptr_single_i32(i32 noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %fptr_single_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %0 = load volatile ptr, ptr @vararg_ptr, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %fptr_single_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %1, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void %0(ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %0 = load volatile ptr, ptr @vararg_ptr, align 8
  tail call void (...) %0(i32 noundef %x)
  ret void
}


