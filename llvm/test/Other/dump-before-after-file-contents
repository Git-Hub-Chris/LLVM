; This first run is intended to test that the -dump* write an appropriate amount of IR to the file for different types of passes

; RUN: mkdir -p %t/logs
; RUN: rm -rf %t/logs
; RUN: opt %s -disable-output -passes='no-op-module,function(no-op-function),function(loop(no-op-loop)),no-op-module' -ir-dump-directory %t/logs -dump-after=no-op-module,no-op-function,no-op-loop -dump-before=no-op-module,no-op-function,no-op-loop

; RUN: cat "$(find '%t/logs' -name '0.NoOpModulePass.0-before.ll')" | FileCheck %s --check-prefix=MODULE-PASS --check-prefix=MODULE-PASS-BEFORE -DSOURCE_FILE_NAME=%s
; RUN: cat "$(find '%t/logs' -name '0.NoOpModulePass.0-after.ll')" | FileCheck %s --check-prefix=MODULE-PASS --check-prefix=MODULE-PASS-AFTER -DSOURCE_FILE_NAME=%s
;
; MODULE-PASS-BEFORE: *** IR Dump Before NoOpModulePass on [module] ***
; MODULE-PASS-AFTER: *** IR Dump After NoOpModulePass on [module] ***
; MODULE-PASS: ; ModuleID = '[[SOURCE_FILE_NAME]]'
; MODULE-PASS: source_filename = "[[SOURCE_FILE_NAME]]"
; MODULE-PASS: define void @bar() {
; MODULE-PASS: entry:
; MODULE-PASS:   br label %loop
; MODULE-PASS: loop:
; MODULE-PASS:   br label %loop
; MODULE-PASS: }

; RUN: cat "$(find '%t/logs' -name '0.NoOpFunctionPass.0-before.ll')" | FileCheck %s --check-prefix=FUNCTION-PASS --check-prefix=FUNCTION-PASS-BEFORE
; RUN: cat "$(find '%t/logs' -name '0.NoOpFunctionPass.0-after.ll')" | FileCheck %s --check-prefix=FUNCTION-PASS --check-prefix=FUNCTION-PASS-AFTER

; FUNCTION-PASS-BEFORE: *** IR Dump Before NoOpFunctionPass on bar ***
; FUNCTION-PASS-AFTER:  *** IR Dump After NoOpFunctionPass on bar ***
; FUNCTION-PASS: define void @bar() {
; FUNCTION-PASS: entry:
; FUNCTION-PASS:     br label %loop
; FUNCTION-PASS: loop:
; FUNCTION-PASS:     br label %loop
; FUNCTION-PASS: }

; RUN: cat "$(find '%t/logs' -name '0.NoOpLoopPass.0-before.ll')" | FileCheck %s --check-prefix=LOOP-PASS --check-prefix=LOOP-PASS-BEFORE
; RUN: cat "$(find '%t/logs' -name '0.NoOpLoopPass.0-after.ll')" | FileCheck %s --check-prefix=LOOP-PASS --check-prefix=LOOP-PASS-AFTER

; LOOP-PASS-BEFORE: *** IR Dump Before NoOpLoopPass on loop ***
; LOOP-PASS-AFTER:  *** IR Dump After NoOpLoopPass on loop ***
; LOOP-PASS: entry:
; LOOP-PASS:   br label %loop
; LOOP-PASS: ; Loop:
; LOOP-PASS: loop:
; LOOP-PASS:   br label %loop

; This test verifies that dumping before and after really does dump before and after

; RUN: rm -rf %t/logs
; RUN: opt -S %s -passes=globaldce -ir-dump-directory %t/logs -dump-before=globaldce -dump-after=globaldce > %t/output.ll
; Just compare the last few lines of all files to remove comments and header inserted by the logging
; RUN: tail -n 7 %s > %t/normalized-input.ll
; RUN: tail -n 7 %t/output.ll > %t/normalized-output.ll
; RUN: tail -n 7 '%t/logs/%s/0.GlobalDCEPass.0-before.ll' > %t/normalized-before.ll
; RUN: tail -n 7 '%t/logs/%s/0.GlobalDCEPass.0-after.ll' > %t/normalized-after.ll
; RUN: diff %t/normalized-input.ll %t/normalized-before.ll
; RUN: diff %t/normalized-output.ll %t/normalized-after.ll

define void @bar() {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  br label %loop
}
