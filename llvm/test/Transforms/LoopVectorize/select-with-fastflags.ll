; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; REQUIRES: asserts

; RUN: opt < %s -passes=loop-vectorize -mtriple=riscv64 -mattr=+v -riscv-v-vector-bits-max=128 \
; RUN: -riscv-v-vector-bits-min=128 -S | FileCheck --check-prefix=FAST %s

define void @select_with_fastmath_flags(ptr noalias %a, ptr noalias %b, ptr noalias %c, i64 %N) {
; FAST-LABEL: define void @select_with_fastmath_flags(
; FAST-SAME: ptr noalias [[A:%.*]], ptr noalias [[B:%.*]], ptr noalias [[C:%.*]], i64 [[N:%.*]]) #[[ATTR0:[0-9]+]] {
; FAST-NEXT:  [[ENTRY:.*]]:
; FAST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; FAST-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 4
; FAST-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[N]], [[TMP1]]
; FAST-NEXT:    br i1 [[MIN_ITERS_CHECK]], label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]
; FAST:       [[VECTOR_PH]]:
; FAST-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; FAST-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 4
; FAST-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N]], [[TMP3]]
; FAST-NEXT:    [[N_VEC:%.*]] = sub i64 [[N]], [[N_MOD_VF]]
; FAST-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; FAST-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 4
; FAST-NEXT:    br label %[[VECTOR_BODY:.*]]
; FAST:       [[VECTOR_BODY]]:
; FAST-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]
; FAST-NEXT:    [[TMP6:%.*]] = add i64 [[INDEX]], 0
; FAST-NEXT:    [[TMP7:%.*]] = getelementptr inbounds nuw float, ptr [[B]], i64 [[TMP6]]
; FAST-NEXT:    [[TMP8:%.*]] = getelementptr inbounds nuw float, ptr [[TMP7]], i32 0
; FAST-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x float>, ptr [[TMP8]], align 4
; FAST-NEXT:    [[TMP9:%.*]] = getelementptr inbounds nuw float, ptr [[C]], i64 [[TMP6]]
; FAST-NEXT:    [[TMP10:%.*]] = getelementptr inbounds nuw float, ptr [[TMP9]], i32 0
; FAST-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 4 x float>, ptr [[TMP10]], align 4
; FAST-NEXT:    [[TMP11:%.*]] = fcmp fast ogt <vscale x 4 x float> [[WIDE_LOAD]], [[WIDE_LOAD1]]
; FAST-NEXT:    [[TMP12:%.*]] = fadd fast <vscale x 4 x float> [[WIDE_LOAD]], splat (float 1.000000e+01)
; FAST-NEXT:    [[TMP13:%.*]] = select <vscale x 4 x i1> [[TMP11]], <vscale x 4 x float> [[TMP12]], <vscale x 4 x float> [[WIDE_LOAD1]]
; FAST-NEXT:    [[TMP14:%.*]] = getelementptr inbounds nuw float, ptr [[A]], i64 [[TMP6]]
; FAST-NEXT:    [[TMP15:%.*]] = getelementptr inbounds nuw float, ptr [[TMP14]], i32 0
; FAST-NEXT:    store <vscale x 4 x float> [[TMP13]], ptr [[TMP15]], align 4
; FAST-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP5]]
; FAST-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; FAST-NEXT:    br i1 [[TMP16]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; FAST:       [[MIDDLE_BLOCK]]:
; FAST-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N]], [[N_VEC]]
; FAST-NEXT:    br i1 [[CMP_N]], label %[[EXIT:.*]], label %[[SCALAR_PH]]
; FAST:       [[SCALAR_PH]]:
; FAST-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]
; FAST-NEXT:    br label %[[FOR_BODY:.*]]
; FAST:       [[FOR_BODY]]:
; FAST-NEXT:    [[IV:%.*]] = phi i64 [ [[IV_NEXT:%.*]], %[[FOR_BODY]] ], [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ]
; FAST-NEXT:    [[GEP:%.*]] = getelementptr inbounds nuw float, ptr [[B]], i64 [[IV]]
; FAST-NEXT:    [[TMP17:%.*]] = load float, ptr [[GEP]], align 4
; FAST-NEXT:    [[GEP3:%.*]] = getelementptr inbounds nuw float, ptr [[C]], i64 [[IV]]
; FAST-NEXT:    [[TMP18:%.*]] = load float, ptr [[GEP3]], align 4
; FAST-NEXT:    [[CMP4:%.*]] = fcmp fast ogt float [[TMP17]], [[TMP18]]
; FAST-NEXT:    [[ADD:%.*]] = fadd fast float [[TMP17]], 1.000000e+01
; FAST-NEXT:    [[COND:%.*]] = select fast i1 [[CMP4]], float [[ADD]], float [[TMP18]]
; FAST-NEXT:    [[GEP11:%.*]] = getelementptr inbounds nuw float, ptr [[A]], i64 [[IV]]
; FAST-NEXT:    store float [[COND]], ptr [[GEP11]], align 4
; FAST-NEXT:    [[IV_NEXT]] = add nuw nsw i64 [[IV]], 1
; FAST-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[IV_NEXT]], [[N]]
; FAST-NEXT:    br i1 [[EXITCOND_NOT]], label %[[EXIT]], label %[[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; FAST:       [[EXIT]]:
; FAST-NEXT:    ret void
;


entry:
  br label %for.body

for.body:
  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %entry ]
  %gep = getelementptr inbounds nuw float, ptr %b, i64 %iv
  %0 = load float, ptr %gep, align 4
  %gep3 = getelementptr inbounds nuw float, ptr %c, i64 %iv
  %1 = load float, ptr %gep3, align 4
  %cmp4 = fcmp fast ogt float %0, %1
  %add = fadd fast float %0, 1.000000e+01
  %cond = select fast i1 %cmp4, float %add, float %1
  %gep11 = getelementptr inbounds nuw float, ptr %a, i64 %iv
  store float %cond, ptr %gep11, align 4
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond.not = icmp eq i64 %iv.next, %N
  br i1 %exitcond.not, label %exit, label %for.body

exit:
  ret void
}
;.
; FAST: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; FAST: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; FAST: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; FAST: [[LOOP3]] = distinct !{[[LOOP3]], [[META2]], [[META1]]}
;.
