; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals --version 3
; RUN: opt -passes=simplifycfg,jump-threading -simplifycfg-require-and-preserve-domtree=1 -S < %s | FileCheck %s
; RUN: opt -O2 -S < %s | FileCheck --check-prefixes=O2 %s

declare void @set_value(ptr)

declare void @bar()

define void @foo(i1 %0) {
; CHECK-LABEL: define void @foo(
; CHECK-SAME: i1 [[TMP0:%.*]]) {
; CHECK-NEXT:  start:
; CHECK-NEXT:    [[V:%.*]] = alloca i64, align 8
; CHECK-NEXT:    call void @set_value(ptr [[V]])
; CHECK-NEXT:    [[L1:%.*]] = load i64, ptr [[V]], align 8
; CHECK-NEXT:    [[C1:%.*]] = icmp eq i64 [[L1]], 0
; CHECK-NEXT:    [[OR_COND:%.*]] = select i1 [[TMP0]], i1 [[C1]], i1 false
; CHECK-NEXT:    br i1 [[OR_COND]], label [[BB1:%.*]], label [[COMMON_RET:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    store i64 0, ptr [[V]], align 8
; CHECK-NEXT:    br label [[COMMON_RET]]
; CHECK:       common.ret:
; CHECK-NEXT:    ret void
;
; O2-LABEL: define void @foo(
; O2-SAME: i1 [[TMP0:%.*]]) local_unnamed_addr {
; O2-NEXT:  start:
; O2-NEXT:    [[V:%.*]] = alloca i64, align 8
; O2-NEXT:    call void @set_value(ptr nonnull [[V]])
; O2-NEXT:    ret void
;
start:
  %v = alloca i64, align 8
  call void @set_value(ptr %v)
  br i1 %0, label %bb0, label %bb2

bb0:                                              ; preds = %start
  %l1 = load i64, ptr %v, align 8, !range !0
  %c1 = icmp eq i64 %l1, 0
  br i1 %c1, label %bb1, label %bb2

bb1:                                              ; preds = %bb0
  store i64 0, ptr %v, align 8
  br label %bb2

bb2:                                              ; preds = %bb1, %bb0, %start
  %l2 = load i64, ptr %v, align 8
  %1 = icmp eq i64 %l2, 2
  br i1 %1, label %bb3, label %bb4

bb3:                                              ; preds = %bb2
  call void @bar()
  ret void

bb4:                                              ; preds = %bb2
  ret void
}

!0 = !{i64 0, i64 2}
