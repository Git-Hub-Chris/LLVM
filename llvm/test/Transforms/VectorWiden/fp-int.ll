; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=vector-widen -vw-override-target-consider-to-widen=1 -S %s 2>&1 | FileCheck %s

define void @fptosi(<8 x half> %a, <8 x half> %b, ptr %ptr, ptr %ptr1) {
; CHECK-LABEL: define void @fptosi(
; CHECK-SAME: <8 x half> [[A:%.*]], <8 x half> [[B:%.*]], ptr [[PTR:%.*]], ptr [[PTR1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <16 x half> @llvm.vector.insert.v16f16.v8f16(<16 x half> undef, <8 x half> [[B]], i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call <16 x half> @llvm.vector.insert.v16f16.v8f16(<16 x half> [[TMP0]], <8 x half> [[A]], i64 8)
; CHECK-NEXT:    [[TMP2:%.*]] = fptosi <16 x half> [[TMP1]] to <16 x i16>
; CHECK-NEXT:    [[TMP3:%.*]] = call <8 x i16> @llvm.vector.extract.v8i16.v16i16(<16 x i16> [[TMP2]], i64 0)
; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i16> @llvm.vector.extract.v8i16.v16i16(<16 x i16> [[TMP2]], i64 8)
; CHECK-NEXT:    store <8 x i16> [[TMP4]], ptr [[PTR]], align 16
; CHECK-NEXT:    store <8 x i16> [[TMP3]], ptr [[PTR1]], align 16
; CHECK-NEXT:    ret void
;
entry:
  %0 = fptosi <8 x half> %a to <8 x i16>
  %1 = fptosi <8 x half> %b to <8 x i16>
  store <8 x i16> %0, ptr %ptr, align 16
  store <8 x i16> %1, ptr %ptr1, align 16
  ret void
}

define void @sitofp(<8 x i16> %a, <8 x i16> %b, ptr %ptr, ptr %ptr1) {
; CHECK-LABEL: define void @sitofp(
; CHECK-SAME: <8 x i16> [[A:%.*]], <8 x i16> [[B:%.*]], ptr [[PTR:%.*]], ptr [[PTR1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <16 x i16> @llvm.vector.insert.v16i16.v8i16(<16 x i16> undef, <8 x i16> [[B]], i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call <16 x i16> @llvm.vector.insert.v16i16.v8i16(<16 x i16> [[TMP0]], <8 x i16> [[A]], i64 8)
; CHECK-NEXT:    [[TMP2:%.*]] = sitofp <16 x i16> [[TMP1]] to <16 x half>
; CHECK-NEXT:    [[TMP3:%.*]] = call <8 x half> @llvm.vector.extract.v8f16.v16f16(<16 x half> [[TMP2]], i64 0)
; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x half> @llvm.vector.extract.v8f16.v16f16(<16 x half> [[TMP2]], i64 8)
; CHECK-NEXT:    store <8 x half> [[TMP4]], ptr [[PTR]], align 16
; CHECK-NEXT:    store <8 x half> [[TMP3]], ptr [[PTR1]], align 16
; CHECK-NEXT:    ret void
;
entry:
  %0 = sitofp <8 x i16> %a to <8 x half>
  %1 = sitofp <8 x i16> %b to <8 x half>
  store <8 x half> %0, ptr %ptr, align 16
  store <8 x half> %1, ptr %ptr1, align 16
  ret void
}

define void @fptoui(<8 x half> %a, <8 x half> %b, ptr %ptr, ptr %ptr1) {
; CHECK-LABEL: define void @fptoui(
; CHECK-SAME: <8 x half> [[A:%.*]], <8 x half> [[B:%.*]], ptr [[PTR:%.*]], ptr [[PTR1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <16 x half> @llvm.vector.insert.v16f16.v8f16(<16 x half> undef, <8 x half> [[B]], i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call <16 x half> @llvm.vector.insert.v16f16.v8f16(<16 x half> [[TMP0]], <8 x half> [[A]], i64 8)
; CHECK-NEXT:    [[TMP2:%.*]] = fptoui <16 x half> [[TMP1]] to <16 x i16>
; CHECK-NEXT:    [[TMP3:%.*]] = call <8 x i16> @llvm.vector.extract.v8i16.v16i16(<16 x i16> [[TMP2]], i64 0)
; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i16> @llvm.vector.extract.v8i16.v16i16(<16 x i16> [[TMP2]], i64 8)
; CHECK-NEXT:    store <8 x i16> [[TMP4]], ptr [[PTR]], align 16
; CHECK-NEXT:    store <8 x i16> [[TMP3]], ptr [[PTR1]], align 16
; CHECK-NEXT:    ret void
;
entry:
  %0 = fptoui <8 x half> %a to <8 x i16>
  %1 = fptoui <8 x half> %b to <8 x i16>
  store <8 x i16> %0, ptr %ptr, align 16
  store <8 x i16> %1, ptr %ptr1, align 16
  ret void
}

define void @uitofp(<8 x i16> %a, <8 x i16> %b, ptr %ptr, ptr %ptr1) {
; CHECK-LABEL: define void @uitofp(
; CHECK-SAME: <8 x i16> [[A:%.*]], <8 x i16> [[B:%.*]], ptr [[PTR:%.*]], ptr [[PTR1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <16 x i16> @llvm.vector.insert.v16i16.v8i16(<16 x i16> undef, <8 x i16> [[B]], i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call <16 x i16> @llvm.vector.insert.v16i16.v8i16(<16 x i16> [[TMP0]], <8 x i16> [[A]], i64 8)
; CHECK-NEXT:    [[TMP2:%.*]] = uitofp <16 x i16> [[TMP1]] to <16 x half>
; CHECK-NEXT:    [[TMP3:%.*]] = call <8 x half> @llvm.vector.extract.v8f16.v16f16(<16 x half> [[TMP2]], i64 0)
; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x half> @llvm.vector.extract.v8f16.v16f16(<16 x half> [[TMP2]], i64 8)
; CHECK-NEXT:    store <8 x half> [[TMP4]], ptr [[PTR]], align 16
; CHECK-NEXT:    store <8 x half> [[TMP3]], ptr [[PTR1]], align 16
; CHECK-NEXT:    ret void
;
entry:
  %0 = uitofp <8 x i16> %a to <8 x half>
  %1 = uitofp <8 x i16> %b to <8 x half>
  store <8 x half> %0, ptr %ptr, align 16
  store <8 x half> %1, ptr %ptr1, align 16
  ret void
}
