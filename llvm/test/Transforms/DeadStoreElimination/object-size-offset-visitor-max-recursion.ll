; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=dse -S -object-size-offset-visitor-max-recurse-depth=1 < %s | FileCheck %s --check-prefix=NO
; RUN: opt -passes=dse -S -object-size-offset-visitor-max-recurse-depth=2 < %s | FileCheck %s --check-prefix=YES

declare void @use(ptr)

define void @f(i32 %i, i1 %c) {
; NO-LABEL: define void @f(
; NO-SAME: i32 [[I:%.*]], i1 [[C:%.*]]) {
; NO-NEXT:  b0:
; NO-NEXT:    [[A1:%.*]] = alloca i32, align 4
; NO-NEXT:    [[A2:%.*]] = alloca i32, align 4
; NO-NEXT:    br i1 [[C]], label [[B1:%.*]], label [[B2:%.*]]
; NO:       b1:
; NO-NEXT:    [[A3:%.*]] = phi ptr [ [[A1]], [[B0:%.*]] ]
; NO-NEXT:    br label [[B3:%.*]]
; NO:       b2:
; NO-NEXT:    [[A4:%.*]] = phi ptr [ [[A2]], [[B0]] ]
; NO-NEXT:    br label [[B3]]
; NO:       b3:
; NO-NEXT:    [[A5:%.*]] = phi ptr [ [[A3]], [[B1]] ], [ [[A4]], [[B2]] ]
; NO-NEXT:    [[G:%.*]] = getelementptr i8, ptr [[A5]], i32 [[I]]
; NO-NEXT:    store i8 1, ptr [[G]], align 1
; NO-NEXT:    store i32 0, ptr [[A5]], align 4
; NO-NEXT:    call void @use(ptr [[A5]])
; NO-NEXT:    ret void
;
; YES-LABEL: define void @f(
; YES-SAME: i32 [[I:%.*]], i1 [[C:%.*]]) {
; YES-NEXT:  b0:
; YES-NEXT:    [[A1:%.*]] = alloca i32, align 4
; YES-NEXT:    [[A2:%.*]] = alloca i32, align 4
; YES-NEXT:    br i1 [[C]], label [[B1:%.*]], label [[B2:%.*]]
; YES:       b1:
; YES-NEXT:    [[A3:%.*]] = phi ptr [ [[A1]], [[B0:%.*]] ]
; YES-NEXT:    br label [[B3:%.*]]
; YES:       b2:
; YES-NEXT:    [[A4:%.*]] = phi ptr [ [[A2]], [[B0]] ]
; YES-NEXT:    br label [[B3]]
; YES:       b3:
; YES-NEXT:    [[A5:%.*]] = phi ptr [ [[A3]], [[B1]] ], [ [[A4]], [[B2]] ]
; YES-NEXT:    store i32 0, ptr [[A5]], align 4
; YES-NEXT:    call void @use(ptr [[A5]])
; YES-NEXT:    ret void
;
b0:
  %a1 = alloca i32
  %a2 = alloca i32
  br i1 %c, label %b1, label %b2
b1:
  %a3 = phi ptr [ %a1, %b0 ]
  br label %b3
b2:
  %a4 = phi ptr [ %a2, %b0 ]
  br label %b3
b3:
  %a5 = phi ptr [ %a3, %b1 ], [ %a4, %b2 ]
  %g = getelementptr i8, ptr %a5, i32 %i
  store i8 1, ptr %g
  store i32 0, ptr %a5
  call void @use(ptr %a5)
  ret void
}

define void @g(i32 %i, i1 %c1, i1 %c2) {
; NO-LABEL: define void @g(
; NO-SAME: i32 [[I:%.*]], i1 [[C1:%.*]], i1 [[C2:%.*]]) {
; NO-NEXT:    [[A1:%.*]] = alloca i32, align 4
; NO-NEXT:    [[A2:%.*]] = alloca i32, align 4
; NO-NEXT:    [[A3:%.*]] = alloca i32, align 4
; NO-NEXT:    [[A4:%.*]] = select i1 [[C1]], ptr [[A1]], ptr [[A2]]
; NO-NEXT:    [[A5:%.*]] = select i1 [[C2]], ptr [[A4]], ptr [[A3]]
; NO-NEXT:    [[G:%.*]] = getelementptr i8, ptr [[A5]], i32 [[I]]
; NO-NEXT:    store i8 1, ptr [[G]], align 1
; NO-NEXT:    store i32 0, ptr [[A5]], align 4
; NO-NEXT:    call void @use(ptr [[A5]])
; NO-NEXT:    ret void
;
; YES-LABEL: define void @g(
; YES-SAME: i32 [[I:%.*]], i1 [[C1:%.*]], i1 [[C2:%.*]]) {
; YES-NEXT:    [[A1:%.*]] = alloca i32, align 4
; YES-NEXT:    [[A2:%.*]] = alloca i32, align 4
; YES-NEXT:    [[A3:%.*]] = alloca i32, align 4
; YES-NEXT:    [[A4:%.*]] = select i1 [[C1]], ptr [[A1]], ptr [[A2]]
; YES-NEXT:    [[A5:%.*]] = select i1 [[C2]], ptr [[A4]], ptr [[A3]]
; YES-NEXT:    store i32 0, ptr [[A5]], align 4
; YES-NEXT:    call void @use(ptr [[A5]])
; YES-NEXT:    ret void
;
  %a1 = alloca i32
  %a2 = alloca i32
  %a3 = alloca i32
  %a4 = select i1 %c1, ptr %a1, ptr %a2
  %a5 = select i1 %c2, ptr %a4, ptr %a3
  %g = getelementptr i8, ptr %a5, i32 %i
  store i8 1, ptr %g
  store i32 0, ptr %a5
  call void @use(ptr %a5)
  ret void
}
