; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=dse -enable-dse-initializes-attr-improvement -S | FileCheck %s

declare void @p1_write_only(ptr nocapture noundef writeonly initializes((0, 2)) dead_on_unwind)
declare void @p1_write_then_read(ptr nocapture noundef initializes((0, 2)) dead_on_unwind)
declare void @p1_clobber(ptr nocapture noundef)
declare void @p2_same_range(ptr nocapture noundef initializes((0, 2)) dead_on_unwind, ptr nocapture noundef initializes((0, 2)) dead_on_unwind)
declare void @p2_no_init(ptr nocapture noundef initializes((0, 2)) dead_on_unwind, ptr nocapture noundef dead_on_unwind)
declare void @p2_no_dead_on_unwind(ptr nocapture noundef initializes((0, 2)) dead_on_unwind, ptr nocapture noundef initializes((0, 2)))
declare void @p2_no_dead_on_unwind_but_nounwind(ptr nocapture noundef initializes((0, 2)) dead_on_unwind, ptr nocapture noundef initializes((0, 2))) nounwind

; Function Attrs: mustprogress nounwind uwtable
define i16 @p1_write_only_caller() {
; CHECK-LABEL: @p1_write_only_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    call void @p1_write_only(ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  store i16 0, ptr %ptr
  call void @p1_write_only(ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @p1_write_then_read_caller() {
; CHECK-LABEL: @p1_write_then_read_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    call void @p1_write_then_read(ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  store i16 0, ptr %ptr
  call void @p1_write_then_read(ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @p1_write_then_read_caller_with_clobber() {
; CHECK-LABEL: @p1_write_then_read_caller_with_clobber(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    store i16 0, ptr %ptr
; CHECK-NEXT:    call void @p1_clobber(ptr %ptr)
; CHECK-NEXT:    call void @p1_write_then_read(ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  store i16 0, ptr %ptr
  call void @p1_clobber(ptr %ptr)
  call void @p1_write_then_read(ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @p2_same_range_nonalias_caller() {
; CHECK-LABEL: @p2_same_range_nonalias_caller(
; CHECK-NEXT:    %ptr1 = alloca i16, align 2
; CHECK-NEXT:    %ptr2 = alloca i16, align 2
; CHECK-NEXT:    call void @p2_same_range(ptr %ptr1, ptr %ptr2)
; CHECK-NEXT:    %l = load i16, ptr %ptr1
; CHECK-NEXT:    ret i16 %l
;
  %ptr1 = alloca i16
  %ptr2 = alloca i16
  store i16 0, ptr %ptr1
  store i16 0, ptr %ptr2
  call void @p2_same_range(ptr %ptr1, ptr %ptr2)
  %l = load i16, ptr %ptr1
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @p2_same_range_alias_caller() {
; CHECK-LABEL: @p2_same_range_alias_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    call void @p2_same_range(ptr %ptr, ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  store i16 0, ptr %ptr
  call void @p2_same_range(ptr %ptr, ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @p2_no_init_alias_caller() {
; CHECK-LABEL: @p2_no_init_alias_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    store i16 0, ptr %ptr
; CHECK-NEXT:    call void @p2_no_init(ptr %ptr, ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  store i16 0, ptr %ptr
  call void @p2_no_init(ptr %ptr, ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @p2_no_dead_on_unwind_alias_caller() {
; CHECK-LABEL: @p2_no_dead_on_unwind_alias_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    store i16 0, ptr %ptr
; CHECK-NEXT:    call void @p2_no_dead_on_unwind(ptr %ptr, ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  store i16 0, ptr %ptr
  call void @p2_no_dead_on_unwind(ptr %ptr, ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @p2_no_dead_on_unwind_but_nounwind_alias_caller() {
; CHECK-LABEL: @p2_no_dead_on_unwind_but_nounwind_alias_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    call void @p2_no_dead_on_unwind_but_nounwind(ptr %ptr, ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  store i16 0, ptr %ptr
  call void @p2_no_dead_on_unwind_but_nounwind(ptr %ptr, ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

declare void @llvm.memset.p0.i64(ptr nocapture, i8, i64, i1) nounwind
declare void @large_p1(ptr nocapture noundef initializes((0, 200))) nounwind
declare void @large_p2(ptr nocapture noundef initializes((0, 200)), ptr nocapture noundef initializes((0, 100))) nounwind

; Function Attrs: mustprogress nounwind uwtable
define i16 @large_p1_caller() {
; CHECK-LABEL: @large_p1_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    call void @large_p1(ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  call void @llvm.memset.p0.i64(ptr %ptr, i8 42, i64 100, i1 false)
  call void @large_p1(ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

; Function Attrs: mustprogress nounwind uwtable
define i16 @large_p2_nonalias_caller() {
; CHECK-LABEL: @large_p2_nonalias_caller(
; CHECK-NEXT:    %ptr1 = alloca i16, align 2
; CHECK-NEXT:    %ptr2 = alloca i16, align 2
; CHECK-NEXT:    call void @large_p2(ptr %ptr1, ptr %ptr2)
; CHECK-NEXT:    %l = load i16, ptr %ptr1
; CHECK-NEXT:    ret i16 %l
;
  %ptr1 = alloca i16
  %ptr2 = alloca i16
  call void @llvm.memset.p0.i64(ptr %ptr1, i8 42, i64 200, i1 false)
  call void @llvm.memset.p0.i64(ptr %ptr2, i8 42, i64 100, i1 false)
  call void @large_p2(ptr %ptr1, ptr %ptr2)
  %l = load i16, ptr %ptr1
  ret i16 %l
}


; Function Attrs: mustprogress nounwind uwtable
define i16 @large_p2_alias_caller() {
; CHECK-LABEL: @large_p2_alias_caller(
; CHECK-NEXT:    %ptr = alloca i16, align 2
; CHECK-NEXT:    %1 = getelementptr inbounds i8, ptr %ptr, i64 100
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 1 %1, i8 42, i64 200, i1 false)
; CHECK-NEXT:    call void @large_p2(ptr %ptr, ptr %ptr)
; CHECK-NEXT:    %l = load i16, ptr %ptr
; CHECK-NEXT:    ret i16 %l
;
  %ptr = alloca i16
  call void @llvm.memset.p0.i64(ptr %ptr, i8 42, i64 300, i1 false)
  call void @large_p2(ptr %ptr, ptr %ptr)
  %l = load i16, ptr %ptr
  ret i16 %l
}

