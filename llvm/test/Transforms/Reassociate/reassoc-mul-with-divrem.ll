; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=reassociate -S | FileCheck %s

define i8 @re_order_mul_with_udiv_C(i8 %xx1, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_udiv_C(
; CHECK-SAME: i8 [[XX1:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X1:%.*]] = add nuw i8 [[XX1]], 1
; CHECK-NEXT:    [[X2:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[MUL_B:%.*]] = mul nuw i8 [[X1]], 9
; CHECK-NEXT:    [[MUL_A:%.*]] = mul nuw i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul nuw i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = udiv i8 [[MUL_C]], 3
; CHECK-NEXT:    ret i8 [[R]]
;
  %x1 = add nuw i8 %xx1, 1
  %x2 = add nuw i8 %xx2, 1
  %x3 = add nuw i8 %xx3, 1
  %mul_a = mul nuw i8 9, %x1
  %mul_b = mul nuw i8 %x2, %x3
  %mul_c = mul nuw i8 %mul_a, %mul_b
  %r = udiv i8 %mul_c, 3
  ret i8 %r
}

define i8 @re_order_mul_with_udiv_C_fail_not_simplifiable(i8 %xx1, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_udiv_C_fail_not_simplifiable(
; CHECK-SAME: i8 [[XX1:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X1:%.*]] = add nuw i8 [[XX1]], 1
; CHECK-NEXT:    [[X2:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[MUL_B:%.*]] = mul nuw i8 [[X1]], 9
; CHECK-NEXT:    [[MUL_A:%.*]] = mul nuw i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul nuw i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = udiv i8 [[MUL_C]], 4
; CHECK-NEXT:    ret i8 [[R]]
;
  %x1 = add nuw i8 %xx1, 1
  %x2 = add nuw i8 %xx2, 1
  %x3 = add nuw i8 %xx3, 1
  %mul_a = mul nuw i8 9, %x1
  %mul_b = mul nuw i8 %x2, %x3
  %mul_c = mul nuw i8 %mul_a, %mul_b
  %r = udiv i8 %mul_c, 4
  ret i8 %r
}

define i8 @re_order_mul_with_udiv_var(i8 %xx0, i8 %xx1, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_udiv_var(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX1:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X0:%.*]] = add nuw i8 [[XX0]], 1
; CHECK-NEXT:    [[X1:%.*]] = add nuw i8 [[XX1]], 1
; CHECK-NEXT:    [[X2:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[MUL_B:%.*]] = mul nuw i8 [[X1]], [[X0]]
; CHECK-NEXT:    [[MUL_A:%.*]] = mul nuw i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul nuw i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = udiv i8 [[MUL_C]], [[X0]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0 = add nuw i8 %xx0, 1
  %x1 = add nuw i8 %xx1, 1
  %x2 = add nuw i8 %xx2, 1
  %x3 = add nuw i8 %xx3, 1
  %mul_a = mul nuw i8 %x0, %x1
  %mul_b = mul nuw i8 %x2, %x3
  %mul_c = mul nuw i8 %mul_a, %mul_b
  %r = udiv i8 %mul_c, %x0
  ret i8 %r
}

define i8 @re_order_mul_with_udiv_var_fail_no_nuw(i8 %xx0, i8 %xx1, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_udiv_var_fail_no_nuw(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX1:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X0:%.*]] = add nuw i8 [[XX0]], 1
; CHECK-NEXT:    [[X1:%.*]] = add nuw i8 [[XX1]], 1
; CHECK-NEXT:    [[X2:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[MUL_B:%.*]] = mul i8 [[X1]], [[X0]]
; CHECK-NEXT:    [[MUL_A:%.*]] = mul i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = udiv i8 [[MUL_C]], [[X0]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0 = add nuw i8 %xx0, 1
  %x1 = add nuw i8 %xx1, 1
  %x2 = add nuw i8 %xx2, 1
  %x3 = add nuw i8 %xx3, 1
  %mul_a = mul nuw i8 %x0, %x1
  %mul_b = mul nuw i8 %x2, %x3
  %mul_c = mul nsw i8 %mul_a, %mul_b
  %r = udiv i8 %mul_c, %x0
  ret i8 %r
}

define i8 @re_order_mul_with_sdiv_var(i8 %xx0, i8 %xx1, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_sdiv_var(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX1:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X0_NZ:%.*]] = add nuw i8 [[XX0]], 1
; CHECK-NEXT:    [[X1_NZ:%.*]] = add nuw i8 [[XX1]], 1
; CHECK-NEXT:    [[X2_NZ:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3_NZ:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[X0:%.*]] = call i8 @llvm.umin.i8(i8 [[X0_NZ]], i8 7)
; CHECK-NEXT:    [[X1:%.*]] = call i8 @llvm.umin.i8(i8 [[X1_NZ]], i8 7)
; CHECK-NEXT:    [[X2:%.*]] = call i8 @llvm.umin.i8(i8 [[X2_NZ]], i8 7)
; CHECK-NEXT:    [[X3:%.*]] = call i8 @llvm.umin.i8(i8 [[X3_NZ]], i8 7)
; CHECK-NEXT:    [[MUL_B:%.*]] = mul nsw i8 [[X1]], [[X0]]
; CHECK-NEXT:    [[MUL_A:%.*]] = mul nsw i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul nsw i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = sdiv i8 [[MUL_C]], [[X2]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0_nz = add nuw i8 %xx0, 1
  %x1_nz = add nuw i8 %xx1, 1
  %x2_nz = add nuw i8 %xx2, 1
  %x3_nz = add nuw i8 %xx3, 1
  %x0 = call i8 @llvm.umin.i8(i8 %x0_nz, i8 7)
  %x1 = call i8 @llvm.umin.i8(i8 %x1_nz, i8 7)
  %x2 = call i8 @llvm.umin.i8(i8 %x2_nz, i8 7)
  %x3 = call i8 @llvm.umin.i8(i8 %x3_nz, i8 7)
  %mul_a = mul nsw i8 %x0, %x1
  %mul_b = mul nsw i8 %x2, %x3
  %mul_c = mul nsw i8 %mul_a, %mul_b
  %r = sdiv i8 %mul_c, %x2
  ret i8 %r
}

define i8 @re_order_mul_with_sdiv_var_fail_no_max(i8 %xx0, i8 %xx1, i8 %xx2, i8 %xx3, i8 %z) {
; CHECK-LABEL: define i8 @re_order_mul_with_sdiv_var_fail_no_max(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX1:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[X0_NZ:%.*]] = add nuw i8 [[XX0]], 1
; CHECK-NEXT:    [[X1_NZ:%.*]] = add nuw i8 [[XX1]], 1
; CHECK-NEXT:    [[X2_NZ:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3_NZ:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[X0:%.*]] = call i8 @llvm.umin.i8(i8 [[X0_NZ]], i8 7)
; CHECK-NEXT:    [[X1:%.*]] = call i8 @llvm.umin.i8(i8 [[X1_NZ]], i8 7)
; CHECK-NEXT:    [[X2:%.*]] = call i8 @llvm.umin.i8(i8 [[X2_NZ]], i8 7)
; CHECK-NEXT:    [[X3:%.*]] = call i8 @llvm.umin.i8(i8 [[X3_NZ]], i8 7)
; CHECK-NEXT:    [[MUL_B:%.*]] = mul nsw i8 [[X1]], [[X0]]
; CHECK-NEXT:    [[MUL_A:%.*]] = mul nsw i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul nsw i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = sdiv i8 [[MUL_C]], [[Z]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0_nz = add nuw i8 %xx0, 1
  %x1_nz = add nuw i8 %xx1, 1
  %x2_nz = add nuw i8 %xx2, 1
  %x3_nz = add nuw i8 %xx3, 1
  %x0 = call i8 @llvm.umin.i8(i8 %x0_nz, i8 7)
  %x1 = call i8 @llvm.umin.i8(i8 %x1_nz, i8 7)
  %x2 = call i8 @llvm.umin.i8(i8 %x2_nz, i8 7)
  %x3 = call i8 @llvm.umin.i8(i8 %x3_nz, i8 7)
  %mul_a = mul nsw i8 %x0, %x1
  %mul_b = mul nsw i8 %x2, %x3
  %mul_c = mul nsw i8 %mul_a, %mul_b
  %r = sdiv i8 %mul_c, %z
  ret i8 %r
}

define i8 @re_order_mul_with_srem_C(i8 %xx0, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_srem_C(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X0_NZ:%.*]] = add nuw i8 [[XX0]], 1
; CHECK-NEXT:    [[X2_NZ:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3_NZ:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[X0:%.*]] = call i8 @llvm.umin.i8(i8 [[X0_NZ]], i8 7)
; CHECK-NEXT:    [[X2:%.*]] = call i8 @llvm.umin.i8(i8 [[X2_NZ]], i8 7)
; CHECK-NEXT:    [[X3:%.*]] = call i8 @llvm.umin.i8(i8 [[X3_NZ]], i8 7)
; CHECK-NEXT:    [[MUL_B:%.*]] = mul nsw i8 [[X0]], 20
; CHECK-NEXT:    [[MUL_A:%.*]] = mul nsw i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul nsw i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = srem i8 [[MUL_C]], 5
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0_nz = add nuw i8 %xx0, 1
  %x2_nz = add nuw i8 %xx2, 1
  %x3_nz = add nuw i8 %xx3, 1
  %x0 = call i8 @llvm.umin.i8(i8 %x0_nz, i8 7)
  %x2 = call i8 @llvm.umin.i8(i8 %x2_nz, i8 7)
  %x3 = call i8 @llvm.umin.i8(i8 %x3_nz, i8 7)
  %mul_a = mul nsw i8 %x0, 20
  %mul_b = mul nsw i8 %x2, %x3
  %mul_c = mul nsw i8 %mul_a, %mul_b
  %r = srem i8 %mul_c, 5
  ret i8 %r
}

define i8 @re_order_mul_with_srem_C_fail_no_nsw(i8 %xx0, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_srem_C_fail_no_nsw(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X0_NZ:%.*]] = add nuw i8 [[XX0]], 1
; CHECK-NEXT:    [[X2_NZ:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3_NZ:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[X0:%.*]] = call i8 @llvm.umin.i8(i8 [[X0_NZ]], i8 7)
; CHECK-NEXT:    [[X2:%.*]] = call i8 @llvm.umin.i8(i8 [[X2_NZ]], i8 7)
; CHECK-NEXT:    [[X3:%.*]] = call i8 @llvm.umin.i8(i8 [[X3_NZ]], i8 7)
; CHECK-NEXT:    [[MUL_B:%.*]] = mul i8 [[X0]], 20
; CHECK-NEXT:    [[MUL_A:%.*]] = mul i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = srem i8 [[MUL_C]], 5
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0_nz = add nuw i8 %xx0, 1
  %x2_nz = add nuw i8 %xx2, 1
  %x3_nz = add nuw i8 %xx3, 1
  %x0 = call i8 @llvm.umin.i8(i8 %x0_nz, i8 7)
  %x2 = call i8 @llvm.umin.i8(i8 %x2_nz, i8 7)
  %x3 = call i8 @llvm.umin.i8(i8 %x3_nz, i8 7)
  %mul_a = mul nuw i8 %x0, 20
  %mul_b = mul nsw i8 %x2, %x3
  %mul_c = mul nsw i8 %mul_a, %mul_b
  %r = srem i8 %mul_c, 5
  ret i8 %r
}

define i8 @re_order_mul_with_urem_C(i8 %xx0, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_urem_C(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X0:%.*]] = add nuw i8 [[XX0]], 1
; CHECK-NEXT:    [[X2:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[MUL_B:%.*]] = mul nuw i8 [[X0]], 20
; CHECK-NEXT:    [[MUL_A:%.*]] = mul nuw i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul nuw i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = urem i8 [[MUL_C]], 20
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0 = add nuw i8 %xx0, 1
  %x2 = add nuw i8 %xx2, 1
  %x3 = add nuw i8 %xx3, 1
  %mul_a = mul nuw i8 %x0, 20
  %mul_b = mul nuw i8 %x2, %x3
  %mul_c = mul nuw i8 %mul_a, %mul_b
  %r = urem i8 %mul_c, 20
  ret i8 %r
}

define i8 @re_order_mul_with_urem_C_fail_no_nuw(i8 %xx0, i8 %xx2, i8 %xx3) {
; CHECK-LABEL: define i8 @re_order_mul_with_urem_C_fail_no_nuw(
; CHECK-SAME: i8 [[XX0:%.*]], i8 [[XX2:%.*]], i8 [[XX3:%.*]]) {
; CHECK-NEXT:    [[X0:%.*]] = add nsw i8 [[XX0]], 1
; CHECK-NEXT:    [[X2:%.*]] = add nuw i8 [[XX2]], 1
; CHECK-NEXT:    [[X3:%.*]] = add nuw i8 [[XX3]], 1
; CHECK-NEXT:    [[MUL_B:%.*]] = mul i8 [[X0]], 20
; CHECK-NEXT:    [[MUL_A:%.*]] = mul i8 [[MUL_B]], [[X2]]
; CHECK-NEXT:    [[MUL_C:%.*]] = mul i8 [[MUL_A]], [[X3]]
; CHECK-NEXT:    [[R:%.*]] = urem i8 [[MUL_C]], 20
; CHECK-NEXT:    ret i8 [[R]]
;
  %x0 = add nsw i8 %xx0, 1
  %x2 = add nuw i8 %xx2, 1
  %x3 = add nuw i8 %xx3, 1
  %mul_a = mul nuw i8 %x0, 20
  %mul_b = mul nuw i8 %x2, %x3
  %mul_c = mul nuw i8 %mul_a, %mul_b
  %r = urem i8 %mul_c, 20
  ret i8 %r
}
