; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=aggressive-instcombine --strchr-inline-threshold=5 < %s | FileCheck %s

@str = constant [5 x i8] c"01\002\00", align 1
@str_long = constant [8 x i8] c"0123456\00", align 1

declare ptr @memchr(ptr, i32, i64)
declare ptr @strchr(ptr, i32)

define ptr @test_strchr(i32 %x) {
; CHECK-LABEL: define ptr @test_strchr(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @strchr(ptr @str, i32 [[X]])
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @strchr(ptr @str, i32 %x)
  ret ptr %memchr
}

define i1 @test_strchr_null(i32 %x) {
; CHECK-LABEL: define i1 @test_strchr_null(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @strchr(ptr @str, i32 [[X]])
; CHECK-NEXT:    [[ISNULL:%.*]] = icmp eq ptr [[MEMCHR]], null
; CHECK-NEXT:    ret i1 [[ISNULL]]
;
entry:
  %memchr = call ptr @strchr(ptr @str, i32 %x)
  %isnull = icmp eq ptr %memchr, null
  ret i1 %isnull
}

define ptr @test_memchr(i32 %x) {
; CHECK-LABEL: define ptr @test_memchr(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @memchr(ptr @str, i32 [[X]], i64 5)
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @memchr(ptr @str, i32 %x, i64 5)
  ret ptr %memchr
}

define ptr @test_memchr_smaller_n(i32 %x) {
; CHECK-LABEL: define ptr @test_memchr_smaller_n(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @memchr(ptr @str, i32 [[X]], i64 4)
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @memchr(ptr @str, i32 %x, i64 4)
  ret ptr %memchr
}

define ptr @test_memchr_larger_n(i32 %x) {
; CHECK-LABEL: define ptr @test_memchr_larger_n(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @memchr(ptr @str, i32 [[X]], i64 6)
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @memchr(ptr @str, i32 %x, i64 6)
  ret ptr %memchr
}

; negative tests

define ptr @test_strchr_non_constant(i32 %x, ptr %str) {
; CHECK-LABEL: define ptr @test_strchr_non_constant(
; CHECK-SAME: i32 [[X:%.*]], ptr [[STR:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @strchr(ptr [[STR]], i32 [[X]])
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @strchr(ptr %str, i32 %x)
  ret ptr %memchr
}

define ptr @test_strchr_constant_ch() {
; CHECK-LABEL: define ptr @test_strchr_constant_ch() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @strchr(ptr @str, i32 49)
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @strchr(ptr @str, i32 49)
  ret ptr %memchr
}

define ptr @test_memchr_dynamic_n(i32 %x, i32 %y) {
; CHECK-LABEL: define ptr @test_memchr_dynamic_n(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @memchr(ptr @str, i32 [[X]], i32 [[Y]])
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @memchr(ptr @str, i32 %x, i32 %y)
  ret ptr %memchr
}

define ptr @test_strchr_long(i32 %x) {
; CHECK-LABEL: define ptr @test_strchr_long(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[MEMCHR:%.*]] = call ptr @strchr(ptr @str_long, i32 [[X]])
; CHECK-NEXT:    ret ptr [[MEMCHR]]
;
entry:
  %memchr = call ptr @strchr(ptr @str_long, i32 %x)
  ret ptr %memchr
}
