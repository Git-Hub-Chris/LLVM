; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function _Z4testP4Base --scrub-attributes --check-globals --version 3


; RUN: opt < %s -passes=pgo-icall-prom -S | FileCheck %s --check-prefix=ICALL-FUNC
; RUN: opt < %s -passes=pgo-icall-prom -enable-vtable-prom -S | FileCheck %s --check-prefixes=ICALL-VTABLE

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

; The C++ code to generate the test case
;
; class Error {
;   public:
;     Error(const char* err_msg, int error_code);
;     int error_code();
; };

; int get_ticket_id();
; class Base {
; public:
;   virtual int get_ticket() noexcept(false) {
;     int cnt = get_ticket_id();
;     if (cnt != -1)
;       return cnt;
;
;     throw Error("base out of tickets", 1);
;   }
; };
;
; class Derived : public Base {
; public:
;   virtual int get_ticket() noexcept(false) override {
;     int cnt = get_ticket_id();
;     if (cnt != -1)
;       return cnt;
;     throw Error("derived out of ticket", 2);
;    }
; };

; int test(Base* b)  {
;   int ret = 0;
;   try {
;      ret = b->get_ticket();
;   }
;   catch(Error e) {
;    ret = e.error_code();
;   }
;   return ret;
; }

source_filename = "/app/example.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.Error = type { i8 }

@_ZTV4Base = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN4Base10get_ticketEv] }, !type !0
@_ZTV7Derived = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN7Derived10get_ticketEv] }, !type !0, !type !1
@.str = private constant [22 x i8] c"derived out of ticket\00", align 1
@.str.1 = private constant [20 x i8] c"base out of tickets\00", align 1

@_ZTVN10__cxxabiv117__class_type_infoE = external global [0 x ptr]
@_ZTS5Error = constant [7 x i8] c"5Error\00"
@_ZTI5Error = constant { ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv117__class_type_infoE, i64 2), ptr @_ZTS5Error }

;.
; ICALL-FUNC: @[[_ZTV4BASE:[a-zA-Z0-9_$"\\.-]+]] = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN4Base10get_ticketEv] }, !type !0
; ICALL-FUNC: @[[_ZTV7DERIVED:[a-zA-Z0-9_$"\\.-]+]] = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN7Derived10get_ticketEv] }, !type !0, !type !1
; ICALL-FUNC: @[[_STR:[a-zA-Z0-9_$"\\.-]+]] = private constant [22 x i8] c"derived out of ticket\00", align 1
; ICALL-FUNC: @[[_STR_1:[a-zA-Z0-9_$"\\.-]+]] = private constant [20 x i8] c"base out of tickets\00", align 1
; ICALL-FUNC: @[[_ZTVN10__CXXABIV117__CLASS_TYPE_INFOE:[a-zA-Z0-9_$"\\.-]+]] = external global [0 x ptr]
; ICALL-FUNC: @[[_ZTS5ERROR:[a-zA-Z0-9_$"\\.-]+]] = constant [7 x i8] c"5Error\00"
; ICALL-FUNC: @[[_ZTI5ERROR:[a-zA-Z0-9_$"\\.-]+]] = constant { ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv117__class_type_infoE, i64 2), ptr @_ZTS5Error }
;.
; ICALL-VTABLE: @[[_ZTV4BASE:[a-zA-Z0-9_$"\\.-]+]] = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN4Base10get_ticketEv] }, !type !0
; ICALL-VTABLE: @[[_ZTV7DERIVED:[a-zA-Z0-9_$"\\.-]+]] = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr @_ZN7Derived10get_ticketEv] }, !type !0, !type !1
; ICALL-VTABLE: @[[_STR:[a-zA-Z0-9_$"\\.-]+]] = private constant [22 x i8] c"derived out of ticket\00", align 1
; ICALL-VTABLE: @[[_STR_1:[a-zA-Z0-9_$"\\.-]+]] = private constant [20 x i8] c"base out of tickets\00", align 1
; ICALL-VTABLE: @[[_ZTVN10__CXXABIV117__CLASS_TYPE_INFOE:[a-zA-Z0-9_$"\\.-]+]] = external global [0 x ptr]
; ICALL-VTABLE: @[[_ZTS5ERROR:[a-zA-Z0-9_$"\\.-]+]] = constant [7 x i8] c"5Error\00"
; ICALL-VTABLE: @[[_ZTI5ERROR:[a-zA-Z0-9_$"\\.-]+]] = constant { ptr, ptr } { ptr getelementptr inbounds (ptr, ptr @_ZTVN10__cxxabiv117__class_type_infoE, i64 2), ptr @_ZTS5Error }
;.
define i32 @_Z4testP4Base(ptr %b) personality ptr @__gxx_personality_v0 {
; ICALL-FUNC-LABEL: define i32 @_Z4testP4Base(
; ICALL-FUNC-SAME: ptr [[B:%.*]]) personality ptr @__gxx_personality_v0 {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    [[E:%.*]] = alloca [[CLASS_ERROR:%.*]], align 1
; ICALL-FUNC-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[B]], align 8, !prof [[PROF2:![0-9]+]]
; ICALL-FUNC-NEXT:    [[TEST:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-FUNC-NEXT:    tail call void @llvm.assume(i1 [[TEST]])
; ICALL-FUNC-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-FUNC-NEXT:    [[TMP1:%.*]] = icmp eq ptr [[TMP0]], @_ZN4Base10get_ticketEv
; ICALL-FUNC-NEXT:    br i1 [[TMP1]], label [[IF_TRUE_DIRECT_TARG:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF3:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ:
; ICALL-FUNC-NEXT:    [[TMP2:%.*]] = invoke i32 @_ZN4Base10get_ticketEv(ptr nonnull align 8 dereferenceable(8) [[B]])
; ICALL-FUNC-NEXT:    to label [[IF_END_ICP:%.*]] unwind label [[LPAD:%.*]]
; ICALL-FUNC:       if.false.orig_indirect:
; ICALL-FUNC-NEXT:    [[TMP3:%.*]] = icmp eq ptr [[TMP0]], @_ZN7Derived10get_ticketEv
; ICALL-FUNC-NEXT:    br i1 [[TMP3]], label [[IF_TRUE_DIRECT_TARG1:%.*]], label [[IF_FALSE_ORIG_INDIRECT2:%.*]], !prof [[PROF4:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ1:
; ICALL-FUNC-NEXT:    [[TMP4:%.*]] = invoke i32 @_ZN7Derived10get_ticketEv(ptr nonnull align 8 dereferenceable(8) [[B]])
; ICALL-FUNC-NEXT:    to label [[IF_END_ICP3:%.*]] unwind label [[LPAD]]
; ICALL-FUNC:       if.false.orig_indirect2:
; ICALL-FUNC-NEXT:    [[CALL:%.*]] = invoke i32 [[TMP0]](ptr nonnull align 8 dereferenceable(8) [[B]])
; ICALL-FUNC-NEXT:    to label [[IF_END_ICP3]] unwind label [[LPAD]]
; ICALL-FUNC:       if.end.icp3:
; ICALL-FUNC-NEXT:    [[TMP5:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT2]] ], [ [[TMP4]], [[IF_TRUE_DIRECT_TARG1]] ]
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP]]
; ICALL-FUNC:       if.end.icp:
; ICALL-FUNC-NEXT:    [[TMP6:%.*]] = phi i32 [ [[TMP5]], [[IF_END_ICP3]] ], [ [[TMP2]], [[IF_TRUE_DIRECT_TARG]] ]
; ICALL-FUNC-NEXT:    br label [[TRY_CONT:%.*]]
; ICALL-FUNC:       lpad:
; ICALL-FUNC-NEXT:    [[TMP7:%.*]] = landingpad { ptr, i32 }
; ICALL-FUNC-NEXT:    cleanup
; ICALL-FUNC-NEXT:    catch ptr @_ZTI5Error
; ICALL-FUNC-NEXT:    [[TMP8:%.*]] = extractvalue { ptr, i32 } [[TMP7]], 1
; ICALL-FUNC-NEXT:    [[TMP9:%.*]] = tail call i32 @llvm.eh.typeid.for(ptr nonnull @_ZTI5Error)
; ICALL-FUNC-NEXT:    [[MATCHES:%.*]] = icmp eq i32 [[TMP8]], [[TMP9]]
; ICALL-FUNC-NEXT:    br i1 [[MATCHES]], label [[CATCH:%.*]], label [[EHCLEANUP:%.*]]
; ICALL-FUNC:       catch:
; ICALL-FUNC-NEXT:    [[TMP10:%.*]] = extractvalue { ptr, i32 } [[TMP7]], 0
; ICALL-FUNC-NEXT:    call void @llvm.lifetime.start.p0(i64 1, ptr nonnull [[E]])
; ICALL-FUNC-NEXT:    [[TMP11:%.*]] = tail call ptr @__cxa_begin_catch(ptr [[TMP10]])
; ICALL-FUNC-NEXT:    [[CALL3:%.*]] = invoke i32 @_ZN5Error10error_codeEv(ptr [[E]])
; ICALL-FUNC-NEXT:    to label [[INVOKE_CONT2:%.*]] unwind label [[LPAD1:%.*]]
; ICALL-FUNC:       invoke.cont2:
; ICALL-FUNC-NEXT:    call void @__cxa_end_catch()
; ICALL-FUNC-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr nonnull [[E]])
; ICALL-FUNC-NEXT:    br label [[TRY_CONT]]
; ICALL-FUNC:       try.cont:
; ICALL-FUNC-NEXT:    [[RET_0:%.*]] = phi i32 [ [[CALL3]], [[INVOKE_CONT2]] ], [ [[TMP6]], [[IF_END_ICP]] ]
; ICALL-FUNC-NEXT:    ret i32 [[RET_0]]
; ICALL-FUNC:       lpad1:
; ICALL-FUNC-NEXT:    [[TMP12:%.*]] = landingpad { ptr, i32 }
; ICALL-FUNC-NEXT:    cleanup
; ICALL-FUNC-NEXT:    invoke void @__cxa_end_catch()
; ICALL-FUNC-NEXT:    to label [[INVOKE_CONT4:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
; ICALL-FUNC:       invoke.cont4:
; ICALL-FUNC-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr nonnull [[E]])
; ICALL-FUNC-NEXT:    br label [[EHCLEANUP]]
; ICALL-FUNC:       ehcleanup:
; ICALL-FUNC-NEXT:    [[LPAD_VAL7_MERGED:%.*]] = phi { ptr, i32 } [ [[TMP12]], [[INVOKE_CONT4]] ], [ [[TMP7]], [[LPAD]] ]
; ICALL-FUNC-NEXT:    resume { ptr, i32 } [[LPAD_VAL7_MERGED]]
; ICALL-FUNC:       terminate.lpad:
; ICALL-FUNC-NEXT:    [[TMP13:%.*]] = landingpad { ptr, i32 }
; ICALL-FUNC-NEXT:    catch ptr null
; ICALL-FUNC-NEXT:    [[TMP14:%.*]] = extractvalue { ptr, i32 } [[TMP13]], 0
; ICALL-FUNC-NEXT:    call void @__clang_call_terminate(ptr [[TMP14]])
; ICALL-FUNC-NEXT:    unreachable
;
; ICALL-VTABLE-LABEL: define i32 @_Z4testP4Base(
; ICALL-VTABLE-SAME: ptr [[B:%.*]]) personality ptr @__gxx_personality_v0 {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    [[E:%.*]] = alloca [[CLASS_ERROR:%.*]], align 1
; ICALL-VTABLE-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[B]], align 8, !prof [[PROF2:![0-9]+]]
; ICALL-VTABLE-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[VTABLE]] to i64
; ICALL-VTABLE-NEXT:    [[VTABLE_OBJECT:%.*]] = sub nuw i64 [[TMP0]], 16
; ICALL-VTABLE-NEXT:    [[TEST:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-VTABLE-NEXT:    tail call void @llvm.assume(i1 [[TEST]])
; ICALL-VTABLE-NEXT:    [[TMP1:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV4Base to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP1]], label [[IF_TRUE_DIRECT_VTABLE_TARGET:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF3:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target:
; ICALL-VTABLE-NEXT:    [[TMP2:%.*]] = invoke i32 @_ZN4Base10get_ticketEv(ptr nonnull align 8 dereferenceable(8) [[B]])
; ICALL-VTABLE-NEXT:    to label [[IF_END_VTABLE_ICP:%.*]] unwind label [[LPAD:%.*]]
; ICALL-VTABLE:       if.false.orig_indirect:
; ICALL-VTABLE-NEXT:    [[TMP3:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV7Derived to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP3]], label [[IF_TRUE_DIRECT_VTABLE_TARGET1:%.*]], label [[IF_FALSE_ORIG_INDIRECT2:%.*]], !prof [[PROF4:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target1:
; ICALL-VTABLE-NEXT:    [[TMP4:%.*]] = invoke i32 @_ZN7Derived10get_ticketEv(ptr nonnull align 8 dereferenceable(8) [[B]])
; ICALL-VTABLE-NEXT:    to label [[IF_END_VTABLE_ICP3:%.*]] unwind label [[LPAD]]
; ICALL-VTABLE:       if.false.orig_indirect2:
; ICALL-VTABLE-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-VTABLE-NEXT:    [[CALL:%.*]] = invoke i32 [[TMP5]](ptr nonnull align 8 dereferenceable(8) [[B]])
; ICALL-VTABLE-NEXT:    to label [[IF_END_VTABLE_ICP3]] unwind label [[LPAD]]
; ICALL-VTABLE:       if.end.vtable_icp3:
; ICALL-VTABLE-NEXT:    [[TMP6:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT2]] ], [ [[TMP4]], [[IF_TRUE_DIRECT_VTABLE_TARGET1]] ]
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP]]
; ICALL-VTABLE:       if.end.vtable_icp:
; ICALL-VTABLE-NEXT:    [[TMP7:%.*]] = phi i32 [ [[TMP6]], [[IF_END_VTABLE_ICP3]] ], [ [[TMP2]], [[IF_TRUE_DIRECT_VTABLE_TARGET]] ]
; ICALL-VTABLE-NEXT:    br label [[TRY_CONT:%.*]]
; ICALL-VTABLE:       lpad:
; ICALL-VTABLE-NEXT:    [[TMP8:%.*]] = landingpad { ptr, i32 }
; ICALL-VTABLE-NEXT:    cleanup
; ICALL-VTABLE-NEXT:    catch ptr @_ZTI5Error
; ICALL-VTABLE-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 1
; ICALL-VTABLE-NEXT:    [[TMP10:%.*]] = tail call i32 @llvm.eh.typeid.for(ptr nonnull @_ZTI5Error)
; ICALL-VTABLE-NEXT:    [[MATCHES:%.*]] = icmp eq i32 [[TMP9]], [[TMP10]]
; ICALL-VTABLE-NEXT:    br i1 [[MATCHES]], label [[CATCH:%.*]], label [[EHCLEANUP:%.*]]
; ICALL-VTABLE:       catch:
; ICALL-VTABLE-NEXT:    [[TMP11:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 0
; ICALL-VTABLE-NEXT:    call void @llvm.lifetime.start.p0(i64 1, ptr nonnull [[E]])
; ICALL-VTABLE-NEXT:    [[TMP12:%.*]] = tail call ptr @__cxa_begin_catch(ptr [[TMP11]])
; ICALL-VTABLE-NEXT:    [[CALL3:%.*]] = invoke i32 @_ZN5Error10error_codeEv(ptr [[E]])
; ICALL-VTABLE-NEXT:    to label [[INVOKE_CONT2:%.*]] unwind label [[LPAD1:%.*]]
; ICALL-VTABLE:       invoke.cont2:
; ICALL-VTABLE-NEXT:    call void @__cxa_end_catch()
; ICALL-VTABLE-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr nonnull [[E]])
; ICALL-VTABLE-NEXT:    br label [[TRY_CONT]]
; ICALL-VTABLE:       try.cont:
; ICALL-VTABLE-NEXT:    [[RET_0:%.*]] = phi i32 [ [[CALL3]], [[INVOKE_CONT2]] ], [ [[TMP7]], [[IF_END_VTABLE_ICP]] ]
; ICALL-VTABLE-NEXT:    ret i32 [[RET_0]]
; ICALL-VTABLE:       lpad1:
; ICALL-VTABLE-NEXT:    [[TMP13:%.*]] = landingpad { ptr, i32 }
; ICALL-VTABLE-NEXT:    cleanup
; ICALL-VTABLE-NEXT:    invoke void @__cxa_end_catch()
; ICALL-VTABLE-NEXT:    to label [[INVOKE_CONT4:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
; ICALL-VTABLE:       invoke.cont4:
; ICALL-VTABLE-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr nonnull [[E]])
; ICALL-VTABLE-NEXT:    br label [[EHCLEANUP]]
; ICALL-VTABLE:       ehcleanup:
; ICALL-VTABLE-NEXT:    [[LPAD_VAL7_MERGED:%.*]] = phi { ptr, i32 } [ [[TMP13]], [[INVOKE_CONT4]] ], [ [[TMP8]], [[LPAD]] ]
; ICALL-VTABLE-NEXT:    resume { ptr, i32 } [[LPAD_VAL7_MERGED]]
; ICALL-VTABLE:       terminate.lpad:
; ICALL-VTABLE-NEXT:    [[TMP14:%.*]] = landingpad { ptr, i32 }
; ICALL-VTABLE-NEXT:    catch ptr null
; ICALL-VTABLE-NEXT:    [[TMP15:%.*]] = extractvalue { ptr, i32 } [[TMP14]], 0
; ICALL-VTABLE-NEXT:    call void @__clang_call_terminate(ptr [[TMP15]])
; ICALL-VTABLE-NEXT:    unreachable
;
entry:
  %e = alloca %class.Error, align 1
  %vtable = load ptr, ptr %b, align 8, !prof !2
  %test = tail call i1 @llvm.type.test(ptr %vtable, metadata !"_ZTS4Base")
  tail call void @llvm.assume(i1 %test)
  %0 = load ptr, ptr %vtable, align 8
  %call = invoke i32 %0(ptr nonnull align 8 dereferenceable(8) %b)
  to label %try.cont unwind label %lpad, !prof !3

lpad:
  %1 = landingpad { ptr, i32 }
  cleanup
  catch ptr @_ZTI5Error
  %2 = extractvalue { ptr, i32 } %1, 1
  %3 = tail call i32 @llvm.eh.typeid.for(ptr nonnull @_ZTI5Error)
  %matches = icmp eq i32 %2, %3
  br i1 %matches, label %catch, label %ehcleanup

catch:
  %4 = extractvalue { ptr, i32 } %1, 0
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %e)
  %5 = tail call ptr @__cxa_begin_catch(ptr %4)
  %call3 = invoke i32 @_ZN5Error10error_codeEv(ptr %e)
  to label %invoke.cont2 unwind label %lpad1

invoke.cont2:
  call void @__cxa_end_catch()
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %e)
  br label %try.cont

try.cont:
  %ret.0 = phi i32 [ %call3, %invoke.cont2 ], [ %call, %entry ]
  ret i32 %ret.0

lpad1:
  %6 = landingpad { ptr, i32 }
  cleanup
  invoke void @__cxa_end_catch()
  to label %invoke.cont4 unwind label %terminate.lpad

invoke.cont4:
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %e)
  br label %ehcleanup

ehcleanup:
  %lpad.val7.merged = phi { ptr, i32 } [ %6, %invoke.cont4 ], [ %1, %lpad ]
  resume { ptr, i32 } %lpad.val7.merged

terminate.lpad:
  %7 = landingpad { ptr, i32 }
  catch ptr null
  %8 = extractvalue { ptr, i32 } %7, 0
  call void @__clang_call_terminate(ptr %8)
  unreachable
}

!0 = !{i64 16, !"_ZTS4Base"}
!1 = !{i64 16, !"_ZTS8Derived"}
!2 = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 1000, i64 -4576307468236080025, i64 600}
!3 = !{!"VP", i32 0, i64 1600, i64 -9184999152603961491, i64 1000, i64 -3635426779157076872, i64 600}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)
declare i32 @__gxx_personality_v0(...)
declare i32 @llvm.eh.typeid.for(ptr)
declare ptr @__cxa_begin_catch(ptr)
declare i32 @_ZN5Error10error_codeEv(ptr)
declare void @__cxa_end_catch()
declare void @__clang_call_terminate(ptr %0)
declare void @llvm.lifetime.end.p0(i64, ptr)
declare  i32 @_Z13get_ticket_idv()
declare void @_ZN5ErrorC1EPKci(ptr, ptr, i32)
declare ptr @__cxa_allocate_exception(i64)
declare void @__cxa_free_exception(ptr)
declare void @__cxa_throw(ptr, ptr, ptr)
declare i1 @llvm.type.test(ptr, metadata)
declare void @llvm.assume(i1)

define i32 @_ZN4Base10get_ticketEv(ptr %this)  personality ptr @__gxx_personality_v0 {
entry:
  %call = tail call i32 @_Z13get_ticket_idv()
  %cmp.not = icmp eq i32 %call, -1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  ret i32 %call

if.end:                                           ; preds = %entry
  %exception = tail call ptr @__cxa_allocate_exception(i64 1)
  invoke void @_ZN5ErrorC1EPKci(ptr %exception, ptr nonnull @.str.1, i32 1)
  to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %if.end
  tail call void @__cxa_throw(ptr nonnull %exception, ptr nonnull @_ZTI5Error, ptr null)
  unreachable

lpad:                                             ; preds = %if.end
  %0 = landingpad { ptr, i32 }
  cleanup
  tail call void @__cxa_free_exception(ptr %exception)
  resume { ptr, i32 } %0
}


define i32 @_ZN7Derived10get_ticketEv(ptr %this) personality ptr @__gxx_personality_v0 {
entry:
  %call = tail call i32 @_Z13get_ticket_idv()
  %cmp.not = icmp eq i32 %call, -1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  ret i32 %call

if.end:                                           ; preds = %entry
  %exception = tail call ptr @__cxa_allocate_exception(i64 1)
  invoke void @_ZN5ErrorC1EPKci(ptr %exception, ptr nonnull @.str, i32 2)
  to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %if.end
  tail call void @__cxa_throw(ptr nonnull %exception, ptr nonnull @_ZTI5Error, ptr null)
  unreachable

lpad:                                             ; preds = %if.end
  %0 = landingpad { ptr, i32 }
  cleanup
  tail call void @__cxa_free_exception(ptr %exception)
  resume { ptr, i32 } %0
}
;.
; ICALL-FUNC: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
; ICALL-FUNC: attributes #[[ATTR1:[0-9]+]] = { nounwind memory(none) }
; ICALL-FUNC: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-FUNC: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-VTABLE: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
; ICALL-VTABLE: attributes #[[ATTR1:[0-9]+]] = { nounwind memory(none) }
; ICALL-VTABLE: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-VTABLE: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-FUNC: [[META0:![0-9]+]] = !{i64 16, !"_ZTS4Base"}
; ICALL-FUNC: [[META1:![0-9]+]] = !{i64 16, !"_ZTS8Derived"}
; ICALL-FUNC: [[PROF2]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 1000, i64 -4576307468236080025, i64 600}
; ICALL-FUNC: [[PROF3]] = !{!"branch_weights", i32 1000, i32 600}
; ICALL-FUNC: [[PROF4]] = !{!"branch_weights", i32 600, i32 0}
;.
; ICALL-VTABLE: [[META0:![0-9]+]] = !{i64 16, !"_ZTS4Base"}
; ICALL-VTABLE: [[META1:![0-9]+]] = !{i64 16, !"_ZTS8Derived"}
; ICALL-VTABLE: [[PROF2]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 1000, i64 -4576307468236080025, i64 600}
; ICALL-VTABLE: [[PROF3]] = !{!"branch_weights", i32 1000, i32 600}
; ICALL-VTABLE: [[PROF4]] = !{!"branch_weights", i32 600, i32 0}
;.
