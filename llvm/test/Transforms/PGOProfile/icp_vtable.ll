; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals --version 3


; RUN: opt < %s -passes=pgo-icall-prom -S | FileCheck %s --check-prefix=ICALL-FUNC
; RUN: opt < %s -passes=pgo-icall-prom -enable-vtable-prom -S | FileCheck %s --check-prefixes=ICALL-VTABLE

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

@_ZTV4Base = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0
@_ZTV8Derived1 = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived15func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !1
@_ZTV8Derived2 = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived25func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !2
; @_ZTV8Derived3 = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived35func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !3

; one function, one vtable, same offset
;.
; ICALL-FUNC: @[[_ZTV4BASE:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0
; ICALL-FUNC: @[[_ZTV8DERIVED1:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived15func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !1
; ICALL-FUNC: @[[_ZTV8DERIVED2:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived25func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !2
;.
; ICALL-VTABLE: @[[_ZTV4BASE:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0
; ICALL-VTABLE: @[[_ZTV8DERIVED1:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived15func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !1
; ICALL-VTABLE: @[[_ZTV8DERIVED2:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived25func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !2
;.
define i32 @test_one_function_candidate(ptr %d) {
; ICALL-FUNC-LABEL: define i32 @test_one_function_candidate(
; ICALL-FUNC-SAME: ptr [[D:%.*]]) {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF3:![0-9]+]]
; ICALL-FUNC-NEXT:    [[TMP0:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-FUNC-NEXT:    tail call void @llvm.assume(i1 [[TMP0]])
; ICALL-FUNC-NEXT:    [[VFN:%.*]] = getelementptr inbounds ptr, ptr [[VTABLE]], i64 1
; ICALL-FUNC-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[VFN]], align 8
; ICALL-FUNC-NEXT:    [[TMP2:%.*]] = icmp eq ptr [[TMP1]], @_ZN4Base5func2Ev
; ICALL-FUNC-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_TARG:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF4:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ:
; ICALL-FUNC-NEXT:    [[TMP3:%.*]] = tail call i32 @_ZN4Base5func2Ev(ptr [[D]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP:%.*]]
; ICALL-FUNC:       if.false.orig_indirect:
; ICALL-FUNC-NEXT:    [[CALL:%.*]] = tail call i32 [[TMP1]](ptr [[D]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP]]
; ICALL-FUNC:       if.end.icp:
; ICALL-FUNC-NEXT:    [[TMP4:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT]] ], [ [[TMP3]], [[IF_TRUE_DIRECT_TARG]] ]
; ICALL-FUNC-NEXT:    ret i32 [[TMP4]]
;
; ICALL-VTABLE-LABEL: define i32 @test_one_function_candidate(
; ICALL-VTABLE-SAME: ptr [[D:%.*]]) {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF3:![0-9]+]]
; ICALL-VTABLE-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[VTABLE]] to i64
; ICALL-VTABLE-NEXT:    [[VTABLE_OBJECT:%.*]] = sub nuw i64 [[TMP0]], 16
; ICALL-VTABLE-NEXT:    [[TMP1:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-VTABLE-NEXT:    tail call void @llvm.assume(i1 [[TMP1]])
; ICALL-VTABLE-NEXT:    [[TMP2:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV8Derived2 to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_VTABLE_TARGET:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF4:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target:
; ICALL-VTABLE-NEXT:    [[TMP3:%.*]] = tail call i32 @_ZN4Base5func2Ev(ptr [[D]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP:%.*]]
; ICALL-VTABLE:       if.false.orig_indirect:
; ICALL-VTABLE-NEXT:    [[VFN:%.*]] = getelementptr inbounds ptr, ptr [[VTABLE]], i64 1
; ICALL-VTABLE-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[VFN]], align 8
; ICALL-VTABLE-NEXT:    [[CALL:%.*]] = tail call i32 [[TMP4]](ptr [[D]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP]]
; ICALL-VTABLE:       if.end.vtable_icp:
; ICALL-VTABLE-NEXT:    [[TMP5:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT]] ], [ [[TMP3]], [[IF_TRUE_DIRECT_VTABLE_TARGET]] ]
; ICALL-VTABLE-NEXT:    ret i32 [[TMP5]]
;
entry:
  %vtable = load ptr, ptr %d, !prof !4
  %0 = tail call i1 @llvm.type.test(ptr %vtable, metadata !"_ZTS4Base")
  tail call void @llvm.assume(i1 %0)
  %vfn = getelementptr inbounds ptr, ptr %vtable, i64 1
  %1 = load ptr, ptr %vfn
  %call = tail call i32 %1(ptr %d), !prof !5
  ret i32 %call
}

define i32 @test_two_function_candidates(ptr %d, i32 %a) {
; ICALL-FUNC-LABEL: define i32 @test_two_function_candidates(
; ICALL-FUNC-SAME: ptr [[D:%.*]], i32 [[A:%.*]]) {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF5:![0-9]+]]
; ICALL-FUNC-NEXT:    [[TMP0:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-FUNC-NEXT:    tail call void @llvm.assume(i1 [[TMP0]])
; ICALL-FUNC-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-FUNC-NEXT:    [[TMP2:%.*]] = icmp eq ptr [[TMP1]], @_ZN4Base5func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_TARG:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF6:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ:
; ICALL-FUNC-NEXT:    [[TMP3:%.*]] = tail call i32 @_ZN4Base5func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP:%.*]]
; ICALL-FUNC:       if.false.orig_indirect:
; ICALL-FUNC-NEXT:    [[TMP4:%.*]] = icmp eq ptr [[TMP1]], @_ZN8Derived15func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP4]], label [[IF_TRUE_DIRECT_TARG1:%.*]], label [[IF_FALSE_ORIG_INDIRECT2:%.*]], !prof [[PROF7:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ1:
; ICALL-FUNC-NEXT:    [[TMP5:%.*]] = tail call i32 @_ZN8Derived15func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP3:%.*]]
; ICALL-FUNC:       if.false.orig_indirect2:
; ICALL-FUNC-NEXT:    [[CALL:%.*]] = tail call i32 [[TMP1]](ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP3]]
; ICALL-FUNC:       if.end.icp3:
; ICALL-FUNC-NEXT:    [[TMP6:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT2]] ], [ [[TMP5]], [[IF_TRUE_DIRECT_TARG1]] ]
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP]]
; ICALL-FUNC:       if.end.icp:
; ICALL-FUNC-NEXT:    [[TMP7:%.*]] = phi i32 [ [[TMP6]], [[IF_END_ICP3]] ], [ [[TMP3]], [[IF_TRUE_DIRECT_TARG]] ]
; ICALL-FUNC-NEXT:    ret i32 [[TMP7]]
;
; ICALL-VTABLE-LABEL: define i32 @test_two_function_candidates(
; ICALL-VTABLE-SAME: ptr [[D:%.*]], i32 [[A:%.*]]) {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF5:![0-9]+]]
; ICALL-VTABLE-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[VTABLE]] to i64
; ICALL-VTABLE-NEXT:    [[VTABLE_OBJECT:%.*]] = sub nuw i64 [[TMP0]], 16
; ICALL-VTABLE-NEXT:    [[TMP1:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-VTABLE-NEXT:    tail call void @llvm.assume(i1 [[TMP1]])
; ICALL-VTABLE-NEXT:    [[TMP2:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV4Base to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_VTABLE_TARGET:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF6:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target:
; ICALL-VTABLE-NEXT:    [[TMP3:%.*]] = tail call i32 @_ZN4Base5func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP:%.*]]
; ICALL-VTABLE:       if.false.orig_indirect:
; ICALL-VTABLE-NEXT:    [[TMP4:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV8Derived1 to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP4]], label [[IF_TRUE_DIRECT_VTABLE_TARGET1:%.*]], label [[IF_FALSE_ORIG_INDIRECT2:%.*]], !prof [[PROF7:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target1:
; ICALL-VTABLE-NEXT:    [[TMP5:%.*]] = tail call i32 @_ZN8Derived15func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP3:%.*]]
; ICALL-VTABLE:       if.false.orig_indirect2:
; ICALL-VTABLE-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-VTABLE-NEXT:    [[CALL:%.*]] = tail call i32 [[TMP6]](ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP3]]
; ICALL-VTABLE:       if.end.vtable_icp3:
; ICALL-VTABLE-NEXT:    [[TMP7:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT2]] ], [ [[TMP5]], [[IF_TRUE_DIRECT_VTABLE_TARGET1]] ]
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP]]
; ICALL-VTABLE:       if.end.vtable_icp:
; ICALL-VTABLE-NEXT:    [[TMP8:%.*]] = phi i32 [ [[TMP7]], [[IF_END_VTABLE_ICP3]] ], [ [[TMP3]], [[IF_TRUE_DIRECT_VTABLE_TARGET]] ]
; ICALL-VTABLE-NEXT:    ret i32 [[TMP8]]
;
entry:
  %vtable = load ptr, ptr %d, !prof !6
  %0 = tail call i1 @llvm.type.test(ptr %vtable, metadata !"_ZTS4Base")
  tail call void @llvm.assume(i1 %0)
  %1 = load ptr, ptr %vtable
  %call = tail call i32 %1(ptr %d, i32 %a), !prof !7
  ret i32 %call
}

define i32 @test_three_function_candidates(ptr %d, i32 %a) {
; ICALL-FUNC-LABEL: define i32 @test_three_function_candidates(
; ICALL-FUNC-SAME: ptr [[D:%.*]], i32 [[A:%.*]]) {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF8:![0-9]+]]
; ICALL-FUNC-NEXT:    [[TMP0:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-FUNC-NEXT:    tail call void @llvm.assume(i1 [[TMP0]])
; ICALL-FUNC-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-FUNC-NEXT:    [[TMP2:%.*]] = icmp eq ptr [[TMP1]], @_ZN4Base5func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_TARG:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF9:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ:
; ICALL-FUNC-NEXT:    [[TMP3:%.*]] = tail call i32 @_ZN4Base5func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP:%.*]]
; ICALL-FUNC:       if.false.orig_indirect:
; ICALL-FUNC-NEXT:    [[TMP4:%.*]] = icmp eq ptr [[TMP1]], @_ZN8Derived15func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP4]], label [[IF_TRUE_DIRECT_TARG1:%.*]], label [[IF_FALSE_ORIG_INDIRECT2:%.*]], !prof [[PROF10:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ1:
; ICALL-FUNC-NEXT:    [[TMP5:%.*]] = tail call i32 @_ZN8Derived15func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP3:%.*]]
; ICALL-FUNC:       if.false.orig_indirect2:
; ICALL-FUNC-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP1]], @_ZN8Derived25func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP6]], label [[IF_TRUE_DIRECT_TARG4:%.*]], label [[IF_FALSE_ORIG_INDIRECT5:%.*]], !prof [[PROF11:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ4:
; ICALL-FUNC-NEXT:    [[TMP7:%.*]] = tail call i32 @_ZN8Derived25func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP6:%.*]]
; ICALL-FUNC:       if.false.orig_indirect5:
; ICALL-FUNC-NEXT:    [[CALL:%.*]] = tail call i32 [[TMP1]](ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP6]]
; ICALL-FUNC:       if.end.icp6:
; ICALL-FUNC-NEXT:    [[TMP8:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT5]] ], [ [[TMP7]], [[IF_TRUE_DIRECT_TARG4]] ]
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP3]]
; ICALL-FUNC:       if.end.icp3:
; ICALL-FUNC-NEXT:    [[TMP9:%.*]] = phi i32 [ [[TMP8]], [[IF_END_ICP6]] ], [ [[TMP5]], [[IF_TRUE_DIRECT_TARG1]] ]
; ICALL-FUNC-NEXT:    br label [[IF_END_ICP]]
; ICALL-FUNC:       if.end.icp:
; ICALL-FUNC-NEXT:    [[TMP10:%.*]] = phi i32 [ [[TMP9]], [[IF_END_ICP3]] ], [ [[TMP3]], [[IF_TRUE_DIRECT_TARG]] ]
; ICALL-FUNC-NEXT:    ret i32 [[TMP10]]
;
; ICALL-VTABLE-LABEL: define i32 @test_three_function_candidates(
; ICALL-VTABLE-SAME: ptr [[D:%.*]], i32 [[A:%.*]]) {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF8:![0-9]+]]
; ICALL-VTABLE-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[VTABLE]] to i64
; ICALL-VTABLE-NEXT:    [[VTABLE_OBJECT:%.*]] = sub nuw i64 [[TMP0]], 16
; ICALL-VTABLE-NEXT:    [[TMP1:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-VTABLE-NEXT:    tail call void @llvm.assume(i1 [[TMP1]])
; ICALL-VTABLE-NEXT:    [[TMP2:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV4Base to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_VTABLE_TARGET:%.*]], label [[IF_FALSE_ORIG_INDIRECT:%.*]], !prof [[PROF9:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target:
; ICALL-VTABLE-NEXT:    [[TMP3:%.*]] = tail call i32 @_ZN4Base5func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP:%.*]]
; ICALL-VTABLE:       if.false.orig_indirect:
; ICALL-VTABLE-NEXT:    [[TMP4:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV8Derived1 to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP4]], label [[IF_TRUE_DIRECT_VTABLE_TARGET1:%.*]], label [[IF_FALSE_ORIG_INDIRECT2:%.*]], !prof [[PROF10:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target1:
; ICALL-VTABLE-NEXT:    [[TMP5:%.*]] = tail call i32 @_ZN8Derived15func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP3:%.*]]
; ICALL-VTABLE:       if.false.orig_indirect2:
; ICALL-VTABLE-NEXT:    [[TMP6:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV8Derived2 to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP6]], label [[IF_TRUE_DIRECT_VTABLE_TARGET4:%.*]], label [[IF_FALSE_ORIG_INDIRECT5:%.*]], !prof [[PROF11:![0-9]+]]
; ICALL-VTABLE:       if.true.direct_vtable_target4:
; ICALL-VTABLE-NEXT:    [[TMP7:%.*]] = tail call i32 @_ZN8Derived25func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP6:%.*]]
; ICALL-VTABLE:       if.false.orig_indirect5:
; ICALL-VTABLE-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-VTABLE-NEXT:    [[CALL:%.*]] = tail call i32 [[TMP8]](ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP6]]
; ICALL-VTABLE:       if.end.vtable_icp6:
; ICALL-VTABLE-NEXT:    [[TMP9:%.*]] = phi i32 [ [[CALL]], [[IF_FALSE_ORIG_INDIRECT5]] ], [ [[TMP7]], [[IF_TRUE_DIRECT_VTABLE_TARGET4]] ]
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP3]]
; ICALL-VTABLE:       if.end.vtable_icp3:
; ICALL-VTABLE-NEXT:    [[TMP10:%.*]] = phi i32 [ [[TMP9]], [[IF_END_VTABLE_ICP6]] ], [ [[TMP5]], [[IF_TRUE_DIRECT_VTABLE_TARGET1]] ]
; ICALL-VTABLE-NEXT:    br label [[IF_END_VTABLE_ICP]]
; ICALL-VTABLE:       if.end.vtable_icp:
; ICALL-VTABLE-NEXT:    [[TMP11:%.*]] = phi i32 [ [[TMP10]], [[IF_END_VTABLE_ICP3]] ], [ [[TMP3]], [[IF_TRUE_DIRECT_VTABLE_TARGET]] ]
; ICALL-VTABLE-NEXT:    ret i32 [[TMP11]]
;
entry:
  %vtable = load ptr, ptr %d, !prof !8
  %0 = tail call i1 @llvm.type.test(ptr %vtable, metadata !"_ZTS4Base")
  tail call void @llvm.assume(i1 %0)
  %1 = load ptr, ptr %vtable
  %call = tail call i32 %1(ptr %d, i32 %a), !prof !9
  ret i32 %call
}

declare i1 @llvm.type.test(ptr, metadata)
declare void @llvm.assume(i1 noundef)
define i32 @_ZN4Base5func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN4Base5func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 0
;
; ICALL-VTABLE-LABEL: define i32 @_ZN4Base5func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 0
;
  ret i32 0
}
define i32 @_ZN8Derived15func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN8Derived15func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 1
;
; ICALL-VTABLE-LABEL: define i32 @_ZN8Derived15func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 1
;
  ret i32 1
}
define i32 @_ZN8Derived25func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN8Derived25func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 2
;
; ICALL-VTABLE-LABEL: define i32 @_ZN8Derived25func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 2
;
  ret i32 2
}
define i32 @_ZN8Derived35func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN8Derived35func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 3
;
; ICALL-VTABLE-LABEL: define i32 @_ZN8Derived35func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 3
;
  ret i32 3
}

define i32 @_ZN4Base5func2Ev(ptr %this) {
; ICALL-FUNC-LABEL: define i32 @_ZN4Base5func2Ev(
; ICALL-FUNC-SAME: ptr [[THIS:%.*]]) {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    ret i32 0
;
; ICALL-VTABLE-LABEL: define i32 @_ZN4Base5func2Ev(
; ICALL-VTABLE-SAME: ptr [[THIS:%.*]]) {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    ret i32 0
;
entry:
  ret i32 0
}

!0 = !{i64 16, !"_ZTS4Base"}
!1 = !{i64 16, !"_ZTS8Derived1"}
!2 = !{i64 16, !"_ZTS8Derived2"}
!3 = !{i64 16, !"_ZTS8Derived3"}
!4 = !{!"VP", i32 2, i64 1600, i64 5035968517245772950, i64 1600}
!5 = !{!"VP", i32 0, i64 1600, i64 -3104805163612457913, i64 1600}
!6 = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 1000, i64 -9064381665493407289, i64 600}
!7 = !{!"VP", i32 0, i64 1600, i64 -6112946599537438938, i64 1000, i64 5741628532826110430, i64 600}
!8 = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 600, i64 -9064381665493407289, i64 550, i64 5035968517245772950, i64 450}
!9 = !{!"VP", i32 0, i64 1600, i64 -6112946599537438938, i64 600, i64 5741628532826110430, i64 550, i64 8412292991472345728, i64 450}

; two function, two vtable, same offset

; three function, three vtable, same offset
;.
; ICALL-FUNC: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-FUNC: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-VTABLE: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-VTABLE: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-FUNC: [[META0:![0-9]+]] = !{i64 16, !"_ZTS4Base"}
; ICALL-FUNC: [[META1:![0-9]+]] = !{i64 16, !"_ZTS8Derived1"}
; ICALL-FUNC: [[META2:![0-9]+]] = !{i64 16, !"_ZTS8Derived2"}
; ICALL-FUNC: [[PROF3]] = !{!"VP", i32 2, i64 1600, i64 5035968517245772950, i64 1600}
; ICALL-FUNC: [[PROF4]] = !{!"branch_weights", i32 1600, i32 0}
; ICALL-FUNC: [[PROF5]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 1000, i64 -9064381665493407289, i64 600}
; ICALL-FUNC: [[PROF6]] = !{!"branch_weights", i32 1000, i32 600}
; ICALL-FUNC: [[PROF7]] = !{!"branch_weights", i32 600, i32 0}
; ICALL-FUNC: [[PROF8]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 600, i64 -9064381665493407289, i64 550, i64 5035968517245772950, i64 450}
; ICALL-FUNC: [[PROF9]] = !{!"branch_weights", i32 600, i32 1000}
; ICALL-FUNC: [[PROF10]] = !{!"branch_weights", i32 550, i32 450}
; ICALL-FUNC: [[PROF11]] = !{!"branch_weights", i32 450, i32 0}
;.
; ICALL-VTABLE: [[META0:![0-9]+]] = !{i64 16, !"_ZTS4Base"}
; ICALL-VTABLE: [[META1:![0-9]+]] = !{i64 16, !"_ZTS8Derived1"}
; ICALL-VTABLE: [[META2:![0-9]+]] = !{i64 16, !"_ZTS8Derived2"}
; ICALL-VTABLE: [[PROF3]] = !{!"VP", i32 2, i64 1600, i64 5035968517245772950, i64 1600}
; ICALL-VTABLE: [[PROF4]] = !{!"branch_weights", i32 1600, i32 0}
; ICALL-VTABLE: [[PROF5]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 1000, i64 -9064381665493407289, i64 600}
; ICALL-VTABLE: [[PROF6]] = !{!"branch_weights", i32 1000, i32 600}
; ICALL-VTABLE: [[PROF7]] = !{!"branch_weights", i32 600, i32 0}
; ICALL-VTABLE: [[PROF8]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 600, i64 -9064381665493407289, i64 550, i64 5035968517245772950, i64 450}
; ICALL-VTABLE: [[PROF9]] = !{!"branch_weights", i32 600, i32 1000}
; ICALL-VTABLE: [[PROF10]] = !{!"branch_weights", i32 550, i32 450}
; ICALL-VTABLE: [[PROF11]] = !{!"branch_weights", i32 450, i32 0}
;.
