; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals --version 3


; RUN: opt < %s -passes=pgo-icall-prom -S | FileCheck %s --check-prefix=ICALL-FUNC
; RUN: opt < %s -passes=pgo-icall-prom -enable-vtable-prom -S | FileCheck %s --check-prefixes=ICALL-VTABLE

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

@_ZTV4Base = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0
@_ZTV8Derived1 = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived15func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !1
@_ZTV8Derived2 = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived25func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !2

; one function, one vtable, same offset

;.
; ICALL-FUNC: @[[_ZTV4BASE:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0
; ICALL-FUNC: @[[_ZTV8DERIVED1:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived15func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !1
; ICALL-FUNC: @[[_ZTV8DERIVED2:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived25func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !2
;.
; ICALL-VTABLE: @[[_ZTV4BASE:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN4Base5func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0
; ICALL-VTABLE: @[[_ZTV8DERIVED1:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived15func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !1
; ICALL-VTABLE: @[[_ZTV8DERIVED2:[a-zA-Z0-9_$"\\.-]+]] = constant { [4 x ptr] } { [4 x ptr] [ptr null, ptr null, ptr @_ZN8Derived25func1Ei, ptr @_ZN4Base5func2Ev] }, !type !0, !type !2
;.
define i32 @test_three_function_candidates(ptr %d, i32 %a) {
; ICALL-FUNC-LABEL: define i32 @test_three_function_candidates(
; ICALL-FUNC-SAME: ptr [[D:%.*]], i32 [[A:%.*]]) {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF3:![0-9]+]]
; ICALL-FUNC-NEXT:    [[TMP0:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-FUNC-NEXT:    tail call void @llvm.assume(i1 [[TMP0]])
; ICALL-FUNC-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-FUNC-NEXT:    [[TMP2:%.*]] = icmp eq ptr [[TMP1]], @_ZN4Base5func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP2]], label [[IF_TRUE_DIRECT_TARG:%.*]], label [[TMP4:%.*]], !prof [[PROF4:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ:
; ICALL-FUNC-NEXT:    [[TMP3:%.*]] = musttail call i32 @_ZN4Base5func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    ret i32 [[TMP3]]
; ICALL-FUNC:       4:
; ICALL-FUNC-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP1]], @_ZN8Derived15func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP5]], label [[IF_TRUE_DIRECT_TARG1:%.*]], label [[TMP7:%.*]], !prof [[PROF5:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ1:
; ICALL-FUNC-NEXT:    [[TMP6:%.*]] = musttail call i32 @_ZN8Derived15func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    ret i32 [[TMP6]]
; ICALL-FUNC:       7:
; ICALL-FUNC-NEXT:    [[TMP8:%.*]] = icmp eq ptr [[TMP1]], @_ZN8Derived25func1Ei
; ICALL-FUNC-NEXT:    br i1 [[TMP8]], label [[IF_TRUE_DIRECT_TARG2:%.*]], label [[TMP10:%.*]], !prof [[PROF6:![0-9]+]]
; ICALL-FUNC:       if.true.direct_targ2:
; ICALL-FUNC-NEXT:    [[TMP9:%.*]] = musttail call i32 @_ZN8Derived25func1Ei(ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    ret i32 [[TMP9]]
; ICALL-FUNC:       10:
; ICALL-FUNC-NEXT:    [[CALL:%.*]] = musttail call i32 [[TMP1]](ptr [[D]], i32 [[A]])
; ICALL-FUNC-NEXT:    ret i32 [[CALL]]
;
; ICALL-VTABLE-LABEL: define i32 @test_three_function_candidates(
; ICALL-VTABLE-SAME: ptr [[D:%.*]], i32 [[A:%.*]]) {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    [[VTABLE:%.*]] = load ptr, ptr [[D]], align 8, !prof [[PROF3:![0-9]+]]
; ICALL-VTABLE-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[VTABLE]] to i64
; ICALL-VTABLE-NEXT:    [[VTABLE_OBJECT:%.*]] = sub nuw i64 [[TMP0]], 16
; ICALL-VTABLE-NEXT:    [[TMP1:%.*]] = tail call i1 @llvm.type.test(ptr [[VTABLE]], metadata !"_ZTS4Base")
; ICALL-VTABLE-NEXT:    tail call void @llvm.assume(i1 [[TMP1]])
; ICALL-VTABLE-NEXT:    [[TMP2:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV4Base to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP2]], label [[IF_THEN_DIRECT_VTABLE_TARG:%.*]], label [[IF_ELSE_ORIG_INDIRECT_CALL:%.*]], !prof [[PROF4:![0-9]+]]
; ICALL-VTABLE:       if.then.direct_vtable_targ:
; ICALL-VTABLE-NEXT:    [[TMP3:%.*]] = musttail call i32 @_ZN4Base5func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    ret i32 [[TMP3]]
; ICALL-VTABLE:       if.else.orig_indirect_call:
; ICALL-VTABLE-NEXT:    [[TMP4:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV8Derived1 to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP4]], label [[IF_THEN_DIRECT_VTABLE_TARG1:%.*]], label [[IF_ELSE_ORIG_INDIRECT_CALL2:%.*]], !prof [[PROF5:![0-9]+]]
; ICALL-VTABLE:       if.then.direct_vtable_targ1:
; ICALL-VTABLE-NEXT:    [[TMP5:%.*]] = musttail call i32 @_ZN8Derived15func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    ret i32 [[TMP5]]
; ICALL-VTABLE:       if.else.orig_indirect_call2:
; ICALL-VTABLE-NEXT:    [[TMP6:%.*]] = icmp eq i64 ptrtoint (ptr @_ZTV8Derived2 to i64), [[VTABLE_OBJECT]]
; ICALL-VTABLE-NEXT:    br i1 [[TMP6]], label [[IF_THEN_DIRECT_VTABLE_TARG3:%.*]], label [[IF_ELSE_ORIG_INDIRECT_CALL4:%.*]], !prof [[PROF6:![0-9]+]]
; ICALL-VTABLE:       if.then.direct_vtable_targ3:
; ICALL-VTABLE-NEXT:    [[TMP7:%.*]] = musttail call i32 @_ZN8Derived25func1Ei(ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    ret i32 [[TMP7]]
; ICALL-VTABLE:       if.else.orig_indirect_call4:
; ICALL-VTABLE-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[VTABLE]], align 8
; ICALL-VTABLE-NEXT:    [[CALL:%.*]] = musttail call i32 [[TMP8]](ptr [[D]], i32 [[A]])
; ICALL-VTABLE-NEXT:    ret i32 [[CALL]]
;
entry:
  %vtable = load ptr, ptr %d, !prof !8
  %0 = tail call i1 @llvm.type.test(ptr %vtable, metadata !"_ZTS4Base")
  tail call void @llvm.assume(i1 %0)
  %1 = load ptr, ptr %vtable
  %call = musttail call i32 %1(ptr %d, i32 %a), !prof !9
  ret i32 %call
}

declare i1 @llvm.type.test(ptr, metadata)
declare void @llvm.assume(i1 noundef)
define i32 @_ZN4Base5func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN4Base5func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 0
;
; ICALL-VTABLE-LABEL: define i32 @_ZN4Base5func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 0
;
  ret i32 0
}
define i32 @_ZN8Derived15func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN8Derived15func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 1
;
; ICALL-VTABLE-LABEL: define i32 @_ZN8Derived15func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 1
;
  ret i32 1
}
define i32 @_ZN8Derived25func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN8Derived25func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 2
;
; ICALL-VTABLE-LABEL: define i32 @_ZN8Derived25func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 2
;
  ret i32 2
}
define i32 @_ZN8Derived35func1Ei(ptr, i32) {
; ICALL-FUNC-LABEL: define i32 @_ZN8Derived35func1Ei(
; ICALL-FUNC-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-FUNC-NEXT:    ret i32 3
;
; ICALL-VTABLE-LABEL: define i32 @_ZN8Derived35func1Ei(
; ICALL-VTABLE-SAME: ptr [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; ICALL-VTABLE-NEXT:    ret i32 3
;
  ret i32 3
}

define i32 @_ZN4Base5func2Ev(ptr %this) {
; ICALL-FUNC-LABEL: define i32 @_ZN4Base5func2Ev(
; ICALL-FUNC-SAME: ptr [[THIS:%.*]]) {
; ICALL-FUNC-NEXT:  entry:
; ICALL-FUNC-NEXT:    ret i32 0
;
; ICALL-VTABLE-LABEL: define i32 @_ZN4Base5func2Ev(
; ICALL-VTABLE-SAME: ptr [[THIS:%.*]]) {
; ICALL-VTABLE-NEXT:  entry:
; ICALL-VTABLE-NEXT:    ret i32 0
;
entry:
  ret i32 0
}

!0 = !{i64 16, !"_ZTS4Base"}
!1 = !{i64 16, !"_ZTS8Derived1"}
!2 = !{i64 16, !"_ZTS8Derived2"}
!3 = !{i64 16, !"_ZTS8Derived3"}
!4 = !{!"VP", i32 2, i64 1600, i64 5035968517245772950, i64 1600}
!5 = !{!"VP", i32 0, i64 1600, i64 -3104805163612457913, i64 1600}
!6 = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 1000, i64 -9064381665493407289, i64 600}
!7 = !{!"VP", i32 0, i64 1600, i64 -6112946599537438938, i64 1000, i64 5741628532826110430, i64 600}
!8 = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 600, i64 -9064381665493407289, i64 550, i64 5035968517245772950, i64 450}
!9 = !{!"VP", i32 0, i64 1600, i64 -6112946599537438938, i64 600, i64 5741628532826110430, i64 550, i64 8412292991472345728, i64 450}

; two function, two vtable, same offset

; three function, three vtable, same offset
;.
; ICALL-FUNC: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-FUNC: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-VTABLE: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; ICALL-VTABLE: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
;.
; ICALL-FUNC: [[META0:![0-9]+]] = !{i64 16, !"_ZTS4Base"}
; ICALL-FUNC: [[META1:![0-9]+]] = !{i64 16, !"_ZTS8Derived1"}
; ICALL-FUNC: [[META2:![0-9]+]] = !{i64 16, !"_ZTS8Derived2"}
; ICALL-FUNC: [[PROF3]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 600, i64 -9064381665493407289, i64 550, i64 5035968517245772950, i64 450}
; ICALL-FUNC: [[PROF4]] = !{!"branch_weights", i32 600, i32 1000}
; ICALL-FUNC: [[PROF5]] = !{!"branch_weights", i32 550, i32 450}
; ICALL-FUNC: [[PROF6]] = !{!"branch_weights", i32 450, i32 0}
;.
; ICALL-VTABLE: [[META0:![0-9]+]] = !{i64 16, !"_ZTS4Base"}
; ICALL-VTABLE: [[META1:![0-9]+]] = !{i64 16, !"_ZTS8Derived1"}
; ICALL-VTABLE: [[META2:![0-9]+]] = !{i64 16, !"_ZTS8Derived2"}
; ICALL-VTABLE: [[PROF3]] = !{!"VP", i32 2, i64 1600, i64 1960855528937986108, i64 600, i64 -9064381665493407289, i64 550, i64 5035968517245772950, i64 450}
; ICALL-VTABLE: [[PROF4]] = !{!"branch_weights", i32 600, i32 1000}
; ICALL-VTABLE: [[PROF5]] = !{!"branch_weights", i32 550, i32 450}
; ICALL-VTABLE: [[PROF6]] = !{!"branch_weights", i32 450, i32 0}
;.
