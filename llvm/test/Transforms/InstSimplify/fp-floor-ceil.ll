; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instsimplify -S | FileCheck %s

define i1 @x_floor_ole(float %0) {
; CHECK-LABEL: @x_floor_ole(
; CHECK-NEXT:    ret i1 true
;
  %2 = call nnan float @llvm.floor.f32(float %0)
  %3 = fcmp ole float %2, %0
  ret i1 %3
}

define i1 @x_floor_ule(float %0) {
; CHECK-LABEL: @x_floor_ule(
; CHECK-NEXT:    ret i1 true
;
  %2 = call nnan float @llvm.floor.f32(float %0)
  %3 = fcmp ule float %2, %0
  ret i1 %3
}

define i1 @x_floor_ogt(float %0) {
; CHECK-LABEL: @x_floor_ogt(
; CHECK-NEXT:    ret i1 false
;
  %2 = call nnan float @llvm.floor.f32(float %0)
  %3 = fcmp ogt float %2, %0
  ret i1 %3
}

define i1 @x_floor_ugt(float %0) {
; CHECK-LABEL: @x_floor_ugt(
; CHECK-NEXT:    ret i1 false
;
  %2 = call nnan float @llvm.floor.f32(float %0)
  %3 = fcmp ugt float %2, %0
  ret i1 %3
}

define i1 @x_floor_ueq(float %0) {
; CHECK-LABEL: @x_floor_ueq(
; CHECK-NEXT:    [[TMP2:%.*]] = call nnan float @llvm.floor.f32(float [[TMP0:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp ueq float [[TMP2]], [[TMP0]]
; CHECK-NEXT:    ret i1 [[TMP3]]
;
  %2 = call nnan float @llvm.floor.f32(float %0)
  %3 = fcmp ueq float %2, %0
  ret i1 %3
}

define <2 x i1> @x_floor_ugt_vec(<2 x float> %0) {
; CHECK-LABEL: @x_floor_ugt_vec(
; CHECK-NEXT:    ret <2 x i1> zeroinitializer
;
  %2 = call nnan <2 x float> @llvm.floor.v2f32(<2 x float> %0)
  %3 = fcmp ugt <2 x float> %2, %0
  ret <2 x i1> %3
}

define i1 @x_ceil_ole(float %0) {
; CHECK-LABEL: @x_ceil_ole(
; CHECK-NEXT:    ret i1 false
;
  %2 = call nnan float @llvm.ceil.f32(float %0)
  %3 = fcmp olt float %2, %0
  ret i1 %3
}

define i1 @x_ceil_ule(float %0) {
; CHECK-LABEL: @x_ceil_ule(
; CHECK-NEXT:    ret i1 false
;
  %2 = call nnan float @llvm.ceil.f32(float %0)
  %3 = fcmp ult float %2, %0
  ret i1 %3
}

define i1 @x_ceil_ogt(float %0) {
; CHECK-LABEL: @x_ceil_ogt(
; CHECK-NEXT:    ret i1 true
;
  %2 = call nnan float @llvm.ceil.f32(float %0)
  %3 = fcmp oge float %2, %0
  ret i1 %3
}

define i1 @x_ceil_ugt(float %0) {
; CHECK-LABEL: @x_ceil_ugt(
; CHECK-NEXT:    ret i1 true
;
  %2 = call nnan float @llvm.ceil.f32(float %0)
  %3 = fcmp uge float %2, %0
  ret i1 %3
}

define i1 @x_ceil_ueq(float %0) {
; CHECK-LABEL: @x_ceil_ueq(
; CHECK-NEXT:    [[TMP2:%.*]] = call nnan float @llvm.ceil.f32(float [[TMP0:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp ueq float [[TMP2]], [[TMP0]]
; CHECK-NEXT:    ret i1 [[TMP3]]
;
  %2 = call nnan float @llvm.ceil.f32(float %0)
  %3 = fcmp ueq float %2, %0
  ret i1 %3
}

define <2 x i1> @x_ceil_ugt_vec(<2 x float> %0) {
; CHECK-LABEL: @x_ceil_ugt_vec(
; CHECK-NEXT:    ret <2 x i1> <i1 true, i1 true>
;
  %2 = call nnan <2 x float> @llvm.ceil.f32(<2 x float> %0)
  %3 = fcmp uge <2 x float> %2, %0
  ret <2 x i1> %3
}
