; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function caller --version 4
; RUN: opt --passes=globalopt -o - -S < %s | FileCheck %s

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

@callee_with_trivial_resolver.ifunc = dso_local ifunc void (), ptr @callee_with_trivial_resolver.resolver
define ptr @callee_with_trivial_resolver.resolver() {
  ret ptr @callee_with_trivial_resolver._Msimd
}
define void @callee_with_trivial_resolver._Msimd() {
  ret void
}
define void @callee_with_trivial_resolver.default() {
  ret void
}

@unknown_condition = external global i1
@callee_with_complex_resolver.ifunc = dso_local ifunc void (), ptr @callee_with_complex_resolver.resolver
define ptr @callee_with_complex_resolver.resolver() {
entry:
  %v = load i1, ptr @unknown_condition
  br i1 %v, label %fast, label %slow
fast:
  ret ptr @callee_with_complex_resolver._Msimd
slow:
  ret ptr @callee_with_complex_resolver._Msimd
}
define void @callee_with_complex_resolver._Msimd() {
  ret void
}
define void @callee_with_complex_resolver.default() {
  ret void
}

@callee_with_sideeffects_resolver.ifunc = dso_local ifunc void (), ptr @callee_with_sideeffects_resolver.resolver
define ptr @callee_with_sideeffects_resolver.resolver() {
  store i1 0, ptr @unknown_condition
  ret ptr @callee_with_sideeffects_resolver.default
}
define void @callee_with_sideeffects_resolver._Msimd() {
  ret void
}
define void @callee_with_sideeffects_resolver.default() {
  ret void
}

@callee_with_interposable_resolver.ifunc = dso_local ifunc void (), ptr @callee_with_interposable_resolver.resolver
define weak ptr @callee_with_interposable_resolver.resolver() {
  ret ptr @callee_with_interposable_resolver.resolver
}
define void @callee_with_interposable_resolver._Msimd() {
  ret void
}
define void @callee_with_interposable_resolver.default() {
  ret void
}

define void @caller() {
; CHECK-LABEL: define void @caller() local_unnamed_addr {
; CHECK-NEXT:    call void @callee_with_trivial_resolver._Msimd()
; CHECK-NEXT:    call void @callee_with_complex_resolver.ifunc()
; CHECK-NEXT:    call void @callee_with_sideeffects_resolver.ifunc()
; CHECK-NEXT:    call void @callee_with_interposable_resolver.ifunc()
; CHECK-NEXT:    ret void
;
  call void @callee_with_trivial_resolver.ifunc()
  call void @callee_with_complex_resolver.ifunc()
  call void @callee_with_sideeffects_resolver.ifunc()
  call void @callee_with_interposable_resolver.ifunc()
  ret void
}
