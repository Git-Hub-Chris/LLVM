; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=instcombine -S < %s | FileCheck %s

; A + B - C == B
define i1 @icmp_common_add_sub(i32 %a, i32 %b, i32 %c){
; CHECK-LABEL: define i1 @icmp_common_add_sub(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[A]], [[C]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %add = add i32 %a, %b
  %sub = sub i32 %add, %c
  %cmp = icmp eq i32 %sub, %b
  ret i1 %cmp
}

; A + B - C !=  B
define i1 @icmp_common_add_sub_ne(i32 %a, i32 %b, i32 %c){
; CHECK-LABEL: define i1 @icmp_common_add_sub_ne(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[A]], [[C]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %add = add i32 %a, %b
  %sub = sub i32 %add, %c
  %cmp = icmp ne i32 %sub, %b
  ret i1 %cmp
}

; A * B - C == B
define i1 @icmp_common_mul_sub(i32 %a, i32 %b, i32 %c){
; CHECK-LABEL: define i1 @icmp_common_mul_sub(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
; CHECK-NEXT:    [[MUL:%.*]] = mul i32 [[A]], [[B]]
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 [[MUL]], [[C]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[SUB]], [[B]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %mul = mul i32 %a, %b
  %sub = sub i32 %mul, %c
  %cmp = icmp eq i32 %sub, %b
  ret i1 %cmp
}

; A + B + C == B
define i1 @icmp_common_add_add(i32 %a, i32 %b, i32 %c){
; CHECK-LABEL: define i1 @icmp_common_add_add(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
; CHECK-NEXT:    [[ADD2:%.*]] = sub i32 0, [[C]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD2]], [[A]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %add1 = add i32 %a, %b
  %add2 = add i32 %add1, %c
  %cmp = icmp eq i32 %add2, %b
  ret i1 %cmp
}

; A + B + C + D == B
define i1 @icmp_common_add_add_add(i32 %a, i32 %b, i32 %c, i32 %d){
; CHECK-LABEL: define i1 @icmp_common_add_add_add(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
; CHECK-NEXT:    [[ADD2:%.*]] = add i32 [[A]], [[C]]
; CHECK-NEXT:    [[ADD3:%.*]] = sub i32 0, [[D]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD2]], [[ADD3]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %add1 = add i32 %a, %b
  %add2 = add i32 %add1, %c
  %add3 = add i32 %add2, %d
  %cmp = icmp eq i32 %add3, %b
  ret i1 %cmp
}

; A + B + C + D == C
define i1 @icmp_common_add_add_add_2(i32 %a, i32 %b, i32 %c, i32 %d){
; CHECK-LABEL: define i1 @icmp_common_add_add_add_2(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
; CHECK-NEXT:    [[ADD1:%.*]] = add i32 [[A]], [[B]]
; CHECK-NEXT:    [[ADD3:%.*]] = sub i32 0, [[D]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD1]], [[ADD3]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %add1 = add i32 %a, %b
  %add2 = add i32 %add1, %c
  %add3 = add i32 %add2, %d
  %cmp = icmp eq i32 %add3, %c
  ret i1 %cmp
}

; A + B + C - D == B
define i1 @icmp_common_add_add_sub(i32 %a, i32 %b, i32 %c, i32 %d){
; CHECK-LABEL: define i1 @icmp_common_add_add_sub(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
; CHECK-NEXT:    [[ADD2:%.*]] = add i32 [[A]], [[C]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD2]], [[D]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %add1 = add i32 %a, %b
  %add2 = add i32 %add1, %c
  %sub = sub i32 %add2, %d
  %cmp = icmp eq i32 %sub, %b
  ret i1 %cmp
}


; A + B - C + D == B
define i1 @icmp_common_add_sub_add(i32 %a, i32 %b, i32 %c, i32 %d){
; CHECK-LABEL: define i1 @icmp_common_add_sub_add(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 [[A]], [[C]]
; CHECK-NEXT:    [[ADD2:%.*]] = sub i32 0, [[D]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[SUB]], [[ADD2]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %add1 = add i32 %a, %b
  %sub = sub i32 %add1, %c
  %add2 = add i32 %sub, %d
  %cmp = icmp eq i32 %add2, %b
  ret i1 %cmp
}
