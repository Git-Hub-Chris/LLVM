; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt < %s -passes=instcombine -S | FileCheck %s
%Zip = type { i64, i64, [1 x i8] }

define i64 @foo(i64 %idx, ptr %v) {
; CHECK-LABEL: define i64 @foo(
; CHECK-SAME: i64 [[IDX:%.*]], ptr [[V:%.*]]) {
; CHECK-NEXT:    [[Z1:%.*]] = alloca [[ZIP:%.*]], align 8
; CHECK-NEXT:    [[SROA_IDX:%.*]] = getelementptr inbounds i8, ptr [[Z1]], i64 8
; CHECK-NEXT:    store i64 32, ptr [[SROA_IDX]], align 8
; CHECK-NEXT:    [[OFFSET:%.*]] = getelementptr inbounds [[ZIP]], ptr [[Z1]], i64 0, i32 1
; CHECK-NEXT:    [[AF:%.*]] = getelementptr inbounds [[ZIP]], ptr [[Z1]], i64 0, i32 2, i64 [[IDX]]
; CHECK-NEXT:    [[A:%.*]] = load i8, ptr [[AF]], align 8
; CHECK-NEXT:    store i8 [[A]], ptr [[V]], align 8
; CHECK-NEXT:    [[LEN:%.*]] = load i64, ptr [[OFFSET]], align 8
; CHECK-NEXT:    ret i64 [[LEN]]
;
  %z1 = alloca %Zip, align 8
  %sroa_idx = getelementptr inbounds i8, ptr %z1, i64 8
  store i64 32, ptr %sroa_idx, align 8
  %offset = getelementptr inbounds %Zip, ptr %z1, i64 0, i32 1
  %af = getelementptr inbounds %Zip, ptr %z1, i64 0, i32 2, i64 %idx
  %a = load i8, ptr %af, align 8
  store i8 %a, ptr %v, align 8
  %len = load i64, ptr %offset, align 8
  ret i64 %len
}

