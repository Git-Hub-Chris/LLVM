; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

define i8 @select_icmp_eq_mul_and(i8 noundef %a, i8 %b)  {
; CHECK-LABEL: define i8 @select_icmp_eq_mul_and(
; CHECK-SAME: i8 noundef [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[A]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[TMP1]], 0
; CHECK-NEXT:    [[MUL:%.*]] = mul i8 [[A]], [[A]]
; CHECK-NEXT:    [[RETVAL:%.*]] = select i1 [[CMP]], i8 [[MUL]], i8 [[B]]
; CHECK-NEXT:    ret i8 [[RETVAL]]
;
  %1 = and i8 %a, 1
  %cmp = icmp eq i8 %1, 0
  %div = and i8 %a, -2
  %mul = mul i8 %div, %div
  %retval = select i1 %cmp, i8 %mul, i8 %b
  ret i8 %retval
}

define i8 @select_icmp_eq_mul_and_inv(i8 noundef %a, i8 %b)  {
; CHECK-LABEL: define i8 @select_icmp_eq_mul_and_inv(
; CHECK-SAME: i8 noundef [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[A]], 1
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; CHECK-NEXT:    [[MUL:%.*]] = mul i8 [[A]], [[A]]
; CHECK-NEXT:    [[RETVAL:%.*]] = select i1 [[CMP_NOT]], i8 [[MUL]], i8 [[B]]
; CHECK-NEXT:    ret i8 [[RETVAL]]
;
  %1 = and i8 %a, 1
  %cmp = icmp eq i8 %1, 1
  %div = and i8 %a, -2
  %mul = mul i8 %div, %div
  %retval = select i1 %cmp, i8 %b, i8 %mul
  ret i8 %retval
}

define i8 @select_icmp_eq_and(i8 noundef %a, i8 %b)  {
; CHECK-LABEL: define i8 @select_icmp_eq_and(
; CHECK-SAME: i8 noundef [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[A]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[TMP1]], 0
; CHECK-NEXT:    [[RETVAL:%.*]] = select i1 [[CMP]], i8 [[A]], i8 [[B]]
; CHECK-NEXT:    ret i8 [[RETVAL]]
;
  %1 = and i8 %a, 1
  %cmp = icmp eq i8 %1, 0
  %div = and i8 %a, -2
  %retval = select i1 %cmp, i8 %div, i8 %b
  ret i8 %retval
}

define i8 @select_icmp_eq_and_inv(i8 noundef %a, i8 %b)  {
; CHECK-LABEL: define i8 @select_icmp_eq_and_inv(
; CHECK-SAME: i8 noundef [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[A]], 1
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; CHECK-NEXT:    [[RETVAL:%.*]] = select i1 [[CMP_NOT]], i8 [[A]], i8 [[B]]
; CHECK-NEXT:    ret i8 [[RETVAL]]
;
  %1 = and i8 %a, 1
  %cmp = icmp eq i8 %1, 1
  %div = and i8 %a, -2
  %retval = select i1 %cmp, i8 %b, i8 %div
  ret i8 %retval
}

;negative test
define i8 @select_icmp_eq_and_undef(i8 %a, i8 %b)  {
; CHECK-LABEL: define i8 @select_icmp_eq_and_undef(
; CHECK-SAME: i8 [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[A]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[TMP1]], 0
; CHECK-NEXT:    [[DIV:%.*]] = and i8 [[A]], -2
; CHECK-NEXT:    [[RETVAL:%.*]] = select i1 [[CMP]], i8 [[DIV]], i8 [[B]]
; CHECK-NEXT:    ret i8 [[RETVAL]]
;
  %1 = and i8 %a, 1
  %cmp = icmp eq i8 %1, 0
  %div = and i8 %a, -2
  %retval = select i1 %cmp, i8 %div, i8 %b
  ret i8 %retval
}

;negative test
define i8 @select_icmp_eq_and_diff(i8 noundef %a, i8 %b, i8 %c)  {
; CHECK-LABEL: define i8 @select_icmp_eq_and_diff(
; CHECK-SAME: i8 noundef [[A:%.*]], i8 [[B:%.*]], i8 [[C:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[A]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[TMP1]], 0
; CHECK-NEXT:    [[DIV:%.*]] = and i8 [[C]], -2
; CHECK-NEXT:    [[RETVAL:%.*]] = select i1 [[CMP]], i8 [[DIV]], i8 [[B]]
; CHECK-NEXT:    ret i8 [[RETVAL]]
;
  %1 = and i8 %a, 1
  %cmp = icmp eq i8 %1, 0
  %div = and i8 %c, -2
  %retval = select i1 %cmp, i8 %div, i8 %b
  ret i8 %retval
}

;negative test
define i8 @select_icmp_eq_mul_and_extra_use(i8 noundef %a, i8 %b)  {
; CHECK-LABEL: define i8 @select_icmp_eq_mul_and_extra_use(
; CHECK-SAME: i8 noundef [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[A]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[TMP1]], 0
; CHECK-NEXT:    [[DIV:%.*]] = and i8 [[A]], -2
; CHECK-NEXT:    [[MUL:%.*]] = mul i8 [[DIV]], [[DIV]]
; CHECK-NEXT:    [[RETVAL:%.*]] = select i1 [[CMP]], i8 [[MUL]], i8 [[B]]
; CHECK-NEXT:    [[SUM:%.*]] = add i8 [[MUL]], [[RETVAL]]
; CHECK-NEXT:    ret i8 [[SUM]]
;
  %1 = and i8 %a, 1
  %cmp = icmp eq i8 %1, 0
  %div = and i8 %a, -2
  %mul = mul i8 %div, %div
  %retval = select i1 %cmp, i8 %mul, i8 %b
  %sum = add i8 %mul, %retval
  ret i8 %sum
}
