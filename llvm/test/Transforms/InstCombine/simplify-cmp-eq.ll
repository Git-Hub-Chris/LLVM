; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

declare void @use.i8(i8)
define <2 x i1> @simplify_cmp_or_disjoint(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_or_disjoint(
; CHECK-NEXT:    [[R:%.*]] = icmp ne <2 x i8> [[X:%.*]], <i8 -12, i8 32>
; CHECK-NEXT:    ret <2 x i1> [[R]]
;
  %v = or disjoint <2 x i8> %x, <i8 12, i8 13>
  %r = icmp ne <2 x i8> %v, <i8 0, i8 45>
  ret <2 x i1> %r
}

define <2 x i1> @simplify_cmp_or_fail_missing_disjoint(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_or_fail_missing_disjoint(
; CHECK-NEXT:    [[V:%.*]] = or <2 x i8> [[X:%.*]], <i8 12, i8 13>
; CHECK-NEXT:    [[R:%.*]] = icmp ne <2 x i8> [[V]], <i8 0, i8 45>
; CHECK-NEXT:    ret <2 x i1> [[R]]
;
  %v = or <2 x i8> %x, <i8 12, i8 13>
  %r = icmp ne <2 x i8> %v, <i8 0, i8 45>
  ret <2 x i1> %r
}

define i1 @simplify_cmp_add(i8 %x) {
; CHECK-LABEL: @simplify_cmp_add(
; CHECK-NEXT:    [[R:%.*]] = icmp ne i8 [[X:%.*]], 43
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = add i8 %x, 12
  %r = icmp ne i8 %v, 55
  ret i1 %r
}

define i1 @simplify_cmp_add_fail_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_add_fail_multiuse(
; CHECK-NEXT:    [[V:%.*]] = add i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    [[R:%.*]] = icmp ne i8 [[V]], 55
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = add i8 %x, 12
  call void @use.i8(i8 %v)
  %r = icmp ne i8 %v, 55
  ret i1 %r
}

define <2 x i1> @simplify_cmp_sub(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_sub(
; CHECK-NEXT:    [[R:%.*]] = icmp eq <2 x i8> [[X:%.*]], <i8 12, i8 -42>
; CHECK-NEXT:    ret <2 x i1> [[R]]
;
  %v = sub <2 x i8> <i8 12, i8 13>, %x
  %r = icmp eq <2 x i8> %v, <i8 0, i8 55>
  ret <2 x i1> %r
}

define i1 @simplify_cmp_xor(i8 %x) {
; CHECK-LABEL: @simplify_cmp_xor(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X:%.*]], 59
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = xor i8 %x, 12
  %r = icmp eq i8 %v, 55
  ret i1 %r
}

define <2 x i1> @simplify_cmp_mul_udiv(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_mul_udiv(
; CHECK-NEXT:    [[R:%.*]] = icmp eq <2 x i8> [[X:%.*]], <i8 4, i8 4>
; CHECK-NEXT:    ret <2 x i1> [[R]]
;
  %v = mul nuw <2 x i8> %x, <i8 12, i8 12>
  %r = icmp eq <2 x i8> %v, <i8 48, i8 48>
  ret <2 x i1> %r
}

define <2 x i1> @simplify_cmp_mul_udiv_todo(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_mul_udiv_todo(
; CHECK-NEXT:    [[V:%.*]] = mul nuw <2 x i8> [[X:%.*]], <i8 12, i8 12>
; CHECK-NEXT:    [[R:%.*]] = icmp eq <2 x i8> [[V]], <i8 48, i8 60>
; CHECK-NEXT:    ret <2 x i1> [[R]]
;
  %v = mul nuw <2 x i8> %x, <i8 12, i8 12>
  %r = icmp eq <2 x i8> %v, <i8 48, i8 60>
  ret <2 x i1> %r
}

define <2 x i1> @simplify_cmp_mul_udiv_fail_missing_nuw(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_mul_udiv_fail_missing_nuw(
; CHECK-NEXT:    [[R:%.*]] = icmp eq <2 x i8> [[X:%.*]], <i8 4, i8 4>
; CHECK-NEXT:    ret <2 x i1> [[R]]
;
  %v = mul nsw <2 x i8> %x, <i8 12, i8 12>
  %r = icmp eq <2 x i8> %v, <i8 48, i8 48>
  ret <2 x i1> %r
}

define <2 x i1> @simplify_cmp_mul_udiv_fail_bad_rem(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_mul_udiv_fail_bad_rem(
; CHECK-NEXT:    ret <2 x i1> zeroinitializer
;
  %v = mul nuw <2 x i8> %x, <i8 12, i8 12>
  %r = icmp eq <2 x i8> %v, <i8 47, i8 47>
  ret <2 x i1> %r
}

define <2 x i1> @simplify_cmp_mul_sdiv(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_mul_sdiv(
; CHECK-NEXT:    ret <2 x i1> zeroinitializer
;
  %v = mul nuw <2 x i8> %x, <i8 12, i8 12>
  %r = icmp eq <2 x i8> %v, <i8 -48, i8 -48>
  ret <2 x i1> %r
}

define <2 x i1> @simplify_cmp_mul_sdiv_fail_bad_rem(<2 x i8> %x) {
; CHECK-LABEL: @simplify_cmp_mul_sdiv_fail_bad_rem(
; CHECK-NEXT:    ret <2 x i1> zeroinitializer
;
  %v = mul nuw <2 x i8> %x, <i8 7, i8 7>
  %r = icmp eq <2 x i8> %v, <i8 -48, i8 -48>
  ret <2 x i1> %r
}

define i1 @simplify_cmp_udiv(i8 %x) {
; CHECK-LABEL: @simplify_cmp_udiv(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X:%.*]], -112
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = udiv exact i8 %x, 12
  %r = icmp eq i8 %v, 12
  ret i1 %r
}

define i1 @simplify_cmp_udiv_fail_missing_exact(i8 %x) {
; CHECK-LABEL: @simplify_cmp_udiv_fail_missing_exact(
; CHECK-NEXT:    [[X_OFF:%.*]] = add i8 [[X:%.*]], 112
; CHECK-NEXT:    [[R:%.*]] = icmp ult i8 [[X_OFF]], 12
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = udiv i8 %x, 12
  %r = icmp eq i8 %v, 12
  ret i1 %r
}

define i1 @simplify_cmp_udiv_fail_overflow(i8 %x) {
; CHECK-LABEL: @simplify_cmp_udiv_fail_overflow(
; CHECK-NEXT:    ret i1 false
;
  %v = udiv exact i8 %x, 12
  %r = icmp eq i8 %v, 50
  ret i1 %r
}

define i1 @simplify_cmp_sdiv(i8 %x) {
; CHECK-LABEL: @simplify_cmp_sdiv(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X:%.*]], 72
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = sdiv exact i8 %x, 12
  %r = icmp eq i8 %v, 6
  ret i1 %r
}

define i1 @simplify_cmp_sdiv_fail_missing_exact(i8 %x) {
; CHECK-LABEL: @simplify_cmp_sdiv_fail_missing_exact(
; CHECK-NEXT:    [[X_OFF:%.*]] = add i8 [[X:%.*]], -72
; CHECK-NEXT:    [[R:%.*]] = icmp ult i8 [[X_OFF]], 12
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = sdiv i8 %x, 12
  %r = icmp eq i8 %v, 6
  ret i1 %r
}

define i1 @simplify_cmp_sdiv_fail_overflow(i8 %x) {
; CHECK-LABEL: @simplify_cmp_sdiv_fail_overflow(
; CHECK-NEXT:    ret i1 false
;
  %v = sdiv exact i8 %x, 12
  %r = icmp eq i8 %v, 12
  ret i1 %r
}

define i1 @simplify_cmp_zext(i4 %x) {
; CHECK-LABEL: @simplify_cmp_zext(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i4 [[X:%.*]], -8
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = zext i4 %x to i8
  %r = icmp eq i8 %v, 8
  ret i1 %r
}

define i1 @simplify_cmp_zext_fail_out_of_bounds(i4 %x) {
; CHECK-LABEL: @simplify_cmp_zext_fail_out_of_bounds(
; CHECK-NEXT:    ret i1 false
;
  %v = zext i4 %x to i8
  %r = icmp eq i8 %v, 16
  ret i1 %r
}

define i1 @simplify_cmp_sext(i4 %x) {
; CHECK-LABEL: @simplify_cmp_sext(
; CHECK-NEXT:    ret i1 false
;
  %v = sext i4 %x to i8
  %r = icmp eq i8 %v, 8
  ret i1 %r
}

define i1 @simplify_cmp_sext2(i4 %x) {
; CHECK-LABEL: @simplify_cmp_sext2(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i4 [[X:%.*]], -8
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = sext i4 %x to i8
  %r = icmp eq i8 %v, -8
  ret i1 %r
}

define i1 @simplify_cmp_sext_fail_out_of_bounds(i4 %x) {
; CHECK-LABEL: @simplify_cmp_sext_fail_out_of_bounds(
; CHECK-NEXT:    ret i1 false
;
  %v = sext i4 %x to i8
  %r = icmp eq i8 %v, -16
  ret i1 %r
}

define i1 @simplify_cmp_shl(i8 %x) {
; CHECK-LABEL: @simplify_cmp_shl(
; CHECK-NEXT:    [[V_MASK:%.*]] = and i8 [[X:%.*]], 31
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V_MASK]], 7
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = shl i8 %x, 3
  %r = icmp eq i8 %v, 56
  ret i1 %r
}

define i1 @simplify_cmp_shl_fail_shiftout(i8 %x) {
; CHECK-LABEL: @simplify_cmp_shl_fail_shiftout(
; CHECK-NEXT:    ret i1 false
;
  %v = shl i8 %x, 3
  %r = icmp eq i8 %v, 57
  ret i1 %r
}

define i1 @simplify_cmp_shl_fail_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_shl_fail_multiuse(
; CHECK-NEXT:    [[V:%.*]] = shl i8 [[X:%.*]], 3
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V]], 56
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = shl i8 %x, 3
  %r = icmp eq i8 %v, 56
  call void @use.i8(i8 %v)
  ret i1 %r
}

define i1 @simplify_cmp_shl_okay_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_shl_okay_multiuse(
; CHECK-NEXT:    [[V:%.*]] = shl nuw i8 [[X:%.*]], 3
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X]], 7
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = shl nuw i8 %x, 3
  %r = icmp eq i8 %v, 56
  call void @use.i8(i8 %v)
  ret i1 %r
}

define i1 @simplify_cmp_shl_okay_multiuse2(i8 %x) {
; CHECK-LABEL: @simplify_cmp_shl_okay_multiuse2(
; CHECK-NEXT:    [[V:%.*]] = shl nsw i8 [[X:%.*]], 3
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X]], 7
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = shl nsw i8 %x, 3
  %r = icmp eq i8 %v, 56
  call void @use.i8(i8 %v)
  ret i1 %r
}

define i1 @simplify_cmp_lshr(i8 %x) {
; CHECK-LABEL: @simplify_cmp_lshr(
; CHECK-NEXT:    [[V_MASK:%.*]] = and i8 [[X:%.*]], -8
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V_MASK]], -64
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = lshr i8 %x, 3
  %r = icmp eq i8 %v, 24
  ret i1 %r
}

define i1 @simplify_cmp_lshr_fail_shiftout(i8 %x) {
; CHECK-LABEL: @simplify_cmp_lshr_fail_shiftout(
; CHECK-NEXT:    ret i1 false
;
  %v = lshr i8 %x, 3
  %r = icmp eq i8 %v, 56
  ret i1 %r
}

define i1 @simplify_cmp_lshr_fail_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_lshr_fail_multiuse(
; CHECK-NEXT:    [[V:%.*]] = lshr i8 [[X:%.*]], 3
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V]], 24
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = lshr i8 %x, 3
  %r = icmp eq i8 %v, 24
  call void @use.i8(i8 %v)
  ret i1 %r
}

define i1 @simplify_cmp_lshr_okay_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_lshr_okay_multiuse(
; CHECK-NEXT:    [[V:%.*]] = lshr exact i8 [[X:%.*]], 3
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X]], -64
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = lshr exact i8 %x, 3
  %r = icmp eq i8 %v, 24
  call void @use.i8(i8 %v)
  ret i1 %r
}

define i1 @simplify_cmp_ashr(i8 %x) {
; CHECK-LABEL: @simplify_cmp_ashr(
; CHECK-NEXT:    [[V_MASK:%.*]] = and i8 [[X:%.*]], -8
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V_MASK]], 96
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = ashr i8 %x, 3
  %r = icmp eq i8 %v, 12
  ret i1 %r
}

define i1 @simplify_cmp_ashr_fail_shiftout(i8 %x) {
; CHECK-LABEL: @simplify_cmp_ashr_fail_shiftout(
; CHECK-NEXT:    ret i1 false
;
  %v = ashr i8 %x, 3
  %r = icmp eq i8 %v, 56
  ret i1 %r
}

define i1 @simplify_cmp_ashr_fail_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_ashr_fail_multiuse(
; CHECK-NEXT:    [[V:%.*]] = ashr i8 [[X:%.*]], 3
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = ashr i8 %x, 3
  %r = icmp eq i8 %v, 12
  call void @use.i8(i8 %v)
  ret i1 %r
}

define i1 @simplify_cmp_ashr_okay_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_ashr_okay_multiuse(
; CHECK-NEXT:    [[V:%.*]] = ashr exact i8 [[X:%.*]], 3
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X]], -96
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = ashr exact i8 %x, 3
  %r = icmp eq i8 %v, -12
  call void @use.i8(i8 %v)
  ret i1 %r
}

define i1 @simplify_cmp_bitreverse(i8 %x) {
; CHECK-LABEL: @simplify_cmp_bitreverse(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X:%.*]], -34
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = call i8 @llvm.bitreverse.i8(i8 %x)
  %r = icmp eq i8 %v, 123
  ret i1 %r
}

define i1 @simplify_cmp_bswap(i16 %x) {
; CHECK-LABEL: @simplify_cmp_bswap(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i16 [[X:%.*]], 14640
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = call i16 @llvm.bswap.i16(i16 %x)
  %r = icmp eq i16 %v, 12345
  ret i1 %r
}

define i1 @simplify_cmp_fshr(i8 %x) {
; CHECK-LABEL: @simplify_cmp_fshr(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X:%.*]], -37
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = call i8 @llvm.fshr.i8(i8 %x, i8 %x, i8 3)
  %r = icmp eq i8 %v, 123
  ret i1 %r
}

define i1 @simplify_cmp_fshr_fail_not_rotate(i8 %x, i8 %y) {
; CHECK-LABEL: @simplify_cmp_fshr_fail_not_rotate(
; CHECK-NEXT:    [[V:%.*]] = call i8 @llvm.fshl.i8(i8 [[X:%.*]], i8 [[Y:%.*]], i8 5)
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V]], 123
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = call i8 @llvm.fshr.i8(i8 %x, i8 %y, i8 3)
  %r = icmp eq i8 %v, 123
  ret i1 %r
}

define i1 @simplify_cmp_fshl(i8 %x) {
; CHECK-LABEL: @simplify_cmp_fshl(
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[X:%.*]], 66
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = call i8 @llvm.fshl.i8(i8 %x, i8 %x, i8 7)
  %r = icmp eq i8 %v, 33
  ret i1 %r
}

define i1 @simplify_cmp_fshl_fail_not_rotate(i8 %x, i8 %y) {
; CHECK-LABEL: @simplify_cmp_fshl_fail_not_rotate(
; CHECK-NEXT:    [[V:%.*]] = call i8 @llvm.fshl.i8(i8 [[X:%.*]], i8 [[Y:%.*]], i8 7)
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[V]], 33
; CHECK-NEXT:    ret i1 [[R]]
;
  %v = call i8 @llvm.fshl.i8(i8 %x, i8 %y, i8 7)
  %r = icmp eq i8 %v, 33
  ret i1 %r
}

define i8 @simplify_switch_or_disjoint(i8 %x) {
; CHECK-LABEL: @simplify_switch_or_disjoint(
; CHECK-NEXT:    switch i8 [[V:%.*]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 0, label [[L12:%.*]]
; CHECK-NEXT:      i8 32, label [[L44:%.*]]
; CHECK-NEXT:      i8 33, label [[L45:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l44:
; CHECK-NEXT:    ret i8 44
; CHECK:       l45:
; CHECK-NEXT:    ret i8 40
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = or disjoint i8 %x, 12
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 44, label %l44
  i8 45, label %l45
  ]

l12:
  ret i8 12
l44:
  ret i8 44
l45:
  ret i8 40
default:
  ret i8 -1
}

define i8 @simplify_switch_add(i8 %x) {
; CHECK-LABEL: @simplify_switch_add(
; CHECK-NEXT:    [[V:%.*]] = add i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 0, label [[L12:%.*]]
; CHECK-NEXT:      i8 32, label [[L44:%.*]]
; CHECK-NEXT:      i8 33, label [[L45:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l44:
; CHECK-NEXT:    ret i8 44
; CHECK:       l45:
; CHECK-NEXT:    ret i8 40
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = add i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 44, label %l44
  i8 45, label %l45
  ]

l12:
  ret i8 12
l44:
  ret i8 44
l45:
  ret i8 40
default:
  ret i8 -1
}

define i8 @simplify_switch_sub(i8 %x) {
; CHECK-LABEL: @simplify_switch_sub(
; CHECK-NEXT:    [[V:%.*]] = sub i8 12, [[X:%.*]]
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 0, label [[L12:%.*]]
; CHECK-NEXT:      i8 -32, label [[L44:%.*]]
; CHECK-NEXT:      i8 -33, label [[L45:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l44:
; CHECK-NEXT:    ret i8 44
; CHECK:       l45:
; CHECK-NEXT:    ret i8 40
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = sub i8 12, %x
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 44, label %l44
  i8 45, label %l45
  ]

l12:
  ret i8 12
l44:
  ret i8 44
l45:
  ret i8 40
default:
  ret i8 -1
}

define i8 @simplify_switch_xor(i8 %x) {
; CHECK-LABEL: @simplify_switch_xor(
; CHECK-NEXT:    [[V:%.*]] = xor i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 0, label [[L12:%.*]]
; CHECK-NEXT:      i8 32, label [[L44:%.*]]
; CHECK-NEXT:      i8 33, label [[L45:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l44:
; CHECK-NEXT:    ret i8 44
; CHECK:       l45:
; CHECK-NEXT:    ret i8 40
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = xor i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 44, label %l44
  i8 45, label %l45
  ]

l12:
  ret i8 12
l44:
  ret i8 44
l45:
  ret i8 40
default:
  ret i8 -1

}

define i8 @simplify_switch_mul_udiv(i8 %x) {
; CHECK-LABEL: @simplify_switch_mul_udiv(
; CHECK-NEXT:    [[V:%.*]] = mul nuw i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 1, label [[L12:%.*]]
; CHECK-NEXT:      i8 4, label [[L48:%.*]]
; CHECK-NEXT:      i8 5, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = mul nuw i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 48, label %l48
  i8 60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_mul_udiv_fail_bad_rem(i8 %x) {
; CHECK-LABEL: @simplify_switch_mul_udiv_fail_bad_rem(
; CHECK-NEXT:    [[V:%.*]] = mul nuw i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 12, label [[L12:%.*]]
; CHECK-NEXT:      i8 47, label [[L48:%.*]]
; CHECK-NEXT:      i8 60, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = mul nuw i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 47, label %l48
  i8 60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_mul_sdiv(i8 %x) {
; CHECK-LABEL: @simplify_switch_mul_sdiv(
; CHECK-NEXT:    [[V:%.*]] = mul nuw i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -1, label [[L12:%.*]]
; CHECK-NEXT:      i8 4, label [[L48:%.*]]
; CHECK-NEXT:      i8 -5, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = mul nuw i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 48, label %l48
  i8 -60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_mul_sdiv_fail_bad_rem(i8 %x) {
; CHECK-LABEL: @simplify_switch_mul_sdiv_fail_bad_rem(
; CHECK-NEXT:    [[V:%.*]] = mul nuw i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -12, label [[L12:%.*]]
; CHECK-NEXT:      i8 -47, label [[L48:%.*]]
; CHECK-NEXT:      i8 60, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = mul nuw i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 -47, label %l48
  i8 60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_udiv(i8 %x) {
; CHECK-LABEL: @simplify_switch_udiv(
; CHECK-NEXT:    [[V:%.*]] = udiv exact i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -112, label [[L12:%.*]]
; CHECK-NEXT:      i8 36, label [[L48:%.*]]
; CHECK-NEXT:      i8 108, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = udiv exact i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 3, label %l48
  i8 9, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_udiv_fail_overflow(i8 %x) {
; CHECK-LABEL: @simplify_switch_udiv_fail_overflow(
; CHECK-NEXT:    [[V:%.*]] = udiv exact i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 12, label [[L12:%.*]]
; CHECK-NEXT:      i8 50, label [[L48:%.*]]
; CHECK-NEXT:      i8 9, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = udiv exact i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 50, label %l48
  i8 9, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_sdiv(i8 %x) {
; CHECK-LABEL: @simplify_switch_sdiv(
; CHECK-NEXT:    [[V:%.*]] = sdiv exact i8 [[X:%.*]], 12
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 48, label [[L12:%.*]]
; CHECK-NEXT:      i8 -36, label [[L48:%.*]]
; CHECK-NEXT:      i8 84, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = sdiv exact i8 %x, 12
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 4, label %l12
  i8 -3, label %l48
  i8 7, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_sdiv_fail_overflow(i8 %x) {
; CHECK-LABEL: @simplify_switch_sdiv_fail_overflow(
; CHECK-NEXT:    [[V:%.*]] = udiv exact i8 [[X:%.*]], 12
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 4, label [[L12:%.*]]
; CHECK-NEXT:      i8 -3, label [[L48:%.*]]
; CHECK-NEXT:      i8 12, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = udiv exact i8 %x, 12
  switch i8 %v, label %default[
  i8 4, label %l12
  i8 -3, label %l48
  i8 12, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_zext(i4 %x) {
; CHECK-LABEL: @simplify_switch_zext(
; CHECK-NEXT:    switch i4 [[X:%.*]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i4 4, label [[L12:%.*]]
; CHECK-NEXT:      i4 3, label [[L48:%.*]]
; CHECK-NEXT:      i4 -4, label [[L60:%.*]]
; CHECK-NEXT:      i4 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = zext i4 %x to i8
  switch i8 %v, label %default[
  i8 4, label %l12
  i8 3, label %l48
  i8 12, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_zext_fail_out_of_bounds(i4 %x) {
; CHECK-LABEL: @simplify_switch_zext_fail_out_of_bounds(
; CHECK-NEXT:    [[V:%.*]] = zext i4 [[X:%.*]] to i8
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 16, label [[L12:%.*]]
; CHECK-NEXT:      i8 3, label [[L48:%.*]]
; CHECK-NEXT:      i8 12, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = zext i4 %x to i8
  switch i8 %v, label %default[
  i8 16, label %l12
  i8 3, label %l48
  i8 12, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_sext(i4 %x) {
; CHECK-LABEL: @simplify_switch_sext(
; CHECK-NEXT:    [[V:%.*]] = zext i4 [[X:%.*]] to i8
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -4, label [[L12:%.*]]
; CHECK-NEXT:      i8 3, label [[L48:%.*]]
; CHECK-NEXT:      i8 12, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = zext i4 %x to i8
  switch i8 %v, label %default[
  i8 -4, label %l12
  i8 3, label %l48
  i8 12, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_sext_fail_out_of_bounds(i4 %x) {
; CHECK-LABEL: @simplify_switch_sext_fail_out_of_bounds(
; CHECK-NEXT:    [[V:%.*]] = zext i4 [[X:%.*]] to i8
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -4, label [[L12:%.*]]
; CHECK-NEXT:      i8 16, label [[L48:%.*]]
; CHECK-NEXT:      i8 12, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = zext i4 %x to i8
  switch i8 %v, label %default[
  i8 -4, label %l12
  i8 16, label %l48
  i8 12, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_shl(i8 %x) {
; CHECK-LABEL: @simplify_switch_shl(
; CHECK-NEXT:    [[TMP1:%.*]] = and i8 [[X:%.*]], 63
; CHECK-NEXT:    switch i8 [[TMP1]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 61, label [[L12:%.*]]
; CHECK-NEXT:      i8 4, label [[L48:%.*]]
; CHECK-NEXT:      i8 15, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = shl i8 %x, 2
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_shl_fail_shiftout(i8 %x) {
; CHECK-LABEL: @simplify_switch_shl_fail_shiftout(
; CHECK-NEXT:    [[V:%.*]] = shl i8 [[X:%.*]], 2
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -12, label [[L12:%.*]]
; CHECK-NEXT:      i8 16, label [[L48:%.*]]
; CHECK-NEXT:      i8 2, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = shl i8 %x, 2
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 2, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_shl2(i8 %x) {
; CHECK-LABEL: @simplify_switch_shl2(
; CHECK-NEXT:    [[V:%.*]] = shl nsw i8 [[X:%.*]], 2
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -3, label [[L12:%.*]]
; CHECK-NEXT:      i8 4, label [[L48:%.*]]
; CHECK-NEXT:      i8 15, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = shl nsw i8 %x, 2
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_shl_fail_multiuse(i8 %x) {
; CHECK-LABEL: @simplify_switch_shl_fail_multiuse(
; CHECK-NEXT:    [[V:%.*]] = shl i8 [[X:%.*]], 2
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -12, label [[L12:%.*]]
; CHECK-NEXT:      i8 16, label [[L48:%.*]]
; CHECK-NEXT:      i8 60, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = shl i8 %x, 2
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_shl3(i8 %x) {
; CHECK-LABEL: @simplify_switch_shl3(
; CHECK-NEXT:    [[V:%.*]] = shl nuw i8 [[X:%.*]], 2
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 61, label [[L12:%.*]]
; CHECK-NEXT:      i8 4, label [[L48:%.*]]
; CHECK-NEXT:      i8 15, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = shl nuw i8 %x, 2
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 60, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_lshr(i8 %x) {
; CHECK-LABEL: @simplify_switch_lshr(
; CHECK-NEXT:    [[V:%.*]] = lshr exact i8 [[X:%.*]], 2
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 48, label [[L12:%.*]]
; CHECK-NEXT:      i8 64, label [[L48:%.*]]
; CHECK-NEXT:      i8 120, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = lshr exact i8 %x, 2
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 16, label %l48
  i8 30, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_lshr_fail_shiftout(i8 %x) {
; CHECK-LABEL: @simplify_switch_lshr_fail_shiftout(
; CHECK-NEXT:    [[V:%.*]] = lshr exact i8 [[X:%.*]], 2
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 12, label [[L12:%.*]]
; CHECK-NEXT:      i8 16, label [[L48:%.*]]
; CHECK-NEXT:      i8 30, label [[L60:%.*]]
; CHECK-NEXT:      i8 -128, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = lshr exact i8 %x, 2
  switch i8 %v, label %default[
  i8 12, label %l12
  i8 16, label %l48
  i8 30, label %l60
  i8 128, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_ashr(i8 %x) {
; CHECK-LABEL: @simplify_switch_ashr(
; CHECK-NEXT:    [[V:%.*]] = ashr exact i8 [[X:%.*]], 2
; CHECK-NEXT:    call void @use.i8(i8 [[V]])
; CHECK-NEXT:    switch i8 [[X]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -48, label [[L12:%.*]]
; CHECK-NEXT:      i8 64, label [[L48:%.*]]
; CHECK-NEXT:      i8 12, label [[L60:%.*]]
; CHECK-NEXT:      i8 0, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = ashr exact i8 %x, 2
  call void @use.i8(i8 %v)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 3, label %l60
  i8 0, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_ashr_fail_shiftout(i8 %x) {
; CHECK-LABEL: @simplify_switch_ashr_fail_shiftout(
; CHECK-NEXT:    [[V:%.*]] = ashr i8 [[X:%.*]], 2
; CHECK-NEXT:    switch i8 [[V]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -12, label [[L12:%.*]]
; CHECK-NEXT:      i8 16, label [[L48:%.*]]
; CHECK-NEXT:      i8 3, label [[L60:%.*]]
; CHECK-NEXT:      i8 -128, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = ashr i8 %x, 2
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 3, label %l60
  i8 128, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_bitreverse(i8 %x) {
; CHECK-LABEL: @simplify_switch_bitreverse(
; CHECK-NEXT:    switch i8 [[V:%.*]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 47, label [[L12:%.*]]
; CHECK-NEXT:      i8 8, label [[L48:%.*]]
; CHECK-NEXT:      i8 120, label [[L60:%.*]]
; CHECK-NEXT:      i8 1, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = call i8 @llvm.bitreverse.i8(i8 %x)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 30, label %l60
  i8 128, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i16 @simplify_switch_bswap(i16 %x) {
; CHECK-LABEL: @simplify_switch_bswap(
; CHECK-NEXT:    switch i16 [[V:%.*]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i16 -2817, label [[L12:%.*]]
; CHECK-NEXT:      i16 4096, label [[L48:%.*]]
; CHECK-NEXT:      i16 7680, label [[L60:%.*]]
; CHECK-NEXT:      i16 -32768, label [[L0:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i16 12
; CHECK:       l48:
; CHECK-NEXT:    ret i16 44
; CHECK:       l60:
; CHECK-NEXT:    ret i16 3
; CHECK:       l0:
; CHECK-NEXT:    ret i16 9
; CHECK:       default:
; CHECK-NEXT:    ret i16 -1
;
  %v = call i16 @llvm.bswap.i16(i16 %x)
  switch i16 %v, label %default[
  i16 -12, label %l12
  i16 16, label %l48
  i16 30, label %l60
  i16 128, label %l0
  ]

l12:
  ret i16 12
l48:
  ret i16 44
l60:
  ret i16 3
l0:
  ret i16 9
default:
  ret i16 -1
}

define i8 @simplify_switch_fshr(i8 %x) {
; CHECK-LABEL: @simplify_switch_fshr(
; CHECK-NEXT:    switch i8 [[V:%.*]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -89, label [[L12:%.*]]
; CHECK-NEXT:      i8 -128, label [[L0:%.*]]
; CHECK-NEXT:      i8 -16, label [[L60:%.*]]
; CHECK-NEXT:      i8 4, label [[L1:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = call i8 @llvm.fshr.i8(i8 %x, i8 %x, i8 3)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 30, label %l60
  i8 128, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}

define i8 @simplify_switch_fshl(i8 %x) {
; CHECK-LABEL: @simplify_switch_fshl(
; CHECK-NEXT:    switch i8 [[V:%.*]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:      i8 -98, label [[L12:%.*]]
; CHECK-NEXT:      i8 2, label [[L49:%.*]]
; CHECK-NEXT:      i8 -61, label [[L60:%.*]]
; CHECK-NEXT:      i8 16, label [[L48:%.*]]
; CHECK-NEXT:    ]
; CHECK:       l12:
; CHECK-NEXT:    ret i8 12
; CHECK:       l48:
; CHECK-NEXT:    ret i8 44
; CHECK:       l60:
; CHECK-NEXT:    ret i8 3
; CHECK:       l0:
; CHECK-NEXT:    ret i8 9
; CHECK:       default:
; CHECK-NEXT:    ret i8 -1
;
  %v = call i8 @llvm.fshl.i8(i8 %x, i8 %x, i8 3)
  switch i8 %v, label %default[
  i8 -12, label %l12
  i8 16, label %l48
  i8 30, label %l60
  i8 128, label %l0
  ]

l12:
  ret i8 12
l48:
  ret i8 44
l60:
  ret i8 3
l0:
  ret i8 9
default:
  ret i8 -1
}
