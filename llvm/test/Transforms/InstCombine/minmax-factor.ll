; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

define i8 @umin_umax(i8 %a, i8 %b, i8 %c) {
; CHECK-LABEL: @umin_umax(
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umax.i8(i8 [[A:%.*]], i8 [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call i8 @llvm.umin.i8(i8 [[C:%.*]], i8 [[TMP1]])
; CHECK-NEXT:    ret i8 [[F]]
;
  %d = call i8 @llvm.umin.i8(i8 %a, i8 %c)
  %e = call i8 @llvm.umin.i8(i8 %b, i8 %c)
  %f = call i8 @llvm.umax.i8(i8 %d, i8 %e)
  ret i8 %f
}

define i8 @umax_umin(i8 %a, i8 %b, i8 %c) {
; CHECK-LABEL: @umax_umin(
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umin.i8(i8 [[A:%.*]], i8 [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call i8 @llvm.umax.i8(i8 [[C:%.*]], i8 [[TMP1]])
; CHECK-NEXT:    ret i8 [[F]]
;
  %d = call i8 @llvm.umax.i8(i8 %a, i8 %c)
  %e = call i8 @llvm.umax.i8(i8 %b, i8 %c)
  %f = call i8 @llvm.umin.i8(i8 %d, i8 %e)
  ret i8 %f
}

define i8 @smin_smax(i8 %a, i8 %b, i8 %c) {
; CHECK-LABEL: @smin_smax(
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smax.i8(i8 [[A:%.*]], i8 [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call i8 @llvm.smin.i8(i8 [[C:%.*]], i8 [[TMP1]])
; CHECK-NEXT:    ret i8 [[F]]
;
  %d = call i8 @llvm.smin.i8(i8 %a, i8 %c)
  %e = call i8 @llvm.smin.i8(i8 %b, i8 %c)
  %f = call i8 @llvm.smax.i8(i8 %d, i8 %e)
  ret i8 %f
}

define i8 @smax_smin(i8 %a, i8 %b, i8 %c) {
; CHECK-LABEL: @smax_smin(
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smin.i8(i8 [[A:%.*]], i8 [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call i8 @llvm.smax.i8(i8 [[C:%.*]], i8 [[TMP1]])
; CHECK-NEXT:    ret i8 [[F]]
;
  %d = call i8 @llvm.smax.i8(i8 %a, i8 %c)
  %e = call i8 @llvm.smax.i8(i8 %b, i8 %c)
  %f = call i8 @llvm.smin.i8(i8 %d, i8 %e)
  ret i8 %f
}

define <2 x i8> @umin_umax_vector(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) {
; CHECK-LABEL: @umin_umax_vector(
; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i8> @llvm.umax.v2i8(<2 x i8> [[A:%.*]], <2 x i8> [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call <2 x i8> @llvm.umin.v2i8(<2 x i8> [[C:%.*]], <2 x i8> [[TMP1]])
; CHECK-NEXT:    ret <2 x i8> [[F]]
;
  %d = call <2 x i8> @llvm.umin.v2i8(<2 x i8> %a, <2 x i8> %c)
  %e = call <2 x i8> @llvm.umin.v2i8(<2 x i8> %b, <2 x i8> %c)
  %f = call <2 x i8> @llvm.umax.v2i8(<2 x i8> %d, <2 x i8> %e)
  ret <2 x i8> %f
}

define <2 x i8> @umax_umin_vector(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) {
; CHECK-LABEL: @umax_umin_vector(
; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i8> @llvm.umin.v2i8(<2 x i8> [[A:%.*]], <2 x i8> [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call <2 x i8> @llvm.umax.v2i8(<2 x i8> [[C:%.*]], <2 x i8> [[TMP1]])
; CHECK-NEXT:    ret <2 x i8> [[F]]
;
  %d = call <2 x i8> @llvm.umax.v2i8(<2 x i8> %a, <2 x i8> %c)
  %e = call <2 x i8> @llvm.umax.v2i8(<2 x i8> %b, <2 x i8> %c)
  %f = call <2 x i8> @llvm.umin.v2i8(<2 x i8> %d, <2 x i8> %e)
  ret <2 x i8> %f
}

define <2 x i8> @smin_smax_vector(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) {
; CHECK-LABEL: @smin_smax_vector(
; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i8> @llvm.smax.v2i8(<2 x i8> [[A:%.*]], <2 x i8> [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call <2 x i8> @llvm.smin.v2i8(<2 x i8> [[C:%.*]], <2 x i8> [[TMP1]])
; CHECK-NEXT:    ret <2 x i8> [[F]]
;
  %d = call <2 x i8> @llvm.smin.v2i8(<2 x i8> %a, <2 x i8> %c)
  %e = call <2 x i8> @llvm.smin.v2i8(<2 x i8> %b, <2 x i8> %c)
  %f = call <2 x i8> @llvm.smax.v2i8(<2 x i8> %d, <2 x i8> %e)
  ret <2 x i8> %f
}

define <2 x i8> @smax_smin_vector(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) {
; CHECK-LABEL: @smax_smin_vector(
; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i8> @llvm.smin.v2i8(<2 x i8> [[A:%.*]], <2 x i8> [[B:%.*]])
; CHECK-NEXT:    [[F:%.*]] = call <2 x i8> @llvm.smax.v2i8(<2 x i8> [[C:%.*]], <2 x i8> [[TMP1]])
; CHECK-NEXT:    ret <2 x i8> [[F]]
;
  %d = call <2 x i8> @llvm.smax.v2i8(<2 x i8> %a, <2 x i8> %c)
  %e = call <2 x i8> @llvm.smax.v2i8(<2 x i8> %b, <2 x i8> %c)
  %f = call <2 x i8> @llvm.smin.v2i8(<2 x i8> %d, <2 x i8> %e)
  ret <2 x i8> %f
}
