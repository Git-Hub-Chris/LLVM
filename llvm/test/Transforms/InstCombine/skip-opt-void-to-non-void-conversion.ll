; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: llvm-as %s -o %t.bc
; RUN: opt --passes=instcombine %t.bc -S | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none-linux-android21"

define dso_local void @foo() {
entry:
  ret void
}

define dso_local i32 @bar() {
; CHECK-LABEL: define dso_local i32 @bar() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[_RC_:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[_RC_]], align 4
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i32 [[TMP0]], 0
; CHECK-NEXT:    br i1 [[CMP_NOT]], label %[[IF_THEN:.*]], label %[[IF_END:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @foo()
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; CHECK-NEXT:    br i1 [[CMP]], label %[[IF_END]], label %[[CLEANUP:.*]]
; CHECK:       [[IF_END]]:
; CHECK-NEXT:    store i32 0, ptr [[_RC_]], align 4
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[CLEANUP]]:
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[_RC_]], align 4
; CHECK-NEXT:    ret i32 [[TMP1]]
;
entry:
  %_rc_ = alloca i32, align 4
  %2 = load i32, ptr %_rc_, align 4
  %cmp.not = icmp eq i32 %2, 0
  br i1 %cmp.not, label %if.then, label %if.end

if.then:
  %call = tail call i32 @foo()
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.end, label %cleanup

if.end:
  store i32 0, ptr %_rc_, align 4
  br label %cleanup

cleanup:
  %7 = load i32, ptr %_rc_, align 4
  ret i32 %7
}
