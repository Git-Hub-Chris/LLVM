; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -passes=instcombine < %s | FileCheck %s

define i1 @test_eq1(i32 %x, i16 %y) {
; CHECK-LABEL: define i1 @test_eq1(
; CHECK-SAME: i32 [[X:%.*]], i16 [[Y:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = zext i16 [[Y]] to i32
; CHECK-NEXT:    [[COND:%.*]] = icmp eq i32 [[TMP1]], [[X]]
; CHECK-NEXT:    ret i1 [[COND]]
;
  %conv1 = trunc nsw i32 %x to i8
  %conv2 = trunc nsw i16 %y to i8
  %cond = icmp eq i8 %conv1, %conv2
  ret i1 %cond
}

; FIXME: It is weird that we generate truncs for test_eq2, but not for test_eq1.

define i1 @test_eq2(i32 %x, i16 %y) {
; CHECK-LABEL: define i1 @test_eq2(
; CHECK-SAME: i32 [[X:%.*]], i16 [[Y:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i32 [[X]] to i16
; CHECK-NEXT:    [[COND:%.*]] = icmp eq i16 [[TMP1]], [[Y]]
; CHECK-NEXT:    ret i1 [[COND]]
;
  %conv1 = trunc nsw i32 %x to i8
  %conv2 = trunc nsw i16 %y to i8
  %cond = icmp eq i8 %conv2, %conv1
  ret i1 %cond
}

define i1 @test_ult(i32 %x, i16 %y) {
; CHECK-LABEL: define i1 @test_ult(
; CHECK-SAME: i32 [[X:%.*]], i16 [[Y:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = zext i16 [[Y]] to i32
; CHECK-NEXT:    [[COND:%.*]] = icmp ugt i32 [[TMP1]], [[X]]
; CHECK-NEXT:    ret i1 [[COND]]
;
  %conv1 = trunc nsw i32 %x to i8
  %conv2 = trunc nsw i16 %y to i8
  %cond = icmp ult i8 %conv1, %conv2
  ret i1 %cond
}

define i1 @test_slt(i32 %x, i16 %y) {
; CHECK-LABEL: define i1 @test_slt(
; CHECK-SAME: i32 [[X:%.*]], i16 [[Y:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = zext i16 [[Y]] to i32
; CHECK-NEXT:    [[COND:%.*]] = icmp sgt i32 [[TMP1]], [[X]]
; CHECK-NEXT:    ret i1 [[COND]]
;
  %conv1 = trunc nsw i32 %x to i8
  %conv2 = trunc nsw i16 %y to i8
  %cond = icmp slt i8 %conv1, %conv2
  ret i1 %cond
}

define i1 @test_ult_nuw(i32 %x, i16 %y) {
; CHECK-LABEL: define i1 @test_ult_nuw(
; CHECK-SAME: i32 [[X:%.*]], i16 [[Y:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = zext i16 [[Y]] to i32
; CHECK-NEXT:    [[COND:%.*]] = icmp ugt i32 [[TMP1]], [[X]]
; CHECK-NEXT:    ret i1 [[COND]]
;
  %conv1 = trunc nuw nsw i32 %x to i8
  %conv2 = trunc nuw nsw i16 %y to i8
  %cond = icmp ult i8 %conv1, %conv2
  ret i1 %cond
}

define i1 @test_slt_nuw(i32 %x, i16 %y) {
; CHECK-LABEL: define i1 @test_slt_nuw(
; CHECK-SAME: i32 [[X:%.*]], i16 [[Y:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = zext i16 [[Y]] to i32
; CHECK-NEXT:    [[COND:%.*]] = icmp sgt i32 [[TMP1]], [[X]]
; CHECK-NEXT:    ret i1 [[COND]]
;
  %conv1 = trunc nuw nsw i32 %x to i8
  %conv2 = trunc nuw nsw i16 %y to i8
  %cond = icmp slt i8 %conv1, %conv2
  ret i1 %cond
}
