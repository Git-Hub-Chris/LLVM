; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -S -passes=instcombine < %s | FileCheck %s

declare double @scalbln(double, i64)
declare float @scalblnf(float, i64)
declare x86_fp80 @scalblnl(x86_fp80, i64)
declare double @scalbn(double, i32)
declare float @scalbnf(float, i32)
declare x86_fp80 @scalbnl(x86_fp80, i32)

;---------------------------------------------------------------------
; scalbn(scalbn(x, a), b) -> scalbn(x, a + b)
;---------------------------------------------------------------------

define double @scalbln_scalbln(double %x, i64 %a, i64 %b) {
; CHECK-LABEL: define double @scalbln
; CHECK-SAME: (double [[X:%.*]], i64 [[A:%.*]], i64 [[B:%.*]]) {
; CHECK-NEXT:    [[SCALBXX0:%.*]] = call double @scalbln(double [[X]], i64 [[A]])
; CHECK-NEXT:    [[SCALBXX1:%.*]] = call double @scalbln(double [[SCALBXX0]], i64 [[B]])
; CHECK-NEXT:    ret double [[SCALBXX1]]
;
  %scalbxx0 = call double @scalbln(double %x, i64 %a)
  %scalbxx1 = call double @scalbln(double %scalbxx0, i64 %b)
  ret double %scalbxx1
}

define float @scalblnf_scalblnf(float %x, i64 %a, i64 %b) {
; CHECK-LABEL: define float @scalblnf
; CHECK-SAME: (float [[X:%.*]], i64 [[A:%.*]], i64 [[B:%.*]]) {
; CHECK-NEXT:    [[SCALBXX0:%.*]] = call float @scalblnf(float [[X]], i64 [[A]])
; CHECK-NEXT:    [[SCALBXX1:%.*]] = call float @scalblnf(float [[SCALBXX0]], i64 [[B]])
; CHECK-NEXT:    ret float [[SCALBXX1]]
;
  %scalbxx0 = call float @scalblnf(float %x, i64 %a)
  %scalbxx1 = call float @scalblnf(float %scalbxx0, i64 %b)
  ret float %scalbxx1
}

define x86_fp80 @scalblnl_scalblnl(x86_fp80 %x, i64 %a, i64 %b) {
; CHECK-LABEL: define x86_fp80 @scalblnl
; CHECK-SAME: (x86_fp80 [[X:%.*]], i64 [[A:%.*]], i64 [[B:%.*]]) {
; CHECK-NEXT:    [[SCALBXX0:%.*]] = call x86_fp80 @scalblnl(x86_fp80 [[X]], i64 [[A]])
; CHECK-NEXT:    [[SCALBXX1:%.*]] = call x86_fp80 @scalblnl(x86_fp80 [[SCALBXX0]], i64 [[B]])
; CHECK-NEXT:    ret x86_fp80 [[SCALBXX1]]
;
  %scalbxx0 = call x86_fp80 @scalblnl(x86_fp80 %x, i64 %a)
  %scalbxx1 = call x86_fp80 @scalblnl(x86_fp80 %scalbxx0, i64 %b)
  ret x86_fp80 %scalbxx1
}

define double @scalbn_scalbn(double %x, i32 %a, i32 %b) {
; CHECK-LABEL: define double @scalbn
; CHECK-SAME: (double [[X:%.*]], i32 [[A:%.*]], i32 [[B:%.*]]) {
; CHECK-NEXT:    [[SCALBXX0:%.*]] = call double @scalbn(double [[X]], i32 [[A]])
; CHECK-NEXT:    [[SCALBXX1:%.*]] = call double @scalbn(double [[SCALBXX0]], i32 [[B]])
; CHECK-NEXT:    ret double [[SCALBXX1]]
;
  %scalbxx0 = call double @scalbn(double %x, i32 %a)
  %scalbxx1 = call double @scalbn(double %scalbxx0, i32 %b)
  ret double %scalbxx1
}

define float @scalbnf_scalbnf(float %x, i32 %a, i32 %b) {
; CHECK-LABEL: define float @scalbnf
; CHECK-SAME: (float [[X:%.*]], i32 [[A:%.*]], i32 [[B:%.*]]) {
; CHECK-NEXT:    [[SCALBXX0:%.*]] = call float @scalbnf(float [[X]], i32 [[A]])
; CHECK-NEXT:    [[SCALBXX1:%.*]] = call float @scalbnf(float [[SCALBXX0]], i32 [[B]])
; CHECK-NEXT:    ret float [[SCALBXX1]]
;
  %scalbxx0 = call float @scalbnf(float %x, i32 %a)
  %scalbxx1 = call float @scalbnf(float %scalbxx0, i32 %b)
  ret float %scalbxx1
}

define x86_fp80 @scalbnl_scalbnl(x86_fp80 %x, i32 %a, i32 %b) {
; CHECK-LABEL: define x86_fp80 @scalbnl
; CHECK-SAME: (x86_fp80 [[X:%.*]], i32 [[A:%.*]], i32 [[B:%.*]]) {
; CHECK-NEXT:    [[SCALBXX0:%.*]] = call x86_fp80 @scalbnl(x86_fp80 [[X]], i32 [[A]])
; CHECK-NEXT:    [[SCALBXX1:%.*]] = call x86_fp80 @scalbnl(x86_fp80 [[SCALBXX0]], i32 [[B]])
; CHECK-NEXT:    ret x86_fp80 [[SCALBXX1]]
;
  %scalbxx0 = call x86_fp80 @scalbnl(x86_fp80 %x, i32 %a)
  %scalbxx1 = call x86_fp80 @scalbnl(x86_fp80 %scalbxx0, i32 %b)
  ret x86_fp80 %scalbxx1
}
