; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt < %s -passes=amdgpu-asan-instrument-lds -S -mtriple=amdgcn-- | FileCheck %s
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-unknown-unknown"

%llvm.amdgcn.module.lds.t = type { [5 x i32] }
%llvm.amdgcn.kernel.k0.lds.t = type { [3 x i8], [1 x i8] }
%llvm.amdgcn.kernel.k1.lds.t = type { [3 x i8] }

@llvm.amdgcn.module.lds = internal addrspace(3) global %llvm.amdgcn.module.lds.t poison, align 4, !absolute_symbol !0
@llvm.compiler.used = appending addrspace(1) global [1 x ptr] [ptr addrspacecast (ptr addrspace(3) @llvm.amdgcn.module.lds to ptr)], section "llvm.metadata"
@llvm.amdgcn.kernel.k0.lds = internal addrspace(3) global %llvm.amdgcn.kernel.k0.lds.t poison, align 4, !absolute_symbol !1
@llvm.amdgcn.kernel.k1.lds = internal addrspace(3) global %llvm.amdgcn.kernel.k1.lds.t poison, align 4, !absolute_symbol !1

; Function Attrs: sanitize_address
define amdgpu_kernel void @k0() #0 {
; CHECK-LABEL: define amdgpu_kernel void @k0(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  WId:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[MALLOC:%.*]], label [[TMP15:%.*]]
; CHECK:       Malloc:
; CHECK-NEXT:    [[TMP6:%.*]] = call ptr @malloc(i64 64)
; CHECK-NEXT:    [[TMP7:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64), 3
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP7]], 2147450880
; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP8]] to ptr
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ne i8 [[TMP10]], 0
; CHECK-NEXT:    [[TMP12:%.*]] = icmp sge i8 0, [[TMP10]]
; CHECK-NEXT:    [[TMP13:%.*]] = and i1 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[ASAN_REPORT4:%.*]], label [[TMP14:%.*]], !prof [[PROF2:![0-9]+]]
; CHECK:       asan.report4:
; CHECK-NEXT:    call void @__asan_report_store1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64)) #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    br label [[TMP14]]
; CHECK:       14:
; CHECK-NEXT:    store ptr [[TMP6]], ptr addrspace(3) @llvm.amdgcn.asan.k0.lds, align 8
; CHECK-NEXT:    br label [[TMP15]]
; CHECK:       15:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, [[WID:%.*]] ], [ true, [[TMP14]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP16:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64), 3
; CHECK-NEXT:    [[TMP17:%.*]] = add i64 [[TMP16]], 2147450880
; CHECK-NEXT:    [[TMP18:%.*]] = inttoptr i64 [[TMP17]] to ptr
; CHECK-NEXT:    [[TMP19:%.*]] = load i8, ptr [[TMP18]], align 1
; CHECK-NEXT:    [[TMP20:%.*]] = icmp ne i8 [[TMP19]], 0
; CHECK-NEXT:    [[TMP21:%.*]] = icmp sge i8 0, [[TMP19]]
; CHECK-NEXT:    [[TMP22:%.*]] = and i1 [[TMP20]], [[TMP21]]
; CHECK-NEXT:    br i1 [[TMP22]], label [[ASAN_REPORT1:%.*]], label [[TMP23:%.*]], !prof [[PROF2]]
; CHECK:       asan.report1:
; CHECK-NEXT:    call void @__asan_report_load1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP23]]
; CHECK:       23:
; CHECK-NEXT:    call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.asan.k0.lds) ], !alias.scope [[META3:![0-9]+]], !noalias [[META6:![0-9]+]]
; CHECK-NEXT:    call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.module.lds) ]
; CHECK-NEXT:    [[TMP24:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64), 3
; CHECK-NEXT:    [[TMP25:%.*]] = add i64 [[TMP24]], 2147450880
; CHECK-NEXT:    [[TMP26:%.*]] = inttoptr i64 [[TMP25]] to ptr
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP26]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i8 [[TMP27]], 0
; CHECK-NEXT:    [[TMP29:%.*]] = icmp sge i8 0, [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = and i1 [[TMP28]], [[TMP29]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[ASAN_REPORT2:%.*]], label [[TMP31:%.*]], !prof [[PROF2]]
; CHECK:       asan.report2:
; CHECK-NEXT:    call void @__asan_report_store1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP31]]
; CHECK:       31:
; CHECK-NEXT:    store i8 1, ptr addrspace(3) getelementptr inbounds ([1 x i8], ptr addrspace(3) @llvm.amdgcn.asan.k0.lds, i64 32), align 1, !alias.scope [[META6]], !noalias [[META3]]
; CHECK-NEXT:    [[TMP32:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64), 3
; CHECK-NEXT:    [[TMP33:%.*]] = add i64 [[TMP32]], 2147450880
; CHECK-NEXT:    [[TMP34:%.*]] = inttoptr i64 [[TMP33]] to ptr
; CHECK-NEXT:    [[TMP35:%.*]] = load i8, ptr [[TMP34]], align 1
; CHECK-NEXT:    [[TMP36:%.*]] = icmp ne i8 [[TMP35]], 0
; CHECK-NEXT:    [[TMP37:%.*]] = icmp sge i8 0, [[TMP35]]
; CHECK-NEXT:    [[TMP38:%.*]] = and i1 [[TMP36]], [[TMP37]]
; CHECK-NEXT:    br i1 [[TMP38]], label [[ASAN_REPORT3:%.*]], label [[TMP39:%.*]], !prof [[PROF2]]
; CHECK:       asan.report3:
; CHECK-NEXT:    call void @__asan_report_store1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP39]]
; CHECK:       39:
; CHECK-NEXT:    store i8 2, ptr addrspace(3) @llvm.amdgcn.asan.k0.lds, align 4, !alias.scope [[META3]], !noalias [[META6]]
; CHECK-NEXT:    br label [[CONDFREE:%.*]]
; CHECK:       CondFree:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label [[FREE:%.*]], label [[END:%.*]]
; CHECK:       Free:
; CHECK-NEXT:    [[TMP40:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64), 3
; CHECK-NEXT:    [[TMP41:%.*]] = add i64 [[TMP40]], 2147450880
; CHECK-NEXT:    [[TMP42:%.*]] = inttoptr i64 [[TMP41]] to ptr
; CHECK-NEXT:    [[TMP43:%.*]] = load i8, ptr [[TMP42]], align 1
; CHECK-NEXT:    [[TMP44:%.*]] = icmp ne i8 [[TMP43]], 0
; CHECK-NEXT:    [[TMP45:%.*]] = icmp sge i8 0, [[TMP43]]
; CHECK-NEXT:    [[TMP46:%.*]] = and i1 [[TMP44]], [[TMP45]]
; CHECK-NEXT:    br i1 [[TMP46]], label [[ASAN_REPORT:%.*]], label [[TMP47:%.*]], !prof [[PROF2]]
; CHECK:       asan.report:
; CHECK-NEXT:    call void @__asan_report_load1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k0.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP47]]
; CHECK:       47:
; CHECK-NEXT:    [[TMP48:%.*]] = load ptr, ptr addrspace(3) @llvm.amdgcn.asan.k0.lds, align 8
; CHECK-NEXT:    call void @free(ptr [[TMP48]])
; CHECK-NEXT:    br label [[END]]
; CHECK:       End:
; CHECK-NEXT:    ret void
;
  call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.kernel.k0.lds) ], !alias.scope !2, !noalias !5
  call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.module.lds) ]
  store i8 1, ptr addrspace(3) getelementptr inbounds (%llvm.amdgcn.kernel.k0.lds.t, ptr addrspace(3) @llvm.amdgcn.kernel.k0.lds, i32 0, i32 1), align 1, !alias.scope !5, !noalias !2
  store i8 2, ptr addrspace(3) @llvm.amdgcn.kernel.k0.lds, align 4, !alias.scope !2, !noalias !5
  ret void
}

; Function Attrs: sanitize_address
define amdgpu_kernel void @k1() #1 {
; CHECK-LABEL: define amdgpu_kernel void @k1(
; CHECK-SAME: ) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  WId:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[MALLOC:%.*]], label [[TMP15:%.*]]
; CHECK:       Malloc:
; CHECK-NEXT:    [[TMP6:%.*]] = call ptr @malloc(i64 32)
; CHECK-NEXT:    [[TMP7:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64), 3
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP7]], 2147450880
; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP8]] to ptr
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ne i8 [[TMP10]], 0
; CHECK-NEXT:    [[TMP12:%.*]] = icmp sge i8 0, [[TMP10]]
; CHECK-NEXT:    [[TMP13:%.*]] = and i1 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[ASAN_REPORT3:%.*]], label [[TMP14:%.*]], !prof [[PROF2]]
; CHECK:       asan.report3:
; CHECK-NEXT:    call void @__asan_report_store1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP14]]
; CHECK:       14:
; CHECK-NEXT:    store ptr [[TMP6]], ptr addrspace(3) @llvm.amdgcn.asan.k1.lds, align 8
; CHECK-NEXT:    br label [[TMP15]]
; CHECK:       15:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, [[WID:%.*]] ], [ true, [[TMP14]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP16:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64), 3
; CHECK-NEXT:    [[TMP17:%.*]] = add i64 [[TMP16]], 2147450880
; CHECK-NEXT:    [[TMP18:%.*]] = inttoptr i64 [[TMP17]] to ptr
; CHECK-NEXT:    [[TMP19:%.*]] = load i8, ptr [[TMP18]], align 1
; CHECK-NEXT:    [[TMP20:%.*]] = icmp ne i8 [[TMP19]], 0
; CHECK-NEXT:    [[TMP21:%.*]] = icmp sge i8 0, [[TMP19]]
; CHECK-NEXT:    [[TMP22:%.*]] = and i1 [[TMP20]], [[TMP21]]
; CHECK-NEXT:    br i1 [[TMP22]], label [[ASAN_REPORT1:%.*]], label [[TMP23:%.*]], !prof [[PROF2]]
; CHECK:       asan.report1:
; CHECK-NEXT:    call void @__asan_report_load1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP23]]
; CHECK:       23:
; CHECK-NEXT:    call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.asan.k1.lds) ]
; CHECK-NEXT:    call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.module.lds) ]
; CHECK-NEXT:    [[TMP24:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64), 3
; CHECK-NEXT:    [[TMP25:%.*]] = add i64 [[TMP24]], 2147450880
; CHECK-NEXT:    [[TMP26:%.*]] = inttoptr i64 [[TMP25]] to ptr
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP26]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i8 [[TMP27]], 0
; CHECK-NEXT:    [[TMP29:%.*]] = icmp sge i8 0, [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = and i1 [[TMP28]], [[TMP29]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[ASAN_REPORT2:%.*]], label [[TMP31:%.*]], !prof [[PROF2]]
; CHECK:       asan.report2:
; CHECK-NEXT:    call void @__asan_report_store1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP31]]
; CHECK:       31:
; CHECK-NEXT:    store i8 3, ptr addrspace(3) @llvm.amdgcn.asan.k1.lds, align 4
; CHECK-NEXT:    br label [[CONDFREE:%.*]]
; CHECK:       CondFree:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label [[FREE:%.*]], label [[END:%.*]]
; CHECK:       Free:
; CHECK-NEXT:    [[TMP32:%.*]] = lshr i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64), 3
; CHECK-NEXT:    [[TMP33:%.*]] = add i64 [[TMP32]], 2147450880
; CHECK-NEXT:    [[TMP34:%.*]] = inttoptr i64 [[TMP33]] to ptr
; CHECK-NEXT:    [[TMP35:%.*]] = load i8, ptr [[TMP34]], align 1
; CHECK-NEXT:    [[TMP36:%.*]] = icmp ne i8 [[TMP35]], 0
; CHECK-NEXT:    [[TMP37:%.*]] = icmp sge i8 0, [[TMP35]]
; CHECK-NEXT:    [[TMP38:%.*]] = and i1 [[TMP36]], [[TMP37]]
; CHECK-NEXT:    br i1 [[TMP38]], label [[ASAN_REPORT:%.*]], label [[TMP39:%.*]], !prof [[PROF2]]
; CHECK:       asan.report:
; CHECK-NEXT:    call void @__asan_report_load1_noabort(i64 ptrtoint (ptr addrspace(3) @llvm.amdgcn.asan.k1.lds to i64)) #[[ATTR5]]
; CHECK-NEXT:    br label [[TMP39]]
; CHECK:       39:
; CHECK-NEXT:    [[TMP40:%.*]] = load ptr, ptr addrspace(3) @llvm.amdgcn.asan.k1.lds, align 8
; CHECK-NEXT:    call void @free(ptr [[TMP40]])
; CHECK-NEXT:    br label [[END]]
; CHECK:       End:
; CHECK-NEXT:    ret void
;
  call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.kernel.k1.lds) ]
  call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.module.lds) ]
  store i8 3, ptr addrspace(3) @llvm.amdgcn.kernel.k1.lds, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare void @llvm.donothing() #2

attributes #0 = { sanitize_address "amdgpu-lds-size"="24" }
attributes #1 = { sanitize_address "amdgpu-lds-size"="23" }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }

!0 = !{i32 0, i32 1}
!1 = !{i32 20, i32 21}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4}
!5 = !{!6}
!6 = distinct !{!6, !4}
