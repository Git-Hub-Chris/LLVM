# This file defines pre-commit CI for libc++, libc++abi, and libunwind (on Github).
#
# We split the configurations in multiple stages with the intent of saving compute time
# when a job fails early in the pipeline. This is why the jobs are marked as `continue-on-error: false`.
# We try to run the CI configurations with the most signal in the first stage.
#
# Stages 1 & 2 are meant to be "smoke tests", and are meant to catch most build/test failures quickly and without using
# too many resources.
# Stage 3 is "everything else", and is meant to catch breakages on more niche or unique configurations.
#
# Therefore, we "fail-fast" for any failures during stages 1 & 2, meaning any job failing cancels all other running jobs,
# under the assumption that if the "smoke tests" fail, then the other configurations will likely fail in the same way.
# However, stage 3 does not fail fast, as it's more likely that any one job failing is a flake or a configuration-specific
#
name: Build and Test libc++
on:
  pull_request:
    paths:
      - 'libcxx/**'
      - 'libcxxabi/**'
      - 'libunwind/**'
      - 'runtimes/**'
      - 'cmake/**'
      - '.github/workflows/libcxx-build-and-test.yaml'
  schedule:
    # Run nightly at 08:00 UTC (aka 00:00 Pacific, aka 03:00 Eastern)
    - cron: '0 8 * * *'

permissions:
  contents: read # Default everything to read-only

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  windows:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        include:
        - { config: clang-cl-dll, mingw: false }
        - { config: clang-cl-static, mingw: false }
        - { config: clang-cl-no-vcruntime, mingw: false }
        - { config: clang-cl-debug, mingw: false }
        - { config: clang-cl-static-crt, mingw: false }
        - { config: mingw-dll, mingw: true }
        - { config: mingw-static, mingw: true }
        - { config: mingw-dll-i686, mingw: true }
        - { config: mingw-incomplete-sysroot, mingw: true }
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          choco install -y ninja
          pip install psutil
      - name: Install a current LLVM
        if: ${{ matrix.mingw != true }}
        run: |
          choco install -y llvm --version=18.1.6 --allow-downgrade
      - name: Install llvm-mingw
        if: ${{ matrix.mingw == true }}
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20240606/llvm-mingw-20240606-ucrt-x86_64.zip
          powershell Expand-Archive llvm-mingw*.zip -DestinationPath .
          del llvm-mingw*.zip
          mv llvm-mingw* c:\llvm-mingw
          echo "c:\llvm-mingw\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
      - name: Simulate a from-scratch build of llvm-mingw
        if: ${{ matrix.config == 'mingw-incomplete-sysroot' }}
        run: |
          rm -r c:\llvm-mingw\include\c++
          rm -r c:\llvm-mingw\*-w64-mingw32\lib\libc++*
          rm -r c:\llvm-mingw\*-w64-mingw32\lib\libunwind*
      - name: Add Git Bash to the path
        run: |
          echo "c:\Program Files\Git\usr\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
      - name: Set up the MSVC dev environment
        if: ${{ matrix.mingw != true }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build and test
        run: |
          bash libcxx/utils/ci/run-buildbot ${{ matrix.config }}
