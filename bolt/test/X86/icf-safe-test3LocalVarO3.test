## Check that BOLT handles correctly folding functions with --icf-safe that can be referenced.

# REQUIRES: system-linux
# RUN: llvm-mc -filetype=obj -triple x86_64-unknown-linux %s -o %t1.o
# RUN: %clang %cflags %t1.o -o %t.exe -Wl,-q
# RUN: llvm-bolt --no-threads %t.exe --icf -debug -debug-only=bolt-icf -o %t.bolt 2>&1 | FileCheck --check-prefix=ICFCHECK %s
# RUN: llvm-bolt --no-threads %t.exe --icf=safe -debug -debug-only=bolt-icf -o %t.bolt 2>&1 | FileCheck --check-prefix=SAFEICFCHECK %s

# ICFCHECK:      ICF iteration 1
# ICFCHECK-NEXT: folding barMulFunc into fooMulFunc
# ICFCHECK-NEXT: folding barAddFunc into fooAddFunc
# ICFCHECK-NEXT: folding barSubFunc into fooSubFunc

# SAFEICFCHECK:      skipping function fooMulFunc
# SAFEICFCHECK-NEXT: skipping function barMulFunc
# SAFEICFCHECK-NEXT: skipping function barAddFunc
# SAFEICFCHECK-NEXT: ICF iteration 1
# SAFEICFCHECK-NEXT: folding barSubFunc into fooSubFunc
# SAFEICFCHECK-NEXT: ===---------

# clang++ -O3 -c main.cpp -o main.o
# extern int FooVar;
# extern int BarVar;
# [[clang::noinline]]
# int fooSub(int a, int b) {
#   return a - b;
# }
# [[clang::noinline]]
# int barSub(int a, int b) {
#   return a - b;
# }
# [[clang::noinline]]
# int fooMul(int a, int b) {
#   return a * b;
# }
# [[clang::noinline]]
# int barMul(int a, int b) {
#   return a * b;
# }
# [[clang::noinline]]
# int fooAdd(int a, int b) {
#   return a + b;
# }
# [[clang::noinline]]
# int barAdd(int a, int b) {
#   return a + b;
# }
# [[clang::noinline]]
# int helper1(int (*func)(int, int), int a, int b) {
#   if (func == barAdd)
#     return 1;
#   return func(a, b) - 4;
# }
# [[clang::noinline]]
# int helper2(int (*func)(int, int), int (*func2)(int, int), int a, int b) {
#   if (func == func2)
#     return 2;
#   return func(a, b) + func2(a, b);
# }
# int main(int argc, char **argv) {
#   static int (*funcGlobalBarAdd)(int, int) = barAdd;
#   int (*funcGlobalBarMul)(int, int) = barMul;
#   int temp = helper1(funcGlobalBarAdd, FooVar, BarVar) +
#              helper2(fooMul, funcGlobalBarMul, FooVar, BarVar) + fooSub(FooVar, BarVar) +
#              barSub(FooVar, BarVar) + fooAdd(FooVar, BarVar);
#   MY_PRINTF("val: %d", temp);
#   return temp;
# }
# clang++ -c helper.cpp -o helper.o
# int FooVar = 1;
# int BarVar = 2;
#
# int fooGlobalFuncHelper(int a, int b) {
#   return 5;
# }
	.text
	.file	"main.cpp"
	.globl	fooSubFunc
	.p2align	4, 0x90
	.type	fooSubFunc,@function
fooSubFunc:
	.cfi_startproc
	subl	%esi, %eax
	retq
.Lfunc_end0:
	.size	fooSubFunc, .Lfunc_end0-fooSubFunc
	.cfi_endproc

	.globl	barSubFunc
	.p2align	4, 0x90
	.type	barSubFunc,@function
barSubFunc:
	.cfi_startproc
	subl	%esi, %eax
	retq
.Lfunc_end1:
	.size	barSubFunc, .Lfunc_end1-barSubFunc
	.cfi_endproc

	.globl	fooMulFunc
	.p2align	4, 0x90
	.type	fooMulFunc,@function
fooMulFunc:
	.cfi_startproc
	imull	%esi, %eax
	retq
.Lfunc_end2:
	.size	fooMulFunc, .Lfunc_end2-fooMulFunc
	.cfi_endproc

	.globl	barMulFunc
	.p2align	4, 0x90
	.type	barMulFunc,@function
barMulFunc:
	.cfi_startproc
	imull	%esi, %eax
	retq
.Lfunc_end3:
	.size	barMulFunc, .Lfunc_end3-barMulFunc
	.cfi_endproc

	.globl	fooAddFunc
	.p2align	4, 0x90
	.type	fooAddFunc,@function
fooAddFunc:
	.cfi_startproc
# %bb.0:
	leal	(%rdi,%rsi), %eax
	retq
.Lfunc_end4:
	.size	fooAddFunc, .Lfunc_end4-fooAddFunc
	.cfi_endproc

	.globl	barAddFunc
	.p2align	4, 0x90
	.type	barAddFunc,@function
barAddFunc:
	.cfi_startproc
# %bb.0:
	leal	(%rdi,%rsi), %eax
	retq
.Lfunc_end5:
	.size	barAddFunc, .Lfunc_end5-barAddFunc
	.cfi_endproc

	.globl	helper1Func
	.p2align	4, 0x90
	.type	helper1Func,@function
helper1Func:
	.cfi_startproc
	leaq	barAddFunc(%rip), %rcx
	cmpq	%rcx, %rdi
	retq
.LBB6_1:
	movl	$1, %eax
	retq
.Lfunc_end6:
	.size	helper1Func, .Lfunc_end6-helper1Func
	.cfi_endproc

	.globl	helper2Func
	.p2align	4, 0x90
	.type	helper2Func,@function
helper2Func:
	.cfi_startproc
  # Operates on registers.
	retq
.Lfunc_end7:
	.size	helper2Func, .Lfunc_end7-helper2Func
	.cfi_endproc

	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:
	.cfi_startproc
	movq	FooVar@GOTPCREL(%rip), %r14
	movq	BarVar@GOTPCREL(%rip), %r15
	leaq	barAddFunc(%rip), %rdi
	callq	helper1Func
	leaq	fooMulFunc(%rip), %rdi
	leaq	barMulFunc(%rip), %rsi
	callq	helper2Func
	callq	fooSubFunc
	callq	barSubFunc
	callq	fooAddFunc
	retq
.Lfunc_end8:
	.size	main, .Lfunc_end8-main
	.cfi_endproc


	.globl	fooGlobalFuncHelperFunc
	.p2align	4, 0x90
	.type	fooGlobalFuncHelperFunc,@function
fooGlobalFuncHelperFunc:
	.cfi_startproc
# %bb.0:
	movl	$5, %eax
	retq
.Lfunc_end01:
	.size	fooGlobalFuncHelperFunc, .Lfunc_end01-fooGlobalFuncHelperFunc
	.cfi_endproc

	.type	FooVar,@object
	.data
	.globl	FooVar
	.p2align	2, 0x0
FooVar:
	.long	1
	.size	FooVar, 4

	.type	BarVar,@object
	.globl	BarVar
	.p2align	2, 0x0
BarVar:
	.long	2
	.size	BarVar, 4
