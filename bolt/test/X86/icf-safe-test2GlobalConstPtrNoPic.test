## Check that BOLT handles correctly folding functions with --icf-safe that can be referenced.
## This checks global const function pointer in -fno-pic mode is handled correctly.

# REQUIRES: system-linux
# RUN: llvm-mc -filetype=obj -triple x86_64-unknown-linux %s -o %t1.o
# RUN: %clang %cflags %t1.o -o %t.exe -Wl,-q -no-pie
# RUN: llvm-bolt --no-threads %t.exe --icf -debug -debug-only=bolt-icf -o %t.bolt 2>&1 | FileCheck --check-prefix=ICFCHECK %s
# RUN: llvm-bolt --no-threads %t.exe --icf=safe -debug -debug-only=bolt-icf -o %t.bolt 2>&1 | FileCheck --check-prefix=SAFEICFCHECK %s

# ICFCHECK:      ICF iteration 1
# ICFCHECK-NEXT: folding barAddFunc into fooAddFunc
# ICFCHECK-NEXT: folding barMulFunc into fooMulFunc

# SAFEICFCHECK:      skipping function fooMulFunc
# SAFEICFCHECK-NEXT: skipping function barMulFunc
# SAFEICFCHECK-NEXT: skipping function barAddFunc
# SAFEICFCHECK-NEXT: ICF iteration 1
# SAFEICFCHECK-NEXT: ===---------

# clang++ main.cpp -c -o
# #define MY_CONST const
# extern int FooVar;
# extern int BarVar;
# [[clang::noinline]]
# MY_CONST int fooMul(int a, int b) {
#   return a * b;
# }
# [[clang::noinline]]
# MY_CONST int barMul(int a, int b) {
#   return a * b;
# }
# [[clang::noinline]]
# MY_CONST int fooAdd(int a, int b) {
#   return a + b;
# }
# [[clang::noinline]]
# MY_CONST int barAdd(int a, int b) {
#   return a + b;
# }
# [[clang::noinline]]
# MY_CONST int helper1(MY_CONST int (*func)(int, int), int a, int b) {
#   if (func == barAdd)
#     return 1;
#   return func(a, b) - 4;
# }
# [[clang::noinline]]
# MY_CONST int helper2(MY_CONST int (*func)(int, int), MY_CONST int (*func2)(int, int), int a, int b) {
#   if (func == func2)
#     return 2;
#   return func(a, b) + func2(a, b);
# }
# MY_CONST static int (*MY_CONST funcGlobalBarAdd)(int, int) = barAdd;
# MY_CONST int (*MY_CONST funcGlobalBarMul)(int, int) = barMul;
# int main(int argc, char **argv) {
#   int temp = helper1(funcGlobalBarAdd, FooVar, BarVar) +
#              helper2(fooMul, funcGlobalBarMul, FooVar, BarVar)
#              fooAdd(FooVar, BarVar);
#   MY_PRINTF("val: %d", temp);
#   return temp;
# }
# clang++ helper.cpp -c -o
# #define MY_CONST const
# int FooVar = 1;
# int BarVar = 2;
# Manually modified to remove "extra" assembly.
	.text
	.file	"main.cpp"
	.globl	fooMulFunc
	.p2align	4, 0x90
	.type	fooMulFunc,@function
fooMulFunc:
	.cfi_startproc
	imull	-8(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	fooMulFunc, .Lfunc_end0-fooMulFunc
	.cfi_endproc

	.globl	barMulFunc
	.p2align	4, 0x90
	.type	barMulFunc,@function
barMulFunc:
	.cfi_startproc
	imull	-8(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	barMulFunc, .Lfunc_end1-barMulFunc
	.cfi_endproc

	.globl	fooAddFunc
	.p2align	4, 0x90
	.type	fooAddFunc,@function
fooAddFunc:
	.cfi_startproc
	addl	-8(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	fooAddFunc, .Lfunc_end2-fooAddFunc
	.cfi_endproc

	.globl	barAddFunc
	.p2align	4, 0x90
	.type	barAddFunc,@function
barAddFunc:
	.cfi_startproc
	addl	-8(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	barAddFunc, .Lfunc_end3-barAddFunc
	.cfi_endproc

	.globl	_Z7helper1PFKiiiEii
	.p2align	4, 0x90
	.type	_Z7helper1PFKiiiEii,@function
_Z7helper1PFKiiiEii:
	.cfi_startproc
	movabsq	$barAddFunc, %rax
	cmpq	%rax, -16(%rbp)
	retq
.Lfunc_end4:
	.size	_Z7helper1PFKiiiEii, .Lfunc_end4-_Z7helper1PFKiiiEii
	.cfi_endproc

	.globl	_Z7helper2PFKiiiES1_ii
	.p2align	4, 0x90
	.type	_Z7helper2PFKiiiES1_ii,@function
_Z7helper2PFKiiiES1_ii:
  .cfi_startproc
  # no direct function references.
	retq
.Lfunc_end5:
	.size	_Z7helper2PFKiiiES1_ii, .Lfunc_end5-_Z7helper2PFKiiiES1_ii
	.cfi_endproc

	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:
	.cfi_startproc
	movl	FooVar, %esi
	movl	BarVar, %edx
	movabsq	$barAddFunc, %rdi
	callq	_Z7helper1PFKiiiEii
	movl	%eax, -28(%rbp)
	movl	FooVar, %edx
	movl	BarVar, %ecx
	movabsq	$fooMulFunc, %rdi
	movabsq	$barMulFunc, %rsi
	callq	_Z7helper2PFKiiiES1_ii
	retq
.Lfunc_end6:
	.size	main, .Lfunc_end6-main
	.cfi_endproc

	.type	FooVar,@object
	.data
	.globl	FooVar
	.p2align	2, 0x0
FooVar:
	.long	1
	.size	FooVar, 4

	.type	BarVar,@object
	.globl	BarVar
	.p2align	2, 0x0
BarVar:
	.long	2
	.size	BarVar, 4

	.type	.L.str,@object
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"val: %d\n"
	.size	.L.str, 9
