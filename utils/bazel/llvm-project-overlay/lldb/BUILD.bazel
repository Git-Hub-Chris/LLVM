# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("//:vars.bzl", "CMAKE_CXX_STANDARD", "LLVM_VERSION", "LLVM_VERSION_MAJOR", "LLVM_VERSION_MINOR", "LLVM_VERSION_PATCH", "LLVM_VERSION_SUFFIX")
load("//mlir:tblgen.bzl", "gentbl_cc_library", "td_library")

package(
    default_visibility = ["//visibility:public"],
    features = ["layering_check"],
)

licenses(["notice"])

exports_files(["LICENSE.TXT"])

_PLUGINS = [
    "ABIAArch64",
    "ABIARM",
    "ABIHexagon",
    "ABIMips",
    "ABIMSP430",
    "ABIPowerPC",
    "ABIRISCV",
    "ABISystemZ",
    "ABIX86",
    "AppleObjCRuntime",
    "ArchitectureAArch64",
    "ArchitectureArm",
    "ArchitectureMips",
    "ArchitecturePPC64",
    "ClangREPL",
    "CPlusPlusLanguage",
    "CXXItaniumABI",
    "DisassemblerLLVMC",
    "DynamicLoaderDarwinKernel",
    "DynamicLoaderHexagonDYLD",
    "DynamicLoaderMacOSXDYLD",
    "DynamicLoaderPosixDYLD",
    "DynamicLoaderStatic",
    "DynamicLoaderWasmDYLD",
    "DynamicLoaderWindowsDYLD",
    "GNUstepObjCRuntime",
    "InstructionARM",
    "InstructionARM64",
    "InstructionLoongArch",
    "InstructionMIPS",
    "InstructionMIPS64",
    "InstructionPPC64",
    "InstructionRISCV",
    "InstrumentationRuntimeASan",
    "InstrumentationRuntimeASanLibsanitizers",
    "InstrumentationRuntimeMainThreadChecker",
    "InstrumentationRuntimeTSan",
    "InstrumentationRuntimeUBSan",
    "JITLoaderGDB",
    "MemoryHistoryASan",
    "ObjCLanguage",
    "ObjCPlusPlusLanguage",
    "ObjectContainerBSDArchive",
    "ObjectContainerMachOArchive",
    "ObjectContainerMachOFileset",
    "ObjectFileBreakpad",
    "ObjectFileCOFF",
    "ObjectFileELF",
    "ObjectFileJSON",
    "ObjectFileMachO",
    "ObjectFileMinidump",
    "ObjectFilePDB",
    "ObjectFilePECOFF",
    "ObjectFilePlaceholder",
    "ObjectFileWasm",
    "PlatformAndroid",
    "PlatformGDB",
    "PlatformLinux",
    "PlatformMacOSX",
    "PlatformQemuUser",
    "PlatformWindows",
    "ProcessElfCore",
    "ProcessMachCore",
    "ProcessMinidump",
    "RegisterTypeBuilderClang",
    "ScriptedProcess",
    "StructuredDataDarwinLog",
    "SymbolFileBreakpad",
    "SymbolFileCTF",
    "SymbolFileDWARF",
    "SymbolFileJSON",
    "SymbolFilePDB",
    "SymbolFileSymtab",
    "SymbolLocatorDebuginfod",
    "SymbolLocatorDefault",
    "SymbolVendorELF",
    "SymbolVendorPECOFF",
    "SymbolVendorWasm",
    "SystemRuntimeMacOSX",
    "TraceExporterCTF",
    "TypeSystemClang",
    "UnwindAssemblyInstEmulation",
    "UnwindAssemblyX86",
]

_SCRIPT_PLUGINS = [
    "ScriptInterpreterNone",
]

_PLATFORM_SPECIFIC_PLUGINS = select({
    "@platforms//os:macos": [
        ":PluginProcessMacOSXKernel",
        ":PluginSymbolLocatorDebugSymbols",
        ":PluginSymbolVendorMacOSX",
    ],
    "//conditions:default": [],
})

_DEFAULT_LOAD_PLUGINS = "\n".join(["LLDB_PLUGIN({})".format(x) for x in _PLUGINS]) + \
                        "\n" + "\n".join(["LLDB_SCRIPT_PLUGIN({})".format(x) for x in _SCRIPT_PLUGINS])

_LOAD_PLUGINS_SUBSTITUTION = select({
    "@platforms//os:macos": {
        "@LLDB_ENUM_PLUGINS@": _DEFAULT_LOAD_PLUGINS + """
LLDB_PLUGIN(ProcessMacOSXKernel)
LLDB_PLUGIN(SymbolLocatorDebugSymbols)
LLDB_PLUGIN(SymbolVendorMacOSX)
""",
    },
    "//conditions:default": {
        "@LLDB_ENUM_PLUGINS@": _DEFAULT_LOAD_PLUGINS,
    },
})

_OBJCPP_COPTS = [
    "-std=c++{}".format(CMAKE_CXX_STANDARD),
    "-fno-objc-exceptions",
    "-fno-objc-arc",
    "-Wno-shorten-64-to-32",
]

_LLDB_VERSION = LLVM_VERSION + LLVM_VERSION_SUFFIX

_VERSION_SUBSTITUTIONS = {
    "@LLDB_VERSION@": _LLDB_VERSION,
    "@LLDB_VERSION_MAJOR@": LLVM_VERSION_MAJOR,
    "@LLDB_VERSION_MINOR@": LLVM_VERSION_MINOR,
    "@LLDB_VERSION_PATCH@": LLVM_VERSION_PATCH,
    "@LLDB_VERSION_SUFFIX@": LLVM_VERSION_SUFFIX,
    '#cmakedefine LLDB_FULL_VERSION_STRING "@LLDB_FULL_VERSION_STRING@"': "/* #undef LLDB_FULL_VERSION_STRING */",
}

genrule(
    name = "vcs_version_gen",
    outs = ["VCSVersion.inc"],
    cmd = "echo '#undef LLDB_REVISION' >> $@\n" +
          "echo '#undef LLDB_REPOSITORY' >> $@\n",
)

expand_template(
    name = "version_inc_gen",
    out = "Version/Version.inc",
    substitutions = _VERSION_SUBSTITUTIONS,
    template = "include/lldb/Version/Version.inc.in",
)

cc_library(
    name = "Version",
    srcs = [
        "source/Version/Version.cpp",
        ":vcs_version_gen",
        ":version_inc_gen",
    ],
    hdrs = ["include/lldb/Version/Version.h"],
    features = ["-layering_check"],  # Version.inc breaks this unintentionally
    strip_include_prefix = "include",
    deps = ["//clang:basic"],
)

expand_template(
    name = "ConfigHeader",
    out = "include/lldb/Host/Config.h",
    substitutions = {
        "#cmakedefine01 HAVE_PTSNAME_R": "#define HAVE_PTSNAME_R 1",
        "#cmakedefine01 LLDB_EDITLINE_USE_WCHAR": "#define LLDB_EDITLINE_USE_WCHAR 1",
        "#cmakedefine01 LLDB_ENABLE_CURSES": "#define LLDB_ENABLE_CURSES 1",
        "#cmakedefine01 LLDB_ENABLE_LIBEDIT": "#define LLDB_ENABLE_LIBEDIT 1",
        "#cmakedefine01 LLDB_ENABLE_TERMIOS": "#define LLDB_ENABLE_TERMIOS 1",

        # TODO: Add LZMA support by including the library in bazel
        "#cmakedefine01 LLDB_ENABLE_LZMA": "#define LLDB_ENABLE_LZMA 0",

        # TODO: lua support
        "#cmakedefine01 LLDB_ENABLE_LUA": "#define LLDB_ENABLE_LUA 0",

        # TODO: python support
        "#cmakedefine01 LLDB_ENABLE_PYTHON": "#define LLDB_ENABLE_PYTHON 0",
        # Only enabled by default on Windows
        "#cmakedefine01 LLDB_EMBED_PYTHON_HOME": "#define LLDB_EMBED_PYTHON_HOME 0",
        # Only used if LLDB_EMBED_PYTHON_HOME is true
        "#cmakedefine LLDB_PYTHON_HOME R\"(${LLDB_PYTHON_HOME})\"": "#define LLDB_PYTHON_HOME \"\"",

        # Unsupported
        "#cmakedefine01 CURSES_HAVE_NCURSES_CURSES_H": "#define CURSES_HAVE_NCURSES_CURSES_H 0",
        "#cmakedefine01 LLDB_ENABLE_FBSDVMCORE": "#define LLDB_ENABLE_FBSDVMCORE 0",

        # Defaults that could be configurable if needed
        "#cmakedefine01 LLDB_ENABLE_POSIX": "#define LLDB_ENABLE_POSIX 1",
        "#cmakedefine LLDB_GLOBAL_INIT_DIRECTORY R\"(${LLDB_GLOBAL_INIT_DIRECTORY})\"": "#define LLDB_GLOBAL_INIT_DIRECTORY \"\"",
        "${LLDB_INSTALL_LIBDIR_BASENAME}": "lib",
        "${LLDB_BUG_REPORT_URL}": "",
    } | select({
        "@platforms//os:macos": {
            "#cmakedefine HAVE_LIBCOMPRESSION": "#define HAVE_LIBCOMPRESSION",
            "#cmakedefine01 HAVE_NR_PROCESS_VM_READV": "#define HAVE_NR_PROCESS_VM_READV 0",
            "#cmakedefine01 HAVE_PPOLL": "#define HAVE_PPOLL 0",
            "#cmakedefine01 HAVE_PROCESS_VM_READV": "#define HAVE_PROCESS_VM_READV 0",
            "#cmakedefine01 HAVE_SYS_EVENT_H": "#define HAVE_SYS_EVENT_H 1",
            "#cmakedefine01 LLDB_ENABLE_LIBXML2": "#define LLDB_ENABLE_LIBXML2 1",
            "#cmakedefine01 LLDB_HAVE_EL_RFUNC_T": "#define LLDB_HAVE_EL_RFUNC_T 0",
        },
        "@platforms//os:linux": {
            "#cmakedefine HAVE_LIBCOMPRESSION": "/* #undef HAVE_LIBCOMPRESSION */",
            "#cmakedefine01 HAVE_NR_PROCESS_VM_READV": "#define HAVE_NR_PROCESS_VM_READV 1",
            "#cmakedefine01 HAVE_PPOLL": "#define HAVE_PPOLL 1",
            "#cmakedefine01 HAVE_PROCESS_VM_READV": "#define HAVE_PROCESS_VM_READV 1",
            "#cmakedefine01 HAVE_SYS_EVENT_H": "#define HAVE_SYS_EVENT_H 0",
            "#cmakedefine01 LLDB_ENABLE_LIBXML2": "#define LLDB_ENABLE_LIBXML2 0",
            "#cmakedefine01 LLDB_HAVE_EL_RFUNC_T": "#define LLDB_HAVE_EL_RFUNC_T 1",
        },
    }),
    template = "include/lldb/Host/Config.h.cmake",
)

cc_library(
    name = "Config",
    hdrs = [":ConfigHeader"],
    include_prefix = "lldb/Host",
)

expand_template(
    name = "plugins_config_gen",
    out = "Plugins/Plugins.def",
    substitutions = {
        "@LLDB_PROCESS_WINDOWS_PLUGIN@": "",
        "@LLDB_PROCESS_GDB_PLUGIN@": "LLDB_PLUGIN(ProcessGDBRemote)",
    } | _LOAD_PLUGINS_SUBSTITUTION,
    template = "source/Plugins/Plugins.def.in",
)

cc_library(
    name = "PluginsConfig",
    hdrs = [":plugins_config_gen"],
    strip_include_prefix = ".",
)

cc_binary(
    name = "lldb-tblgen",
    srcs = glob([
        "utils/TableGen/*.cpp",
        "utils/TableGen/*.h",
    ]),
    deps = [
        "//llvm:CodeGenTypes",
        "//llvm:Support",
        "//llvm:TableGen",
        "//llvm:TargetParser",
        "//llvm:config",
    ],
)

cc_library(
    name = "API",
    srcs = glob([
        "source/API/**/*.cpp",
        "source/API/**/*.h",
    ]),
    hdrs = glob(["include/lldb/API/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":Breakpoint",
        ":Commands",
        ":Core",
        ":DataFormatters",
        ":Expression",
        ":Headers",
        ":Host",
        ":Initialization",
        ":InterpreterHeaders",
        ":PluginExpressionParserClangHeaders",
        ":PluginsConfig",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":Version",
        "//llvm:ExecutionEngine",
        "//llvm:MCJIT",
        "//llvm:Support",
        "//llvm:config",
    ],
)

cc_library(
    name = "Breakpoint",
    srcs = glob(["source/Breakpoint/**/*.cpp"]),
    hdrs = glob(["include/lldb/Breakpoint/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":Core",
        ":DataFormattersHeaders",
        ":Expression",
        ":Headers",
        ":InterpreterHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "DataFormatters",
    srcs = glob(["source/DataFormatters/**/*.cpp"]),
    hdrs = glob(["include/lldb/DataFormatters/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":CoreHeaders",
        ":Headers",
        ":InterpreterHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "Expression",
    srcs = glob(["source/Expression/**/*.cpp"]),
    hdrs = glob(["include/lldb/Expression/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PluginSymbolFileDWARFHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Core",
        "//llvm:DebugInfoDWARF",
        "//llvm:ExecutionEngine",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginClangCommon",
    srcs = glob(["source/Plugins/Language/ClangCommon/*.cpp"]),
    hdrs = glob(["source/Plugins/Language/ClangCommon/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":Host",
        ":TargetHeaders",
        ":Utility",
        "//clang:basic",
        "//clang:lex",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjCLanguageHeaders",
    hdrs = glob(["source/Plugins/Language/ObjC/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":PluginClangCommon",
        ":PluginExpressionParserClangHeaders",
    ],
)

cc_library(
    name = "PluginObjCLanguage",
    srcs = glob(["source/Plugins/Language/ObjC/*.cpp"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":DataFormattersHeaders",
        ":ExpressionHeaders",
        ":Host",
        ":PluginAppleObjCRuntime",
        ":PluginExpressionParserClangHeaders",
        ":PluginObjCLanguageHeaders",
        ":PluginObjCRuntime",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:ast",
        "//clang:basic",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginTypeSystemClangHeaders",
    hdrs = glob(["source/Plugins/TypeSystem/Clang/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":PluginExpressionParserClangHeaders",
        "//clang:frontend",
    ],
)

cc_library(
    name = "PluginCPPRuntime",
    srcs = glob(["source/Plugins/LanguageRuntime/CPlusPlus/*.cpp"]),
    hdrs = glob(["source/Plugins/LanguageRuntime/CPlusPlus/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":Headers",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjCRuntime",
    srcs = glob(["source/Plugins/LanguageRuntime/ObjC/*.cpp"]),
    hdrs = glob(["source/Plugins/LanguageRuntime/ObjC/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":BreakpointHeaders",
        ":CoreHeaders",
        ":Headers",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:ast",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginAppleObjCRuntime",
    srcs = glob(["source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/*.cpp"]),
    hdrs = glob(["source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":BreakpointHeaders",
        ":CoreHeaders",
        ":DataFormattersHeaders",
        ":ExpressionHeaders",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PluginCPPRuntime",
        ":PluginExpressionParserClangHeaders",
        ":PluginObjCLanguageHeaders",
        ":PluginObjCRuntime",
        ":PluginProcessUtility",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:ast",
        "//clang:basic",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginTypeSystemClang",
    srcs = glob(["source/Plugins/TypeSystem/Clang/*.cpp"]),
    deps = [
        ":CoreHeaders",
        ":Host",
        ":PluginExpressionParserClangHeaders",
        ":PluginObjCRuntime",
        ":PluginSymbolFileDWARF",
        ":PluginSymbolFileDWARFHeaders",
        ":PluginSymbolFileNativePDBHeaders",
        ":PluginSymbolFilePDBHeaders",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:ast",
        "//clang:basic",
        "//clang:frontend",
        "//clang:lex",
        "//clang:sema",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginExpressionParserClangHeaders",
    hdrs = glob(["source/Plugins/ExpressionParser/Clang/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":DataFormattersHeaders",
    ],
)

cc_library(
    name = "PluginExpressionParserClang",
    srcs = glob(["source/Plugins/ExpressionParser/Clang/*.cpp"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":DataFormatters",
        ":ExpressionHeaders",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PluginCPPRuntime",
        ":PluginCPlusPlusLanguageHeaders",
        ":PluginExpressionParserClangHeaders",
        ":PluginObjCRuntime",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:ast",
        "//clang:basic",
        "//clang:codegen",
        "//clang:config",
        "//clang:driver",
        "//clang:edit",
        "//clang:frontend",
        "//clang:frontend_rewrite",
        "//clang:lex",
        "//clang:parse",
        "//clang:rewrite",
        "//clang:sema",
        "//clang:serialization",
        "//llvm:Core",
        "//llvm:ExecutionEngine",
        "//llvm:IPO",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

gentbl_cc_library(
    name = "PlatformMacOSXProperties",
    strip_include_prefix = "source/Plugins/Platform/MacOSX",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/Platform/MacOSX/PlatformMacOSXProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/Platform/MacOSX/PlatformMacOSXPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/Platform/MacOSX/PlatformMacOSXProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginPlatformMacOSXObjCXXHeaders",
    hdrs = glob(["source/Plugins/Platform/MacOSX/objcxx/*.h"]),
    strip_include_prefix = "source",
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [":Host"],
)

objc_library(
    name = "PluginPlatformMacOSXObjCXX",
    srcs = glob(["source/Plugins/Platform/MacOSX/objcxx/*.mm"]),
    copts = _OBJCPP_COPTS,
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [":PluginPlatformMacOSXObjCXXHeaders"],
)

cc_library(
    name = "PluginPlatformMacOSX",
    srcs = glob(
               ["source/Plugins/Platform/MacOSX/*.cpp"],
               exclude = ["source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp"],
           ) +
           select({
               "@platforms//os:macos": ["source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp"],
               "//conditions:default": [],
           }),
    hdrs = glob(["source/Plugins/Platform/MacOSX/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":BreakpointHeaders",
        ":Core",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PlatformMacOSXProperties",
        ":PluginDynamicLoaderDarwinKernelHeaders",
        ":PluginObjectContainerMachOFileset",
        ":PluginPlatformPOSIX",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:driver_options_inc_gen",
        "//llvm:Support",
        "//llvm:TargetParser",
    ] + select({
        "@platforms//os:macos": [":PluginPlatformMacOSXObjCXX"],
        "//conditions:default": [],
    }),
)

gentbl_cc_library(
    name = "SymbolFileDWARFProperties",
    strip_include_prefix = "source/Plugins/SymbolFile/DWARF",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/SymbolFile/DWARF/SymbolFileDWARFProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/SymbolFile/DWARF/SymbolFileDWARFPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/SymbolFile/DWARF/SymbolFileDWARFProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginSymbolFileDWARFHeaders",
    hdrs = glob(["source/Plugins/SymbolFile/DWARF/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginTypeSystemClangHeaders",
    ],
)

cc_library(
    name = "PluginSymbolFileDWARF",
    srcs = glob(["source/Plugins/SymbolFile/DWARF/*.cpp"]),
    deps = [
        ":Core",
        ":ExpressionHeaders",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PluginCPlusPlusLanguageHeaders",
        ":PluginExpressionParserClangHeaders",
        ":PluginObjCLanguageHeaders",
        ":PluginSymbolFileDWARFHeaders",
        ":PluginTypeSystemClangHeaders",
        ":SymbolFileDWARFProperties",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:ast",
        "//llvm:DebugInfoDWARF",
        "//llvm:Demangle",
        "//llvm:Object",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginProcessUtility",
    srcs = glob(["source/Plugins/Process/Utility/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/Utility/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":BreakpointHeaders",
        ":Core",
        ":ExpressionHeaders",
        ":Headers",
        ":Host",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginObjectFilePDB",
    srcs = glob(["source/Plugins/ObjectFile/PDB/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/PDB/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:DebugInfoPDB",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginSymbolFileNativePDBHeaders",
    hdrs = glob(["source/Plugins/SymbolFile/NativePDB/*.h"]),
    strip_include_prefix = "source",
    deps = [":Core"],
)

cc_library(
    name = "PluginSymbolFileNativePDB",
    srcs = glob(["source/Plugins/SymbolFile/NativePDB/*.cpp"]),
    deps = [
        ":Core",
        ":ExpressionHeaders",
        ":Headers",
        ":PluginCPlusPlusLanguageHeaders",
        ":PluginExpressionParserClangHeaders",
        ":PluginObjectFilePDB",
        ":PluginProcessUtility",
        ":PluginSymbolFileNativePDBHeaders",
        ":PluginSymbolFilePDBHeaders",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:DebugInfoCodeView",
        "//llvm:DebugInfoMSF",
        "//llvm:DebugInfoPDB",
        "//llvm:Demangle",
        "//llvm:Object",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginSymbolFilePDBHeaders",
    hdrs = glob(["source/Plugins/SymbolFile/PDB/*.h"]),
    strip_include_prefix = "source",
    deps = [":Core"],
)

cc_library(
    name = "PluginSymbolFilePDB",
    srcs = glob(["source/Plugins/SymbolFile/PDB/*.cpp"]),
    deps = [
        ":Core",
        ":ExpressionHeaders",
        ":PluginCPlusPlusLanguageHeaders",
        ":PluginExpressionParserClangHeaders",
        ":PluginSymbolFileNativePDB",
        ":PluginSymbolFileNativePDBHeaders",
        ":PluginSymbolFilePDBHeaders",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":Utility",
        "//clang:ast",
        "//clang:lex",
        "//llvm:DebugInfoCodeView",
        "//llvm:DebugInfoPDB",
    ],
)

gentbl_cc_library(
    name = "ProcessGDBRemoteProperties",
    strip_include_prefix = "source/Plugins/Process/gdb-remote",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/Process/gdb-remote/ProcessGDBRemoteProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/Process/gdb-remote/ProcessGDBRemotePropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/Process/gdb-remote/ProcessGDBRemoteProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginProcessGDBRemote",
    srcs = glob(["source/Plugins/Process/gdb-remote/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/gdb-remote/*.h"]) + [
        "source/Plugins/Process/gdb-remote/GDBRemoteErrno.def",
    ],
    strip_include_prefix = "source",
    deps = [
        ":BreakpointHeaders",
        ":CoreHeaders",
        ":DataFormattersHeaders",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":ProcessGDBRemoteProperties",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//llvm:Support",
        "//llvm:TargetParser",
        "@llvm_zlib//:zlib",
    ],
)

cc_library(
    name = "Initialization",
    srcs = glob(["source/Initialization/**/*.cpp"]),
    hdrs = glob(["include/lldb/Initialization/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":PluginProcessGDBRemote",
        ":PluginProcessPOSIX",
        ":TargetHeaders",
        ":Utility",
        ":Version",
        "//llvm:Support",
    ],
)

gentbl_cc_library(
    name = "InterpreterProperties",
    strip_include_prefix = "source/Interpreter",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Interpreter/InterpreterProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Interpreter/InterpreterPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Interpreter/InterpreterProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "APIHeaders",
    hdrs = glob(["include/lldb/API/**/*.h"]),
    strip_include_prefix = "include",
)

cc_library(
    name = "InterpreterHeaders",
    hdrs = glob(["include/lldb/Interpreter/**/*.h"]),
    strip_include_prefix = "include",
    deps = [":APIHeaders"],
)

cc_library(
    name = "BreakpointHeaders",
    hdrs = glob(["include/lldb/Breakpoint/**/*.h"]),
    strip_include_prefix = "include",
)

cc_library(
    name = "ExpressionHeaders",
    hdrs = glob(["include/lldb/Expression/**/*.h"]),
    strip_include_prefix = "include",
    deps = ["//llvm:ExecutionEngine"],
)

cc_library(
    name = "DataFormattersHeaders",
    hdrs = glob(["include/lldb/DataFormatters/**/*.h"]),
    strip_include_prefix = "include",
)

cc_library(
    name = "Interpreter",
    srcs = glob(["source/Interpreter/**/*.cpp"]),
    deps = [
        ":API",
        ":Commands",
        ":Core",
        ":DataFormatters",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":InterpreterProperties",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

td_library(
    name = "CommandsTdFiles",
    srcs = glob(["source/Commands/**/*.td"]),
)

gentbl_cc_library(
    name = "CommandOptions",
    strip_include_prefix = "source/Commands",
    tbl_outs = [
        (
            ["-gen-lldb-option-defs"],
            "source/Commands/CommandOptions.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Commands/Options.td",
    deps = [":CommandsTdFiles"],
)

cc_library(
    name = "Commands",
    srcs = glob(["source/Commands/**/*.cpp"]),
    hdrs = glob(["source/Commands/**/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":CommandOptions",
        ":Core",
        ":DataFormatters",
        ":Expression",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":Version",
        "//clang:codegen",
        "//clang:frontend",
        "//llvm:Support",
    ],
)

cc_library(
    name = "SymbolHeaders",
    hdrs = glob(["include/lldb/Symbol/**/*.h"]),
    strip_include_prefix = "include",
)

cc_library(
    name = "Symbol",
    srcs = glob(["source/Symbol/**/*.cpp"]),
    deps = [
        ":Core",
        ":Expression",
        ":Headers",
        ":Host",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//llvm:DebugInfo",
        "//llvm:DebugInfoDWARF",
        "//llvm:Support",
    ],
)

cc_library(
    name = "HostMacOSXHeaders",
    hdrs = glob([
        "include/lldb/Host/*.h",
        "include/lldb/Host/macosx/*.h",
        "include/lldb/Host/posix/*.h",
    ]),
    strip_include_prefix = "include",
    deps = [":Utility"],
)

cc_library(
    name = "HostMacOSXPrivateHeaders",
    hdrs = glob([
        "source/Host/macosx/cfcpp/*.h",
        "source/Host/macosx/objcxx/*.h",
    ]),
    strip_include_prefix = "source",
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [":Utility"],
)

objc_library(
    name = "HostMacOSXObjCXX",
    srcs = glob([
        "source/Host/macosx/objcxx/*.mm",
    ]),
    copts = _OBJCPP_COPTS,
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":HostMacOSXHeaders",
        ":HostMacOSXPrivateHeaders",
    ],
)

cc_library(
    name = "Host",
    srcs = glob([
        "source/Host/common/**/*.cpp",
    ]) + select({
        "@platforms//os:linux": glob(
            [
                "source/Host/posix/**/*.cpp",
                "source/Host/linux/**/*.cpp",
            ],
            exclude = ["source/Host/linux/android/**/*.cpp"],
        ),
        "@platforms//os:macos": glob(
            [
                "source/Host/macosx/cfcpp/*.cpp",
                "source/Host/posix/**/*.cpp",
            ],
        ),
    }),
    hdrs = [":ConfigHeader"] + glob([
        "include/lldb/Host/*.h",
        "include/lldb/Host/common/*.h",
    ]) + select({
        "@platforms//os:macos": glob([
            "include/lldb/Host/macosx/*.h",
            "include/lldb/Host/posix/*.h",
        ]),
        "@platforms//os:linux": glob([
            "include/lldb/Host/linux/*.h",
            "include/lldb/Host/posix/*.h",
        ]),
    }),
    # TODO: Move this to Config library when https://github.com/bazelbuild/bazel/issues/21884 is fixed
    linkopts = select({
        "@platforms//os:macos": [
            "-lcompression",
            "-lcurses",
            "-ledit",
            "-lpanel",
            "-lxml2",
            "-Wl,-framework,CoreServices",
            "-Wl,-framework,Security",
        ],
        "@platforms//os:linux": [
            "-lcurses",
            "-ledit",
            "-lpanel",
        ],
    }),
    strip_include_prefix = "include",
    deps = [
        ":Headers",
        ":Utility",
        "//llvm:Object",
        "//llvm:Support",
        "//llvm:TargetParser",
        "//llvm:config",
    ] + select({
        "@platforms//os:macos": [":HostMacOSXObjCXX"],
        "//conditions:default": [],
    }),
)

td_library(
    name = "CoreTdFiles",
    srcs = glob([
        "source/Core/**/*.td",
        "include/lldb/Core/*.td",
    ]),
)

gentbl_cc_library(
    name = "CoreProperties",
    strip_include_prefix = "source/Core",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Core/CoreProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Core/CorePropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Core/CoreProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "CoreHeaders",
    hdrs = glob(["include/lldb/Core/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":BreakpointHeaders",
        ":CoreProperties",
        ":DataFormattersHeaders",
        ":ExpressionHeaders",
        ":Host",
        ":InterpreterHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:driver",
        "//llvm:Demangle",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "Core",
    srcs = glob(["source/Core/**/*.cpp"]),
    hdrs = glob(["include/lldb/Core/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":BreakpointHeaders",
        ":CoreHeaders",
        ":CoreProperties",
        ":DataFormattersHeaders",
        ":ExpressionHeaders",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PluginCPlusPlusLanguageHeaders",
        ":PluginObjCLanguageHeaders",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//clang:driver",
        "//llvm:Demangle",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

gentbl_cc_library(
    name = "TargetProperties",
    strip_include_prefix = "source/Target",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Target/TargetProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Target/TargetPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Target/TargetProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "AppleArm64ExceptionClass",
    hdrs = ["include/lldb/Target/AppleArm64ExceptionClass.def"],
    strip_include_prefix = "include/lldb/Target",
)

cc_library(
    name = "TargetHeaders",
    hdrs = glob(["include/lldb/Target/**/*.h"]),
    strip_include_prefix = "include",
    deps = [":AppleArm64ExceptionClass"],
)

cc_library(
    name = "Target",
    srcs = glob(["source/Target/**/*.cpp"]),
    deps = [
        ":BreakpointHeaders",
        ":Core",
        ":DataFormattersHeaders",
        ":ExpressionHeaders",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":TargetProperties",
        ":Utility",
        "//llvm:MC",
        "//llvm:Support",
    ],
)

cc_library(
    name = "Headers",
    hdrs = glob(["include/lldb/lldb-*.h"]),
    strip_include_prefix = "include",
)

cc_library(
    name = "UtilityPrivateHeaders",
    hdrs = glob(["source/Utility/**/*.h"]),
    strip_include_prefix = "source",
    deps = [":Headers"],
)

cc_library(
    name = "Utility",
    srcs = glob(["source/Utility/**/*.cpp"]),
    hdrs = glob(["include/lldb/Utility/**/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":Headers",
        ":UtilityPrivateHeaders",
        "//llvm:BinaryFormat",
        "//llvm:Support",
        "//llvm:TargetParser",
        "//llvm:config",
    ],
)

cc_library(
    name = "liblldb.static",
    deps = [
        ":API",
        ":Host",
        ":Interpreter",
        "//llvm:AllTargetsDisassemblers",
    ] + [
        ":Plugin{}".format(x)
        for x in _PLUGINS + _SCRIPT_PLUGINS
    ] + _PLATFORM_SPECIFIC_PLUGINS,
)

cc_shared_library(
    name = "liblldb",
    # TODO: Remove once fixed https://github.com/bazelbuild/bazel/issues/21893
    additional_linker_inputs = select({
        "@platforms//os:macos": [
            ":HostMacOSXObjCXX",
            ":PluginPlatformMacOSXObjCXX",
        ],
        "//conditions:default": [],
    }),
    shared_lib_name = select({
        "@platforms//os:macos": "liblldb{}.dylib".format(_LLDB_VERSION),
        "@platforms//os:linux": "liblldb{}.so".format(_LLDB_VERSION),
    }),
    # TODO: Remove once fixed https://github.com/bazelbuild/bazel/issues/21893
    user_link_flags = select({
        "@platforms//os:macos": [
            "$(location :HostMacOSXObjCXX)",
            "$(location :PluginPlatformMacOSXObjCXX)",
        ],
        "//conditions:default": [],
    }),
    deps = [":liblldb.static"],
)

gentbl_cc_library(
    name = "lldb_options_inc_gen",
    strip_include_prefix = ".",
    tbl_outs = [(
        ["-gen-opt-parser-defs"],
        "Options.inc",
    )],
    tblgen = "//llvm:llvm-tblgen",
    td_file = "tools/driver/Options.td",
    deps = ["//llvm:OptParserTdFiles"],
)

cc_binary(
    name = "lldb",
    srcs = glob([
        "tools/driver/*.cpp",
        "tools/driver/*.h",
    ]),
    data = [
        ":lldb-argdumper",
    ] + select({
        "@platforms//os:macos": [":debugserver"],
        "//conditions:default": [],
    }),
    deps = [
        ":APIHeaders",
        ":Host",
        ":liblldb.static",
        ":lldb_options_inc_gen",
        "//llvm:Option",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjectContainerMachOArchive",
    srcs = glob(["source/Plugins/ObjectContainer/Universal-Mach-O/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectContainer/Universal-Mach-O/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginObjectContainerBSDArchive",
    srcs = glob(["source/Plugins/ObjectContainer/BSD-Archive/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectContainer/BSD-Archive/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Object",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjectContainerMachOFileset",
    srcs = glob(["source/Plugins/ObjectContainer/Mach-O-Fileset/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectContainer/Mach-O-Fileset/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

gentbl_cc_library(
    name = "StructuredDataDarwinLogProperties",
    strip_include_prefix = "source/Plugins/StructuredData/DarwinLog",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLogProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLogPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLogProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginStructuredDataDarwinLog",
    srcs = glob(["source/Plugins/StructuredData/DarwinLog/*.cpp"]),
    hdrs = glob(["source/Plugins/StructuredData/DarwinLog/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":StructuredDataDarwinLogProperties",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginTraceCommon",
    srcs = glob(["source/Plugins/Trace/common/*.cpp"]),
    hdrs = glob(["source/Plugins/Trace/common/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
    ],
)

cc_library(
    name = "PluginPlatformPOSIX",
    srcs = glob(["source/Plugins/Platform/POSIX/*.cpp"]),
    hdrs = glob(["source/Plugins/Platform/POSIX/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Expression",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginPlatformGDB",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

gentbl_cc_library(
    name = "PlatformQemuUserProperties",
    strip_include_prefix = "source/Plugins/Platform/QemuUser",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/Platform/QemuUser/PlatformQemuUserProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/Platform/QemuUser/PlatformQemuUserPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/Platform/QemuUser/PlatformQemuUserProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginPlatformQemuUser",
    srcs = glob(["source/Plugins/Platform/QemuUser/*.cpp"]),
    hdrs = glob(["source/Plugins/Platform/QemuUser/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":Host",
        ":InterpreterHeaders",
        ":PlatformQemuUserProperties",
        ":PluginProcessGDBRemote",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginPlatformGDB",
    srcs = glob(["source/Plugins/Platform/gdb-server/*.cpp"]),
    hdrs = glob(["source/Plugins/Platform/gdb-server/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Host",
        ":PluginProcessGDBRemote",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginPlatformLinux",
    srcs = glob(["source/Plugins/Platform/Linux/*.cpp"]),
    hdrs = glob(["source/Plugins/Platform/Linux/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Host",
        ":Interpreter",
        ":PluginPlatformPOSIX",
        ":PluginTypeSystemClangHeaders",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
    ],
)

gentbl_cc_library(
    name = "PlatformAndroidProperties",
    strip_include_prefix = "source/Plugins/Platform/Android",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/Platform/Android/PlatformAndroidProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/Platform/Android/PlatformAndroidPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/Platform/Android/PlatformAndroidProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginPlatformAndroid",
    srcs = glob(["source/Plugins/Platform/Android/*.cpp"]),
    hdrs = glob(["source/Plugins/Platform/Android/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":PlatformAndroidProperties",
        ":PluginPlatformGDB",
        ":PluginPlatformLinux",
        ":PluginPlatformPOSIX",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginPlatformWindows",
    srcs = glob(["source/Plugins/Platform/Windows/*.cpp"]),
    hdrs = glob(["source/Plugins/Platform/Windows/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":ExpressionHeaders",
        ":Host",
        ":PluginPlatformGDB",
        ":PluginTypeSystemClangHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginMemoryHistoryASan",
    srcs = glob(["source/Plugins/MemoryHistory/asan/*.cpp"]),
    hdrs = glob(["source/Plugins/MemoryHistory/asan/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Expression",
        ":Headers",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
    ],
)

cc_library(
    name = "PluginClangREPL",
    srcs = glob(["source/Plugins/REPL/Clang/*.cpp"]),
    hdrs = glob(["source/Plugins/REPL/Clang/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":DataFormatters",
        ":ExpressionHeaders",
        ":Host",
        ":PluginCPPRuntime",
        ":PluginClangCommon",
        ":PluginTypeSystemClang",
        ":Symbol",
        ":Target",
        ":Utility",
    ],
)

cc_library(
    name = "PluginSymbolVendorWasm",
    srcs = glob(["source/Plugins/SymbolVendor/wasm/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolVendor/wasm/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":PluginObjectFileWasm",
        ":Symbol",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginSymbolVendorMacOSX",
    srcs = glob(["source/Plugins/SymbolVendor/MacOSX/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolVendor/MacOSX/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":PluginObjectFileMachO",
        ":Symbol",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginSymbolVendorPECOFF",
    srcs = glob(["source/Plugins/SymbolVendor/PECOFF/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolVendor/PECOFF/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":PluginObjectFilePECOFF",
        ":Symbol",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginSymbolVendorELF",
    srcs = glob(["source/Plugins/SymbolVendor/ELF/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolVendor/ELF/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":PluginObjectFileELF",
        ":Symbol",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginObjCPlusPlusLanguage",
    srcs = glob(["source/Plugins/Language/ObjCPlusPlus/*.cpp"]),
    hdrs = glob(["source/Plugins/Language/ObjCPlusPlus/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":PluginClangCommon",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginCPlusPlusLanguageHeaders",
    hdrs = glob(["source/Plugins/Language/CPlusPlus/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":CoreHeaders",
        ":PluginClangCommon",
        ":PluginExpressionParserClangHeaders",
    ],
)

cc_library(
    name = "PluginCPlusPlusLanguage",
    srcs = glob(["source/Plugins/Language/CPlusPlus/*.cpp"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":DataFormatters",
        ":Headers",
        ":Host",
        ":PluginCPPRuntime",
        ":PluginCPlusPlusLanguageHeaders",
        ":PluginClangCommon",
        ":PluginExpressionParserClangHeaders",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//clang:basic",
        "//llvm:Demangle",
        "//llvm:Support",
    ],
)

gentbl_cc_library(
    name = "TraceExporterCTFOptions",
    strip_include_prefix = "source/Plugins/TraceExporter/ctf",
    tbl_outs = [(
        ["-gen-lldb-option-defs"],
        "source/Plugins/TraceExporter/ctf/TraceExporterCTFCommandOptions.inc",
    )],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/TraceExporter/ctf/TraceExporterCTFOptions.td",
    deps = [
        ":CommandsTdFiles",
        ":CoreTdFiles",
    ],
)

cc_library(
    name = "PluginTraceExporterCTF",
    srcs = glob(["source/Plugins/TraceExporter/ctf/*.cpp"]),
    hdrs = glob(["source/Plugins/TraceExporter/ctf/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":InterpreterHeaders",
        ":PluginTraceExporterCommon",
        ":Symbol",
        ":Target",
        ":TargetHeaders",
        ":TraceExporterCTFOptions",
    ],
)

cc_library(
    name = "PluginTraceExporterCommon",
    srcs = glob(["source/Plugins/TraceExporter/common/*.cpp"]),
    hdrs = glob(["source/Plugins/TraceExporter/common/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginABIPowerPC",
    srcs = glob(["source/Plugins/ABI/PowerPC/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/PowerPC/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":PluginProcessUtility",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//clang:ast",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIHexagon",
    srcs = glob(["source/Plugins/ABI/Hexagon/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/Hexagon/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Core",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIMips",
    srcs = glob(["source/Plugins/ABI/Mips/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/Mips/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIMSP430",
    srcs = glob(["source/Plugins/ABI/MSP430/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/MSP430/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Core",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIX86",
    srcs = glob(["source/Plugins/ABI/X86/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/X86/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIARM",
    srcs = glob(["source/Plugins/ABI/ARM/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/ARM/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIARC",
    srcs = glob(["source/Plugins/ABI/ARC/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/ARC/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Core",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIRISCV",
    srcs = glob(["source/Plugins/ABI/RISCV/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/RISCV/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":PluginProcessUtility",
        ":Symbol",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Core",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABISystemZ",
    srcs = glob(["source/Plugins/ABI/SystemZ/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/SystemZ/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginABIAArch64",
    srcs = glob(["source/Plugins/ABI/AArch64/*.cpp"]),
    hdrs = glob(["source/Plugins/ABI/AArch64/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginDynamicLoaderPosixDYLDHeaders",
    hdrs = glob(["source/Plugins/DynamicLoader/POSIX-DYLD/*.h"]),
    strip_include_prefix = "source",
)

cc_library(
    name = "PluginDynamicLoaderPosixDYLD",
    srcs = glob(["source/Plugins/DynamicLoader/POSIX-DYLD/*.cpp"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Host",
        ":PluginDynamicLoaderPosixDYLDHeaders",
        ":PluginProcessElfCore",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginDynamicLoaderWindowsDYLD",
    srcs = glob(["source/Plugins/DynamicLoader/Windows-DYLD/*.cpp"]),
    hdrs = glob(["source/Plugins/DynamicLoader/Windows-DYLD/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginDynamicLoaderHexagonDYLD",
    srcs = glob(["source/Plugins/DynamicLoader/Hexagon-DYLD/*.cpp"]),
    hdrs = glob(["source/Plugins/DynamicLoader/Hexagon-DYLD/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginDynamicLoaderWasmDYLD",
    srcs = glob(["source/Plugins/DynamicLoader/wasm-DYLD/*.cpp"]),
    hdrs = glob(["source/Plugins/DynamicLoader/wasm-DYLD/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginObjectFileWasm",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginDynamicLoaderStatic",
    srcs = glob(["source/Plugins/DynamicLoader/Static/*.cpp"]),
    hdrs = glob(["source/Plugins/DynamicLoader/Static/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginDynamicLoaderMacOSXDYLD",
    srcs = glob(["source/Plugins/DynamicLoader/MacOSX-DYLD/*.cpp"]),
    hdrs = glob(["source/Plugins/DynamicLoader/MacOSX-DYLD/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Expression",
        ":Host",
        ":PluginObjCRuntime",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:TargetParser",
    ],
)

gentbl_cc_library(
    name = "DynamicLoaderDarwinKernelProperties",
    strip_include_prefix = "source/Plugins/DynamicLoader/Darwin-Kernel",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/DynamicLoader/Darwin-Kernel/DynamicLoaderDarwinKernelProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/DynamicLoader/Darwin-Kernel/DynamicLoaderDarwinKernelPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/DynamicLoader/Darwin-Kernel/DynamicLoaderDarwinKernelProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginDynamicLoaderDarwinKernelHeaders",
    hdrs = glob(["source/Plugins/DynamicLoader/Darwin-Kernel/*.h"]),
    strip_include_prefix = "source",
)

cc_library(
    name = "PluginDynamicLoaderDarwinKernel",
    srcs = glob(["source/Plugins/DynamicLoader/Darwin-Kernel/*.cpp"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":DynamicLoaderDarwinKernelProperties",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginDynamicLoaderDarwinKernelHeaders",
        ":PluginObjectFileMachO",
        ":PluginPlatformMacOSX",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginArchitecturePPC64",
    srcs = glob(["source/Plugins/Architecture/PPC64/*.cpp"]),
    hdrs = glob(["source/Plugins/Architecture/PPC64/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginProcessUtility",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
    ],
)

cc_library(
    name = "PluginArchitectureMips",
    srcs = glob(["source/Plugins/Architecture/Mips/*.cpp"]),
    hdrs = glob(["source/Plugins/Architecture/Mips/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginArchitectureArm",
    srcs = glob(["source/Plugins/Architecture/Arm/*.cpp"]),
    hdrs = glob(["source/Plugins/Architecture/Arm/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginArchitectureAArch64",
    srcs = glob(["source/Plugins/Architecture/AArch64/*.cpp"]),
    hdrs = glob(["source/Plugins/Architecture/AArch64/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginDisassemblerLLVMC",
    srcs = glob(["source/Plugins/Disassembler/LLVMC/*.cpp"]),
    hdrs = glob(["source/Plugins/Disassembler/LLVMC/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:MC",
        "//llvm:MCDisassembler",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginSymbolFileSymtab",
    srcs = glob(["source/Plugins/SymbolFile/Symtab/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolFile/Symtab/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginSymbolFileCTF",
    srcs = glob(["source/Plugins/SymbolFile/CTF/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolFile/CTF/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":PluginExpressionParserClangHeaders",
        ":PluginTypeSystemClangHeaders",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
        "@llvm_zlib//:zlib",
    ],
)

cc_library(
    name = "PluginSymbolFileJSON",
    srcs = glob(["source/Plugins/SymbolFile/JSON/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolFile/JSON/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginObjectFileJSON",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginSymbolFileBreakpad",
    srcs = glob(["source/Plugins/SymbolFile/Breakpad/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolFile/Breakpad/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":PluginObjectFileBreakpad",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginInstructionPPC64",
    srcs = glob(["source/Plugins/Instruction/PPC64/*.cpp"]),
    hdrs = glob(["source/Plugins/Instruction/PPC64/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginInstructionLoongArch",
    srcs = glob(["source/Plugins/Instruction/LoongArch/*.cpp"]),
    hdrs = glob(["source/Plugins/Instruction/LoongArch/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginInstructionMIPS",
    srcs = glob(["source/Plugins/Instruction/MIPS/*.cpp"]),
    hdrs = glob(["source/Plugins/Instruction/MIPS/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:MC",
        "//llvm:MCDisassembler",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginInstructionMIPS64",
    srcs = glob(["source/Plugins/Instruction/MIPS64/*.cpp"]),
    hdrs = glob(["source/Plugins/Instruction/MIPS64/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:MC",
        "//llvm:MCDisassembler",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginInstructionARM",
    srcs = glob(["source/Plugins/Instruction/ARM/*.cpp"]),
    hdrs = glob(["source/Plugins/Instruction/ARM/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginInstructionRISCV",
    srcs = glob(["source/Plugins/Instruction/RISCV/*.cpp"]),
    hdrs = glob(["source/Plugins/Instruction/RISCV/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginInstructionARM64",
    srcs = glob(["source/Plugins/Instruction/ARM64/*.cpp"]),
    hdrs = glob(["source/Plugins/Instruction/ARM64/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginInstrumentationRuntimeASanLibsanitizers",
    srcs = glob(["source/Plugins/InstrumentationRuntime/ASanLibsanitizers/*.cpp"]),
    hdrs = glob(["source/Plugins/InstrumentationRuntime/ASanLibsanitizers/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":PluginInstrumentationRuntimeUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginInstrumentationRuntimeTSan",
    srcs = glob(["source/Plugins/InstrumentationRuntime/TSan/*.cpp"]),
    hdrs = glob(["source/Plugins/InstrumentationRuntime/TSan/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Expression",
        ":Headers",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginInstrumentationRuntimeASan",
    srcs = glob(["source/Plugins/InstrumentationRuntime/ASan/*.cpp"]),
    hdrs = glob(["source/Plugins/InstrumentationRuntime/ASan/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":PluginInstrumentationRuntimeUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginInstrumentationRuntimeMainThreadChecker",
    srcs = glob(["source/Plugins/InstrumentationRuntime/MainThreadChecker/*.cpp"]),
    hdrs = glob(["source/Plugins/InstrumentationRuntime/MainThreadChecker/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Expression",
        ":Headers",
        ":Interpreter",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginInstrumentationRuntimeUBSan",
    srcs = glob(["source/Plugins/InstrumentationRuntime/UBSan/*.cpp"]),
    hdrs = glob(["source/Plugins/InstrumentationRuntime/UBSan/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Expression",
        ":Headers",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginInstrumentationRuntimeUtility",
    srcs = glob(["source/Plugins/InstrumentationRuntime/Utility/*.cpp"]),
    hdrs = glob(["source/Plugins/InstrumentationRuntime/Utility/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Expression",
        ":Symbol",
        ":Target",
        ":TargetHeaders",
    ],
)

gentbl_cc_library(
    name = "JITLoaderGDBProperties",
    strip_include_prefix = "source/Plugins/JITLoader/GDB",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/JITLoader/GDB/JITLoaderGDBProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/JITLoader/GDB/JITLoaderGDBPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/JITLoader/GDB/JITLoaderGDBProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginJITLoaderGDB",
    srcs = glob(["source/Plugins/JITLoader/GDB/*.cpp"]),
    hdrs = glob(["source/Plugins/JITLoader/GDB/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Interpreter",
        ":InterpreterHeaders",
        ":JITLoaderGDBProperties",
        ":PluginObjectFileMachO",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginSymbolLocatorDefault",
    srcs = glob(["source/Plugins/SymbolLocator/Default/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolLocator/Default/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":PluginObjectFileWasm",
        ":Symbol",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

gentbl_cc_library(
    name = "SymbolLocatorDebuginfodProperties",
    strip_include_prefix = "source/Plugins/SymbolLocator/Debuginfod",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/SymbolLocator/Debuginfod/SymbolLocatorDebuginfodProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/SymbolLocator/Debuginfod/SymbolLocatorDebuginfodPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/SymbolLocator/Debuginfod/SymbolLocatorDebuginfodProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginSymbolLocatorDebuginfod",
    srcs = glob(["source/Plugins/SymbolLocator/Debuginfod/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolLocator/Debuginfod/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":InterpreterHeaders",
        ":Symbol",
        ":SymbolHeaders",
        ":SymbolLocatorDebuginfodProperties",
        ":Utility",
        "//llvm:Debuginfod",
    ],
)

cc_library(
    name = "PluginSymbolLocatorDebugSymbols",
    srcs = glob(["source/Plugins/SymbolLocator/DebugSymbols/*.cpp"]),
    hdrs = glob(["source/Plugins/SymbolLocator/DebugSymbols/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":HostMacOSXPrivateHeaders",
        ":PluginObjectFileWasm",
        ":Symbol",
    ],
)

# TODO: python support
# cc_library(
#     name = "PluginOperatingSystemPython",
#     srcs = glob(["source/Plugins/OperatingSystem/Python/*.cpp"]),
#     hdrs = glob(["source/Plugins/OperatingSystem/Python/*.h"]),
#     strip_include_prefix = "source",
#     deps = [
#         ":Core",
#         ":Interpreter",
#         ":PluginProcessUtility",
#         ":Symbol",
#         ":Target",
#     ],
# )
# cc_library(
#     name = "PluginScriptInterpreterPythonInterfaces",
#     srcs = glob(["source/Plugins/ScriptInterpreter/Python/Interfaces/*.cpp"]),
#     hdrs = glob(["source/Plugins/ScriptInterpreter/Python/Interfaces/*.h"]),
#     strip_include_prefix = "source",
#     deps = [
#         ":Core",
#         ":Host",
#         ":Interpreter",
#         ":Target",
#         "@rules_python//python/cc:current_py_cc_headers",
#         "@rules_python//python/cc:current_py_cc_libs",
#     ],
# )
# cc_library(
#     name = "PluginScriptInterpreterPythonHeaders",
#     hdrs = glob(["source/Plugins/ScriptInterpreter/Python/*.h"]),
#     strip_include_prefix = "source",
#     deps = [
#         ":Host",
#     ],
# )
# cc_library(
#     name = "PluginScriptInterpreterPython",
#     srcs = glob(["source/Plugins/ScriptInterpreter/Python/*.cpp"]),
#     local_defines = [
#         'LLDB_PYTHON_EXE_RELATIVE_PATH=\\"bin/python3\\"',
#         # Must be kept in sync with WORKSPACE python version
#         'LLDB_PYTHON_RELATIVE_LIBDIR=\\"lib/python3.11/site-packages\\"',
#     ],
#     strip_include_prefix = "source",
#     deps = [
#         ":Breakpoint",
#         ":Core",
#         ":DataFormatters",
#         ":Host",
#         ":Interpreter",
#         ":PluginScriptInterpreterPythonHeaders",
#         ":PluginScriptInterpreterPythonInterfaces",
#         ":Target",
#     ],
# )

# TODO: lua support
# cc_library(
#     name = "PluginScriptInterpreterLua",
#     srcs = glob(["source/Plugins/ScriptInterpreter/Lua/*.cpp"]),
#     hdrs = glob(["source/Plugins/ScriptInterpreter/Lua/*.h"]),
#     strip_include_prefix = "source",
#     deps = [
#         ":Core",
#         ":Interpreter",
#     ],
# )

cc_library(
    name = "PluginScriptInterpreterNone",
    srcs = glob(["source/Plugins/ScriptInterpreter/None/*.cpp"]),
    hdrs = glob(["source/Plugins/ScriptInterpreter/None/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Interpreter",
        ":InterpreterHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginSystemRuntimeMacOSX",
    srcs = glob(["source/Plugins/SystemRuntime/MacOSX/*.cpp"]),
    hdrs = glob(["source/Plugins/SystemRuntime/MacOSX/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Expression",
        ":Headers",
        ":Host",
        ":PluginProcessUtility",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginObjectFileCOFF",
    srcs = glob(["source/Plugins/ObjectFile/COFF/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/COFF/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":Utility",
        "//llvm:Object",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjectFileWasm",
    srcs = glob(["source/Plugins/ObjectFile/wasm/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/wasm/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":TargetHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjectFileJSON",
    srcs = glob(["source/Plugins/ObjectFile/JSON/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/JSON/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjectFilePlaceholder",
    srcs = glob(["source/Plugins/ObjectFile/Placeholder/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/Placeholder/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginObjectFileMachO",
    srcs = glob(["source/Plugins/ObjectFile/Mach-O/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/Mach-O/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginObjectFileMinidump",
    srcs = glob(["source/Plugins/ObjectFile/Minidump/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/Minidump/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":PluginProcessMinidump",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:Object",
        "//llvm:Support",
    ],
)

gentbl_cc_library(
    name = "ObjectFilePECOFFProperties",
    strip_include_prefix = "source/Plugins/ObjectFile/PECOFF",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/ObjectFile/PECOFF/ObjectFilePECOFFProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/ObjectFile/PECOFF/ObjectFilePECOFFPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/ObjectFile/PECOFF/ObjectFilePECOFFProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginObjectFilePECOFF",
    srcs = glob(["source/Plugins/ObjectFile/PECOFF/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/PECOFF/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":InterpreterHeaders",
        ":ObjectFilePECOFFProperties",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:Object",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginObjectFileBreakpad",
    srcs = glob(["source/Plugins/ObjectFile/Breakpad/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/Breakpad/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Utility",
        "//llvm:Support",
        "//llvm:TargetParser",
    ],
)

cc_library(
    name = "PluginObjectFileELF",
    srcs = glob(["source/Plugins/ObjectFile/ELF/*.cpp"]),
    hdrs = glob(["source/Plugins/ObjectFile/ELF/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Host",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:Object",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginUnwindAssemblyX86",
    srcs = glob(["source/Plugins/UnwindAssembly/x86/*.cpp"]),
    hdrs = glob(["source/Plugins/UnwindAssembly/x86/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:MCDisassembler",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginUnwindAssemblyInstEmulation",
    srcs = glob(["source/Plugins/UnwindAssembly/InstEmulation/*.cpp"]),
    hdrs = glob(["source/Plugins/UnwindAssembly/InstEmulation/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginProcessPOSIX",
    srcs = glob(["source/Plugins/Process/POSIX/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/POSIX/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Headers",
        ":Host",
        ":PluginProcessUtility",
        ":TargetHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginScriptedProcess",
    srcs = glob(["source/Plugins/Process/scripted/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/scripted/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Host",
        ":InterpreterHeaders",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginProcessMachCore",
    srcs = glob(["source/Plugins/Process/mach-core/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/mach-core/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Host",
        ":PluginDynamicLoaderDarwinKernelHeaders",
        ":PluginDynamicLoaderMacOSXDYLD",
        ":PluginDynamicLoaderStatic",
        ":PluginObjectFileMachO",
        ":PluginPlatformMacOSX",
        ":PluginProcessUtility",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginProcessElfCore",
    srcs = glob(["source/Plugins/Process/elf-core/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/elf-core/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":PluginDynamicLoaderPosixDYLDHeaders",
        ":PluginObjectFileELF",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:BinaryFormat",
        "//llvm:Support",
    ],
)

gentbl_cc_library(
    name = "ProcessKDPProperties",
    strip_include_prefix = "source/Plugins/Process/MacOSX-Kernel",
    tbl_outs = [
        (
            ["-gen-lldb-property-defs"],
            "source/Plugins/Process/MacOSX-Kernel/ProcessKDPProperties.inc",
        ),
        (
            ["-gen-lldb-property-enum-defs"],
            "source/Plugins/Process/MacOSX-Kernel/ProcessKDPPropertiesEnum.inc",
        ),
    ],
    tblgen = ":lldb-tblgen",
    td_file = "source/Plugins/Process/MacOSX-Kernel/ProcessKDPProperties.td",
    deps = [":CoreTdFiles"],
)

cc_library(
    name = "PluginProcessMacOSXKernel",
    srcs = glob(["source/Plugins/Process/MacOSX-Kernel/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/MacOSX-Kernel/*.h"]),
    strip_include_prefix = "source",
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":Breakpoint",
        ":Core",
        ":Headers",
        ":Host",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginDynamicLoaderDarwinKernel",
        ":PluginDynamicLoaderDarwinKernelHeaders",
        ":PluginDynamicLoaderStatic",
        ":PluginProcessUtility",
        ":ProcessKDPProperties",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginProcessMinidump",
    srcs = glob(["source/Plugins/Process/minidump/*.cpp"]),
    hdrs = glob(["source/Plugins/Process/minidump/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":InterpreterHeaders",
        ":PluginObjectFilePlaceholder",
        ":PluginProcessElfCore",
        ":PluginProcessUtility",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        ":UtilityPrivateHeaders",
        "//llvm:BinaryFormat",
        "//llvm:Object",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginCXXItaniumABI",
    srcs = glob(["source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/*.cpp"]),
    hdrs = glob(["source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":DataFormattersHeaders",
        ":ExpressionHeaders",
        ":Headers",
        ":Interpreter",
        ":InterpreterHeaders",
        ":PluginCPPRuntime",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":Symbol",
        ":SymbolHeaders",
        ":Target",
        ":TargetHeaders",
        ":Utility",
    ],
)

cc_library(
    name = "PluginGNUstepObjCRuntime",
    srcs = glob(["source/Plugins/LanguageRuntime/ObjC/GNUstepObjCRuntime/*.cpp"]),
    hdrs = glob(["source/Plugins/LanguageRuntime/ObjC/GNUstepObjCRuntime/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Breakpoint",
        ":Core",
        ":Expression",
        ":Headers",
        ":Host",
        ":Interpreter",
        ":PluginExpressionParserClang",
        ":PluginObjCRuntime",
        ":PluginTypeSystemClang",
        ":PluginTypeSystemClangHeaders",
        ":Symbol",
        ":Target",
        ":TargetHeaders",
        ":Utility",
        "//llvm:Support",
    ],
)

cc_library(
    name = "PluginRegisterTypeBuilderClang",
    srcs = glob(["source/Plugins/RegisterTypeBuilder/*.cpp"]),
    hdrs = glob(["source/Plugins/RegisterTypeBuilder/*.h"]),
    strip_include_prefix = "source",
    deps = [
        ":Core",
        ":Headers",
        ":PluginTypeSystemClangHeaders",
        ":Target",
        ":TargetHeaders",
        "//clang:ast",
    ],
)

cc_library(
    name = "DebugServerCommonMacOSXHeaders",
    hdrs = glob(["tools/debugserver/source/MacOSX/**/*.h"]),
    strip_include_prefix = "tools/debugserver/source/MacOSX",
)

cc_library(
    name = "DebugServerCommonHeaders",
    hdrs = glob(["tools/debugserver/source/**/*.h"]),
    strip_include_prefix = "tools/debugserver/source",
    deps = [":DebugServerCommonMacOSXHeaders"],
)

objc_library(
    name = "DebugServerMacOSX",
    srcs = glob(["tools/debugserver/source/MacOSX/**/*.mm"]),
    copts = _OBJCPP_COPTS,
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":DebugServerCommonHeaders",
        ":DebugServerCommonMacOSXHeaders",
    ],
)

cc_library(
    name = "DebugServerCommon",
    srcs = glob(
        ["tools/debugserver/source/**/*.cpp"],
        exclude = ["tools/debugserver/source/debugserver.cpp"],
    ),
    local_defines = ["LLDB_USE_OS_LOG"],
    deps = [
        ":DebugServerCommonHeaders",
        ":DebugServerCommonMacOSXHeaders",
        ":DebugServerMacOSX",
        ":Host",
    ],
)

genrule(
    name = "mach_gen",
    srcs = ["tools/debugserver/source/MacOSX/dbgnub-mig.defs"],
    outs = [
        "mach_exc.h",
        "mach_excServer.c",
        "mach_excUser.c",
    ],
    cmd = "mig -header $(location :mach_exc.h) -server $(location :mach_excServer.c) -user $(location :mach_excUser.c) $(SRCS)",
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
)

expand_template(
    name = "debugserver_version_gen",
    out = "debugserver_vers.c",
    substitutions = _VERSION_SUBSTITUTIONS,
    template = "tools/debugserver/source/debugserver_vers.c.in",
)

cc_binary(
    name = "debugserver",
    srcs = [
        "tools/debugserver/source/debugserver.cpp",
        ":debugserver_version_gen",
        ":mach_gen",
    ],
    target_compatible_with = select({
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [":DebugServerCommon"],
)

cc_binary(
    name = "lldb-argdumper",
    srcs = glob(["tools/argdumper/*.cpp"]),
    deps = ["//llvm:Support"],
)
