// REQUIRES: system-linux, native

// This test verifies that loading an ELF file that has no section headers can
// find the contents on the .dynamic section and the strings associated with
// the .dynamic seciton.
// - Loading the .dynamic section from the PT_DYNAMIC
// This test will make a simple executable that links against libc.so and we
// verify that we can find the DT_NEEDED entry with the shared library found
// in the .dynamic dump from "image dump objfile"

// RUN: %clang_host %p/Inputs/memory-elf.cpp -g -O0 -o %t
// RUN: llvm-strip --strip-sections %t

// RUN: %lldb -b \
// RUN:   -o "target create -d '%t'" \
// RUN:   -o "image dump objfile" \
// RUN:   | FileCheck %s --check-prefix=MAIN --dump-input=always
// MAIN: (lldb) image dump objfile
// MAIN: Dumping headers for 1 module(s).
// MAIN: ObjectFileELF, file =
// MAIN: ELF Header
// Make sure there are no section headers
// MAIN: e_shnum = 0x00000000

// Make sure we find the program headers and see a PT_DYNAMIC entry.
// MAIN: Program Headers
// MAIN: ] PT_DYNAMIC

// Make sure we see some sections created from the program headers
// MAIN: SectID
// MAIN: PT_LOAD[0]

// Ensure we find some dependent modules as won't find these if we aren't able
// to load the .dynamic section from the PT_DYNAMIC program header.
// MAIN: Dependent Modules:

// Check for the .dynamic dump and ensure we find all dynamic entries that are
// required to be there and needed to get the .dynstr section and the symbol
// table, and the DT_DEBUG entry to find the list of shared libraries.
// MAIN: .dynamic:
// Make sure we found the .dynstr section by checking for valid strings after NEEDED
// MAIN-DAG: NEEDED {{0x[0-9a-f]+ ".*libc.*"}}
// MAIN-DAG: STRTAB {{0x[0-9a-f]+}}
// MAIN-DAG: SYMTAB {{0x[0-9a-f]+}}
// MAIN-DAG: STRSZ {{0x[0-9a-f]+}}
// MAIN-DAG: SYMENT {{0x[0-9a-f]+}}
// MAIN-DAG: DEBUG {{0x[0-9a-f]+}}
// MAIN:     NULL {{0x[0-9a-f]+}}

