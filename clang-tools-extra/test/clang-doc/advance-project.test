// RUN: sed 's|$test_dir|%/S|g' %S/Inputs/advance-project/database_template.json > %t/build/compile_commands.json
// RUN: clang-doc --format=html --doxygen --output=%t/docs --executor=all-TUs %t/build/compile_commands.json
// RUN: clang-doc --format=md --doxygen --output=%t/docs --executor=all-TUs %t/build/compile_commands.json
// RUN: FileCheck %s -input-file=%t/docs/index_json.js -check-prefix=JSON-INDEX
// RUN: FileCheck %s -input-file=%t/docs/@nonymous_namespace/index.html -check-prefix=HTML-ANON-INDEX
// RUN: FileCheck %s -input-file=%t/docs/GlobalNamespace/Array.html -check-prefix=HTML-ARRAY
// RUN: FileCheck %s -input-file=%t/docs/GlobalNamespace/index.html -check-prefix=HTML-GLOBAL-INDEX
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/InnerNamespace/Circle.html -check-prefix=HTML-CIRCLE
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/InnerNamespace/index.html -check-prefix=HTML-INNER-INDEX
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/InnerNamespace/Shape.html -check-prefix=HTML-SHAPE
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/index.html -check-prefix=HTML-OUTER-INDEX
// RUN: FileCheck %s -input-file=%t/docs/@nonymous_namespace/index.md -check-prefix=MD-ANON-INDEX
// RUN: FileCheck %s -input-file=%t/docs/GlobalNamespace/Array.md -check-prefix=MD-ARRAY
// RUN: FileCheck %s -input-file=%t/docs/GlobalNamespace/index.md -check-prefix=MD-GLOBAL-INDEX
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/InnerNamespace/Circle.md -check-prefix=MD-CIRCLE
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/InnerNamespace/index.md -check-prefix=MD-INNER
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/InnerNamespace/Shape.md -check-prefix=MD-SHAPE
// RUN: FileCheck %s -input-file=%t/docs/OuterNamespace/index.md -check-prefix=MD-OUTER-INDEX
// RUN: FileCheck %s -input-file=%t/docs/all_files.md -check-prefix=MD-ALL-FILES
// RUN: FileCheck %s -input-file=%t/docs/index.md -check-prefix=MD-INDEX

// JSON-INDEX: async function LoadIndex() {
// JSON-INDEX-NEXT: return{
// JSON-INDEX-NEXT:   "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:   "Name": "",
// JSON-INDEX-NEXT:   "RefType": "default",
// JSON-INDEX-NEXT:   "Path": "",
// JSON-INDEX-NEXT:   "Children": [
// JSON-INDEX-NEXT:     {
// JSON-INDEX-NEXT:       "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:       "Name": "@nonymous_namespace",
// JSON-INDEX-NEXT:       "RefType": "namespace",
// JSON-INDEX-NEXT:       "Path": "@nonymous_namespace",
// JSON-INDEX-NEXT:       "Children": []
// JSON-INDEX-NEXT:     },
// JSON-INDEX-NEXT:     {
// JSON-INDEX-NEXT:       "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:       "Name": "GlobalNamespace",
// JSON-INDEX-NEXT:       "RefType": "namespace",
// JSON-INDEX-NEXT:       "Path": "GlobalNamespace",
// JSON-INDEX-NEXT:       "Children": [
// JSON-INDEX-NEXT:         {
// JSON-INDEX-NEXT:           "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:           "Name": "Array",
// JSON-INDEX-NEXT:           "RefType": "record",
// JSON-INDEX-NEXT:           "Path": "GlobalNamespace",
// JSON-INDEX-NEXT:           "Children": []
// JSON-INDEX-NEXT:         }
// JSON-INDEX-NEXT:       ]
// JSON-INDEX-NEXT:     },
// JSON-INDEX-NEXT:     {
// JSON-INDEX-NEXT:       "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:       "Name": "OuterNamespace",
// JSON-INDEX-NEXT:       "RefType": "namespace",
// JSON-INDEX-NEXT:       "Path": "OuterNamespace",
// JSON-INDEX-NEXT:       "Children": [
// JSON-INDEX-NEXT:         {
// JSON-INDEX-NEXT:           "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:           "Name": "InnerNamespace",
// JSON-INDEX-NEXT:           "RefType": "namespace",
// JSON-INDEX-NEXT:           "Path": "OuterNamespace{{[\/]+}}InnerNamespace",
// JSON-INDEX-NEXT:           "Children": [
// JSON-INDEX-NEXT:             {
// JSON-INDEX-NEXT:               "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:               "Name": "Circle",
// JSON-INDEX-NEXT:               "RefType": "record",
// JSON-INDEX-NEXT:               "Path": "OuterNamespace{{[\/]+}}InnerNamespace",
// JSON-INDEX-NEXT:               "Children": []
// JSON-INDEX-NEXT:             },
// JSON-INDEX-NEXT:             {
// JSON-INDEX-NEXT:               "USR": "{{([0-9A-F]{40})}}",
// JSON-INDEX-NEXT:               "Name": "Shape",
// JSON-INDEX-NEXT:               "RefType": "record",
// JSON-INDEX-NEXT:               "Path": "OuterNamespace{{[\/]+}}InnerNamespace",
// JSON-INDEX-NEXT:               "Children": []
// JSON-INDEX-NEXT:             }
// JSON-INDEX-NEXT:           ]
// JSON-INDEX-NEXT:         }
// JSON-INDEX-NEXT:       ]
// JSON-INDEX-NEXT:     }
// JSON-INDEX-NEXT:   ]
// JSON-INDEX-NEXT: };
// JSON-INDEX-NEXT: }

// HTML-ANON-INDEX: <h1>namespace @nonymous_namespace</h1>
// HTML-ANON-INDEX: <div>
// HTML-ANON-INDEX:   <div>
// HTML-ANON-INDEX:     <p> Anonymous namespace for utility functions</p>
// HTML-ANON-INDEX:   </div>
// HTML-ANON-INDEX: </div>
// HTML-ANON-INDEX: <h2 id="Functions">Functions</h2>
// HTML-ANON-INDEX: <div>
// HTML-ANON-INDEX:   <h3 id="{{([0-9A-F]{40})}}">getRandomNumber</h3>
// HTML-ANON-INDEX:   <p>int getRandomNumber()</p>
// HTML-ANON-INDEX:   <p>Defined at line 9 of file .{{[\/]}}src{{[\/]}}Utils.cpp</p>
// HTML-ANON-INDEX:   <div>
// HTML-ANON-INDEX:     <div></div>
// HTML-ANON-INDEX:     <div>
// HTML-ANON-INDEX:       <p> This function returns a predetermined number to simulate randomness. In a real implementation, this would use a proper random number generator</p>
// HTML-ANON-INDEX:     </div>
// HTML-ANON-INDEX:   </div>
// HTML-ANON-INDEX:   <h3 id="{{([0-9A-F]{40})}}">intToString</h3>
// HTML-ANON-INDEX:   <p>void intToString(int value, char * buffer, int &amp; index)</p>
// HTML-ANON-INDEX:   <p>Defined at line 18 of file .{{[\/]}}src{{[\/]}}Utils.cpp</p>
// HTML-ANON-INDEX:   <div>
// HTML-ANON-INDEX:     <div></div>
// HTML-ANON-INDEX:     <div>
// HTML-ANON-INDEX:       <p> Converts an integer value to its string representation and stores the result in the provided buffer.</p>
// HTML-ANON-INDEX:     </div>
// HTML-ANON-INDEX:   </div>
// HTML-ANON-INDEX:   <h3 id="{{([0-9A-F]{40})}}">doubleToString</h3>
// HTML-ANON-INDEX:   <p>void doubleToString(double value, char * buffer, int &amp; index)</p>
// HTML-ANON-INDEX:   <p>Defined at line 26 of file ./src/Utils.cpp</p>
// HTML-ANON-INDEX:   <div>
// HTML-ANON-INDEX:     <div></div>
// HTML-ANON-INDEX:     <div>
// HTML-ANON-INDEX:       <p> Converts a double value to its string representation with two decimal places and stores the result in the provided buffer.</p>
// HTML-ANON-INDEX:     </div>
// HTML-ANON-INDEX:   </div>
// HTML-ANON-INDEX:   <h3 id="{{([0-9A-F]{40})}}">print</h3>
// HTML-ANON-INDEX:   <p>void print(const char * str)</p>
// HTML-ANON-INDEX:   <p>Defined at line 33 of file .{{[\/]}}src{{[\/]}}Utils.cpp</p>
// HTML-ANON-INDEX:   <div>
// HTML-ANON-INDEX:     <div></div>
// HTML-ANON-INDEX:     <div>
// HTML-ANON-INDEX:       <p> Prints the provided null-terminated string to the standard output.</p>
// HTML-ANON-INDEX:     </div>
// HTML-ANON-INDEX:   </div>
// HTML-ANON-INDEX: </div>

// HTML-ARRAY: <h1>class Array</h1>
// HTML-ARRAY: <p>Defined at line 13 of file ./include\Array.h</p>
// HTML-ARRAY: <div>
// HTML-ARRAY:   <div></div>
// HTML-ARRAY: </div>
// HTML-ARRAY: <h2 id="Members">Members</h2>
// HTML-ARRAY: <ul>
// HTML-ARRAY:   <li>private T[Size] m_data</li>
// HTML-ARRAY: </ul>
// HTML-ARRAY: <h2 id="Functions">Functions</h2>
// HTML-ARRAY: <div>
// HTML-ARRAY:   <h3 id="{{([0-9A-F]{40})}}">Array&lt;T, Size&gt;</h3>
// HTML-ARRAY:   <p>public void Array&lt;T, Size&gt;()</p>
// HTML-ARRAY:   <p>Defined at line 8 of file .{{[\/]}}src{{[\/]}}Array.cpp</p>
// HTML-ARRAY:   <div>
// HTML-ARRAY:     <div></div>
// HTML-ARRAY:     <div>
// HTML-ARRAY:       <p> Initializes all elements of the array to their default value.</p>
// HTML-ARRAY:     </div>
// HTML-ARRAY:   </div>
// HTML-ARRAY:   <h3 id="{{([0-9A-F]{40})}}">operator[]</h3>
// HTML-ARRAY:   <p>public T &amp; operator[](int index)</p>
// HTML-ARRAY:   <p>Defined at line 18 of file .{{[\/]}}src{{[\/]}}Array.cpp</p>
// HTML-ARRAY:   <div>
// HTML-ARRAY:     <div></div>
// HTML-ARRAY:     <div>
// HTML-ARRAY:       <p> Array access operator for Array&lt;T, Size&gt; Provides read and write access to elements in the array. This implementation does not perform bounds checking</p>
// HTML-ARRAY:     </div>
// HTML-ARRAY:   </div>
// HTML-ARRAY:   <h3 id="{{([0-9A-F]{40})}}">size</h3>
// HTML-ARRAY:   <p>public int size()</p>
// HTML-ARRAY:   <p>Defined at line 28 of file ./src/Array.cpp</p>
// HTML-ARRAY:   <div>
// HTML-ARRAY:     <div></div>
// HTML-ARRAY:     <div>
// HTML-ARRAY:       <p> Get the size of the array for Array&lt;T, Size&gt;</p>
// HTML-ARRAY:     </div>
// HTML-ARRAY:   </div>
// HTML-ARRAY: </div>

// HTML-GLOBAL-INDEX: <h1>Global Namespace</h1>
// HTML-GLOBAL-INDEX: <h2 id="Namespaces">Namespaces</h2>
// HTML-GLOBAL-INDEX: <ul>
// HTML-GLOBAL-INDEX:   <li>OuterNamespace</li>
// HTML-GLOBAL-INDEX:   <li>@nonymous_namespace</li>
// HTML-GLOBAL-INDEX: </ul>
// HTML-GLOBAL-INDEX: <h2 id="Records">Records</h2>
// HTML-GLOBAL-INDEX: <ul>
// HTML-GLOBAL-INDEX:   <li>
// HTML-GLOBAL-INDEX:     <a href="Array.html">Array</a>
// HTML-GLOBAL-INDEX:   </li>
// HTML-GLOBAL-INDEX: </ul>

// HTML-CIRCLE: <h1>class Circle</h1>
// HTML-CIRCLE: <p>Defined at line 11 of file .{{[\/]}}include{{[\/]}}Circle.h</p>
// HTML-CIRCLE: <div>
// HTML-CIRCLE:   <div></div>
// HTML-CIRCLE: </div>
// HTML-CIRCLE: <p>
// HTML-CIRCLE:   Inherits from
// HTML-CIRCLE:   <a href="Shape.html">Shape</a>
// HTML-CIRCLE: </p>
// HTML-CIRCLE: <h2 id="Members">Members</h2>
// HTML-CIRCLE: <ul>
// HTML-CIRCLE:   <li>private double m_radius</li>
// HTML-CIRCLE: </ul>
// HTML-CIRCLE: <h2 id="Functions">Functions</h2>
// HTML-CIRCLE: <div>
// HTML-CIRCLE:   <h3 id="{{([0-9A-F]{40})}}">Circle</h3>
// HTML-CIRCLE:   <p>public void Circle(int id, double radius)</p>
// HTML-CIRCLE:   <p>Defined at line 9 of file .{{[\/]}}src{{[\/]}}Circle.cpp</p>
// HTML-CIRCLE:   <div>
// HTML-CIRCLE:     <div></div>
// HTML-CIRCLE:     <div>
// HTML-CIRCLE:       <p> Initializes a Circle object with a given ID and radius.</p>
// HTML-CIRCLE:     </div>
// HTML-CIRCLE:   </div>
// HTML-CIRCLE:   <h3 id="{{([0-9A-F]{40})}}">draw</h3>
// HTML-CIRCLE:   <p>public void draw()</p>
// HTML-CIRCLE:   <p>Defined at line 19 of file .{{[\/]}}src{{[\/]}}Circle.cpp</p>
// HTML-CIRCLE:   <div>
// HTML-CIRCLE:     <div>
// HTML-CIRCLE:       <p> Draws the circle (in this case, prints circle information)</p>
// HTML-CIRCLE:     </div>
// HTML-CIRCLE:     <div>
// HTML-CIRCLE:       <p> This function is responsible for drawing the circle. In a real implementation, this would perform the actual drawing operation. In this stub implementation, it simply prints information about the circle.</p>
// HTML-CIRCLE:     </div>
// HTML-CIRCLE:   </div>
// HTML-CIRCLE: </div>

// HTML-INNER-INDEX: <h1>namespace InnerNamespace</h1>
// HTML-INNER-INDEX: <div>
// HTML-INNER-INDEX:   <div>
// HTML-INNER-INDEX:     <p> Inner namespace</p>
// HTML-INNER-INDEX:   </div>
// HTML-INNER-INDEX: </div>
// HTML-INNER-INDEX: <h2 id="Records">Records</h2>
// HTML-INNER-INDEX: <ul>
// HTML-INNER-INDEX:   <li>
// HTML-INNER-INDEX:     <a href="Shape.html">Shape</a>
// HTML-INNER-INDEX:   </li>
// HTML-INNER-INDEX:   <li>
// HTML-INNER-INDEX:     <a href="Circle.html">Circle</a>
// HTML-INNER-INDEX:   </li>
// HTML-INNER-INDEX: </ul>
// HTML-INNER-INDEX: <h2 id="Enums">Enums</h2>
// HTML-INNER-INDEX: <div>
// HTML-INNER-INDEX:   <h3 id="{{([0-9A-F]{40})}}">enum class Color</h3>
// HTML-INNER-INDEX:   <ul>
// HTML-INNER-INDEX:     <li>Red</li>
// HTML-INNER-INDEX:     <li>Green</li>
// HTML-INNER-INDEX:     <li>Blue</li>
// HTML-INNER-INDEX:   </ul>
// HTML-INNER-INDEX:   <p>Defined at line 10 of file .{{[\/]}}include{{[\/]}}Shape.h</p>
// HTML-INNER-INDEX:   <div>
// HTML-INNER-INDEX:     <div></div>
// HTML-INNER-INDEX:   </div>
// HTML-INNER-INDEX: </div>

// HTML-SHAPE: <h1>class Shape</h1>
// HTML-SHAPE: <p>Defined at line 19 of file .{{[\/]}}include{{[\/]}}Shape.h</p>
// HTML-SHAPE: <div>
// HTML-SHAPE:   <div></div>
// HTML-SHAPE: </div>
// HTML-SHAPE: <h2 id="Members">Members</h2>
// HTML-SHAPE: <ul>
// HTML-SHAPE:   <li>private int m_id</li>
// HTML-SHAPE: </ul>
// HTML-SHAPE: <h2 id="Functions">Functions</h2>
// HTML-SHAPE: <div>
// HTML-SHAPE:   <h3 id="{{([0-9A-F]{40})}}">Shape</h3>
// HTML-SHAPE:   <p>public void Shape(int id)</p>
// HTML-SHAPE:   <p>Defined at line 9 of file ./src/Shape.cpp</p>
// HTML-SHAPE:   <div>
// HTML-SHAPE:     <div></div>
// HTML-SHAPE:     <div>
// HTML-SHAPE:       <p> Initializes a Shape object with a given ID.</p>
// HTML-SHAPE:     </div>
// HTML-SHAPE:   </div>
// HTML-SHAPE:   <h3 id="{{([0-9A-F]{40})}}">~Shape</h3>
// HTML-SHAPE:   <p>public void ~Shape()</p>
// HTML-SHAPE:   <p>Defined at line 16 of file ./src/Shape.cpp</p>
// HTML-SHAPE:   <div>
// HTML-SHAPE:     <div></div>
// HTML-SHAPE:     <div>
// HTML-SHAPE:       <p> Ensures proper cleanup of derived classes.</p>
// HTML-SHAPE:     </div>
// HTML-SHAPE:   </div>
// HTML-SHAPE:   <h3 id="{{([0-9A-F]{40})}}">draw</h3>
// HTML-SHAPE:   <p>public void draw()</p>
// HTML-SHAPE:   <div>
// HTML-SHAPE:     <div></div>
// HTML-SHAPE:   </div>
// HTML-SHAPE:   <h3 id="505BF8791AEB9B44E0E3373F5D750E875156BCCD">getId</h3>
// HTML-SHAPE:   <p>public int getId()</p>
// HTML-SHAPE:   <p>Defined at line 23 of file .{{[\/]}}src{{[\/]}}Shape.cpp</p>
// HTML-SHAPE:   <div>
// HTML-SHAPE:     <div></div>
// HTML-SHAPE:     <div>
// HTML-SHAPE:       <p> Get unique identifier of the shape</p>
// HTML-SHAPE:     </div>
// HTML-SHAPE:   </div>
// HTML-SHAPE: </div>

// HTML-OUTER-INDEX: <h1>namespace OuterNamespace</h1>
// HTML-OUTER-INDEX: <div>
// HTML-OUTER-INDEX:   <div>
// HTML-OUTER-INDEX:     <p> Outer namespace</p>
// HTML-OUTER-INDEX:   </div>
// HTML-OUTER-INDEX: </div>
// HTML-OUTER-INDEX: <h2 id="Namespaces">Namespaces</h2>
// HTML-OUTER-INDEX: <ul>
// HTML-OUTER-INDEX:   <li>
// HTML-OUTER-INDEX:     <a href="InnerNamespace{{[\/]}}index.html">InnerNamespace</a>
// HTML-OUTER-INDEX:   </li>
// HTML-OUTER-INDEX: </ul>

// MD-ANON-INDEX: # namespace @nonymous_namespace
// MD-ANON-INDEX:  Anonymous namespace for utility functions
// MD-ANON-INDEX: ## Functions
// MD-ANON-INDEX: ### getRandomNumber
// MD-ANON-INDEX: *int getRandomNumber()*
// MD-ANON-INDEX: *Defined at .{{[\/]}}src{{[\/]}}Utils.cpp#9*
// MD-ANON-INDEX: **brief** Generate a "random" number
// MD-ANON-INDEX: **note** This is not actually random in this implementation
// MD-ANON-INDEX: **return** int A predetermined "random" number
// MD-ANON-INDEX:  This function returns a predetermined number to simulate randomness. In a real implementation, this would use a proper random number generator
// MD-ANON-INDEX: ### intToString
// MD-ANON-INDEX: *void intToString(int value, char * buffer, int & index)*
// MD-ANON-INDEX: *Defined at .{{[\/]}}src{{[\/]}}Utils.cpp#18*
// MD-ANON-INDEX: **brief** Helper function to convert int to string
// MD-ANON-INDEX: **value** The integer value to convert
// MD-ANON-INDEX: **buffer** The char buffer to store the result
// MD-ANON-INDEX: **index** Reference to the current index in the buffer
// MD-ANON-INDEX:  Converts an integer value to its string representation and stores the result in the provided buffer.
// MD-ANON-INDEX: ### doubleToString
// MD-ANON-INDEX: *void doubleToString(double value, char * buffer, int & index)*
// MD-ANON-INDEX: *Defined at .{{[\/]}}src{{[\/]}}Utils.cpp#26*
// MD-ANON-INDEX: **brief** Helper function to convert double to string (simplified)
// MD-ANON-INDEX: **value** The double value to convert
// MD-ANON-INDEX: **buffer** The char buffer to store the result
// MD-ANON-INDEX: **index** Reference to the current index in the buffer
// MD-ANON-INDEX:  Converts a double value to its string representation with two decimal places and stores the result in the provided buffer.
// MD-ANON-INDEX: ### print
// MD-ANON-INDEX: *void print(const char * str)*
// MD-ANON-INDEX: *Defined at .{{[\/]}}src{{[\/]}}Utils.cpp#33*
// MD-ANON-INDEX: **brief** Helper function to print a string
// MD-ANON-INDEX: **str** The null-terminated string to print
// MD-ANON-INDEX:  Prints the provided null-terminated string to the standard output.

// MD-ARRAY: # class Array
// MD-ARRAY: *Defined at .{{[\/]}}include{{[\/]}}Array.h#13*
// MD-ARRAY: **brief** Template class for a simple array
// MD-ARRAY: **T** The type of elements in the array
// MD-ARRAY: **Size** The fixed size of the array
// MD-ARRAY: ## Members
// MD-ARRAY: private T[Size] m_data
// MD-ARRAY: ## Functions
// MD-ARRAY: ### Array<T, Size>
// MD-ARRAY: *public void Array<T, Size>()*
// MD-ARRAY: *Defined at .{{[\/]}}src{{[\/]}}Array.cpp#8*
// MD-ARRAY: **brief** Default constructor
// MD-ARRAY:  Initializes all elements of the array to their default value.
// MD-ARRAY: ### operator[]
// MD-ARRAY: *public T & operator[](int index)*
// MD-ARRAY: *Defined at .{{[\/]}}src{{[\/]}}Array.cpp#18*
// MD-ARRAY: **brief** Array access operator
// MD-ARRAY: **index** The index of the element to access
// MD-ARRAY: **return** T& Reference to the element at the given index
// MD-ARRAY:  Array access operator for Array<T, Size> Provides read and write access to elements in the array. This implementation does not perform bounds checking
// MD-ARRAY: ### size
// MD-ARRAY: *public int size()*
// MD-ARRAY: *Defined at .{{[\/]}}src{{[\/]}}Array.cpp#28*
// MD-ARRAY: **brief** Get the size of the array
// MD-ARRAY: **return** int The size of the array
// MD-ARRAY:  Get the size of the array for Array<T, Size>

// MD-GLOBAL-INDEX: # Global Namespace
// MD-GLOBAL-INDEX: ## Namespaces
// MD-GLOBAL-INDEX: * {{.*}}
// MD-GLOBAL-INDEX: * {{.*}}
// MD-GLOBAL-INDEX: ## Records
// MD-GLOBAL-INDEX: * [Array](Array.md)

// MD-CIRCLE: # class Circle
// MD-CIRCLE: *Defined at .{{[\/]}}include{{[\/]}}Circle.h#11*
// MD-CIRCLE: **brief** Circle class, derived from Shape
// MD-CIRCLE: Inherits from Shape
// MD-CIRCLE: ## Members
// MD-CIRCLE: private double m_radius
// MD-CIRCLE: ## Functions
// MD-CIRCLE: ### Circle
// MD-CIRCLE: *public void Circle(int id, double radius)*
// MD-CIRCLE: *Defined at .{{[\/]}}src{{[\/]}}Circle.cpp#9*
// MD-CIRCLE: **brief** Constructor
// MD-CIRCLE: **id** The unique identifier for the circle
// MD-CIRCLE: **radius** The radius of the circle
// MD-CIRCLE:  Initializes a Circle object with a given ID and radius.
// MD-CIRCLE: ### draw
// MD-CIRCLE: *public void draw()*
// MD-CIRCLE: *Defined at .{{[\/]}}src{{[\/]}}Circle.cpp#19*
// MD-CIRCLE: **brief** Implementation of the draw function
// MD-CIRCLE:  Draws the circle (in this case, prints circle information)
// MD-CIRCLE:  This function is responsible for drawing the circle. In a real implementation, this would perform the actual drawing operation. In this stub implementation, it simply prints information about the circle.

// MD-INNER: # namespace InnerNamespace
// MD-INNER:  Inner namespace
// MD-INNER: ## Records
// MD-INNER: * [Shape](Shape.md)
// MD-INNER: * [Circle](Circle.md)
// MD-INNER: ## Enums
// MD-INNER: | enum class Color |
// MD-INNER: --
// MD-INNER: | Red |
// MD-INNER: | Green |
// MD-INNER: | Blue |
// MD-INNER: *Defined at .{{[\/]}}include{{[\/]}}Shape.h#10*
// MD-INNER: **brief** Enum class for colors

// MD-SHAPE: # class Shape
// MD-SHAPE: *Defined at .{{[\/]}}include{{[\/]}}Shape.h#19*
// MD-SHAPE: **brief** Abstract base class for shapes
// MD-SHAPE: ## Members
// MD-SHAPE: private int m_id
// MD-SHAPE: ## Functions
// MD-SHAPE: ### Shape
// MD-SHAPE: *public void Shape(int id)*
// MD-SHAPE: *Defined at .{{[\/]}}src{{[\/]}}Shape.cpp#9*
// MD-SHAPE: **brief** Constructor
// MD-SHAPE: **id** The unique identifier for the shape
// MD-SHAPE:  Initializes a Shape object with a given ID.
// MD-SHAPE: ### ~Shape
// MD-SHAPE: *public void ~Shape()*
// MD-SHAPE: *Defined at .{{[\/]}}src{{[\/]}}Shape.cpp#16*
// MD-SHAPE: **brief** Virtual destructor
// MD-SHAPE:  Ensures proper cleanup of derived classes.
// MD-SHAPE: ### draw
// MD-SHAPE: *public void draw()*
// MD-SHAPE: **brief** Pure virtual function for drawing the shape
// MD-SHAPE: ### getId
// MD-SHAPE: *public int getId()*
// MD-SHAPE: *Defined at .{{[\/]}}src{{[\/]}}Shape.cpp#23*
// MD-SHAPE: **brief** Getter for the shape's ID
// MD-SHAPE: **return** int The shape's ID
// MD-SHAPE:  Get unique identifier of the shape

// MD-OUTER-INDEX: # namespace OuterNamespace
// MD-OUTER-INDEX:  Outer namespace
// MD-OUTER-INDEX: ## Namespaces
// MD-OUTER-INDEX: * [InnerNamespace](InnerNamespace{{[\/]}}index.md)

// MD-ALL-FILES: # All Files
// MD-ALL-FILES: ## [@nonymous_namespace](@nonymous_namespace{{[\/]}}index.md)
// MD-ALL-FILES: ## [GlobalNamespace](GlobalNamespace{{[\/]}}index.md)
// MD-ALL-FILES: ## [OuterNamespace](OuterNamespace{{[\/]}}index.md)

// MD-INDEX: #  C/C++ Reference
// MD-INDEX: * Namespace: [GlobalNamespace](GlobalNamespace)
// MD-INDEX: * Namespace: [OuterNamespace](OuterNamespace)