from lit.llvm import llvm_config

if not config.mlir_include_integration_tests:
    config.unsupported = True


def configure_aarch64_mcr_cmd():
    mcr_cmd = "mlir-cpu-runner"

    # NOTE: If the SVE tests are disabled and the SME tests are enabled to run
    # under emulation, the SVE specific RUN lines in the SparseTensor tests
    # will run under emulation.
    if not (config.mlir_run_arm_sve_tests or config.mlir_run_arm_sme_tests):
        return mcr_cmd

    if config.arm_emulator_executable:
        if config.arm_emulator_mlir_cpu_runner_executable:
            mcr_cmd = config.arm_emulator_mlir_cpu_runner_executable
        else:
            # Top-level LIT config adds llvm_tools_dir to PATH but this is lost
            # when running under an emulator. If the user didn't specify an
            # mlir-cpu-runner executable, use absolute path
            # %llvm_tools_dir/mlir-cpu-runner.
            mcr_cmd = llvm_config.use_llvm_tool(
                "mlir-cpu-runner",
                search_env="MLIR_CPU_RUNNER",
                required=True,
                search_paths=[config.mlir_tools_dir],
                use_installed=False,
            )

        # Run test in emulator (qemu or armie)
        emulation_cmd = (
            f"{config.arm_emulator_executable} {config.arm_emulator_options}"
        )

        mcr_cmd = f"{emulation_cmd} {mcr_cmd}"

    return mcr_cmd


aarch64_mcr_cmd = configure_aarch64_mcr_cmd()

# AArch64 tests will run under emulation if configured at build time by the
# following CMake options:
#
# * ARM_EMULATOR_EXECUTABLE     - emulator to use.
# * ARM_EMULATOR_OPTIONS        - options for emulator.
# * ARM_EMULATOR_MLIR_CPU_RUNNER_EXECUTABLE - AArch64 native mlir-cpu-runner to
#                                             support cross-compilation
# * ARM_EMULATOR_UTILS_LIB_DIR - AArch64 native utilites library to support
#                                cross-compilation.
config.substitutions.append(("%mcr_aarch64_cmd", aarch64_mcr_cmd))

# Substitutions for ARM_EMULATOR_UTILS_LIB_DIR, if set
mlir_runner_utils_file_name = "/libmlir_runner_utils" + config.llvm_shlib_ext
mlir_c_runner_utils_file_name = "/libmlir_c_runner_utils" + config.llvm_shlib_ext
mlir_arm_runner_utils_file_name = "/libmlir_arm_runner_utils" + config.llvm_shlib_ext
arm_sme_abi_shlib_file_name = "/libmlir_arm_sme_abi_stubs" + config.llvm_shlib_ext
if config.arm_emulator_utils_lib_dir:
    # Use mlir runtime libs from the location passed by -DARM_EMULATOR_UTILS_LIB_DIR.
    config.substitutions.append(
        (
            "%native_mlir_runner_utils",
            config.arm_emulator_utils_lib_dir + mlir_runner_utils_file_name
        )
    )
    config.substitutions.append(
        (
            "%native_mlir_c_runner_utils",
            config.arm_emulator_utils_lib_dir + mlir_c_runner_utils_file_name
        )
    )
    config.substitutions.append(
        (   "%native_mlir_arm_runner_utils",
            config.arm_emulator_utils_lib_dir + mlir_arm_runner_utils_file_name
        )
    )
    config.substitutions.append(
        (
            "%native_arm_sme_abi_shlib",
            # Use passed Arm SME ABI routines, if not present default to stubs.
            config.arm_sme_abi_routines_shlib or (config.arm_emulator_utils_lib_dir + arm_sme_abi_shlib_file_name)
        )
    )
else:
    config.substitutions.append(
        (
            "%native_mlir_runner_utils",
            config.mlir_lib_dir + mlir_runner_utils_file_name
        )
    )
    config.substitutions.append(
        (
            "%native_mlir_c_runner_utils",
            config.mlir_lib_dir + mlir_c_runner_utils_file_name
        )
    )
    config.substitutions.append(
        (
            "%native_mlir_arm_runner_utils",
            config.mlir_lib_dir + mlir_arm_runner_utils_file_name
        )
    )
    config.substitutions.append(
        (
            "%native_arm_sme_abi_shlib",
            # Use passed Arm SME ABI routines, if not present default to stubs.
            config.arm_sme_abi_routines_shlib or (config.mlir_lib_dir + arm_sme_abi_shlib_file_name)
        )
    )
