// CHECK-LABEL: @nvvm_special_regs
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  call i32 @llvm.nvvm.read.ptx.sreg.tid.y()
  call i32 @llvm.nvvm.read.ptx.sreg.tid.z()
  call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
  call i32 @llvm.nvvm.read.ptx.sreg.ntid.y()
  call i32 @llvm.nvvm.read.ptx.sreg.ntid.z()
  call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y()
  call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z()
  call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x()
  call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y()
  call i32 @llvm.nvvm.read.ptx.sreg.nctaid.z()
  call i32 @llvm.nvvm.read.ptx.sreg.warpsize()
  call i32 @llvm.nvvm.read.ptx.sreg.laneid()
  call i32 @llvm.nvvm.read.ptx.sreg.clusterid.x
  call i32 @llvm.nvvm.read.ptx.sreg.clusterid.y
  call i32 @llvm.nvvm.read.ptx.sreg.clusterid.z
  call i32 @llvm.nvvm.read.ptx.sreg.nclusterid.x
  call i32 @llvm.nvvm.read.ptx.sreg.nclusterid.y
  call i32 @llvm.nvvm.read.ptx.sreg.nclusterid.z
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.ctaid
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.ctaid
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.ctaid
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.nctaid
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.nctaid
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.nctaid
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.ctarank
  call i32 @llvm.nvvm.read.ptx.sreg.cluster.nctarank
// CHECK-LABEL: @nvvm_rcp
  call float @llvm.nvvm.rcp.approx.ftz.f
// CHECK-LABEL: @llvm_nvvm_barrier0
  call void @llvm.nvvm.barrier0()
// CHECK-LABEL: @nvvm_shfl
  call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call float @llvm.nvvm.shfl.sync.bfly.f32(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call i32 @llvm.nvvm.shfl.sync.up.i32(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call float @llvm.nvvm.shfl.sync.up.f32(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call i32 @llvm.nvvm.shfl.sync.down.i32(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call float @llvm.nvvm.shfl.sync.down.f32(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call float @llvm.nvvm.shfl.sync.idx.f32(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
// CHECK-LABEL: @nvvm_shfl_pred
  call { i32, i1 } @llvm.nvvm.shfl.sync.bfly.i32p(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call { float, i1 } @llvm.nvvm.shfl.sync.bfly.f32p(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call { i32, i1 } @llvm.nvvm.shfl.sync.up.i32p(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call { float, i1 } @llvm.nvvm.shfl.sync.up.f32p(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call { i32, i1 } @llvm.nvvm.shfl.sync.down.i32p(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call { float, i1 } @llvm.nvvm.shfl.sync.down.f32p(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call { i32, i1 } @llvm.nvvm.shfl.sync.idx.i32p(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
  call { float, i1 } @llvm.nvvm.shfl.sync.idx.f32p(i32 %{{.*}}, float %{{.*}}, i32 %{{.*}}, i32 %{{.*}})
// CHECK-LABEL: @nvvm_vote
  call i32 @llvm.nvvm.vote.ballot.sync(i32 %{{.*}}, i1 %{{.*}})
// CHECK-LABEL: @nvvm_mma_mn8n8k4_row_col_f32_f32
  call { float, float, float, float, float, float, float, float } @llvm.nvvm.mma.m8n8k4.row.col.f32.f32
// CHECK-LABEL: @nvvm_mma_m16n8k16_f16_f16
  call { <2 x half>, <2 x half> } @llvm.nvvm.mma.m16n8k16.row.col.f16.f16
// CHECK-LABEL: @nvvm_mma_m16n8k16_f32_f16
  call { float, float, float, float } @llvm.nvvm.mma.m16n8k16.row.col.f32.f16
// CHECK-LABEL: @nvvm_mma_m16n8k16_f16_f32
  call { <2 x half>, <2 x half> } @llvm.nvvm.mma.m16n8k16.row.col.f16.f32
// CHECK-LABEL: @nvvm_mma_m16n8k16_f32_f32
  call { float, float, float, float } @llvm.nvvm.mma.m16n8k16.row.col.f32.f32
// CHECK-LABEL: @nvvm_mma_m16n8k16_s8_s8
  call { i32, i32, i32, i32 } @llvm.nvvm.mma.m16n8k16.row.col.s8
// CHECK-LABEL: @nvvm_mma_m16n8k16_s8_u8
  call { i32, i32, i32, i32 } @llvm.nvvm.mma.m16n8k16.row.col.satfinite.s8.u8
// CHECK-LABEL: @nvvm_mma_m16n8k128_b1_b1
  call { i32, i32, i32, i32 } @llvm.nvvm.mma.xor.popc.m16n8k128.row.col.b1
// CHECK-LABEL: @nvvm_mma_m16n8k32_s4_s4
  call { i32, i32, i32, i32 } @llvm.nvvm.mma.m16n8k32.row.col.satfinite.s4
// CHECK-LABEL: @nvvm_mma_m8n8k4_f64_f64
  call { double, double } @llvm.nvvm.mma.m8n8k4.row.col.f64
// CHECK-LABEL: @nvvm_mma_m16n8k4_tf32_f32
  call { float, float, float, float } @llvm.nvvm.mma.m16n8k4.row.col.tf32
// CHECK-LABEL: @gpu_wmma_load_op
  call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3(ptr addrspace(3) %{{.*}}, i32 %{{.*}})
// CHECK-LABEL: @gpu_wmma_store_op
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3(ptr addrspace(3) %{{.*}}, <2 x half> {{.*}}, <2 x half> %{{.*}}, <2 x half> %{{.*}}, <2 x half> %{{.*}}, i32 %{{.*}})
// CHECK-LABEL: @gpu_wmma_mma_op
  call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}}, <2 x half> {{.*}})
// CHECK-LABEL: @nvvm_wmma_load_tf32
  call { i32, i32, i32, i32 } @llvm.nvvm.wmma.m16n16k8.load.a.row.stride.tf32.p0(ptr %{{.*}}, i32 %{{.*}})
// CHECK-LABEL: @nvvm_wmma_mma
  { float, float, float, float, float, float, float, float } @llvm.nvvm.wmma.m16n16k8.mma.row.row.tf32(i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, float %{{.*}}, float %{{.*}}, float %{{.*}}, float %{{.*}}, float %{{.*}}, float %{{.*}}, float %{{.*}}, float %{{.*}})
// CHECK-LABEL: @cp_async
call void @llvm.nvvm.cp.async.ca.shared.global.4(ptr addrspace(3) %{{.*}}, ptr addrspace(1) %{{.*}})
call void @llvm.nvvm.cp.async.ca.shared.global.8(ptr addrspace(3) %{{.*}}, ptr addrspace(1) %{{.*}})
call void @llvm.nvvm.cp.async.ca.shared.global.16(ptr addrspace(3) %{{.*}}, ptr addrspace(1) %{{.*}})
call void @llvm.nvvm.cp.async.cg.shared.global.16(ptr addrspace(3) %{{.*}}, ptr addrspace(1) %{{.*}})
call void @llvm.nvvm.cp.async.commit.group()
call void @llvm.nvvm.cp.async.wait.group(i32 0)
// CHECK-LABEL: @ld_matrix
  call i32 @llvm.nvvm.ldmatrix.sync.aligned.m8n8.x1.b16.p3(ptr addrspace(3) %{{.*}})
  call { i32, i32 } @llvm.nvvm.ldmatrix.sync.aligned.m8n8.x2.b16.p3(ptr addrspace(3) %{{.*}})
  call { i32, i32, i32, i32 } @llvm.nvvm.ldmatrix.sync.aligned.m8n8.x4.b16.p3(ptr addrspace(3) %{{.*}})
  call i32 @llvm.nvvm.ldmatrix.sync.aligned.m8n8.x1.trans.b16.p3(ptr addrspace(3) %{{.*}})
  call { i32, i32 } @llvm.nvvm.ldmatrix.sync.aligned.m8n8.x2.trans.b16.p3(ptr addrspace(3) %{{.*}})
  call { i32, i32, i32, i32 } @llvm.nvvm.ldmatrix.sync.aligned.m8n8.x4.trans.b16.p3(ptr addrspace(3) %{{.*}})
!nvvm.annotations =
// CHECK-NOT: {ptr @nvvm_special_regs, !"kernel", i32 1}
{ptr @kernel_func, !"kernel", i32 1}
!nvvm.annotations =
// CHECK-NOT: {ptr @nvvm_special_regs, !"kernel", i32 1}
{ptr @kernel_func, !"kernel", i32 1}
{ptr @kernel_func, !"maxntidx", i32 1}
{ptr @kernel_func, !"maxntidy", i32 23}
{ptr @kernel_func, !"maxntidz", i32 32}
!nvvm.annotations =
// CHECK-NOT: {ptr @nvvm_special_regs, !"kernel", i32 1}
{ptr @kernel_func, !"kernel", i32 1}
{ptr @kernel_func, !"reqntidx", i32 1}
{ptr @kernel_func, !"reqntidy", i32 23}
{ptr @kernel_func, !"reqntidz", i32 32}
!nvvm.annotations =
// CHECK-NOT: {ptr @nvvm_special_regs, !"kernel", i32 1}
{ptr @kernel_func, !"kernel", i32 1}
{ptr @kernel_func, !"minctasm", i32 16}
!nvvm.annotations =
// CHECK-NOT: {ptr @nvvm_special_regs, !"kernel", i32 1}
{ptr @kernel_func, !"kernel", i32 1}
{ptr @kernel_func, !"maxnreg", i32 16}
!nvvm.annotations =
// CHECK-NOT: {ptr @nvvm_special_regs, !"kernel", i32 1}
{ptr @kernel_func, !"kernel", i32 1}
{ptr @kernel_func, !"maxnreg", i32 32}
{ptr @kernel_func, !"maxntidx", i32 1}
{ptr @kernel_func, !"maxntidy", i32 23}
{ptr @kernel_func, !"maxntidz", i32 32}
{ptr @kernel_func, !"minctasm", i32 16}
